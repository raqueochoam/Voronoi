#pragma section("__nv_managed_data__")
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\kernel.cu"
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false
#define __nv_is_extended_device_lambda_with_preserved_return_type(X) false
#if defined(__nv_is_extended_device_lambda_closure_type) && defined(__nv_is_extended_host_device_lambda_closure_type)&& defined(__nv_is_extended_device_lambda_with_preserved_return_type)
#endif

#line 1
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 708 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1472
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 2361 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\sal.h"
extern "C" {
#line 2971 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\sal.h"
}
#line 22 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\concurrencysal.h"
extern "C" {
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\concurrencysal.h"
}
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 51
extern "C" {
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
typedef unsigned __int64 uintptr_t; 
#line 72 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
typedef char *va_list; 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
void __cdecl __va_start(va_list *, ...); 
#line 167 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
}
#line 171 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
extern "C++" {
#line 173
template< class _Ty> 
#line 174
struct __vcrt_va_list_is_reference { 
#line 176
enum: bool { __the_value}; 
#line 177
}; 
#line 179
template< class _Ty> 
#line 180
struct __vcrt_va_list_is_reference< _Ty &>  { 
#line 182
enum: bool { __the_value = '\001'}; 
#line 183
}; 
#line 185
template< class _Ty> 
#line 186
struct __vcrt_va_list_is_reference< _Ty &&>  { 
#line 188
enum: bool { __the_value = '\001'}; 
#line 189
}; 
#line 191
template< class _Ty> 
#line 192
struct __vcrt_assert_va_start_is_not_reference { 
#line 194
static_assert((!__vcrt_va_list_is_reference< _Ty> ::__the_value), "va_start argument must not have reference type and must not be parenthesized");
#line 196
}; 
#line 197
}
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vadefs.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 60 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 96 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
__pragma( pack ( push, 8 )) extern "C" {
#line 193 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
typedef unsigned __int64 size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
#line 194
typedef __int64 ptrdiff_t; 
#line 195
typedef __int64 intptr_t; 
#line 203 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
typedef bool __vcrt_bool; 
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
extern "C++" {
#line 252
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 256
}
#line 377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
void __cdecl __security_init_cookie(); 
#line 386 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
void __cdecl __security_check_cookie(uintptr_t _StackCookie); 
#line 387
__declspec(noreturn) void __cdecl __report_gsfailure(uintptr_t _StackCookie); 
#line 391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
extern uintptr_t __security_cookie; 
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime.h"
}__pragma( pack ( pop )) 
#line 401
#pragma warning(pop)
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 125
__pragma( pack ( push, 8 )) extern "C" {
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
extern "C++" {
#line 256
template< bool _Enable, class _Ty> struct _CrtEnableIf; 
#line 259
template< class _Ty> 
#line 260
struct _CrtEnableIf< true, _Ty>  { 
#line 262
typedef _Ty _Type; 
#line 263
}; 
#line 264
}
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
typedef bool __crt_bool; 
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(); 
#line 372
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(); 
#line 374
__declspec(noreturn) 
#line 375
__declspec(dllimport) void __cdecl _invoke_watson(const __wchar_t * _Expression, const __wchar_t * _FunctionName, const __wchar_t * _FileName, unsigned _LineNo, uintptr_t _Reserved); 
#line 604 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
typedef int errno_t; 
#line 605
typedef unsigned short wint_t; 
#line 606
typedef unsigned short wctype_t; 
#line 607
typedef long __time32_t; 
#line 608
typedef __int64 __time64_t; 
#line 615
typedef 
#line 610
struct __crt_locale_data_public { 
#line 612
const unsigned short *_locale_pctype; 
#line 613
int _locale_mb_cur_max; 
#line 614
unsigned _locale_lc_codepage; 
#line 615
} __crt_locale_data_public; 
#line 621
typedef 
#line 617
struct __crt_locale_pointers { 
#line 619
struct __crt_locale_data *locinfo; 
#line 620
struct __crt_multibyte_data *mbcinfo; 
#line 621
} __crt_locale_pointers; 
#line 623
typedef __crt_locale_pointers *_locale_t; 
#line 629
typedef 
#line 625
struct _Mbstatet { 
#line 627
unsigned long _Wchar; 
#line 628
unsigned short _Byte, _State; 
#line 629
} _Mbstatet; 
#line 631
typedef _Mbstatet mbstate_t; 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
typedef __time64_t time_t; 
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
typedef size_t rsize_t; 
#line 2072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt.h"
}__pragma( pack ( pop )) 
#line 2075
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wctype.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) const unsigned short *__cdecl __pctype_func(); 
#line 36
__declspec(dllimport) const wctype_t *__cdecl __pwctype_func(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wctype.h"
__declspec(dllimport) int __cdecl iswalnum(wint_t _C); 
#line 68
__declspec(dllimport) int __cdecl iswalpha(wint_t _C); 
#line 69
__declspec(dllimport) int __cdecl iswascii(wint_t _C); 
#line 70
__declspec(dllimport) int __cdecl iswblank(wint_t _C); 
#line 71
__declspec(dllimport) int __cdecl iswcntrl(wint_t _C); 
#line 74
__declspec(dllimport) int __cdecl iswdigit(wint_t _C); 
#line 76
__declspec(dllimport) int __cdecl iswgraph(wint_t _C); 
#line 77
__declspec(dllimport) int __cdecl iswlower(wint_t _C); 
#line 78
__declspec(dllimport) int __cdecl iswprint(wint_t _C); 
#line 79
__declspec(dllimport) int __cdecl iswpunct(wint_t _C); 
#line 80
__declspec(dllimport) int __cdecl iswspace(wint_t _C); 
#line 81
__declspec(dllimport) int __cdecl iswupper(wint_t _C); 
#line 82
__declspec(dllimport) int __cdecl iswxdigit(wint_t _C); 
#line 83
__declspec(dllimport) int __cdecl __iswcsymf(wint_t _C); 
#line 84
__declspec(dllimport) int __cdecl __iswcsym(wint_t _C); 
#line 86
__declspec(dllimport) int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale); 
#line 87
__declspec(dllimport) int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale); 
#line 88
__declspec(dllimport) int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale); 
#line 89
__declspec(dllimport) int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale); 
#line 90
__declspec(dllimport) int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale); 
#line 91
__declspec(dllimport) int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale); 
#line 92
__declspec(dllimport) int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale); 
#line 93
__declspec(dllimport) int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale); 
#line 94
__declspec(dllimport) int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale); 
#line 95
__declspec(dllimport) int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale); 
#line 96
__declspec(dllimport) int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale); 
#line 97
__declspec(dllimport) int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale); 
#line 98
__declspec(dllimport) int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale); 
#line 99
__declspec(dllimport) int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale); 
#line 102
__declspec(dllimport) wint_t __cdecl towupper(wint_t _C); 
#line 103
__declspec(dllimport) wint_t __cdecl towlower(wint_t _C); 
#line 104
__declspec(dllimport) int __cdecl iswctype(wint_t _C, wctype_t _Type); 
#line 106
__declspec(dllimport) wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale); 
#line 107
__declspec(dllimport) wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale); 
#line 108
__declspec(dllimport) int __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale); 
#line 112
__declspec(dllimport) int __cdecl isleadbyte(int _C); 
#line 113
__declspec(dllimport) int __cdecl _isleadbyte_l(int _C, _locale_t _Locale); 
#line 115
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using iswctype instea" "d. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(wint_t _C, wctype_t _Type); 
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wctype.h"
}__pragma( pack ( pop )) 
#line 205
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 29
__declspec(dllimport) int __cdecl _isctype(int _C, int _Type); 
#line 30
__declspec(dllimport) int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale); 
#line 31
__declspec(dllimport) int __cdecl isalpha(int _C); 
#line 32
__declspec(dllimport) int __cdecl _isalpha_l(int _C, _locale_t _Locale); 
#line 33
__declspec(dllimport) int __cdecl isupper(int _C); 
#line 34
__declspec(dllimport) int __cdecl _isupper_l(int _C, _locale_t _Locale); 
#line 35
__declspec(dllimport) int __cdecl islower(int _C); 
#line 36
__declspec(dllimport) int __cdecl _islower_l(int _C, _locale_t _Locale); 
#line 39
__declspec(dllimport) int __cdecl isdigit(int _C); 
#line 41
__declspec(dllimport) int __cdecl _isdigit_l(int _C, _locale_t _Locale); 
#line 42
__declspec(dllimport) int __cdecl isxdigit(int _C); 
#line 43
__declspec(dllimport) int __cdecl _isxdigit_l(int _C, _locale_t _Locale); 
#line 46
__declspec(dllimport) int __cdecl isspace(int _C); 
#line 48
__declspec(dllimport) int __cdecl _isspace_l(int _C, _locale_t _Locale); 
#line 49
__declspec(dllimport) int __cdecl ispunct(int _C); 
#line 50
__declspec(dllimport) int __cdecl _ispunct_l(int _C, _locale_t _Locale); 
#line 51
__declspec(dllimport) int __cdecl isblank(int _C); 
#line 52
__declspec(dllimport) int __cdecl _isblank_l(int _C, _locale_t _Locale); 
#line 53
__declspec(dllimport) int __cdecl isalnum(int _C); 
#line 54
__declspec(dllimport) int __cdecl _isalnum_l(int _C, _locale_t _Locale); 
#line 55
__declspec(dllimport) int __cdecl isprint(int _C); 
#line 56
__declspec(dllimport) int __cdecl _isprint_l(int _C, _locale_t _Locale); 
#line 57
__declspec(dllimport) int __cdecl isgraph(int _C); 
#line 58
__declspec(dllimport) int __cdecl _isgraph_l(int _C, _locale_t _Locale); 
#line 59
__declspec(dllimport) int __cdecl iscntrl(int _C); 
#line 60
__declspec(dllimport) int __cdecl _iscntrl_l(int _C, _locale_t _Locale); 
#line 63
__declspec(dllimport) int __cdecl toupper(int _C); 
#line 66
__declspec(dllimport) int __cdecl tolower(int _C); 
#line 68
__declspec(dllimport) int __cdecl _tolower(int _C); 
#line 69
__declspec(dllimport) int __cdecl _tolower_l(int _C, _locale_t _Locale); 
#line 70
__declspec(dllimport) int __cdecl _toupper(int _C); 
#line 71
__declspec(dllimport) int __cdecl _toupper_l(int _C, _locale_t _Locale); 
#line 73
__declspec(dllimport) int __cdecl __isascii(int _C); 
#line 74
__declspec(dllimport) int __cdecl __toascii(int _C); 
#line 75
__declspec(dllimport) int __cdecl __iscsymf(int _C); 
#line 76
__declspec(dllimport) int __cdecl __iscsym(int _C); 
#line 85
__inline int __cdecl __acrt_locale_get_ctype_array_value(const unsigned short *const 
#line 86
_Locale_pctype_array, const int 
#line 87
_Char_value, const int 
#line 88
_Mask) 
#line 90
{ 
#line 96
if ((_Char_value >= (-1)) && (_Char_value <= 255)) 
#line 97
{ 
#line 98
return (_Locale_pctype_array[_Char_value]) & _Mask; 
#line 99
}  
#line 101
return 0; 
#line 102
} 
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_func(); 
#line 126
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t _Locale); 
#line 132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
__declspec(dllimport) int __cdecl _chvalidator(int _Ch, int _Mask); 
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
__forceinline int __cdecl __ascii_tolower(const int _C) 
#line 153
{ 
#line 154
if ((_C >= ('A')) && (_C <= ('Z'))) 
#line 155
{ 
#line 156
return _C - (('A') - ('a')); 
#line 157
}  
#line 158
return _C; 
#line 159
} 
#line 161
__forceinline int __cdecl __ascii_toupper(const int _C) 
#line 162
{ 
#line 163
if ((_C >= ('a')) && (_C <= ('z'))) 
#line 164
{ 
#line 165
return _C - (('a') - ('A')); 
#line 166
}  
#line 167
return _C; 
#line 168
} 
#line 170
__forceinline int __cdecl __ascii_iswalpha(const int _C) 
#line 171
{ 
#line 172
return ((_C >= ('A')) && (_C <= ('Z'))) || ((_C >= ('a')) && (_C <= ('z'))); 
#line 173
} 
#line 175
__forceinline int __cdecl __ascii_iswdigit(const int _C) 
#line 176
{ 
#line 177
return (_C >= ('0')) && (_C <= ('9')); 
#line 178
} 
#line 180
__forceinline int __cdecl __ascii_towlower(const int _C) 
#line 181
{ 
#line 182
return __ascii_tolower(_C); 
#line 183
} 
#line 185
__forceinline int __cdecl __ascii_towupper(const int _C) 
#line 186
{ 
#line 187
return __ascii_toupper(_C); 
#line 188
} 
#line 208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
__inline __crt_locale_data_public *__cdecl __acrt_get_locale_data_prefix(const volatile void *const _LocalePointers) 
#line 209
{ 
#line 210
const _locale_t _TypedLocalePointers = (_locale_t)_LocalePointers; 
#line 211
return (__crt_locale_data_public *)(_TypedLocalePointers->locinfo); 
#line 212
} 
#line 215
__declspec(dllimport) int __cdecl _chvalidator_l(_locale_t, int _Ch, int _Mask); 
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
__inline int __cdecl _chvalidchk_l(const int 
#line 219
_C, const int 
#line 220
_Mask, const _locale_t 
#line 221
_Locale) 
#line 223
{ 
#line 225
return _chvalidator_l(_Locale, _C, _Mask); 
#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
} 
#line 239
__inline int __cdecl _ischartype_l(const int 
#line 240
_C, const int 
#line 241
_Mask, const _locale_t 
#line 242
_Locale) 
#line 244
{ 
#line 245
if (!_Locale) 
#line 246
{ 
#line 247
return _chvalidchk_l(_C, _Mask, 0); 
#line 248
}  
#line 250
if ((_C >= (-1)) && (_C <= 255)) 
#line 251
{ 
#line 252
return ((__acrt_get_locale_data_prefix(_Locale)->_locale_pctype)[_C]) & _Mask; 
#line 253
}  
#line 255
if ((__acrt_get_locale_data_prefix(_Locale)->_locale_mb_cur_max) > 1) 
#line 256
{ 
#line 257
return _isctype_l(_C, _Mask, _Locale); 
#line 258
}  
#line 260
return 0; 
#line 261
} 
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\ctype.h"
}__pragma( pack ( pop )) 
#line 309
#pragma warning(pop)
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_types.h"
#if 0
#line 68
enum cudaRoundMode { 
#line 70
cudaRoundNearest, 
#line 71
cudaRoundZero, 
#line 72
cudaRoundPosInf, 
#line 73
cudaRoundMinInf
#line 74
}; 
#endif
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 104
struct char1 { 
#line 106
signed char x; 
#line 107
}; 
#endif
#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 109
struct uchar1 { 
#line 111
unsigned char x; 
#line 112
}; 
#endif
#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 115
struct __declspec(align(2)) char2 { 
#line 117
signed char x, y; 
#line 118
}; 
#endif
#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 120
struct __declspec(align(2)) uchar2 { 
#line 122
unsigned char x, y; 
#line 123
}; 
#endif
#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 125
struct char3 { 
#line 127
signed char x, y, z; 
#line 128
}; 
#endif
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 130
struct uchar3 { 
#line 132
unsigned char x, y, z; 
#line 133
}; 
#endif
#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 135
struct __declspec(align(4)) char4 { 
#line 137
signed char x, y, z, w; 
#line 138
}; 
#endif
#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 140
struct __declspec(align(4)) uchar4 { 
#line 142
unsigned char x, y, z, w; 
#line 143
}; 
#endif
#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 145
struct short1 { 
#line 147
short x; 
#line 148
}; 
#endif
#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 150
struct ushort1 { 
#line 152
unsigned short x; 
#line 153
}; 
#endif
#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 155
struct __declspec(align(4)) short2 { 
#line 157
short x, y; 
#line 158
}; 
#endif
#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 160
struct __declspec(align(4)) ushort2 { 
#line 162
unsigned short x, y; 
#line 163
}; 
#endif
#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 165
struct short3 { 
#line 167
short x, y, z; 
#line 168
}; 
#endif
#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 170
struct ushort3 { 
#line 172
unsigned short x, y, z; 
#line 173
}; 
#endif
#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 175
struct __declspec(align(8)) short4 { short x; short y; short z; short w; }; 
#endif
#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 176
struct __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 178
struct int1 { 
#line 180
int x; 
#line 181
}; 
#endif
#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 183
struct uint1 { 
#line 185
unsigned x; 
#line 186
}; 
#endif
#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 188
struct __declspec(align(8)) int2 { int x; int y; }; 
#endif
#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 189
struct __declspec(align(8)) uint2 { unsigned x; unsigned y; }; 
#endif
#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 191
struct int3 { 
#line 193
int x, y, z; 
#line 194
}; 
#endif
#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 196
struct uint3 { 
#line 198
unsigned x, y, z; 
#line 199
}; 
#endif
#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 201
struct __declspec(align(16)) int4 { 
#line 203
int x, y, z, w; 
#line 204
}; 
#endif
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 206
struct __declspec(align(16)) uint4 { 
#line 208
unsigned x, y, z, w; 
#line 209
}; 
#endif
#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 211
struct long1 { 
#line 213
long x; 
#line 214
}; 
#endif
#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 216
struct ulong1 { 
#line 218
unsigned long x; 
#line 219
}; 
#endif
#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 222
struct __declspec(align(8)) long2 { long x; long y; }; 
#endif
#line 223 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 223
struct __declspec(align(8)) ulong2 { unsigned long x; unsigned long y; }; 
#endif
#line 238 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 238
struct long3 { 
#line 240
long x, y, z; 
#line 241
}; 
#endif
#line 243 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 243
struct ulong3 { 
#line 245
unsigned long x, y, z; 
#line 246
}; 
#endif
#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 248
struct __declspec(align(16)) long4 { 
#line 250
long x, y, z, w; 
#line 251
}; 
#endif
#line 253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 253
struct __declspec(align(16)) ulong4 { 
#line 255
unsigned long x, y, z, w; 
#line 256
}; 
#endif
#line 258 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 258
struct float1 { 
#line 260
float x; 
#line 261
}; 
#endif
#line 280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 280
struct __declspec(align(8)) float2 { float x; float y; }; 
#endif
#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 285
struct float3 { 
#line 287
float x, y, z; 
#line 288
}; 
#endif
#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 290
struct __declspec(align(16)) float4 { 
#line 292
float x, y, z, w; 
#line 293
}; 
#endif
#line 295 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 295
struct longlong1 { 
#line 297
__int64 x; 
#line 298
}; 
#endif
#line 300 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 300
struct ulonglong1 { 
#line 302
unsigned __int64 x; 
#line 303
}; 
#endif
#line 305 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 305
struct __declspec(align(16)) longlong2 { 
#line 307
__int64 x, y; 
#line 308
}; 
#endif
#line 310 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 310
struct __declspec(align(16)) ulonglong2 { 
#line 312
unsigned __int64 x, y; 
#line 313
}; 
#endif
#line 315 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 315
struct longlong3 { 
#line 317
__int64 x, y, z; 
#line 318
}; 
#endif
#line 320 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 320
struct ulonglong3 { 
#line 322
unsigned __int64 x, y, z; 
#line 323
}; 
#endif
#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 325
struct __declspec(align(16)) longlong4 { 
#line 327
__int64 x, y, z, w; 
#line 328
}; 
#endif
#line 330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 330
struct __declspec(align(16)) ulonglong4 { 
#line 332
unsigned __int64 x, y, z, w; 
#line 333
}; 
#endif
#line 335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 335
struct double1 { 
#line 337
double x; 
#line 338
}; 
#endif
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 340
struct __declspec(align(16)) double2 { 
#line 342
double x, y; 
#line 343
}; 
#endif
#line 345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 345
struct double3 { 
#line 347
double x, y, z; 
#line 348
}; 
#endif
#line 350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 350
struct __declspec(align(16)) double4 { 
#line 352
double x, y, z, w; 
#line 353
}; 
#endif
#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef char1 
#line 367
char1; 
#endif
#line 368 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uchar1 
#line 368
uchar1; 
#endif
#line 369 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef char2 
#line 369
char2; 
#endif
#line 370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uchar2 
#line 370
uchar2; 
#endif
#line 371 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef char3 
#line 371
char3; 
#endif
#line 372 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uchar3 
#line 372
uchar3; 
#endif
#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef char4 
#line 373
char4; 
#endif
#line 374 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uchar4 
#line 374
uchar4; 
#endif
#line 375 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef short1 
#line 375
short1; 
#endif
#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ushort1 
#line 376
ushort1; 
#endif
#line 377 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef short2 
#line 377
short2; 
#endif
#line 378 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ushort2 
#line 378
ushort2; 
#endif
#line 379 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef short3 
#line 379
short3; 
#endif
#line 380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ushort3 
#line 380
ushort3; 
#endif
#line 381 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef short4 
#line 381
short4; 
#endif
#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ushort4 
#line 382
ushort4; 
#endif
#line 383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef int1 
#line 383
int1; 
#endif
#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uint1 
#line 384
uint1; 
#endif
#line 385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef int2 
#line 385
int2; 
#endif
#line 386 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uint2 
#line 386
uint2; 
#endif
#line 387 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef int3 
#line 387
int3; 
#endif
#line 388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uint3 
#line 388
uint3; 
#endif
#line 389 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef int4 
#line 389
int4; 
#endif
#line 390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef uint4 
#line 390
uint4; 
#endif
#line 391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef long1 
#line 391
long1; 
#endif
#line 392 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulong1 
#line 392
ulong1; 
#endif
#line 393 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef long2 
#line 393
long2; 
#endif
#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulong2 
#line 394
ulong2; 
#endif
#line 395 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef long3 
#line 395
long3; 
#endif
#line 396 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulong3 
#line 396
ulong3; 
#endif
#line 397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef long4 
#line 397
long4; 
#endif
#line 398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulong4 
#line 398
ulong4; 
#endif
#line 399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef float1 
#line 399
float1; 
#endif
#line 400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef float2 
#line 400
float2; 
#endif
#line 401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef float3 
#line 401
float3; 
#endif
#line 402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef float4 
#line 402
float4; 
#endif
#line 403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef longlong1 
#line 403
longlong1; 
#endif
#line 404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulonglong1 
#line 404
ulonglong1; 
#endif
#line 405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef longlong2 
#line 405
longlong2; 
#endif
#line 406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulonglong2 
#line 406
ulonglong2; 
#endif
#line 407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef longlong3 
#line 407
longlong3; 
#endif
#line 408 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulonglong3 
#line 408
ulonglong3; 
#endif
#line 409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef longlong4 
#line 409
longlong4; 
#endif
#line 410 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef ulonglong4 
#line 410
ulonglong4; 
#endif
#line 411 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef double1 
#line 411
double1; 
#endif
#line 412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef double2 
#line 412
double2; 
#endif
#line 413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef double3 
#line 413
double3; 
#endif
#line 414 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef double4 
#line 414
double4; 
#endif
#line 426 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
#line 426
struct dim3 { 
#line 428
unsigned x, y, z; 
#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
}; 
#endif
#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_types.h"
#if 0
typedef dim3 
#line 442
dim3; 
#endif
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\limits.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 16
__pragma( pack ( push, 8 )) extern "C" {
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\limits.h"
}__pragma( pack ( pop )) 
#line 78
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stddef.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 23
namespace std { 
#line 25
typedef decltype(nullptr) nullptr_t; 
#line 26
}
#line 28
using std::nullptr_t;
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stddef.h"
__declspec(dllimport) int *__cdecl _errno(); 
#line 38
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 39
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stddef.h"
__declspec(dllimport) extern unsigned long __cdecl __threadid(); 
#line 57
__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); 
#line 61
}__pragma( pack ( pop )) 
#line 63
#pragma warning(pop)
#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 203
enum cudaError { 
#line 210
cudaSuccess, 
#line 216
cudaErrorInvalidValue, 
#line 222
cudaErrorMemoryAllocation, 
#line 228
cudaErrorInitializationError, 
#line 235
cudaErrorCudartUnloading, 
#line 242
cudaErrorProfilerDisabled, 
#line 250
cudaErrorProfilerNotInitialized, 
#line 257
cudaErrorProfilerAlreadyStarted, 
#line 264
cudaErrorProfilerAlreadyStopped, 
#line 272
cudaErrorInvalidConfiguration, 
#line 278
cudaErrorInvalidPitchValue = 12, 
#line 284
cudaErrorInvalidSymbol, 
#line 292
cudaErrorInvalidHostPointer = 16, 
#line 300
cudaErrorInvalidDevicePointer, 
#line 305
cudaErrorInvalidTexture, 
#line 311
cudaErrorInvalidTextureBinding, 
#line 318
cudaErrorInvalidChannelDescriptor, 
#line 324
cudaErrorInvalidMemcpyDirection, 
#line 334
cudaErrorAddressOfConstant, 
#line 343
cudaErrorTextureFetchFailed, 
#line 352
cudaErrorTextureNotBound, 
#line 361
cudaErrorSynchronizationError, 
#line 366
cudaErrorInvalidFilterSetting, 
#line 372
cudaErrorInvalidNormSetting, 
#line 380
cudaErrorMixedDeviceExecution, 
#line 388
cudaErrorNotYetImplemented = 31, 
#line 397
cudaErrorMemoryValueTooLarge, 
#line 403
cudaErrorStubLibrary = 34, 
#line 410
cudaErrorInsufficientDriver, 
#line 417
cudaErrorCallRequiresNewerDriver, 
#line 423
cudaErrorInvalidSurface, 
#line 429
cudaErrorDuplicateVariableName = 43, 
#line 435
cudaErrorDuplicateTextureName, 
#line 441
cudaErrorDuplicateSurfaceName, 
#line 451
cudaErrorDevicesUnavailable, 
#line 464
cudaErrorIncompatibleDriverContext = 49, 
#line 470
cudaErrorMissingConfiguration = 52, 
#line 479
cudaErrorPriorLaunchFailure, 
#line 485
cudaErrorLaunchMaxDepthExceeded = 65, 
#line 493
cudaErrorLaunchFileScopedTex, 
#line 501
cudaErrorLaunchFileScopedSurf, 
#line 517
cudaErrorSyncDepthExceeded, 
#line 529
cudaErrorLaunchPendingCountExceeded, 
#line 535
cudaErrorInvalidDeviceFunction = 98, 
#line 541
cudaErrorNoDevice = 100, 
#line 548
cudaErrorInvalidDevice, 
#line 553
cudaErrorDeviceNotLicensed, 
#line 562
cudaErrorSoftwareValidityNotEstablished, 
#line 567
cudaErrorStartupFailure = 127, 
#line 572
cudaErrorInvalidKernelImage = 200, 
#line 582
cudaErrorDeviceUninitialized, 
#line 587
cudaErrorMapBufferObjectFailed = 205, 
#line 592
cudaErrorUnmapBufferObjectFailed, 
#line 598
cudaErrorArrayIsMapped, 
#line 603
cudaErrorAlreadyMapped, 
#line 611
cudaErrorNoKernelImageForDevice, 
#line 616
cudaErrorAlreadyAcquired, 
#line 621
cudaErrorNotMapped, 
#line 627
cudaErrorNotMappedAsArray, 
#line 633
cudaErrorNotMappedAsPointer, 
#line 639
cudaErrorECCUncorrectable, 
#line 645
cudaErrorUnsupportedLimit, 
#line 651
cudaErrorDeviceAlreadyInUse, 
#line 657
cudaErrorPeerAccessUnsupported, 
#line 663
cudaErrorInvalidPtx, 
#line 668
cudaErrorInvalidGraphicsContext, 
#line 674
cudaErrorNvlinkUncorrectable, 
#line 681
cudaErrorJitCompilerNotFound, 
#line 688
cudaErrorUnsupportedPtxVersion, 
#line 695
cudaErrorJitCompilationDisabled, 
#line 700
cudaErrorUnsupportedExecAffinity, 
#line 706
cudaErrorUnsupportedDevSideSync, 
#line 711
cudaErrorInvalidSource = 300, 
#line 716
cudaErrorFileNotFound, 
#line 721
cudaErrorSharedObjectSymbolNotFound, 
#line 726
cudaErrorSharedObjectInitFailed, 
#line 731
cudaErrorOperatingSystem, 
#line 738
cudaErrorInvalidResourceHandle = 400, 
#line 744
cudaErrorIllegalState, 
#line 752
cudaErrorLossyQuery, 
#line 759
cudaErrorSymbolNotFound = 500, 
#line 767
cudaErrorNotReady = 600, 
#line 775
cudaErrorIllegalAddress = 700, 
#line 784
cudaErrorLaunchOutOfResources, 
#line 795
cudaErrorLaunchTimeout, 
#line 801
cudaErrorLaunchIncompatibleTexturing, 
#line 808
cudaErrorPeerAccessAlreadyEnabled, 
#line 815
cudaErrorPeerAccessNotEnabled, 
#line 828
cudaErrorSetOnActiveProcess = 708, 
#line 835
cudaErrorContextIsDestroyed, 
#line 842
cudaErrorAssert, 
#line 849
cudaErrorTooManyPeers, 
#line 855
cudaErrorHostMemoryAlreadyRegistered, 
#line 861
cudaErrorHostMemoryNotRegistered, 
#line 870
cudaErrorHardwareStackError, 
#line 878
cudaErrorIllegalInstruction, 
#line 887
cudaErrorMisalignedAddress, 
#line 898
cudaErrorInvalidAddressSpace, 
#line 906
cudaErrorInvalidPc, 
#line 917
cudaErrorLaunchFailure, 
#line 926
cudaErrorCooperativeLaunchTooLarge, 
#line 931
cudaErrorNotPermitted = 800, 
#line 937
cudaErrorNotSupported, 
#line 946
cudaErrorSystemNotReady, 
#line 953
cudaErrorSystemDriverMismatch, 
#line 962
cudaErrorCompatNotSupportedOnDevice, 
#line 967
cudaErrorMpsConnectionFailed, 
#line 972
cudaErrorMpsRpcFailure, 
#line 978
cudaErrorMpsServerNotReady, 
#line 983
cudaErrorMpsMaxClientsReached, 
#line 988
cudaErrorMpsMaxConnectionsReached, 
#line 993
cudaErrorMpsClientTerminated, 
#line 998
cudaErrorCdpNotSupported, 
#line 1003
cudaErrorCdpVersionMismatch, 
#line 1008
cudaErrorStreamCaptureUnsupported = 900, 
#line 1014
cudaErrorStreamCaptureInvalidated, 
#line 1020
cudaErrorStreamCaptureMerge, 
#line 1025
cudaErrorStreamCaptureUnmatched, 
#line 1031
cudaErrorStreamCaptureUnjoined, 
#line 1038
cudaErrorStreamCaptureIsolation, 
#line 1044
cudaErrorStreamCaptureImplicit, 
#line 1050
cudaErrorCapturedEvent, 
#line 1057
cudaErrorStreamCaptureWrongThread, 
#line 1062
cudaErrorTimeout, 
#line 1068
cudaErrorGraphExecUpdateFailure, 
#line 1078
cudaErrorExternalDevice, 
#line 1084
cudaErrorInvalidClusterSize, 
#line 1089
cudaErrorUnknown = 999, 
#line 1097
cudaErrorApiFailureBase = 10000
#line 1098
}; 
#endif
#line 1103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1103
enum cudaChannelFormatKind { 
#line 1105
cudaChannelFormatKindSigned, 
#line 1106
cudaChannelFormatKindUnsigned, 
#line 1107
cudaChannelFormatKindFloat, 
#line 1108
cudaChannelFormatKindNone, 
#line 1109
cudaChannelFormatKindNV12, 
#line 1110
cudaChannelFormatKindUnsignedNormalized8X1, 
#line 1111
cudaChannelFormatKindUnsignedNormalized8X2, 
#line 1112
cudaChannelFormatKindUnsignedNormalized8X4, 
#line 1113
cudaChannelFormatKindUnsignedNormalized16X1, 
#line 1114
cudaChannelFormatKindUnsignedNormalized16X2, 
#line 1115
cudaChannelFormatKindUnsignedNormalized16X4, 
#line 1116
cudaChannelFormatKindSignedNormalized8X1, 
#line 1117
cudaChannelFormatKindSignedNormalized8X2, 
#line 1118
cudaChannelFormatKindSignedNormalized8X4, 
#line 1119
cudaChannelFormatKindSignedNormalized16X1, 
#line 1120
cudaChannelFormatKindSignedNormalized16X2, 
#line 1121
cudaChannelFormatKindSignedNormalized16X4, 
#line 1122
cudaChannelFormatKindUnsignedBlockCompressed1, 
#line 1123
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
#line 1124
cudaChannelFormatKindUnsignedBlockCompressed2, 
#line 1125
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
#line 1126
cudaChannelFormatKindUnsignedBlockCompressed3, 
#line 1127
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
#line 1128
cudaChannelFormatKindUnsignedBlockCompressed4, 
#line 1129
cudaChannelFormatKindSignedBlockCompressed4, 
#line 1130
cudaChannelFormatKindUnsignedBlockCompressed5, 
#line 1131
cudaChannelFormatKindSignedBlockCompressed5, 
#line 1132
cudaChannelFormatKindUnsignedBlockCompressed6H, 
#line 1133
cudaChannelFormatKindSignedBlockCompressed6H, 
#line 1134
cudaChannelFormatKindUnsignedBlockCompressed7, 
#line 1135
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
#line 1136
}; 
#endif
#line 1141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1141
struct cudaChannelFormatDesc { 
#line 1143
int x; 
#line 1144
int y; 
#line 1145
int z; 
#line 1146
int w; 
#line 1147
cudaChannelFormatKind f; 
#line 1148
}; 
#endif
#line 1153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 1158
typedef const cudaArray *cudaArray_const_t; 
#line 1160
struct cudaArray; 
#line 1165
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 1170
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 1172
struct cudaMipmappedArray; 
#line 1182
#if 0
#line 1182
struct cudaArraySparseProperties { 
#line 1183
struct { 
#line 1184
unsigned width; 
#line 1185
unsigned height; 
#line 1186
unsigned depth; 
#line 1187
} tileExtent; 
#line 1188
unsigned miptailFirstLevel; 
#line 1189
unsigned __int64 miptailSize; 
#line 1190
unsigned flags; 
#line 1191
unsigned reserved[4]; 
#line 1192
}; 
#endif
#line 1197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1197
struct cudaArrayMemoryRequirements { 
#line 1198
size_t size; 
#line 1199
size_t alignment; 
#line 1200
unsigned reserved[4]; 
#line 1201
}; 
#endif
#line 1206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1206
enum cudaMemoryType { 
#line 1208
cudaMemoryTypeUnregistered, 
#line 1209
cudaMemoryTypeHost, 
#line 1210
cudaMemoryTypeDevice, 
#line 1211
cudaMemoryTypeManaged
#line 1212
}; 
#endif
#line 1217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1217
enum cudaMemcpyKind { 
#line 1219
cudaMemcpyHostToHost, 
#line 1220
cudaMemcpyHostToDevice, 
#line 1221
cudaMemcpyDeviceToHost, 
#line 1222
cudaMemcpyDeviceToDevice, 
#line 1223
cudaMemcpyDefault
#line 1224
}; 
#endif
#line 1231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1231
struct cudaPitchedPtr { 
#line 1233
void *ptr; 
#line 1234
size_t pitch; 
#line 1235
size_t xsize; 
#line 1236
size_t ysize; 
#line 1237
}; 
#endif
#line 1244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1244
struct cudaExtent { 
#line 1246
size_t width; 
#line 1247
size_t height; 
#line 1248
size_t depth; 
#line 1249
}; 
#endif
#line 1256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1256
struct cudaPos { 
#line 1258
size_t x; 
#line 1259
size_t y; 
#line 1260
size_t z; 
#line 1261
}; 
#endif
#line 1266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1266
struct cudaMemcpy3DParms { 
#line 1268
cudaArray_t srcArray; 
#line 1269
cudaPos srcPos; 
#line 1270
cudaPitchedPtr srcPtr; 
#line 1272
cudaArray_t dstArray; 
#line 1273
cudaPos dstPos; 
#line 1274
cudaPitchedPtr dstPtr; 
#line 1276
cudaExtent extent; 
#line 1277
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 1278
}; 
#endif
#line 1283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1283
struct cudaMemcpyNodeParams { 
#line 1284
int flags; 
#line 1285
int reserved[3]; 
#line 1286
cudaMemcpy3DParms copyParams; 
#line 1287
}; 
#endif
#line 1292 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1292
struct cudaMemcpy3DPeerParms { 
#line 1294
cudaArray_t srcArray; 
#line 1295
cudaPos srcPos; 
#line 1296
cudaPitchedPtr srcPtr; 
#line 1297
int srcDevice; 
#line 1299
cudaArray_t dstArray; 
#line 1300
cudaPos dstPos; 
#line 1301
cudaPitchedPtr dstPtr; 
#line 1302
int dstDevice; 
#line 1304
cudaExtent extent; 
#line 1305
}; 
#endif
#line 1310 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1310
struct cudaMemsetParams { 
#line 1311
void *dst; 
#line 1312
size_t pitch; 
#line 1313
unsigned value; 
#line 1314
unsigned elementSize; 
#line 1315
size_t width; 
#line 1316
size_t height; 
#line 1317
}; 
#endif
#line 1322 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1322
struct cudaMemsetParamsV2 { 
#line 1323
void *dst; 
#line 1324
size_t pitch; 
#line 1325
unsigned value; 
#line 1326
unsigned elementSize; 
#line 1327
size_t width; 
#line 1328
size_t height; 
#line 1329
}; 
#endif
#line 1334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1334
enum cudaAccessProperty { 
#line 1335
cudaAccessPropertyNormal, 
#line 1336
cudaAccessPropertyStreaming, 
#line 1337
cudaAccessPropertyPersisting
#line 1338
}; 
#endif
#line 1351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1351
struct cudaAccessPolicyWindow { 
#line 1352
void *base_ptr; 
#line 1353
size_t num_bytes; 
#line 1354
float hitRatio; 
#line 1355
cudaAccessProperty hitProp; 
#line 1356
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 1357
}; 
#endif
#line 1369 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
typedef void (__stdcall *cudaHostFn_t)(void * userData); 
#line 1374
#if 0
#line 1374
struct cudaHostNodeParams { 
#line 1375
cudaHostFn_t fn; 
#line 1376
void *userData; 
#line 1377
}; 
#endif
#line 1382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1382
struct cudaHostNodeParamsV2 { 
#line 1383
cudaHostFn_t fn; 
#line 1384
void *userData; 
#line 1385
}; 
#endif
#line 1390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1390
enum cudaStreamCaptureStatus { 
#line 1391
cudaStreamCaptureStatusNone, 
#line 1392
cudaStreamCaptureStatusActive, 
#line 1393
cudaStreamCaptureStatusInvalidated
#line 1395
}; 
#endif
#line 1401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1401
enum cudaStreamCaptureMode { 
#line 1402
cudaStreamCaptureModeGlobal, 
#line 1403
cudaStreamCaptureModeThreadLocal, 
#line 1404
cudaStreamCaptureModeRelaxed
#line 1405
}; 
#endif
#line 1407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1407
enum cudaSynchronizationPolicy { 
#line 1408
cudaSyncPolicyAuto = 1, 
#line 1409
cudaSyncPolicySpin, 
#line 1410
cudaSyncPolicyYield, 
#line 1411
cudaSyncPolicyBlockingSync
#line 1412
}; 
#endif
#line 1417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1417
enum cudaClusterSchedulingPolicy { 
#line 1418
cudaClusterSchedulingPolicyDefault, 
#line 1419
cudaClusterSchedulingPolicySpread, 
#line 1420
cudaClusterSchedulingPolicyLoadBalancing
#line 1421
}; 
#endif
#line 1426 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1426
enum cudaStreamUpdateCaptureDependenciesFlags { 
#line 1427
cudaStreamAddCaptureDependencies, 
#line 1428
cudaStreamSetCaptureDependencies
#line 1429
}; 
#endif
#line 1434 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1434
enum cudaUserObjectFlags { 
#line 1435
cudaUserObjectNoDestructorSync = 1
#line 1436
}; 
#endif
#line 1441 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1441
enum cudaUserObjectRetainFlags { 
#line 1442
cudaGraphUserObjectMove = 1
#line 1443
}; 
#endif
#line 1448 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 1453
#if 0
#line 1453
enum cudaGraphicsRegisterFlags { 
#line 1455
cudaGraphicsRegisterFlagsNone, 
#line 1456
cudaGraphicsRegisterFlagsReadOnly, 
#line 1457
cudaGraphicsRegisterFlagsWriteDiscard, 
#line 1458
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
#line 1459
cudaGraphicsRegisterFlagsTextureGather = 8
#line 1460
}; 
#endif
#line 1465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1465
enum cudaGraphicsMapFlags { 
#line 1467
cudaGraphicsMapFlagsNone, 
#line 1468
cudaGraphicsMapFlagsReadOnly, 
#line 1469
cudaGraphicsMapFlagsWriteDiscard
#line 1470
}; 
#endif
#line 1475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1475
enum cudaGraphicsCubeFace { 
#line 1477
cudaGraphicsCubeFacePositiveX, 
#line 1478
cudaGraphicsCubeFaceNegativeX, 
#line 1479
cudaGraphicsCubeFacePositiveY, 
#line 1480
cudaGraphicsCubeFaceNegativeY, 
#line 1481
cudaGraphicsCubeFacePositiveZ, 
#line 1482
cudaGraphicsCubeFaceNegativeZ
#line 1483
}; 
#endif
#line 1488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1488
enum cudaResourceType { 
#line 1490
cudaResourceTypeArray, 
#line 1491
cudaResourceTypeMipmappedArray, 
#line 1492
cudaResourceTypeLinear, 
#line 1493
cudaResourceTypePitch2D
#line 1494
}; 
#endif
#line 1499 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1499
enum cudaResourceViewFormat { 
#line 1501
cudaResViewFormatNone, 
#line 1502
cudaResViewFormatUnsignedChar1, 
#line 1503
cudaResViewFormatUnsignedChar2, 
#line 1504
cudaResViewFormatUnsignedChar4, 
#line 1505
cudaResViewFormatSignedChar1, 
#line 1506
cudaResViewFormatSignedChar2, 
#line 1507
cudaResViewFormatSignedChar4, 
#line 1508
cudaResViewFormatUnsignedShort1, 
#line 1509
cudaResViewFormatUnsignedShort2, 
#line 1510
cudaResViewFormatUnsignedShort4, 
#line 1511
cudaResViewFormatSignedShort1, 
#line 1512
cudaResViewFormatSignedShort2, 
#line 1513
cudaResViewFormatSignedShort4, 
#line 1514
cudaResViewFormatUnsignedInt1, 
#line 1515
cudaResViewFormatUnsignedInt2, 
#line 1516
cudaResViewFormatUnsignedInt4, 
#line 1517
cudaResViewFormatSignedInt1, 
#line 1518
cudaResViewFormatSignedInt2, 
#line 1519
cudaResViewFormatSignedInt4, 
#line 1520
cudaResViewFormatHalf1, 
#line 1521
cudaResViewFormatHalf2, 
#line 1522
cudaResViewFormatHalf4, 
#line 1523
cudaResViewFormatFloat1, 
#line 1524
cudaResViewFormatFloat2, 
#line 1525
cudaResViewFormatFloat4, 
#line 1526
cudaResViewFormatUnsignedBlockCompressed1, 
#line 1527
cudaResViewFormatUnsignedBlockCompressed2, 
#line 1528
cudaResViewFormatUnsignedBlockCompressed3, 
#line 1529
cudaResViewFormatUnsignedBlockCompressed4, 
#line 1530
cudaResViewFormatSignedBlockCompressed4, 
#line 1531
cudaResViewFormatUnsignedBlockCompressed5, 
#line 1532
cudaResViewFormatSignedBlockCompressed5, 
#line 1533
cudaResViewFormatUnsignedBlockCompressed6H, 
#line 1534
cudaResViewFormatSignedBlockCompressed6H, 
#line 1535
cudaResViewFormatUnsignedBlockCompressed7
#line 1536
}; 
#endif
#line 1541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1541
struct cudaResourceDesc { 
#line 1542
cudaResourceType resType; 
#line 1544
union { 
#line 1545
struct { 
#line 1546
cudaArray_t array; 
#line 1547
} array; 
#line 1548
struct { 
#line 1549
cudaMipmappedArray_t mipmap; 
#line 1550
} mipmap; 
#line 1551
struct { 
#line 1552
void *devPtr; 
#line 1553
cudaChannelFormatDesc desc; 
#line 1554
size_t sizeInBytes; 
#line 1555
} linear; 
#line 1556
struct { 
#line 1557
void *devPtr; 
#line 1558
cudaChannelFormatDesc desc; 
#line 1559
size_t width; 
#line 1560
size_t height; 
#line 1561
size_t pitchInBytes; 
#line 1562
} pitch2D; 
#line 1563
} res; 
#line 1564
}; 
#endif
#line 1569 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1569
struct cudaResourceViewDesc { 
#line 1571
cudaResourceViewFormat format; 
#line 1572
size_t width; 
#line 1573
size_t height; 
#line 1574
size_t depth; 
#line 1575
unsigned firstMipmapLevel; 
#line 1576
unsigned lastMipmapLevel; 
#line 1577
unsigned firstLayer; 
#line 1578
unsigned lastLayer; 
#line 1579
}; 
#endif
#line 1584 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1584
struct cudaPointerAttributes { 
#line 1590
cudaMemoryType type; 
#line 1601
int device; 
#line 1607
void *devicePointer; 
#line 1616
void *hostPointer; 
#line 1617
}; 
#endif
#line 1622 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1622
struct cudaFuncAttributes { 
#line 1629
size_t sharedSizeBytes; 
#line 1635
size_t constSizeBytes; 
#line 1640
size_t localSizeBytes; 
#line 1647
int maxThreadsPerBlock; 
#line 1652
int numRegs; 
#line 1659
int ptxVersion; 
#line 1666
int binaryVersion; 
#line 1672
int cacheModeCA; 
#line 1679
int maxDynamicSharedSizeBytes; 
#line 1688
int preferredShmemCarveout; 
#line 1694
int clusterDimMustBeSet; 
#line 1705
int requiredClusterWidth; 
#line 1706
int requiredClusterHeight; 
#line 1707
int requiredClusterDepth; 
#line 1713
int clusterSchedulingPolicyPreference; 
#line 1735
int nonPortableClusterSizeAllowed; 
#line 1740
int reserved[16]; 
#line 1741
}; 
#endif
#line 1746 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1746
enum cudaFuncAttribute { 
#line 1748
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
#line 1749
cudaFuncAttributePreferredSharedMemoryCarveout, 
#line 1750
cudaFuncAttributeClusterDimMustBeSet, 
#line 1751
cudaFuncAttributeRequiredClusterWidth, 
#line 1752
cudaFuncAttributeRequiredClusterHeight, 
#line 1753
cudaFuncAttributeRequiredClusterDepth, 
#line 1754
cudaFuncAttributeNonPortableClusterSizeAllowed, 
#line 1755
cudaFuncAttributeClusterSchedulingPolicyPreference, 
#line 1756
cudaFuncAttributeMax
#line 1757
}; 
#endif
#line 1762 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1762
enum cudaFuncCache { 
#line 1764
cudaFuncCachePreferNone, 
#line 1765
cudaFuncCachePreferShared, 
#line 1766
cudaFuncCachePreferL1, 
#line 1767
cudaFuncCachePreferEqual
#line 1768
}; 
#endif
#line 1774 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1774
enum cudaSharedMemConfig { 
#line 1776
cudaSharedMemBankSizeDefault, 
#line 1777
cudaSharedMemBankSizeFourByte, 
#line 1778
cudaSharedMemBankSizeEightByte
#line 1779
}; 
#endif
#line 1784 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1784
enum cudaSharedCarveout { 
#line 1785
cudaSharedmemCarveoutDefault = (-1), 
#line 1786
cudaSharedmemCarveoutMaxShared = 100, 
#line 1787
cudaSharedmemCarveoutMaxL1 = 0
#line 1788
}; 
#endif
#line 1793 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1793
enum cudaComputeMode { 
#line 1795
cudaComputeModeDefault, 
#line 1796
cudaComputeModeExclusive, 
#line 1797
cudaComputeModeProhibited, 
#line 1798
cudaComputeModeExclusiveProcess
#line 1799
}; 
#endif
#line 1804 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1804
enum cudaLimit { 
#line 1806
cudaLimitStackSize, 
#line 1807
cudaLimitPrintfFifoSize, 
#line 1808
cudaLimitMallocHeapSize, 
#line 1809
cudaLimitDevRuntimeSyncDepth, 
#line 1810
cudaLimitDevRuntimePendingLaunchCount, 
#line 1811
cudaLimitMaxL2FetchGranularity, 
#line 1812
cudaLimitPersistingL2CacheSize
#line 1813
}; 
#endif
#line 1818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1818
enum cudaMemoryAdvise { 
#line 1820
cudaMemAdviseSetReadMostly = 1, 
#line 1821
cudaMemAdviseUnsetReadMostly, 
#line 1822
cudaMemAdviseSetPreferredLocation, 
#line 1823
cudaMemAdviseUnsetPreferredLocation, 
#line 1824
cudaMemAdviseSetAccessedBy, 
#line 1825
cudaMemAdviseUnsetAccessedBy
#line 1826
}; 
#endif
#line 1831 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1831
enum cudaMemRangeAttribute { 
#line 1833
cudaMemRangeAttributeReadMostly = 1, 
#line 1834
cudaMemRangeAttributePreferredLocation, 
#line 1835
cudaMemRangeAttributeAccessedBy, 
#line 1836
cudaMemRangeAttributeLastPrefetchLocation, 
#line 1837
cudaMemRangeAttributePreferredLocationType, 
#line 1838
cudaMemRangeAttributePreferredLocationId, 
#line 1839
cudaMemRangeAttributeLastPrefetchLocationType, 
#line 1840
cudaMemRangeAttributeLastPrefetchLocationId
#line 1841
}; 
#endif
#line 1846 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1846
enum cudaFlushGPUDirectRDMAWritesOptions { 
#line 1847
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
#line 1848
cudaFlushGPUDirectRDMAWritesOptionMemOps
#line 1849
}; 
#endif
#line 1854 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1854
enum cudaGPUDirectRDMAWritesOrdering { 
#line 1855
cudaGPUDirectRDMAWritesOrderingNone, 
#line 1856
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
#line 1857
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
#line 1858
}; 
#endif
#line 1863 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1863
enum cudaFlushGPUDirectRDMAWritesScope { 
#line 1864
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
#line 1865
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
#line 1866
}; 
#endif
#line 1871 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1871
enum cudaFlushGPUDirectRDMAWritesTarget { 
#line 1872
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
#line 1873
}; 
#endif
#line 1879 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 1879
enum cudaDeviceAttr { 
#line 1881
cudaDevAttrMaxThreadsPerBlock = 1, 
#line 1882
cudaDevAttrMaxBlockDimX, 
#line 1883
cudaDevAttrMaxBlockDimY, 
#line 1884
cudaDevAttrMaxBlockDimZ, 
#line 1885
cudaDevAttrMaxGridDimX, 
#line 1886
cudaDevAttrMaxGridDimY, 
#line 1887
cudaDevAttrMaxGridDimZ, 
#line 1888
cudaDevAttrMaxSharedMemoryPerBlock, 
#line 1889
cudaDevAttrTotalConstantMemory, 
#line 1890
cudaDevAttrWarpSize, 
#line 1891
cudaDevAttrMaxPitch, 
#line 1892
cudaDevAttrMaxRegistersPerBlock, 
#line 1893
cudaDevAttrClockRate, 
#line 1894
cudaDevAttrTextureAlignment, 
#line 1895
cudaDevAttrGpuOverlap, 
#line 1896
cudaDevAttrMultiProcessorCount, 
#line 1897
cudaDevAttrKernelExecTimeout, 
#line 1898
cudaDevAttrIntegrated, 
#line 1899
cudaDevAttrCanMapHostMemory, 
#line 1900
cudaDevAttrComputeMode, 
#line 1901
cudaDevAttrMaxTexture1DWidth, 
#line 1902
cudaDevAttrMaxTexture2DWidth, 
#line 1903
cudaDevAttrMaxTexture2DHeight, 
#line 1904
cudaDevAttrMaxTexture3DWidth, 
#line 1905
cudaDevAttrMaxTexture3DHeight, 
#line 1906
cudaDevAttrMaxTexture3DDepth, 
#line 1907
cudaDevAttrMaxTexture2DLayeredWidth, 
#line 1908
cudaDevAttrMaxTexture2DLayeredHeight, 
#line 1909
cudaDevAttrMaxTexture2DLayeredLayers, 
#line 1910
cudaDevAttrSurfaceAlignment, 
#line 1911
cudaDevAttrConcurrentKernels, 
#line 1912
cudaDevAttrEccEnabled, 
#line 1913
cudaDevAttrPciBusId, 
#line 1914
cudaDevAttrPciDeviceId, 
#line 1915
cudaDevAttrTccDriver, 
#line 1916
cudaDevAttrMemoryClockRate, 
#line 1917
cudaDevAttrGlobalMemoryBusWidth, 
#line 1918
cudaDevAttrL2CacheSize, 
#line 1919
cudaDevAttrMaxThreadsPerMultiProcessor, 
#line 1920
cudaDevAttrAsyncEngineCount, 
#line 1921
cudaDevAttrUnifiedAddressing, 
#line 1922
cudaDevAttrMaxTexture1DLayeredWidth, 
#line 1923
cudaDevAttrMaxTexture1DLayeredLayers, 
#line 1924
cudaDevAttrMaxTexture2DGatherWidth = 45, 
#line 1925
cudaDevAttrMaxTexture2DGatherHeight, 
#line 1926
cudaDevAttrMaxTexture3DWidthAlt, 
#line 1927
cudaDevAttrMaxTexture3DHeightAlt, 
#line 1928
cudaDevAttrMaxTexture3DDepthAlt, 
#line 1929
cudaDevAttrPciDomainId, 
#line 1930
cudaDevAttrTexturePitchAlignment, 
#line 1931
cudaDevAttrMaxTextureCubemapWidth, 
#line 1932
cudaDevAttrMaxTextureCubemapLayeredWidth, 
#line 1933
cudaDevAttrMaxTextureCubemapLayeredLayers, 
#line 1934
cudaDevAttrMaxSurface1DWidth, 
#line 1935
cudaDevAttrMaxSurface2DWidth, 
#line 1936
cudaDevAttrMaxSurface2DHeight, 
#line 1937
cudaDevAttrMaxSurface3DWidth, 
#line 1938
cudaDevAttrMaxSurface3DHeight, 
#line 1939
cudaDevAttrMaxSurface3DDepth, 
#line 1940
cudaDevAttrMaxSurface1DLayeredWidth, 
#line 1941
cudaDevAttrMaxSurface1DLayeredLayers, 
#line 1942
cudaDevAttrMaxSurface2DLayeredWidth, 
#line 1943
cudaDevAttrMaxSurface2DLayeredHeight, 
#line 1944
cudaDevAttrMaxSurface2DLayeredLayers, 
#line 1945
cudaDevAttrMaxSurfaceCubemapWidth, 
#line 1946
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
#line 1947
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
#line 1948
cudaDevAttrMaxTexture1DLinearWidth, 
#line 1949
cudaDevAttrMaxTexture2DLinearWidth, 
#line 1950
cudaDevAttrMaxTexture2DLinearHeight, 
#line 1951
cudaDevAttrMaxTexture2DLinearPitch, 
#line 1952
cudaDevAttrMaxTexture2DMipmappedWidth, 
#line 1953
cudaDevAttrMaxTexture2DMipmappedHeight, 
#line 1954
cudaDevAttrComputeCapabilityMajor, 
#line 1955
cudaDevAttrComputeCapabilityMinor, 
#line 1956
cudaDevAttrMaxTexture1DMipmappedWidth, 
#line 1957
cudaDevAttrStreamPrioritiesSupported, 
#line 1958
cudaDevAttrGlobalL1CacheSupported, 
#line 1959
cudaDevAttrLocalL1CacheSupported, 
#line 1960
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
#line 1961
cudaDevAttrMaxRegistersPerMultiprocessor, 
#line 1962
cudaDevAttrManagedMemory, 
#line 1963
cudaDevAttrIsMultiGpuBoard, 
#line 1964
cudaDevAttrMultiGpuBoardGroupID, 
#line 1965
cudaDevAttrHostNativeAtomicSupported, 
#line 1966
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
#line 1967
cudaDevAttrPageableMemoryAccess, 
#line 1968
cudaDevAttrConcurrentManagedAccess, 
#line 1969
cudaDevAttrComputePreemptionSupported, 
#line 1970
cudaDevAttrCanUseHostPointerForRegisteredMem, 
#line 1971
cudaDevAttrReserved92, 
#line 1972
cudaDevAttrReserved93, 
#line 1973
cudaDevAttrReserved94, 
#line 1974
cudaDevAttrCooperativeLaunch, 
#line 1975
cudaDevAttrCooperativeMultiDeviceLaunch, 
#line 1976
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
#line 1977
cudaDevAttrCanFlushRemoteWrites, 
#line 1978
cudaDevAttrHostRegisterSupported, 
#line 1979
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
#line 1980
cudaDevAttrDirectManagedMemAccessFromHost, 
#line 1981
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
#line 1982
cudaDevAttrMaxPersistingL2CacheSize = 108, 
#line 1983
cudaDevAttrMaxAccessPolicyWindowSize, 
#line 1984
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
#line 1985
cudaDevAttrSparseCudaArraySupported, 
#line 1986
cudaDevAttrHostRegisterReadOnlySupported, 
#line 1987
cudaDevAttrTimelineSemaphoreInteropSupported, 
#line 1988
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
#line 1989
cudaDevAttrMemoryPoolsSupported, 
#line 1990
cudaDevAttrGPUDirectRDMASupported, 
#line 1991
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
#line 1992
cudaDevAttrGPUDirectRDMAWritesOrdering, 
#line 1993
cudaDevAttrMemoryPoolSupportedHandleTypes, 
#line 1994
cudaDevAttrClusterLaunch, 
#line 1995
cudaDevAttrDeferredMappingCudaArraySupported, 
#line 1996
cudaDevAttrReserved122, 
#line 1997
cudaDevAttrReserved123, 
#line 1998
cudaDevAttrReserved124, 
#line 1999
cudaDevAttrIpcEventSupport, 
#line 2000
cudaDevAttrMemSyncDomainCount, 
#line 2001
cudaDevAttrReserved127, 
#line 2002
cudaDevAttrReserved128, 
#line 2003
cudaDevAttrReserved129, 
#line 2004
cudaDevAttrNumaConfig, 
#line 2005
cudaDevAttrNumaId, 
#line 2006
cudaDevAttrReserved132, 
#line 2007
cudaDevAttrMpsEnabled, 
#line 2008
cudaDevAttrHostNumaId, 
#line 2009
cudaDevAttrMax
#line 2010
}; 
#endif
#line 2015 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2015
enum cudaMemPoolAttr { 
#line 2025
cudaMemPoolReuseFollowEventDependencies = 1, 
#line 2032
cudaMemPoolReuseAllowOpportunistic, 
#line 2040
cudaMemPoolReuseAllowInternalDependencies, 
#line 2051
cudaMemPoolAttrReleaseThreshold, 
#line 2057
cudaMemPoolAttrReservedMemCurrent, 
#line 2064
cudaMemPoolAttrReservedMemHigh, 
#line 2070
cudaMemPoolAttrUsedMemCurrent, 
#line 2077
cudaMemPoolAttrUsedMemHigh
#line 2078
}; 
#endif
#line 2083 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2083
enum cudaMemLocationType { 
#line 2084
cudaMemLocationTypeInvalid, 
#line 2085
cudaMemLocationTypeDevice, 
#line 2086
cudaMemLocationTypeHost, 
#line 2087
cudaMemLocationTypeHostNuma, 
#line 2088
cudaMemLocationTypeHostNumaCurrent
#line 2089
}; 
#endif
#line 2097 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2097
struct cudaMemLocation { 
#line 2098
cudaMemLocationType type; 
#line 2099
int id; 
#line 2100
}; 
#endif
#line 2105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2105
enum cudaMemAccessFlags { 
#line 2106
cudaMemAccessFlagsProtNone, 
#line 2107
cudaMemAccessFlagsProtRead, 
#line 2108
cudaMemAccessFlagsProtReadWrite = 3
#line 2109
}; 
#endif
#line 2114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2114
struct cudaMemAccessDesc { 
#line 2115
cudaMemLocation location; 
#line 2116
cudaMemAccessFlags flags; 
#line 2117
}; 
#endif
#line 2122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2122
enum cudaMemAllocationType { 
#line 2123
cudaMemAllocationTypeInvalid, 
#line 2127
cudaMemAllocationTypePinned, 
#line 2128
cudaMemAllocationTypeMax = 2147483647
#line 2129
}; 
#endif
#line 2134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2134
enum cudaMemAllocationHandleType { 
#line 2135
cudaMemHandleTypeNone, 
#line 2136
cudaMemHandleTypePosixFileDescriptor, 
#line 2137
cudaMemHandleTypeWin32, 
#line 2138
cudaMemHandleTypeWin32Kmt = 4
#line 2139
}; 
#endif
#line 2144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2144
struct cudaMemPoolProps { 
#line 2145
cudaMemAllocationType allocType; 
#line 2146
cudaMemAllocationHandleType handleTypes; 
#line 2147
cudaMemLocation location; 
#line 2154
void *win32SecurityAttributes; 
#line 2155
size_t maxSize; 
#line 2156
unsigned char reserved[56]; 
#line 2157
}; 
#endif
#line 2162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2162
struct cudaMemPoolPtrExportData { 
#line 2163
unsigned char reserved[64]; 
#line 2164
}; 
#endif
#line 2169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2169
struct cudaMemAllocNodeParams { 
#line 2174
cudaMemPoolProps poolProps; 
#line 2175
const cudaMemAccessDesc *accessDescs; 
#line 2176
size_t accessDescCount; 
#line 2177
size_t bytesize; 
#line 2178
void *dptr; 
#line 2179
}; 
#endif
#line 2184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2184
struct cudaMemAllocNodeParamsV2 { 
#line 2189
cudaMemPoolProps poolProps; 
#line 2190
const cudaMemAccessDesc *accessDescs; 
#line 2191
size_t accessDescCount; 
#line 2192
size_t bytesize; 
#line 2193
void *dptr; 
#line 2194
}; 
#endif
#line 2199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2199
struct cudaMemFreeNodeParams { 
#line 2200
void *dptr; 
#line 2201
}; 
#endif
#line 2206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2206
enum cudaGraphMemAttributeType { 
#line 2211
cudaGraphMemAttrUsedMemCurrent, 
#line 2218
cudaGraphMemAttrUsedMemHigh, 
#line 2225
cudaGraphMemAttrReservedMemCurrent, 
#line 2232
cudaGraphMemAttrReservedMemHigh
#line 2233
}; 
#endif
#line 2239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2239
enum cudaDeviceP2PAttr { 
#line 2240
cudaDevP2PAttrPerformanceRank = 1, 
#line 2241
cudaDevP2PAttrAccessSupported, 
#line 2242
cudaDevP2PAttrNativeAtomicSupported, 
#line 2243
cudaDevP2PAttrCudaArrayAccessSupported
#line 2244
}; 
#endif
#line 2251 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2251
struct CUuuid_st { 
#line 2252
char bytes[16]; 
#line 2253
}; 
#endif
#line 2254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef CUuuid_st 
#line 2254
CUuuid; 
#endif
#line 2256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef CUuuid_st 
#line 2256
cudaUUID_t; 
#endif
#line 2261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2261
struct cudaDeviceProp { 
#line 2263
char name[256]; 
#line 2264
cudaUUID_t uuid; 
#line 2265
char luid[8]; 
#line 2266
unsigned luidDeviceNodeMask; 
#line 2267
size_t totalGlobalMem; 
#line 2268
size_t sharedMemPerBlock; 
#line 2269
int regsPerBlock; 
#line 2270
int warpSize; 
#line 2271
size_t memPitch; 
#line 2272
int maxThreadsPerBlock; 
#line 2273
int maxThreadsDim[3]; 
#line 2274
int maxGridSize[3]; 
#line 2275
int clockRate; 
#line 2276
size_t totalConstMem; 
#line 2277
int major; 
#line 2278
int minor; 
#line 2279
size_t textureAlignment; 
#line 2280
size_t texturePitchAlignment; 
#line 2281
int deviceOverlap; 
#line 2282
int multiProcessorCount; 
#line 2283
int kernelExecTimeoutEnabled; 
#line 2284
int integrated; 
#line 2285
int canMapHostMemory; 
#line 2286
int computeMode; 
#line 2287
int maxTexture1D; 
#line 2288
int maxTexture1DMipmap; 
#line 2289
int maxTexture1DLinear; 
#line 2290
int maxTexture2D[2]; 
#line 2291
int maxTexture2DMipmap[2]; 
#line 2292
int maxTexture2DLinear[3]; 
#line 2293
int maxTexture2DGather[2]; 
#line 2294
int maxTexture3D[3]; 
#line 2295
int maxTexture3DAlt[3]; 
#line 2296
int maxTextureCubemap; 
#line 2297
int maxTexture1DLayered[2]; 
#line 2298
int maxTexture2DLayered[3]; 
#line 2299
int maxTextureCubemapLayered[2]; 
#line 2300
int maxSurface1D; 
#line 2301
int maxSurface2D[2]; 
#line 2302
int maxSurface3D[3]; 
#line 2303
int maxSurface1DLayered[2]; 
#line 2304
int maxSurface2DLayered[3]; 
#line 2305
int maxSurfaceCubemap; 
#line 2306
int maxSurfaceCubemapLayered[2]; 
#line 2307
size_t surfaceAlignment; 
#line 2308
int concurrentKernels; 
#line 2309
int ECCEnabled; 
#line 2310
int pciBusID; 
#line 2311
int pciDeviceID; 
#line 2312
int pciDomainID; 
#line 2313
int tccDriver; 
#line 2314
int asyncEngineCount; 
#line 2315
int unifiedAddressing; 
#line 2316
int memoryClockRate; 
#line 2317
int memoryBusWidth; 
#line 2318
int l2CacheSize; 
#line 2319
int persistingL2CacheMaxSize; 
#line 2320
int maxThreadsPerMultiProcessor; 
#line 2321
int streamPrioritiesSupported; 
#line 2322
int globalL1CacheSupported; 
#line 2323
int localL1CacheSupported; 
#line 2324
size_t sharedMemPerMultiprocessor; 
#line 2325
int regsPerMultiprocessor; 
#line 2326
int managedMemory; 
#line 2327
int isMultiGpuBoard; 
#line 2328
int multiGpuBoardGroupID; 
#line 2329
int hostNativeAtomicSupported; 
#line 2330
int singleToDoublePrecisionPerfRatio; 
#line 2331
int pageableMemoryAccess; 
#line 2332
int concurrentManagedAccess; 
#line 2333
int computePreemptionSupported; 
#line 2334
int canUseHostPointerForRegisteredMem; 
#line 2335
int cooperativeLaunch; 
#line 2336
int cooperativeMultiDeviceLaunch; 
#line 2337
size_t sharedMemPerBlockOptin; 
#line 2338
int pageableMemoryAccessUsesHostPageTables; 
#line 2339
int directManagedMemAccessFromHost; 
#line 2340
int maxBlocksPerMultiProcessor; 
#line 2341
int accessPolicyMaxWindowSize; 
#line 2342
size_t reservedSharedMemPerBlock; 
#line 2343
int hostRegisterSupported; 
#line 2344
int sparseCudaArraySupported; 
#line 2345
int hostRegisterReadOnlySupported; 
#line 2346
int timelineSemaphoreInteropSupported; 
#line 2347
int memoryPoolsSupported; 
#line 2348
int gpuDirectRDMASupported; 
#line 2349
unsigned gpuDirectRDMAFlushWritesOptions; 
#line 2350
int gpuDirectRDMAWritesOrdering; 
#line 2351
unsigned memoryPoolSupportedHandleTypes; 
#line 2352
int deferredMappingCudaArraySupported; 
#line 2353
int ipcEventSupported; 
#line 2354
int clusterLaunch; 
#line 2355
int unifiedFunctionPointers; 
#line 2356
int reserved2[2]; 
#line 2357
int reserved1[1]; 
#line 2358
int reserved[60]; 
#line 2359
}; 
#endif
#line 2372 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 2369
struct cudaIpcEventHandle_st { 
#line 2371
char reserved[64]; 
#line 2372
} cudaIpcEventHandle_t; 
#endif
#line 2380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 2377
struct cudaIpcMemHandle_st { 
#line 2379
char reserved[64]; 
#line 2380
} cudaIpcMemHandle_t; 
#endif
#line 2388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 2385
struct cudaMemFabricHandle_st { 
#line 2387
char reserved[64]; 
#line 2388
} cudaMemFabricHandle_t; 
#endif
#line 2393 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2393
enum cudaExternalMemoryHandleType { 
#line 2397
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
#line 2401
cudaExternalMemoryHandleTypeOpaqueWin32, 
#line 2405
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
#line 2409
cudaExternalMemoryHandleTypeD3D12Heap, 
#line 2413
cudaExternalMemoryHandleTypeD3D12Resource, 
#line 2417
cudaExternalMemoryHandleTypeD3D11Resource, 
#line 2421
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
#line 2425
cudaExternalMemoryHandleTypeNvSciBuf
#line 2426
}; 
#endif
#line 2468 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2468
struct cudaExternalMemoryHandleDesc { 
#line 2472
cudaExternalMemoryHandleType type; 
#line 2473
union { 
#line 2479
int fd; 
#line 2495
struct { 
#line 2499
void *handle; 
#line 2504
const void *name; 
#line 2505
} win32; 
#line 2510
const void *nvSciBufObject; 
#line 2511
} handle; 
#line 2515
unsigned __int64 size; 
#line 2519
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 2520
}; 
#endif
#line 2525 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2525
struct cudaExternalMemoryBufferDesc { 
#line 2529
unsigned __int64 offset; 
#line 2533
unsigned __int64 size; 
#line 2537
unsigned flags; 
#line 2538
}; 
#endif
#line 2543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2543
struct cudaExternalMemoryMipmappedArrayDesc { 
#line 2548
unsigned __int64 offset; 
#line 2552
cudaChannelFormatDesc formatDesc; 
#line 2556
cudaExtent extent; 
#line 2561
unsigned flags; 
#line 2565
unsigned numLevels; 
#line 2566
}; 
#endif
#line 2571 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2571
enum cudaExternalSemaphoreHandleType { 
#line 2575
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
#line 2579
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
#line 2583
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
#line 2587
cudaExternalSemaphoreHandleTypeD3D12Fence, 
#line 2591
cudaExternalSemaphoreHandleTypeD3D11Fence, 
#line 2595
cudaExternalSemaphoreHandleTypeNvSciSync, 
#line 2599
cudaExternalSemaphoreHandleTypeKeyedMutex, 
#line 2603
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
#line 2607
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
#line 2611
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
#line 2612
}; 
#endif
#line 2617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2617
struct cudaExternalSemaphoreHandleDesc { 
#line 2621
cudaExternalSemaphoreHandleType type; 
#line 2622
union { 
#line 2629
int fd; 
#line 2645
struct { 
#line 2649
void *handle; 
#line 2654
const void *name; 
#line 2655
} win32; 
#line 2659
const void *nvSciSyncObj; 
#line 2660
} handle; 
#line 2664
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 2665
}; 
#endif
#line 2670 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2670
struct cudaExternalSemaphoreSignalParams_v1 { 
#line 2671
struct { 
#line 2675
struct { 
#line 2679
unsigned __int64 value; 
#line 2680
} fence; 
#line 2681
union { 
#line 2686
void *fence; 
#line 2687
unsigned __int64 reserved; 
#line 2688
} nvSciSync; 
#line 2692
struct { 
#line 2696
unsigned __int64 key; 
#line 2697
} keyedMutex; 
#line 2698
} params; 
#line 2709
unsigned flags; 
#line 2710
}; 
#endif
#line 2715 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2715
struct cudaExternalSemaphoreWaitParams_v1 { 
#line 2716
struct { 
#line 2720
struct { 
#line 2724
unsigned __int64 value; 
#line 2725
} fence; 
#line 2726
union { 
#line 2731
void *fence; 
#line 2732
unsigned __int64 reserved; 
#line 2733
} nvSciSync; 
#line 2737
struct { 
#line 2741
unsigned __int64 key; 
#line 2745
unsigned timeoutMs; 
#line 2746
} keyedMutex; 
#line 2747
} params; 
#line 2758
unsigned flags; 
#line 2759
}; 
#endif
#line 2764 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2764
struct cudaExternalSemaphoreSignalParams { 
#line 2765
struct { 
#line 2769
struct { 
#line 2773
unsigned __int64 value; 
#line 2774
} fence; 
#line 2775
union { 
#line 2780
void *fence; 
#line 2781
unsigned __int64 reserved; 
#line 2782
} nvSciSync; 
#line 2786
struct { 
#line 2790
unsigned __int64 key; 
#line 2791
} keyedMutex; 
#line 2792
unsigned reserved[12]; 
#line 2793
} params; 
#line 2804
unsigned flags; 
#line 2805
unsigned reserved[16]; 
#line 2806
}; 
#endif
#line 2811 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2811
struct cudaExternalSemaphoreWaitParams { 
#line 2812
struct { 
#line 2816
struct { 
#line 2820
unsigned __int64 value; 
#line 2821
} fence; 
#line 2822
union { 
#line 2827
void *fence; 
#line 2828
unsigned __int64 reserved; 
#line 2829
} nvSciSync; 
#line 2833
struct { 
#line 2837
unsigned __int64 key; 
#line 2841
unsigned timeoutMs; 
#line 2842
} keyedMutex; 
#line 2843
unsigned reserved[10]; 
#line 2844
} params; 
#line 2855
unsigned flags; 
#line 2856
unsigned reserved[16]; 
#line 2857
}; 
#endif
#line 2868 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef cudaError 
#line 2868
cudaError_t; 
#endif
#line 2873 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUstream_st *
#line 2873
cudaStream_t; 
#endif
#line 2878 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUevent_st *
#line 2878
cudaEvent_t; 
#endif
#line 2883 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef cudaGraphicsResource *
#line 2883
cudaGraphicsResource_t; 
#endif
#line 2888 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
#line 2888
cudaExternalMemory_t; 
#endif
#line 2893 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
#line 2893
cudaExternalSemaphore_t; 
#endif
#line 2898 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUgraph_st *
#line 2898
cudaGraph_t; 
#endif
#line 2903 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUgraphNode_st *
#line 2903
cudaGraphNode_t; 
#endif
#line 2908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUuserObject_st *
#line 2908
cudaUserObject_t; 
#endif
#line 2913 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef unsigned __int64 
#line 2913
cudaGraphConditionalHandle; 
#endif
#line 2918 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUfunc_st *
#line 2918
cudaFunction_t; 
#endif
#line 2923 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUkern_st *
#line 2923
cudaKernel_t; 
#endif
#line 2928 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
#line 2928
cudaMemPool_t; 
#endif
#line 2933 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2933
enum cudaCGScope { 
#line 2934
cudaCGScopeInvalid, 
#line 2935
cudaCGScopeGrid, 
#line 2936
cudaCGScopeMultiGrid
#line 2937
}; 
#endif
#line 2942 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2942
struct cudaLaunchParams { 
#line 2944
void *func; 
#line 2945
dim3 gridDim; 
#line 2946
dim3 blockDim; 
#line 2947
void **args; 
#line 2948
size_t sharedMem; 
#line 2949
cudaStream_t stream; 
#line 2950
}; 
#endif
#line 2955 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2955
struct cudaKernelNodeParams { 
#line 2956
void *func; 
#line 2957
dim3 gridDim; 
#line 2958
dim3 blockDim; 
#line 2959
unsigned sharedMemBytes; 
#line 2960
void **kernelParams; 
#line 2961
void **extra; 
#line 2962
}; 
#endif
#line 2967 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2967
struct cudaKernelNodeParamsV2 { 
#line 2968
void *func; 
#line 2974 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
uint3 gridDim; 
#line 2975
uint3 blockDim; 
#line 2977 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
unsigned sharedMemBytes; 
#line 2978
void **kernelParams; 
#line 2979
void **extra; 
#line 2980
}; 
#endif
#line 2985 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2985
struct cudaExternalSemaphoreSignalNodeParams { 
#line 2986
cudaExternalSemaphore_t *extSemArray; 
#line 2987
const cudaExternalSemaphoreSignalParams *paramsArray; 
#line 2988
unsigned numExtSems; 
#line 2989
}; 
#endif
#line 2994 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 2994
struct cudaExternalSemaphoreSignalNodeParamsV2 { 
#line 2995
cudaExternalSemaphore_t *extSemArray; 
#line 2996
const cudaExternalSemaphoreSignalParams *paramsArray; 
#line 2997
unsigned numExtSems; 
#line 2998
}; 
#endif
#line 3003 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3003
struct cudaExternalSemaphoreWaitNodeParams { 
#line 3004
cudaExternalSemaphore_t *extSemArray; 
#line 3005
const cudaExternalSemaphoreWaitParams *paramsArray; 
#line 3006
unsigned numExtSems; 
#line 3007
}; 
#endif
#line 3012 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3012
struct cudaExternalSemaphoreWaitNodeParamsV2 { 
#line 3013
cudaExternalSemaphore_t *extSemArray; 
#line 3014
const cudaExternalSemaphoreWaitParams *paramsArray; 
#line 3015
unsigned numExtSems; 
#line 3016
}; 
#endif
#line 3018 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3018
enum cudaGraphConditionalHandleFlags { 
#line 3019
cudaGraphCondAssignDefault = 1
#line 3020
}; 
#endif
#line 3025 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3025
enum cudaGraphConditionalNodeType { 
#line 3026
cudaGraphCondTypeIf, 
#line 3027
cudaGraphCondTypeWhile
#line 3028
}; 
#endif
#line 3033 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3033
struct cudaConditionalNodeParams { 
#line 3034
cudaGraphConditionalHandle handle; 
#line 3037
cudaGraphConditionalNodeType type; 
#line 3038
unsigned size; 
#line 3039
cudaGraph_t *phGraph_out; 
#line 3049
}; 
#endif
#line 3054 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3054
enum cudaGraphNodeType { 
#line 3055
cudaGraphNodeTypeKernel, 
#line 3056
cudaGraphNodeTypeMemcpy, 
#line 3057
cudaGraphNodeTypeMemset, 
#line 3058
cudaGraphNodeTypeHost, 
#line 3059
cudaGraphNodeTypeGraph, 
#line 3060
cudaGraphNodeTypeEmpty, 
#line 3061
cudaGraphNodeTypeWaitEvent, 
#line 3062
cudaGraphNodeTypeEventRecord, 
#line 3063
cudaGraphNodeTypeExtSemaphoreSignal, 
#line 3064
cudaGraphNodeTypeExtSemaphoreWait, 
#line 3065
cudaGraphNodeTypeMemAlloc, 
#line 3066
cudaGraphNodeTypeMemFree, 
#line 3067
cudaGraphNodeTypeConditional = 13, 
#line 3084
cudaGraphNodeTypeCount
#line 3085
}; 
#endif
#line 3090 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3090
struct cudaChildGraphNodeParams { 
#line 3091
cudaGraph_t graph; 
#line 3093
}; 
#endif
#line 3098 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3098
struct cudaEventRecordNodeParams { 
#line 3099
cudaEvent_t event; 
#line 3100
}; 
#endif
#line 3105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3105
struct cudaEventWaitNodeParams { 
#line 3106
cudaEvent_t event; 
#line 3107
}; 
#endif
#line 3112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3112
struct cudaGraphNodeParams { 
#line 3113
cudaGraphNodeType type; 
#line 3114
int reserved0[3]; 
#line 3116
union { 
#line 3117
__int64 reserved1[29]; 
#line 3118
cudaKernelNodeParamsV2 kernel; 
#line 3119
cudaMemcpyNodeParams memcpy; 
#line 3120
cudaMemsetParamsV2 memset; 
#line 3121
cudaHostNodeParamsV2 host; 
#line 3122
cudaChildGraphNodeParams graph; 
#line 3123
cudaEventWaitNodeParams eventWait; 
#line 3124
cudaEventRecordNodeParams eventRecord; 
#line 3125
cudaExternalSemaphoreSignalNodeParamsV2 extSemSignal; 
#line 3126
cudaExternalSemaphoreWaitNodeParamsV2 extSemWait; 
#line 3127
cudaMemAllocNodeParamsV2 alloc; 
#line 3128
cudaMemFreeNodeParams free; 
#line 3129
cudaConditionalNodeParams conditional; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 3130
}; 
#line 3132
__int64 reserved2; 
#line 3133
}; 
#endif
#line 3145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3138
enum cudaGraphDependencyType_enum { 
#line 3139
cudaGraphDependencyTypeDefault, 
#line 3140
cudaGraphDependencyTypeProgrammatic
#line 3145
} cudaGraphDependencyType; 
#endif
#line 3175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3152
struct cudaGraphEdgeData_st { 
#line 3153
unsigned char from_port; 
#line 3163
unsigned char to_port; 
#line 3170
unsigned char type; 
#line 3173
unsigned char reserved[5]; 
#line 3175
} cudaGraphEdgeData; 
#endif
#line 3196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
#line 3201
#if 0
#line 3201
enum cudaGraphExecUpdateResult { 
#line 3202
cudaGraphExecUpdateSuccess, 
#line 3203
cudaGraphExecUpdateError, 
#line 3204
cudaGraphExecUpdateErrorTopologyChanged, 
#line 3205
cudaGraphExecUpdateErrorNodeTypeChanged, 
#line 3206
cudaGraphExecUpdateErrorFunctionChanged, 
#line 3207
cudaGraphExecUpdateErrorParametersChanged, 
#line 3208
cudaGraphExecUpdateErrorNotSupported, 
#line 3209
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
#line 3210
cudaGraphExecUpdateErrorAttributesChanged
#line 3211
}; 
#endif
#line 3222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3216
enum cudaGraphInstantiateResult { 
#line 3217
cudaGraphInstantiateSuccess, 
#line 3218
cudaGraphInstantiateError, 
#line 3219
cudaGraphInstantiateInvalidStructure, 
#line 3220
cudaGraphInstantiateNodeOperationNotSupported, 
#line 3221
cudaGraphInstantiateMultipleDevicesNotSupported
#line 3222
} cudaGraphInstantiateResult; 
#endif
#line 3233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3227
struct cudaGraphInstantiateParams_st { 
#line 3229
unsigned __int64 flags; 
#line 3230
cudaStream_t uploadStream; 
#line 3231
cudaGraphNode_t errNode_out; 
#line 3232
cudaGraphInstantiateResult result_out; 
#line 3233
} cudaGraphInstantiateParams; 
#endif
#line 3255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3238
struct cudaGraphExecUpdateResultInfo_st { 
#line 3242
cudaGraphExecUpdateResult result; 
#line 3249
cudaGraphNode_t errorNode; 
#line 3254
cudaGraphNode_t errorFromNode; 
#line 3255
} cudaGraphExecUpdateResultInfo; 
#endif
#line 3261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3261
enum cudaGetDriverEntryPointFlags { 
#line 3262
cudaEnableDefault, 
#line 3263
cudaEnableLegacyStream, 
#line 3264
cudaEnablePerThreadDefaultStream
#line 3265
}; 
#endif
#line 3270 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3270
enum cudaDriverEntryPointQueryResult { 
#line 3271
cudaDriverEntryPointSuccess, 
#line 3272
cudaDriverEntryPointSymbolNotFound, 
#line 3273
cudaDriverEntryPointVersionNotSufficent
#line 3274
}; 
#endif
#line 3279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3279
enum cudaGraphDebugDotFlags { 
#line 3280
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
#line 3281
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
#line 3282
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
#line 3283
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
#line 3284
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
#line 3285
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
#line 3286
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
#line 3287
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
#line 3288
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
#line 3289
cudaGraphDebugDotFlagsHandles = (1 << 10), 
#line 3290
cudaGraphDebugDotFlagsConditionalNodeParams = (1 << 15)
#line 3291
}; 
#endif
#line 3296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3296
enum cudaGraphInstantiateFlags { 
#line 3297
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1, 
#line 3298
cudaGraphInstantiateFlagUpload, 
#line 3301
cudaGraphInstantiateFlagDeviceLaunch = 4, 
#line 3304
cudaGraphInstantiateFlagUseNodePriority = 8
#line 3306
}; 
#endif
#line 3327 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3324
enum cudaLaunchMemSyncDomain { 
#line 3325
cudaLaunchMemSyncDomainDefault, 
#line 3326
cudaLaunchMemSyncDomainRemote
#line 3327
} cudaLaunchMemSyncDomain; 
#endif
#line 3343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3340
struct cudaLaunchMemSyncDomainMap_st { 
#line 3341
unsigned char default_; 
#line 3342
unsigned char remote; 
#line 3343
} cudaLaunchMemSyncDomainMap; 
#endif
#line 3424 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3348
enum cudaLaunchAttributeID { 
#line 3349
cudaLaunchAttributeIgnore, 
#line 3350
cudaLaunchAttributeAccessPolicyWindow, 
#line 3352
cudaLaunchAttributeCooperative, 
#line 3354
cudaLaunchAttributeSynchronizationPolicy, 
#line 3355
cudaLaunchAttributeClusterDimension, 
#line 3357
cudaLaunchAttributeClusterSchedulingPolicyPreference, 
#line 3359
cudaLaunchAttributeProgrammaticStreamSerialization, 
#line 3370
cudaLaunchAttributeProgrammaticEvent, 
#line 3396
cudaLaunchAttributePriority, 
#line 3398
cudaLaunchAttributeMemSyncDomainMap, 
#line 3400
cudaLaunchAttributeMemSyncDomain, 
#line 3402
cudaLaunchAttributeLaunchCompletionEvent = 12
#line 3424
} cudaLaunchAttributeID; 
#endif
#line 3475 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3429
union cudaLaunchAttributeValue { 
#line 3430
char pad[64]; 
#line 3431
cudaAccessPolicyWindow accessPolicyWindow; 
#line 3432
int cooperative; 
#line 3434
cudaSynchronizationPolicy syncPolicy; 
#line 3448
struct { 
#line 3449
unsigned x; 
#line 3450
unsigned y; 
#line 3451
unsigned z; 
#line 3452
} clusterDim; 
#line 3453
cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 
#line 3456
int programmaticStreamSerializationAllowed; 
#line 3458
struct { 
#line 3459
cudaEvent_t event; 
#line 3460
int flags; 
#line 3462
int triggerAtBlockStart; 
#line 3463
} programmaticEvent; 
#line 3464
int priority; 
#line 3465
cudaLaunchMemSyncDomainMap memSyncDomainMap; 
#line 3468
cudaLaunchMemSyncDomain memSyncDomain; 
#line 3470
struct { 
#line 3471
cudaEvent_t event; 
#line 3472
int flags; 
#line 3474
} launchCompletionEvent; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 3475
} cudaLaunchAttributeValue; 
#endif
#line 3484 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3480
struct cudaLaunchAttribute_st { 
#line 3481
cudaLaunchAttributeID id; 
#line 3482
char pad[(8) - sizeof(cudaLaunchAttributeID)]; 
#line 3483
cudaLaunchAttributeValue val; 
#line 3484
} cudaLaunchAttribute; 
#endif
#line 3496 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
typedef 
#line 3489
struct cudaLaunchConfig_st { 
#line 3490
dim3 gridDim; 
#line 3491
dim3 blockDim; 
#line 3492
size_t dynamicSmemBytes; 
#line 3493
cudaStream_t stream; 
#line 3494
cudaLaunchAttribute *attrs; 
#line 3495
unsigned numAttrs; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 3496
} cudaLaunchConfig_t; 
#endif
#line 3518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_types.h"
#if 0
#line 3518
enum cudaDeviceNumaConfig { 
#line 3519
cudaDeviceNumaConfigNone, 
#line 3520
cudaDeviceNumaConfigNumaNode
#line 3521
}; 
#endif
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_types.h"
#if 0
#line 84
enum cudaSurfaceBoundaryMode { 
#line 86
cudaBoundaryModeZero, 
#line 87
cudaBoundaryModeClamp, 
#line 88
cudaBoundaryModeTrap
#line 89
}; 
#endif
#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_types.h"
#if 0
#line 94
enum cudaSurfaceFormatMode { 
#line 96
cudaFormatModeForced, 
#line 97
cudaFormatModeAuto
#line 98
}; 
#endif
#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_types.h"
#if 0
typedef unsigned __int64 
#line 103
cudaSurfaceObject_t; 
#endif
#line 84 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_types.h"
#if 0
#line 84
enum cudaTextureAddressMode { 
#line 86
cudaAddressModeWrap, 
#line 87
cudaAddressModeClamp, 
#line 88
cudaAddressModeMirror, 
#line 89
cudaAddressModeBorder
#line 90
}; 
#endif
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_types.h"
#if 0
#line 95
enum cudaTextureFilterMode { 
#line 97
cudaFilterModePoint, 
#line 98
cudaFilterModeLinear
#line 99
}; 
#endif
#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_types.h"
#if 0
#line 104
enum cudaTextureReadMode { 
#line 106
cudaReadModeElementType, 
#line 107
cudaReadModeNormalizedFloat
#line 108
}; 
#endif
#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_types.h"
#if 0
#line 113
struct cudaTextureDesc { 
#line 118
cudaTextureAddressMode addressMode[3]; 
#line 122
cudaTextureFilterMode filterMode; 
#line 126
cudaTextureReadMode readMode; 
#line 130
int sRGB; 
#line 134
float borderColor[4]; 
#line 138
int normalizedCoords; 
#line 142
unsigned maxAnisotropy; 
#line 146
cudaTextureFilterMode mipmapFilterMode; 
#line 150
float mipmapLevelBias; 
#line 154
float minMipmapLevelClamp; 
#line 158
float maxMipmapLevelClamp; 
#line 162
int disableTrilinearOptimization; 
#line 166
int seamlessCubemap; 
#line 167
}; 
#endif
#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_types.h"
#if 0
typedef unsigned __int64 
#line 172
cudaTextureObject_t; 
#endif
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\library_types.h"
typedef 
#line 55
enum cudaDataType_t { 
#line 57
CUDA_R_16F = 2, 
#line 58
CUDA_C_16F = 6, 
#line 59
CUDA_R_16BF = 14, 
#line 60
CUDA_C_16BF, 
#line 61
CUDA_R_32F = 0, 
#line 62
CUDA_C_32F = 4, 
#line 63
CUDA_R_64F = 1, 
#line 64
CUDA_C_64F = 5, 
#line 65
CUDA_R_4I = 16, 
#line 66
CUDA_C_4I, 
#line 67
CUDA_R_4U, 
#line 68
CUDA_C_4U, 
#line 69
CUDA_R_8I = 3, 
#line 70
CUDA_C_8I = 7, 
#line 71
CUDA_R_8U, 
#line 72
CUDA_C_8U, 
#line 73
CUDA_R_16I = 20, 
#line 74
CUDA_C_16I, 
#line 75
CUDA_R_16U, 
#line 76
CUDA_C_16U, 
#line 77
CUDA_R_32I = 10, 
#line 78
CUDA_C_32I, 
#line 79
CUDA_R_32U, 
#line 80
CUDA_C_32U, 
#line 81
CUDA_R_64I = 24, 
#line 82
CUDA_C_64I, 
#line 83
CUDA_R_64U, 
#line 84
CUDA_C_64U, 
#line 85
CUDA_R_8F_E4M3, 
#line 86
CUDA_R_8F_E5M2
#line 87
} cudaDataType; 
#line 95
typedef 
#line 90
enum libraryPropertyType_t { 
#line 92
MAJOR_VERSION, 
#line 93
MINOR_VERSION, 
#line 94
PATCH_LEVEL
#line 95
} libraryPropertyType; 
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_malloc.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_malloc.h"
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 59
_calloc_base(size_t _Count, size_t _Size); 
#line 65
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 66
calloc(size_t _Count, size_t _Size); 
#line 72
__declspec(dllimport) int __cdecl _callnewh(size_t _Size); 
#line 77
__declspec(dllimport) __declspec(allocator) void *__cdecl 
#line 78
_expand(void * _Block, size_t _Size); 
#line 83
__declspec(dllimport) void __cdecl 
#line 84
_free_base(void * _Block); 
#line 88
__declspec(dllimport) void __cdecl 
#line 89
free(void * _Block); 
#line 94
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 95
_malloc_base(size_t _Size); 
#line 100
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 101
malloc(size_t _Size); 
#line 106
__declspec(dllimport) size_t __cdecl 
#line 107
_msize_base(void * _Block) noexcept; 
#line 112
__declspec(dllimport) size_t __cdecl 
#line 113
_msize(void * _Block); 
#line 118
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 119
_realloc_base(void * _Block, size_t _Size); 
#line 125
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 126
realloc(void * _Block, size_t _Size); 
#line 132
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 133
_recalloc_base(void * _Block, size_t _Count, size_t _Size); 
#line 140
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 141
_recalloc(void * _Block, size_t _Count, size_t _Size); 
#line 147
__declspec(dllimport) void __cdecl 
#line 148
_aligned_free(void * _Block); 
#line 153
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 154
_aligned_malloc(size_t _Size, size_t _Alignment); 
#line 160
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 161
_aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); 
#line 168
__declspec(dllimport) size_t __cdecl 
#line 169
_aligned_msize(void * _Block, size_t _Alignment, size_t _Offset); 
#line 176
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 177
_aligned_offset_realloc(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 185
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 186
_aligned_offset_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); 
#line 195
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 196
_aligned_realloc(void * _Block, size_t _Size, size_t _Alignment); 
#line 203
__declspec(dllimport) __declspec(allocator) __declspec(restrict) void *__cdecl 
#line 204
_aligned_recalloc(void * _Block, size_t _Count, size_t _Size, size_t _Alignment); 
#line 232 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_malloc.h"
}__pragma( pack ( pop )) 
#line 234
#pragma warning(pop)
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_search.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 20
__pragma( pack ( push, 8 )) extern "C" {
#line 23
typedef int (__cdecl *_CoreCrtSecureSearchSortCompareFunction)(void *, const void *, const void *); 
#line 24
typedef int (__cdecl *_CoreCrtNonSecureSearchSortCompareFunction)(const void *, const void *); 
#line 30
__declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 39
__declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 60
__declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 68
__declspec(dllimport) void *__cdecl _lfind_s(const void * _Key, const void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 78
__declspec(dllimport) void *__cdecl _lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 87
__declspec(dllimport) void *__cdecl _lsearch_s(const void * _Key, void * _Base, unsigned * _NumOfElements, size_t _SizeOfElements, _CoreCrtSecureSearchSortCompareFunction _CompareFunction, void * _Context); 
#line 97
__declspec(dllimport) void *__cdecl _lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_search.h"
__declspec(dllimport) void *__cdecl lfind(const void * _Key, const void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 204
__declspec(dllimport) void *__cdecl lsearch(const void * _Key, void * _Base, unsigned * _NumOfElements, unsigned _SizeOfElements, _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction); 
#line 216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_search.h"
}__pragma( pack ( pop )) 
#line 218
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 54
__declspec(dllimport) errno_t __cdecl _itow_s(int _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 61
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itow_s ( int _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Buffer, int _Radix); 
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ltow_s(long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 84
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltow_s ( long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Buffer, int _Radix); 
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 106
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultow_s ( unsigned long _Value, wchar_t ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultow_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Buffer, int _Radix); 
#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) double __cdecl wcstod(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 127
__declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 134
__declspec(dllimport) long __cdecl wcstol(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 141
__declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 149
__declspec(dllimport) __int64 __cdecl wcstoll(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 156
__declspec(dllimport) __int64 __cdecl _wcstoll_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 164
__declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 171
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 179
__declspec(dllimport) unsigned __int64 __cdecl wcstoull(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 186
__declspec(dllimport) unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 194
__declspec(dllimport) long double __cdecl wcstold(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 200
__declspec(dllimport) long double __cdecl _wcstold_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 207
__declspec(dllimport) float __cdecl wcstof(const __wchar_t * _String, __wchar_t ** _EndPtr); 
#line 213
__declspec(dllimport) float __cdecl _wcstof_l(const __wchar_t * _String, __wchar_t ** _EndPtr, _locale_t _Locale); 
#line 220
__declspec(dllimport) double __cdecl _wtof(const __wchar_t * _String); 
#line 225
__declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _String, _locale_t _Locale); 
#line 231
__declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _String); 
#line 236
__declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _String, _locale_t _Locale); 
#line 242
__declspec(dllimport) long __cdecl _wtol(const __wchar_t * _String); 
#line 247
__declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _String, _locale_t _Locale); 
#line 253
__declspec(dllimport) __int64 __cdecl _wtoll(const __wchar_t * _String); 
#line 258
__declspec(dllimport) __int64 __cdecl _wtoll_l(const __wchar_t * _String, _locale_t _Locale); 
#line 264
__declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 272
__declspec(dllimport) __wchar_t *__cdecl _i64tow(__int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 279
__declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Value, __wchar_t * _Buffer, size_t _BufferCount, int _Radix); 
#line 287
__declspec(dllimport) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Value, __wchar_t * _Buffer, int _Radix); 
#line 294
__declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _String); 
#line 299
__declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _String, _locale_t _Locale); 
#line 305
__declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 312
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 320
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix); 
#line 327
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _String, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 339
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath(__wchar_t * _Buffer, const __wchar_t * _Path, size_t _BufferCount); 
#line 348
__declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 357
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmakepath_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Drive, wchar_t const * _Dir, wchar_t const * _Filename, wchar_t const * _Ext ) throw ( ) { return _wmakepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _Buffer, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); 
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 380
__declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); 
#line 388
__declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveCount, __wchar_t * _Dir, size_t _DirCount, __wchar_t * _Filename, size_t _FilenameCount, __wchar_t * _Ext, size_t _ExtCount); 
#line 400
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _wsplitpath_s ( wchar_t const * _Path, wchar_t ( & _Drive ) [ _DriveSize ], wchar_t ( & _Dir ) [ _DirSize ], wchar_t ( & _Name ) [ _NameSize ], wchar_t ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _wsplitpath_s ( _Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferCount, const __wchar_t * _VarName); 
#line 418
__declspec(dllimport) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); 
#line 424
__declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _RequiredCount, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _VarName); 
#line 431
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wgetenv_s ( size_t * _RequiredCount, wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _VarName ) throw ( ) { return _wgetenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); 
#line 445
__declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); 
#line 450
__declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _Buffer, size_t _BufferCount); 
#line 457
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wsearchenv_s ( wchar_t const * _Filename, wchar_t const * _VarName, wchar_t ( & _ResultPath ) [ _Size ] ) throw ( ) { return _wsearchenv_s ( _Filename, _VarName, _ResultPath, _Size ); }}
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _VarName, __wchar_t * _ResultPath); 
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdlib.h"
}__pragma( pack ( pop )) 
#line 481
#pragma warning(pop)
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 22
__pragma( pack ( push, 8 )) extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 56
__declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); 
#line 57
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); 
#line 58
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(int _Code); 
#line 59
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(int _Code); 
#line 60
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); 
#line 77
typedef int (__cdecl *_onexit_t)(void); 
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
int __cdecl atexit(void (__cdecl *)(void)); 
#line 145
_onexit_t __cdecl _onexit(_onexit_t _Func); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
int __cdecl at_quick_exit(void (__cdecl *)(void)); 
#line 159
typedef void (__cdecl *_purecall_handler)(void); 
#line 162
typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); 
#line 171
_purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); 
#line 175
_purecall_handler __cdecl _get_purecall_handler(); 
#line 178
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 182
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); 
#line 184
__declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(_invalid_parameter_handler _Handler); 
#line 188
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(); 
#line 212 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl _set_error_mode(int _Mode); 
#line 217
__declspec(dllimport) int *__cdecl _errno(); 
#line 220
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 221
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 223
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 226
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 227
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 230
__declspec(dllimport) char **__cdecl __sys_errlist(); 
#line 233
__declspec(dllimport) int *__cdecl __sys_nerr(); 
#line 236
__declspec(dllimport) void __cdecl perror(const char * _ErrMsg); 
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char **__cdecl __p__pgmptr(); 
#line 243
__declspec(dllimport) __wchar_t **__cdecl __p__wpgmptr(); 
#line 244
__declspec(dllimport) int *__cdecl __p__fmode(); 
#line 259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _get_pgmptr(char ** _Value); 
#line 262
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); 
#line 264
__declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); 
#line 266
__declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); 
#line 279
typedef 
#line 275
struct _div_t { 
#line 277
int quot; 
#line 278
int rem; 
#line 279
} div_t; 
#line 285
typedef 
#line 281
struct _ldiv_t { 
#line 283
long quot; 
#line 284
long rem; 
#line 285
} ldiv_t; 
#line 291
typedef 
#line 287
struct _lldiv_t { 
#line 289
__int64 quot; 
#line 290
__int64 rem; 
#line 291
} lldiv_t; 
#line 293
int __cdecl abs(int _Number); 
#line 294
long __cdecl labs(long _Number); 
#line 295
__int64 __cdecl llabs(__int64 _Number); 
#line 296
__int64 __cdecl _abs64(__int64 _Number); 
#line 298
unsigned short __cdecl _byteswap_ushort(unsigned short _Number); 
#line 299
unsigned long __cdecl _byteswap_ulong(unsigned long _Number); 
#line 300
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Number); 
#line 302
__declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); 
#line 303
__declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); 
#line 304
__declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); 
#line 308
#pragma warning(push)
#pragma warning(disable: 6540)
#line 311
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 317
unsigned long __cdecl _lrotl(unsigned long _Value, int _Shift); 
#line 322
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 327
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 333
unsigned long __cdecl _lrotr(unsigned long _Value, int _Shift); 
#line 338
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 343
#pragma warning(pop)
#line 350
__declspec(dllimport) void __cdecl srand(unsigned _Seed); 
#line 352
__declspec(dllimport) int __cdecl rand(); 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
extern "C++" {
#line 363
inline long abs(const long _X) throw() 
#line 364
{ 
#line 365
return labs(_X); 
#line 366
} 
#line 368
inline __int64 abs(const __int64 _X) throw() 
#line 369
{ 
#line 370
return llabs(_X); 
#line 371
} 
#line 373
inline ldiv_t div(const long _A1, const long _A2) throw() 
#line 374
{ 
#line 375
return ldiv(_A1, _A2); 
#line 376
} 
#line 378
inline lldiv_t div(const __int64 _A1, const __int64 _A2) throw() 
#line 379
{ 
#line 380
return lldiv(_A1, _A2); 
#line 381
} 
#line 382
}
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
#pragma pack ( push, 4 )
#line 398
typedef 
#line 396
struct { 
#line 397
unsigned char ld[10]; 
#line 398
} _LDOUBLE; 
#pragma pack ( pop )
#line 418 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
typedef 
#line 416
struct { 
#line 417
double x; 
#line 418
} _CRT_DOUBLE; 
#line 423
typedef 
#line 421
struct { 
#line 422
float f; 
#line 423
} _CRT_FLOAT; 
#line 432
typedef 
#line 430
struct { 
#line 431
long double x; 
#line 432
} _LONGDOUBLE; 
#line 436
#pragma pack ( push, 4 )
#line 440
typedef 
#line 438
struct { 
#line 439
unsigned char ld12[12]; 
#line 440
} _LDBL12; 
#pragma pack ( pop )
#line 450
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 451
__declspec(dllimport) int __cdecl atoi(const char * _String); 
#line 452
__declspec(dllimport) long __cdecl atol(const char * _String); 
#line 453
__declspec(dllimport) __int64 __cdecl atoll(const char * _String); 
#line 454
__declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); 
#line 456
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 457
__declspec(dllimport) int __cdecl _atoi_l(const char * _String, _locale_t _Locale); 
#line 458
__declspec(dllimport) long __cdecl _atol_l(const char * _String, _locale_t _Locale); 
#line 459
__declspec(dllimport) __int64 __cdecl _atoll_l(const char * _String, _locale_t _Locale); 
#line 460
__declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); 
#line 462
__declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _String); 
#line 463
__declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _String); 
#line 464
__declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _String); 
#line 467
__declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _String, _locale_t _Locale); 
#line 474
__declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 482
__declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _String, _locale_t _Locale); 
#line 489
__declspec(dllimport) float __cdecl strtof(const char * _String, char ** _EndPtr); 
#line 495
__declspec(dllimport) float __cdecl _strtof_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 502
__declspec(dllimport) double __cdecl strtod(const char * _String, char ** _EndPtr); 
#line 508
__declspec(dllimport) double __cdecl _strtod_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 515
__declspec(dllimport) long double __cdecl strtold(const char * _String, char ** _EndPtr); 
#line 521
__declspec(dllimport) long double __cdecl _strtold_l(const char * _String, char ** _EndPtr, _locale_t _Locale); 
#line 528
__declspec(dllimport) long __cdecl strtol(const char * _String, char ** _EndPtr, int _Radix); 
#line 535
__declspec(dllimport) long __cdecl _strtol_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 543
__declspec(dllimport) __int64 __cdecl strtoll(const char * _String, char ** _EndPtr, int _Radix); 
#line 550
__declspec(dllimport) __int64 __cdecl _strtoll_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 558
__declspec(dllimport) unsigned long __cdecl strtoul(const char * _String, char ** _EndPtr, int _Radix); 
#line 565
__declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 573
__declspec(dllimport) unsigned __int64 __cdecl strtoull(const char * _String, char ** _EndPtr, int _Radix); 
#line 580
__declspec(dllimport) unsigned __int64 __cdecl _strtoull_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 588
__declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); 
#line 595
__declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 603
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); 
#line 610
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); 
#line 626
__declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 633
extern "C++" {template < size_t _Size > inline errno_t __cdecl _itoa_s ( int _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _itoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Buffer, int _Radix); 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ltoa_s(long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 657
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ltoa_s ( long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ltoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Buffer, int _Radix); 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 680
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ultoa_s ( unsigned long _Value, char ( & _Buffer ) [ _Size ], int _Radix ) throw ( ) { return _ultoa_s ( _Value, _Buffer, _Size, _Radix ); }}
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 696 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 705
__declspec(dllimport) char *__cdecl _i64toa(__int64 _Value, char * _Buffer, int _Radix); 
#line 713
__declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Value, char * _Buffer, size_t _BufferCount, int _Radix); 
#line 721
__declspec(dllimport) char *__cdecl _ui64toa(unsigned __int64 _Value, char * _Buffer, int _Radix); 
#line 741
__declspec(dllimport) errno_t __cdecl _ecvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 750
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ecvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _ecvt_s ( _Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign ); }}
#line 760 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 769
__declspec(dllimport) errno_t __cdecl _fcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 778
extern "C++" {template < size_t _Size > inline errno_t __cdecl _fcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign ) throw ( ) { return _fcvt_s ( _Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign ); }}
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 798
__declspec(dllimport) errno_t __cdecl _gcvt_s(char * _Buffer, size_t _BufferCount, double _Value, int _DigitCount); 
#line 805
extern "C++" {template < size_t _Size > inline errno_t __cdecl _gcvt_s ( char ( & _Buffer ) [ _Size ], double _Value, int _DigitCount ) throw ( ) { return _gcvt_s ( _Buffer, _Size, _Value, _DigitCount ); }}
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl _gcvt(double _Value, int _DigitCount, char * _Buffer); 
#line 852
__declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); 
#line 858
__declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); 
#line 866
__declspec(dllimport) size_t __cdecl _mbstrlen(const char * _String); 
#line 872
__declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _String, _locale_t _Locale); 
#line 879
__declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _String, size_t _MaxCount); 
#line 886
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _String, size_t _MaxCount, _locale_t _Locale); 
#line 893
__declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); 
#line 900
__declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); 
#line 908
__declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); 
#line 916
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbstowcs_s ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount ) throw ( ) { return mbstowcs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); 
#line 941
extern "C++" {template < size_t _Size > inline errno_t __cdecl _mbstowcs_s_l ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], char const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _mbstowcs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 963 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); 
#line 969
__declspec(dllimport) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); 
#line 978
__declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); 
#line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); 
#line 996
__declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); 
#line 1004
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcstombs_s ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount ) throw ( ) { return wcstombs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }}
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); 
#line 1020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); 
#line 1029
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcstombs_s_l ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], wchar_t const * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _wcstombs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }}
#line 1038 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 1068 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath(char * _Buffer, const char * _Path, size_t _BufferCount); 
#line 1077
__declspec(dllimport) errno_t __cdecl _makepath_s(char * _Buffer, size_t _BufferCount, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1086
extern "C++" {template < size_t _Size > inline errno_t __cdecl _makepath_s ( char ( & _Buffer ) [ _Size ], char const * _Drive, char const * _Dir, char const * _Filename, char const * _Ext ) throw ( ) { return _makepath_s ( _Buffer, _Size, _Drive, _Dir, _Filename, _Ext ); }}
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _makepath(char * _Buffer, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); 
#line 1105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); 
#line 1114
__declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveCount, char * _Dir, size_t _DirCount, char * _Filename, size_t _FilenameCount, char * _Ext, size_t _ExtCount); 
#line 1126
extern "C++" {template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _splitpath_s ( char const * _Dest, char ( & _Drive ) [ _DriveSize ], char ( & _Dir ) [ _DirSize ], char ( & _Name ) [ _NameSize ], char ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _splitpath_s ( _Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }}
#line 1132
__declspec(dllimport) errno_t __cdecl getenv_s(size_t * _RequiredCount, char * _Buffer, rsize_t _BufferCount, const char * _VarName); 
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) int *__cdecl __p___argc(); 
#line 1145
__declspec(dllimport) char ***__cdecl __p___argv(); 
#line 1146
__declspec(dllimport) __wchar_t ***__cdecl __p___wargv(); 
#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char ***__cdecl __p__environ(); 
#line 1159
__declspec(dllimport) __wchar_t ***__cdecl __p__wenviron(); 
#line 1184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) char *__cdecl getenv(const char * _VarName); 
#line 1188
extern "C++" {template < size_t _Size > inline errno_t __cdecl getenv_s ( size_t * _RequiredCount, char ( & _Buffer ) [ _Size ], char const * _VarName ) throw ( ) { return getenv_s ( _RequiredCount, _Buffer, _Size, _VarName ); }}
#line 1201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _Buffer, size_t * _BufferCount, const char * _VarName); 
#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) int __cdecl system(const char * _Command); 
#line 1217
#pragma warning(push)
#pragma warning(disable: 6540)
#line 1221
__declspec(dllimport) int __cdecl _putenv(const char * _EnvString); 
#line 1226
__declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); 
#line 1231
#pragma warning(pop)
#line 1233
__declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _VarName, char * _Buffer, size_t _BufferCount); 
#line 1240
extern "C++" {template < size_t _Size > inline errno_t __cdecl _searchenv_s ( char const * _Filename, char const * _VarName, char ( & _Buffer ) [ _Size ] ) throw ( ) { return _searchenv_s ( _Filename, _VarName, _Buffer, _Size ); }}
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _VarName, char * _Buffer); 
#line 1255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) 
#line 1256
__declspec(dllimport) void __cdecl _seterrormode(int _Mode); 
#line 1260
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) 
#line 1261
__declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); 
#line 1266
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) 
#line 1267
__declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); 
#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
#line 1293
__declspec(dllimport) char *__cdecl ecvt(double _Value, int _DigitCount, int * _PtDec, int * _PtSign); 
#line 1301
__declspec(dllimport) char *__cdecl fcvt(double _Value, int _FractionalDigitCount, int * _PtDec, int * _PtSign); 
#line 1309
__declspec(dllimport) char *__cdecl gcvt(double _Value, int _DigitCount, char * _DstBuf); 
#line 1316
__declspec(dllimport) char *__cdecl itoa(int _Value, char * _Buffer, int _Radix); 
#line 1323
__declspec(dllimport) char *__cdecl ltoa(long _Value, char * _Buffer, int _Radix); 
#line 1331
__declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); 
#line 1338
__declspec(dllimport) char *__cdecl ultoa(unsigned long _Value, char * _Buffer, int _Radix); 
#line 1347
__declspec(dllimport) int __cdecl putenv(const char * _EnvString); 
#line 1351
#pragma warning(pop)
#line 1353
_onexit_t __cdecl onexit(_onexit_t _Func); 
#line 1359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdlib.h"
}__pragma( pack ( pop )) 
#line 1361
#pragma warning(pop)
#line 180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
extern "C" {
#line 187
extern cudaError_t __stdcall __cudaDeviceSynchronizeDeprecationAvoidance(); 
#line 236
extern cudaError_t __stdcall __cudaCDP2DeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 237
extern cudaError_t __stdcall __cudaCDP2DeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 238
extern cudaError_t __stdcall __cudaCDP2DeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 239
extern cudaError_t __stdcall __cudaCDP2DeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 240
extern cudaError_t __stdcall __cudaCDP2GetLastError(); 
#line 241
extern cudaError_t __stdcall __cudaCDP2PeekAtLastError(); 
#line 242
extern const char *__stdcall __cudaCDP2GetErrorString(cudaError_t error); 
#line 243
extern const char *__stdcall __cudaCDP2GetErrorName(cudaError_t error); 
#line 244
extern cudaError_t __stdcall __cudaCDP2GetDeviceCount(int * count); 
#line 245
extern cudaError_t __stdcall __cudaCDP2GetDevice(int * device); 
#line 246
extern cudaError_t __stdcall __cudaCDP2StreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 247
extern cudaError_t __stdcall __cudaCDP2StreamDestroy(cudaStream_t stream); 
#line 248
extern cudaError_t __stdcall __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 249
extern cudaError_t __stdcall __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
#line 250
extern cudaError_t __stdcall __cudaCDP2EventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 251
extern cudaError_t __stdcall __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream); 
#line 252
extern cudaError_t __stdcall __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
#line 253
extern cudaError_t __stdcall __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
#line 254
extern cudaError_t __stdcall __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
#line 255
extern cudaError_t __stdcall __cudaCDP2EventDestroy(cudaEvent_t event); 
#line 256
extern cudaError_t __stdcall __cudaCDP2FuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 257
extern cudaError_t __stdcall __cudaCDP2Free(void * devPtr); 
#line 258
extern cudaError_t __stdcall __cudaCDP2Malloc(void ** devPtr, size_t size); 
#line 259
extern cudaError_t __stdcall __cudaCDP2MemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 260
extern cudaError_t __stdcall __cudaCDP2MemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
#line 261
extern cudaError_t __stdcall __cudaCDP2Memcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 262
extern cudaError_t __stdcall __cudaCDP2Memcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
#line 263
extern cudaError_t __stdcall __cudaCDP2Memcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 264
extern cudaError_t __stdcall __cudaCDP2Memcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
#line 265
extern cudaError_t __stdcall __cudaCDP2MemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 266
extern cudaError_t __stdcall __cudaCDP2MemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
#line 267
extern cudaError_t __stdcall __cudaCDP2Memset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 268
extern cudaError_t __stdcall __cudaCDP2Memset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
#line 269
extern cudaError_t __stdcall __cudaCDP2Memset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 270
extern cudaError_t __stdcall __cudaCDP2Memset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
#line 271
extern cudaError_t __stdcall __cudaCDP2RuntimeGetVersion(int * runtimeVersion); 
#line 272
extern void *__stdcall __cudaCDP2GetParameterBuffer(size_t alignment, size_t size); 
#line 273
extern void *__stdcall __cudaCDP2GetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
#line 274
extern cudaError_t __stdcall __cudaCDP2LaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 275
extern cudaError_t __stdcall __cudaCDP2LaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
#line 276
extern cudaError_t __stdcall __cudaCDP2LaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
#line 277
extern cudaError_t __stdcall __cudaCDP2LaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
#line 278
extern cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
#line 279
extern cudaError_t __stdcall __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 282
extern cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static inline cudaGraphExec_t __stdcall cudaGetCurrentGraphExec() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 302
{ 
#line 303
unsigned __int64 current_graph_exec; 
#line 304
__asm mov.u64 %0, %%current_graph_exec;
return (cudaGraphExec_t)current_graph_exec; 
#line 306
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static inline void __stdcall cudaTriggerProgrammaticLaunchCompletion() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 325
{ 
#line 326
__asm griddepcontrol.launch_dependents;
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static inline void __stdcall cudaGridDependencySynchronize() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 341
{ 
#line 342
__asm griddepcontrol.wait;
} 
#endif
#line 352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
extern void __stdcall cudaGraphSetConditional(cudaGraphConditionalHandle handle, unsigned value); 
#line 355
extern unsigned __int64 __stdcall cudaCGGetIntrinsicHandle(cudaCGScope scope); 
#line 356
extern cudaError_t __stdcall cudaCGSynchronize(unsigned __int64 handle, unsigned flags); 
#line 357
extern cudaError_t __stdcall cudaCGSynchronizeGrid(unsigned __int64 handle, unsigned flags); 
#line 358
extern cudaError_t __stdcall cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned __int64 handle); 
#line 359
extern cudaError_t __stdcall cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned __int64 handle); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 581
static __inline void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)alignment;(void)size;::exit(___);}
#if 0
#line 582
{ 
#line 583
return __cudaCDP2GetParameterBuffer(alignment, size); 
#line 584
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 591 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static __inline void *__stdcall cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)func;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;::exit(___);}
#if 0
#line 592
{ 
#line 593
return __cudaCDP2GetParameterBufferV2(func, gridDimension, blockDimension, sharedMemSize); 
#line 594
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 601 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;::exit(___);}
#if 0
#line 602
{ 
#line 603
return __cudaCDP2LaunchDevice_ptsz(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
#line 604
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 606 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;::exit(___);}
#if 0
#line 607
{ 
#line 608
return __cudaCDP2LaunchDeviceV2_ptsz(parameterBuffer, stream); 
#line 609
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 667 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;::exit(___);}
#if 0
#line 668
{ 
#line 669
return __cudaCDP2LaunchDevice(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
#line 670
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 672 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
static __inline cudaError_t __stdcall cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;::exit(___);}
#if 0
#line 673
{ 
#line 674
return __cudaCDP2LaunchDeviceV2(parameterBuffer, stream); 
#line 675
} 
#endif
#line 729 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_device_runtime_api.h"
}
#line 731
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 732
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 733
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 734
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern "C" {
#line 319 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceReset(); 
#line 341
extern cudaError_t __stdcall cudaDeviceSynchronize(); 
#line 427
extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); 
#line 463
extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
#line 486
extern cudaError_t __stdcall cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
#line 520 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 557
extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
#line 601
extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
#line 632
extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
#line 676
extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
#line 703
extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
#line 733
extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
#line 783
extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
#line 826
extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
#line 870
extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
#line 936
extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
#line 974
extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); 
#line 1006
extern cudaError_t __stdcall cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
#line 1049 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadExit(); 
#line 1075
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSynchronize(); 
#line 1124
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); 
#line 1157
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
#line 1193
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
#line 1240
__declspec(deprecated) extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
#line 1305
extern cudaError_t __stdcall cudaGetLastError(); 
#line 1356
extern cudaError_t __stdcall cudaPeekAtLastError(); 
#line 1372
extern const char *__stdcall cudaGetErrorName(cudaError_t error); 
#line 1388
extern const char *__stdcall cudaGetErrorString(cudaError_t error); 
#line 1417
extern cudaError_t __stdcall cudaGetDeviceCount(int * count); 
#line 1722
extern cudaError_t __stdcall cudaGetDeviceProperties_v2(cudaDeviceProp * prop, int device); 
#line 1924
extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
#line 1942
extern cudaError_t __stdcall cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
#line 1966
extern cudaError_t __stdcall cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
#line 1986
extern cudaError_t __stdcall cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
#line 2048
extern cudaError_t __stdcall cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
#line 2088
extern cudaError_t __stdcall cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
#line 2110
extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
#line 2139
extern cudaError_t __stdcall cudaInitDevice(int device, unsigned deviceFlags, unsigned flags); 
#line 2185
extern cudaError_t __stdcall cudaSetDevice(int device); 
#line 2207
extern cudaError_t __stdcall cudaGetDevice(int * device); 
#line 2238
extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); 
#line 2308
extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); 
#line 2353
extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); 
#line 2393
extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); 
#line 2425
extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
#line 2473
extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
#line 2500
extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
#line 2525
extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
#line 2562
extern cudaError_t __stdcall cudaStreamGetId(cudaStream_t hStream, unsigned __int64 * streamId); 
#line 2577
extern cudaError_t __stdcall cudaCtxResetPersistingL2Cache(); 
#line 2597
extern cudaError_t __stdcall cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
#line 2618
extern cudaError_t __stdcall cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
#line 2642
extern cudaError_t __stdcall cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
#line 2676
extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); 
#line 2707
extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
#line 2715
typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
#line 2782
extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
#line 2806
extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); 
#line 2831
extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); 
#line 2915
extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
#line 2954 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
#line 2995
extern cudaError_t __stdcall cudaStreamBeginCaptureToGraph(cudaStream_t stream, cudaGraph_t graph, const cudaGraphNode_t * dependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, cudaStreamCaptureMode mode); 
#line 3046
extern cudaError_t __stdcall cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
#line 3075
extern cudaError_t __stdcall cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
#line 3113
extern cudaError_t __stdcall cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
#line 3162
extern cudaError_t __stdcall cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned __int64 * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
#line 3221
extern cudaError_t __stdcall cudaStreamGetCaptureInfo_v3(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned __int64 * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, const cudaGraphEdgeData ** edgeData_out = 0, size_t * numDependencies_out = 0); 
#line 3261
extern cudaError_t __stdcall cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
#line 3296
extern cudaError_t __stdcall cudaStreamUpdateCaptureDependencies_v2(cudaStream_t stream, cudaGraphNode_t * dependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, unsigned flags = 0); 
#line 3333
extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); 
#line 3370
extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
#line 3411
extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
#line 3459
extern cudaError_t __stdcall cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
#line 3492 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); 
#line 3523
extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); 
#line 3553
extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); 
#line 3598
extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
#line 3779
extern cudaError_t __stdcall cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
#line 3834
extern cudaError_t __stdcall cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
#line 3894
extern cudaError_t __stdcall cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
#line 3918
extern cudaError_t __stdcall cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
#line 4072
extern cudaError_t __stdcall cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
#line 4155
extern cudaError_t __stdcall cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 4231
extern cudaError_t __stdcall cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
#line 4254
extern cudaError_t __stdcall cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
#line 4321
extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 4383
extern cudaError_t __stdcall cudaLaunchKernelExC(const cudaLaunchConfig_t * config, const void * func, void ** args); 
#line 4440
extern cudaError_t __stdcall cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
#line 4541
__declspec(deprecated) extern cudaError_t __stdcall cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
#line 4586
extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
#line 4641
extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
#line 4674
extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
#line 4711
extern cudaError_t __stdcall cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
#line 4735
extern cudaError_t __stdcall cudaFuncGetName(const char ** name, const void * func); 
#line 4759
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); 
#line 4783
__declspec(deprecated) extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); 
#line 4849
extern cudaError_t __stdcall cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
#line 4906
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
#line 4935
extern cudaError_t __stdcall cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
#line 4980
extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
#line 5015
extern cudaError_t __stdcall cudaOccupancyMaxPotentialClusterSize(int * clusterSize, const void * func, const cudaLaunchConfig_t * launchConfig); 
#line 5054
extern cudaError_t __stdcall cudaOccupancyMaxActiveClusters(int * numClusters, const void * func, const cudaLaunchConfig_t * launchConfig); 
#line 5174
extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
#line 5207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); 
#line 5244
extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); 
#line 5287
extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
#line 5339
extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
#line 5377
extern cudaError_t __stdcall cudaFree(void * devPtr); 
#line 5400
extern cudaError_t __stdcall cudaFreeHost(void * ptr); 
#line 5423
extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); 
#line 5446
extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
#line 5512
extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
#line 5609
extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); 
#line 5632
extern cudaError_t __stdcall cudaHostUnregister(void * ptr); 
#line 5677
extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
#line 5699
extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); 
#line 5738
extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
#line 5883
extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
#line 6028
extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
#line 6061
extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
#line 6166
extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); 
#line 6198
extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
#line 6316
extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
#line 6343
extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
#line 6377
extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); 
#line 6403
extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
#line 6432
extern cudaError_t __stdcall cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
#line 6455
extern cudaError_t __stdcall cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
#line 6479
extern cudaError_t __stdcall cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
#line 6507
extern cudaError_t __stdcall cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
#line 6537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
#line 6582 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 6617
extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
#line 6666
extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6716
extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6766
extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
#line 6813
extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 6856
extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
#line 6899
extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
#line 6956
extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 6991
extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
#line 7054
extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7112
extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7169
extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7220
extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7271
extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 7300
extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); 
#line 7334
extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
#line 7380
extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
#line 7416
extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
#line 7457
extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
#line 7510
extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
#line 7538
extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
#line 7565
extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); 
#line 7635
extern cudaError_t __stdcall cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
#line 7637
extern cudaError_t __stdcall cudaMemPrefetchAsync_v2(const void * devPtr, size_t count, cudaMemLocation location, unsigned flags, cudaStream_t stream = 0); 
#line 7751
extern cudaError_t __stdcall cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
#line 7874
extern cudaError_t __stdcall cudaMemAdvise_v2(const void * devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location); 
#line 7956
extern cudaError_t __stdcall cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
#line 7999
extern cudaError_t __stdcall cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
#line 8059
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
#line 8101
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
#line 8144
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
#line 8195
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 8245
__declspec(deprecated) extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
#line 8314
extern cudaError_t __stdcall cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
#line 8340
extern cudaError_t __stdcall cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
#line 8365
extern cudaError_t __stdcall cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
#line 8409
extern cudaError_t __stdcall cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
#line 8457
extern cudaError_t __stdcall cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
#line 8472
extern cudaError_t __stdcall cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
#line 8485
extern cudaError_t __stdcall cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
#line 8512
extern cudaError_t __stdcall cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
#line 8534
extern cudaError_t __stdcall cudaMemPoolDestroy(cudaMemPool_t memPool); 
#line 8570
extern cudaError_t __stdcall cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
#line 8595
extern cudaError_t __stdcall cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
#line 8622
extern cudaError_t __stdcall cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
#line 8645
extern cudaError_t __stdcall cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
#line 8674
extern cudaError_t __stdcall cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
#line 8827
extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
#line 8868
extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
#line 8910
extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
#line 8932
extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); 
#line 8996
extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
#line 9031
extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
#line 9070
extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 9105
extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
#line 9137
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
#line 9175
extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
#line 9204
extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
#line 9239
extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
#line 9269
extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
#line 9493
extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
#line 9513
extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); 
#line 9533
extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
#line 9553
extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
#line 9574
extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
#line 9619
extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
#line 9639
extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
#line 9658
extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
#line 9692
extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); 
#line 9721
extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); 
#line 9768
extern cudaError_t __stdcall cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
#line 9866
extern cudaError_t __stdcall cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
#line 9899
extern cudaError_t __stdcall cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
#line 9925
extern cudaError_t __stdcall cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 9945
extern cudaError_t __stdcall cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
#line 9968
extern cudaError_t __stdcall cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
#line 9992
extern cudaError_t __stdcall cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
#line 10043
extern cudaError_t __stdcall cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
#line 10102
extern cudaError_t __stdcall cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 10271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
#line 10298
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 10337
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 10429 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 10477 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
#line 10500
extern cudaError_t __stdcall cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
#line 10524
extern cudaError_t __stdcall cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 10566
extern cudaError_t __stdcall cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
#line 10589
extern cudaError_t __stdcall cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
#line 10613
extern cudaError_t __stdcall cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 10654
extern cudaError_t __stdcall cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
#line 10681
extern cudaError_t __stdcall cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
#line 10719
extern cudaError_t __stdcall cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
#line 10763
extern cudaError_t __stdcall cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
#line 10790 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
#line 10818 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
#line 10865 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
#line 10892 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
#line 10920 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
#line 10970 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 11003 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
#line 11031 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 11081 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 11114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
#line 11142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 11220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
#line 11247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
#line 11308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
#line 11332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
#line 11360 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGraphMemTrim(int device); 
#line 11397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
#line 11431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
#line 11459 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
#line 11487
extern cudaError_t __stdcall cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
#line 11518
extern cudaError_t __stdcall cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
#line 11549
extern cudaError_t __stdcall cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
#line 11580
extern cudaError_t __stdcall cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
#line 11614
extern cudaError_t __stdcall cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
#line 11654
extern cudaError_t __stdcall cudaGraphGetEdges_v2(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, cudaGraphEdgeData * edgeData, size_t * numEdges); 
#line 11685
extern cudaError_t __stdcall cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
#line 11722
extern cudaError_t __stdcall cudaGraphNodeGetDependencies_v2(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, cudaGraphEdgeData * edgeData, size_t * pNumDependencies); 
#line 11754
extern cudaError_t __stdcall cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
#line 11792
extern cudaError_t __stdcall cudaGraphNodeGetDependentNodes_v2(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, cudaGraphEdgeData * edgeData, size_t * pNumDependentNodes); 
#line 11823
extern cudaError_t __stdcall cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 11855
extern cudaError_t __stdcall cudaGraphAddDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, const cudaGraphEdgeData * edgeData, size_t numDependencies); 
#line 11886
extern cudaError_t __stdcall cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
#line 11921
extern cudaError_t __stdcall cudaGraphRemoveDependencies_v2(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, const cudaGraphEdgeData * edgeData, size_t numDependencies); 
#line 11951
extern cudaError_t __stdcall cudaGraphDestroyNode(cudaGraphNode_t node); 
#line 12021
extern cudaError_t __stdcall cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned __int64 flags = 0); 
#line 12093
extern cudaError_t __stdcall cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned __int64 flags = 0); 
#line 12199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphInstantiateWithParams(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams * instantiateParams); 
#line 12224
extern cudaError_t __stdcall cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned __int64 * flags); 
#line 12276
extern cudaError_t __stdcall cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
#line 12327
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
#line 12382
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 12445 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
#line 12506 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
#line 12561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
#line 12601
extern cudaError_t __stdcall cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
#line 12648
extern cudaError_t __stdcall cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
#line 12693 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
#line 12738 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
#line 12786 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
#line 12834 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
#line 12874 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
#line 12908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
#line 12997 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo * resultInfo); 
#line 13022
extern cudaError_t __stdcall cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 13053 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
#line 13076
extern cudaError_t __stdcall cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
#line 13097
extern cudaError_t __stdcall cudaGraphDestroy(cudaGraph_t graph); 
#line 13116
extern cudaError_t __stdcall cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
#line 13152
extern cudaError_t __stdcall cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
#line 13176
extern cudaError_t __stdcall cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
#line 13204
extern cudaError_t __stdcall cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
#line 13232
extern cudaError_t __stdcall cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
#line 13257
extern cudaError_t __stdcall cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
#line 13299
extern cudaError_t __stdcall cudaGraphAddNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraphNodeParams * nodeParams); 
#line 13343
extern cudaError_t __stdcall cudaGraphAddNode_v2(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, const cudaGraphEdgeData * dependencyData, size_t numDependencies, cudaGraphNodeParams * nodeParams); 
#line 13372
extern cudaError_t __stdcall cudaGraphNodeSetParams(cudaGraphNode_t node, cudaGraphNodeParams * nodeParams); 
#line 13421
extern cudaError_t __stdcall cudaGraphExecNodeSetParams(cudaGraphExec_t graphExec, cudaGraphNode_t node, cudaGraphNodeParams * nodeParams); 
#line 13445
extern cudaError_t __stdcall cudaGraphConditionalHandleCreate(cudaGraphConditionalHandle * pHandle_out, cudaGraph_t graph, unsigned defaultLaunchValue = 0, unsigned flags = 0); 
#line 13523
extern cudaError_t __stdcall cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned __int64 flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
#line 13531 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
#line 13710
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
#line 13726
extern cudaError_t __stdcall cudaGetKernel(cudaKernel_t * kernelPtr, const void * entryFuncAddr); 
#line 13896 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime_api.h"
}
#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 118
{ 
#line 119
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 120
} 
#line 122
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 123
{ 
#line 124
int e = (((int)sizeof(unsigned short)) * 8); 
#line 126
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 127
} 
#line 129
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 130
{ 
#line 131
int e = (((int)sizeof(unsigned short)) * 8); 
#line 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 134
} 
#line 136
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 137
{ 
#line 138
int e = (((int)sizeof(unsigned short)) * 8); 
#line 140
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 141
} 
#line 143
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 144
{ 
#line 145
int e = (((int)sizeof(unsigned short)) * 8); 
#line 147
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 148
} 
#line 150
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 151
{ 
#line 152
int e = (((int)sizeof(char)) * 8); 
#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\channel_descriptor.h"
} 
#line 161
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 162
{ 
#line 163
int e = (((int)sizeof(signed char)) * 8); 
#line 165
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 166
} 
#line 168
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 169
{ 
#line 170
int e = (((int)sizeof(unsigned char)) * 8); 
#line 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 173
} 
#line 175
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 176
{ 
#line 177
int e = (((int)sizeof(signed char)) * 8); 
#line 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 180
} 
#line 182
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 183
{ 
#line 184
int e = (((int)sizeof(unsigned char)) * 8); 
#line 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 187
} 
#line 189
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 190
{ 
#line 191
int e = (((int)sizeof(signed char)) * 8); 
#line 193
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 194
} 
#line 196
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 197
{ 
#line 198
int e = (((int)sizeof(unsigned char)) * 8); 
#line 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 201
} 
#line 203
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 204
{ 
#line 205
int e = (((int)sizeof(signed char)) * 8); 
#line 207
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 208
} 
#line 210
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 211
{ 
#line 212
int e = (((int)sizeof(unsigned char)) * 8); 
#line 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 215
} 
#line 217
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 218
{ 
#line 219
int e = (((int)sizeof(short)) * 8); 
#line 221
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 222
} 
#line 224
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 225
{ 
#line 226
int e = (((int)sizeof(unsigned short)) * 8); 
#line 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 229
} 
#line 231
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 232
{ 
#line 233
int e = (((int)sizeof(short)) * 8); 
#line 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 236
} 
#line 238
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 239
{ 
#line 240
int e = (((int)sizeof(unsigned short)) * 8); 
#line 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 243
} 
#line 245
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 246
{ 
#line 247
int e = (((int)sizeof(short)) * 8); 
#line 249
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 250
} 
#line 252
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 253
{ 
#line 254
int e = (((int)sizeof(unsigned short)) * 8); 
#line 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 257
} 
#line 259
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 260
{ 
#line 261
int e = (((int)sizeof(short)) * 8); 
#line 263
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 264
} 
#line 266
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 267
{ 
#line 268
int e = (((int)sizeof(unsigned short)) * 8); 
#line 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 271
} 
#line 273
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 274
{ 
#line 275
int e = (((int)sizeof(int)) * 8); 
#line 277
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 278
} 
#line 280
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 281
{ 
#line 282
int e = (((int)sizeof(unsigned)) * 8); 
#line 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 285
} 
#line 287
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 288
{ 
#line 289
int e = (((int)sizeof(int)) * 8); 
#line 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 292
} 
#line 294
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 295
{ 
#line 296
int e = (((int)sizeof(unsigned)) * 8); 
#line 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 299
} 
#line 301
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 302
{ 
#line 303
int e = (((int)sizeof(int)) * 8); 
#line 305
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 306
} 
#line 308
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 309
{ 
#line 310
int e = (((int)sizeof(unsigned)) * 8); 
#line 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 313
} 
#line 315
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 316
{ 
#line 317
int e = (((int)sizeof(int)) * 8); 
#line 319
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 320
} 
#line 322
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 323
{ 
#line 324
int e = (((int)sizeof(unsigned)) * 8); 
#line 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 327
} 
#line 331
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 332
{ 
#line 333
int e = (((int)sizeof(long)) * 8); 
#line 335
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 336
} 
#line 338
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 339
{ 
#line 340
int e = (((int)sizeof(unsigned long)) * 8); 
#line 342
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 343
} 
#line 345
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 346
{ 
#line 347
int e = (((int)sizeof(long)) * 8); 
#line 349
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 350
} 
#line 352
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 353
{ 
#line 354
int e = (((int)sizeof(unsigned long)) * 8); 
#line 356
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 357
} 
#line 359
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 360
{ 
#line 361
int e = (((int)sizeof(long)) * 8); 
#line 363
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 364
} 
#line 366
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 367
{ 
#line 368
int e = (((int)sizeof(unsigned long)) * 8); 
#line 370
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 371
} 
#line 373
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 374
{ 
#line 375
int e = (((int)sizeof(long)) * 8); 
#line 377
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 378
} 
#line 380
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 381
{ 
#line 382
int e = (((int)sizeof(unsigned long)) * 8); 
#line 384
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 385
} 
#line 389 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 390
{ 
#line 391
int e = (((int)sizeof(float)) * 8); 
#line 393
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 394
} 
#line 396
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 397
{ 
#line 398
int e = (((int)sizeof(float)) * 8); 
#line 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 401
} 
#line 403
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 404
{ 
#line 405
int e = (((int)sizeof(float)) * 8); 
#line 407
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 408
} 
#line 410
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 411
{ 
#line 412
int e = (((int)sizeof(float)) * 8); 
#line 414
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 415
} 
#line 417
static __inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
#line 418
{ 
#line 419
int e = (((int)sizeof(char)) * 8); 
#line 421
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
#line 422
} 
#line 424
template< cudaChannelFormatKind > __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 425
{ 
#line 426
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 427
} 
#line 430
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
#line 431
{ 
#line 432
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
#line 433
} 
#line 435
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
#line 436
{ 
#line 437
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
#line 438
} 
#line 440
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
#line 441
{ 
#line 442
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
#line 443
} 
#line 446
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
#line 447
{ 
#line 448
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
#line 449
} 
#line 451
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
#line 452
{ 
#line 453
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
#line 454
} 
#line 456
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
#line 457
{ 
#line 458
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
#line 459
} 
#line 462
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
#line 463
{ 
#line 464
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
#line 465
} 
#line 467
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
#line 468
{ 
#line 469
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
#line 470
} 
#line 472
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
#line 473
{ 
#line 474
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
#line 475
} 
#line 478
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
#line 479
{ 
#line 480
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
#line 481
} 
#line 483
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
#line 484
{ 
#line 485
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
#line 486
} 
#line 488
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
#line 489
{ 
#line 490
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
#line 491
} 
#line 494
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
#line 495
{ 
#line 496
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
#line 497
} 
#line 500
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
#line 501
{ 
#line 502
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
#line 503
} 
#line 506
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
#line 507
{ 
#line 508
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
#line 509
} 
#line 512
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
#line 513
{ 
#line 514
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
#line 515
} 
#line 518
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
#line 519
{ 
#line 520
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
#line 521
} 
#line 524
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
#line 525
{ 
#line 526
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
#line 527
} 
#line 530
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
#line 531
{ 
#line 532
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
#line 533
} 
#line 536
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
#line 537
{ 
#line 538
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
#line 539
} 
#line 542
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
#line 543
{ 
#line 544
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
#line 545
} 
#line 548
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
#line 549
{ 
#line 550
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
#line 551
} 
#line 554
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
#line 555
{ 
#line 556
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
#line 557
} 
#line 560
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
#line 561
{ 
#line 562
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
#line 563
} 
#line 566
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
#line 567
{ 
#line 568
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
#line 569
} 
#line 572
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
#line 573
{ 
#line 574
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
#line 575
} 
#line 578
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
#line 579
{ 
#line 580
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
#line 581
} 
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80
{ 
#line 81
cudaPitchedPtr s; 
#line 83
(s.ptr) = d; 
#line 84
(s.pitch) = p; 
#line 85
(s.xsize) = xsz; 
#line 86
(s.ysize) = ysz; 
#line 88
return s; 
#line 89
} 
#line 106
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107
{ 
#line 108
cudaPos p; 
#line 110
(p.x) = x; 
#line 111
(p.y) = y; 
#line 112
(p.z) = z; 
#line 114
return p; 
#line 115
} 
#line 132
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133
{ 
#line 134
cudaExtent e; 
#line 136
(e.width) = w; 
#line 137
(e.height) = h; 
#line 138
(e.depth) = d; 
#line 140
return e; 
#line 141
} 
#line 77 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_functions.h"
static __inline char1 make_char1(signed char x); 
#line 79
static __inline uchar1 make_uchar1(unsigned char x); 
#line 81
static __inline char2 make_char2(signed char x, signed char y); 
#line 83
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
#line 85
static __inline char3 make_char3(signed char x, signed char y, signed char z); 
#line 87
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
#line 89
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
#line 91
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
#line 93
static __inline short1 make_short1(short x); 
#line 95
static __inline ushort1 make_ushort1(unsigned short x); 
#line 97
static __inline short2 make_short2(short x, short y); 
#line 99
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
#line 101
static __inline short3 make_short3(short x, short y, short z); 
#line 103
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
#line 105
static __inline short4 make_short4(short x, short y, short z, short w); 
#line 107
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
#line 109
static __inline int1 make_int1(int x); 
#line 111
static __inline uint1 make_uint1(unsigned x); 
#line 113
static __inline int2 make_int2(int x, int y); 
#line 115
static __inline uint2 make_uint2(unsigned x, unsigned y); 
#line 117
static __inline int3 make_int3(int x, int y, int z); 
#line 119
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
#line 121
static __inline int4 make_int4(int x, int y, int z, int w); 
#line 123
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
#line 125
static __inline long1 make_long1(long x); 
#line 127
static __inline ulong1 make_ulong1(unsigned long x); 
#line 129
static __inline long2 make_long2(long x, long y); 
#line 131
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
#line 133
static __inline long3 make_long3(long x, long y, long z); 
#line 135
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
#line 137
static __inline long4 make_long4(long x, long y, long z, long w); 
#line 139
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
#line 141
static __inline float1 make_float1(float x); 
#line 143
static __inline float2 make_float2(float x, float y); 
#line 145
static __inline float3 make_float3(float x, float y, float z); 
#line 147
static __inline float4 make_float4(float x, float y, float z, float w); 
#line 149
static __inline longlong1 make_longlong1(__int64 x); 
#line 151
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x); 
#line 153
static __inline longlong2 make_longlong2(__int64 x, __int64 y); 
#line 155
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y); 
#line 157
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z); 
#line 159
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z); 
#line 161
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w); 
#line 163
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w); 
#line 165
static __inline double1 make_double1(double x); 
#line 167
static __inline double2 make_double2(double x, double y); 
#line 169
static __inline double3 make_double3(double x, double y, double z); 
#line 171
static __inline double4 make_double4(double x, double y, double z, double w); 
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 74
{ 
#line 75
char1 t; (t.x) = x; return t; 
#line 76
} 
#line 78
static __inline uchar1 make_uchar1(unsigned char x) 
#line 79
{ 
#line 80
uchar1 t; (t.x) = x; return t; 
#line 81
} 
#line 83
static __inline char2 make_char2(signed char x, signed char y) 
#line 84
{ 
#line 85
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 86
} 
#line 88
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 89
{ 
#line 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 91
} 
#line 93
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 94
{ 
#line 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 96
} 
#line 98
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 99
{ 
#line 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 101
} 
#line 103
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 104
{ 
#line 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 106
} 
#line 108
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 109
{ 
#line 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 111
} 
#line 113
static __inline short1 make_short1(short x) 
#line 114
{ 
#line 115
short1 t; (t.x) = x; return t; 
#line 116
} 
#line 118
static __inline ushort1 make_ushort1(unsigned short x) 
#line 119
{ 
#line 120
ushort1 t; (t.x) = x; return t; 
#line 121
} 
#line 123
static __inline short2 make_short2(short x, short y) 
#line 124
{ 
#line 125
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 126
} 
#line 128
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 129
{ 
#line 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 131
} 
#line 133
static __inline short3 make_short3(short x, short y, short z) 
#line 134
{ 
#line 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 136
} 
#line 138
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 139
{ 
#line 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 141
} 
#line 143
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 144
{ 
#line 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 146
} 
#line 148
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 149
{ 
#line 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 151
} 
#line 153
static __inline int1 make_int1(int x) 
#line 154
{ 
#line 155
int1 t; (t.x) = x; return t; 
#line 156
} 
#line 158
static __inline uint1 make_uint1(unsigned x) 
#line 159
{ 
#line 160
uint1 t; (t.x) = x; return t; 
#line 161
} 
#line 163
static __inline int2 make_int2(int x, int y) 
#line 164
{ 
#line 165
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 166
} 
#line 168
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 169
{ 
#line 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 171
} 
#line 173
static __inline int3 make_int3(int x, int y, int z) 
#line 174
{ 
#line 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 176
} 
#line 178
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 179
{ 
#line 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 181
} 
#line 183
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 184
{ 
#line 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 186
} 
#line 188
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 189
{ 
#line 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 191
} 
#line 193
static __inline long1 make_long1(long x) 
#line 194
{ 
#line 195
long1 t; (t.x) = x; return t; 
#line 196
} 
#line 198
static __inline ulong1 make_ulong1(unsigned long x) 
#line 199
{ 
#line 200
ulong1 t; (t.x) = x; return t; 
#line 201
} 
#line 203
static __inline long2 make_long2(long x, long y) 
#line 204
{ 
#line 205
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 206
} 
#line 208
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 209
{ 
#line 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 211
} 
#line 213
static __inline long3 make_long3(long x, long y, long z) 
#line 214
{ 
#line 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 216
} 
#line 218
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 219
{ 
#line 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 221
} 
#line 223
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 224
{ 
#line 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 226
} 
#line 228
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 229
{ 
#line 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 231
} 
#line 233
static __inline float1 make_float1(float x) 
#line 234
{ 
#line 235
float1 t; (t.x) = x; return t; 
#line 236
} 
#line 238
static __inline float2 make_float2(float x, float y) 
#line 239
{ 
#line 240
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 241
} 
#line 243
static __inline float3 make_float3(float x, float y, float z) 
#line 244
{ 
#line 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 246
} 
#line 248
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 249
{ 
#line 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 251
} 
#line 253
static __inline longlong1 make_longlong1(__int64 x) 
#line 254
{ 
#line 255
longlong1 t; (t.x) = x; return t; 
#line 256
} 
#line 258
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 259
{ 
#line 260
ulonglong1 t; (t.x) = x; return t; 
#line 261
} 
#line 263
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 264
{ 
#line 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 266
} 
#line 268
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 269
{ 
#line 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 271
} 
#line 273
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 274
{ 
#line 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 276
} 
#line 278
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 279
{ 
#line 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 281
} 
#line 283
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 284
{ 
#line 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 286
} 
#line 288
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 289
{ 
#line 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 291
} 
#line 293
static __inline double1 make_double1(double x) 
#line 294
{ 
#line 295
double1 t; (t.x) = x; return t; 
#line 296
} 
#line 298
static __inline double2 make_double2(double x, double y) 
#line 299
{ 
#line 300
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 301
} 
#line 303
static __inline double3 make_double3(double x, double y, double z) 
#line 304
{ 
#line 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 306
} 
#line 308
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 309
{ 
#line 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 311
} 
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\errno.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 23
__declspec(dllimport) int *__cdecl _errno(); 
#line 26
__declspec(dllimport) errno_t __cdecl _set_errno(int _Value); 
#line 27
__declspec(dllimport) errno_t __cdecl _get_errno(int * _Value); 
#line 29
__declspec(dllimport) unsigned long *__cdecl __doserrno(); 
#line 32
__declspec(dllimport) errno_t __cdecl _set_doserrno(unsigned long _Value); 
#line 33
__declspec(dllimport) errno_t __cdecl _get_doserrno(unsigned long * _Value); 
#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\errno.h"
}__pragma( pack ( pop )) 
#line 136
#pragma warning(pop)
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_string.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 21
[[nodiscard]] const void *__cdecl 
#line 22
memchr(const void * _Buf, int _Val, size_t _MaxCount); 
#line 28
[[nodiscard]] int __cdecl 
#line 29
memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 43 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_string.h"
void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); 
#line 50
void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); 
#line 63 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_string.h"
void *__cdecl memset(void * _Dst, int _Val, size_t _Size); 
#line 69
[[nodiscard]] const char *__cdecl 
#line 70
strchr(const char * _Str, int _Val); 
#line 75
[[nodiscard]] const char *__cdecl 
#line 76
strrchr(const char * _Str, int _Ch); 
#line 81
[[nodiscard]] const char *__cdecl 
#line 82
strstr(const char * _Str, const char * _SubStr); 
#line 87
[[nodiscard]] const __wchar_t *__cdecl 
#line 89
wcschr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 94
[[nodiscard]] const __wchar_t *__cdecl 
#line 95
wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); 
#line 100
[[nodiscard]] const __wchar_t *__cdecl 
#line 102
wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); 
#line 109
}__pragma( pack ( pop )) 
#line 113 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_string.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"
static __inline errno_t __cdecl memcpy_s(void *const 
#line 40
_Destination, const rsize_t 
#line 41
_DestinationSize, const void *const 
#line 42
_Source, const rsize_t 
#line 43
_SourceSize) 
#line 45
{ 
#line 46
if (_SourceSize == (0)) 
#line 47
{ 
#line 48
return 0; 
#line 49
}  
#line 51
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 52
if ((_Source == (0)) || (_DestinationSize < _SourceSize)) 
#line 53
{ 
#line 54
memset(_Destination, 0, _DestinationSize); 
#line 56
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 57
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 60
return 22; 
#line 61
}  
#line 62
memcpy(_Destination, _Source, _SourceSize); 
#line 63
return 0; 
#line 64
} 
#line 67
static __inline errno_t __cdecl memmove_s(void *const 
#line 68
_Destination, const rsize_t 
#line 69
_DestinationSize, const void *const 
#line 70
_Source, const rsize_t 
#line 71
_SourceSize) 
#line 73
{ 
#line 74
if (_SourceSize == (0)) 
#line 75
{ 
#line 76
return 0; 
#line 77
}  
#line 79
{ int _Expr_val = !(!(_Destination != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 80
{ int _Expr_val = !(!(_Source != (0))); if (!_Expr_val) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; }  } ; 
#line 81
{ int _Expr_val = !(!(_DestinationSize >= _SourceSize)); if (!_Expr_val) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; }  } ; 
#line 83
memmove(_Destination, _Source, _SourceSize); 
#line 84
return 0; 
#line 85
} 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memcpy_s.h"
}
#line 92
#pragma warning(pop)
__pragma( pack ( pop )) 
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memory.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 23
__pragma( pack ( push, 8 )) extern "C" {
#line 28
__declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 35
__declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memory.h"
__declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); 
#line 91
__declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); 
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memory.h"
extern "C++" inline void *__cdecl memchr(void *
#line 105
_Pv, int 
#line 106
_C, size_t 
#line 107
_N) 
#line 109
{ 
#line 110
const void *const _Pvc = _Pv; 
#line 111
return const_cast< void *>(memchr(_Pvc, _C, _N)); 
#line 112
} 
#line 118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memory.h"
}__pragma( pack ( pop )) 
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_memory.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 20
__pragma( pack ( push, 8 )) extern "C" {
#line 32
__declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 39
__declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source); 
#line 46
__declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 54
__declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Destination, rsize_t _SizeInWords, const __wchar_t * _Source, rsize_t _MaxCount); 
#line 62
__declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup(const __wchar_t * _String); 
#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscat_s ( _Destination, _Size, _Source ); }}
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 113
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcscpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source ) throw ( ) { return wcscpy_s ( _Destination, _Size, _Source ); }}
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Destination, const __wchar_t * _Source); 
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 132
__declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _String); 
#line 145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(const __wchar_t * _Source, size_t _MaxCount); 
#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
static __inline size_t __cdecl wcsnlen_s(const __wchar_t *
#line 162
_Source, size_t 
#line 163
_MaxCount) 
#line 165
{ 
#line 166
return (_Source == (0)) ? 0 : wcsnlen(_Source, _MaxCount); 
#line 167
} 
#line 171 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncat_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 193
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsncpy_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t const * _Source, size_t _Count ) throw ( ) { return wcsncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Destination, const __wchar_t * _Source, size_t _Count); 
#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _String, const __wchar_t * _Control); 
#line 215
__declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _String, const __wchar_t * _Control); 
#line 221
__declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _String, const __wchar_t * _Delimiter, __wchar_t ** _Context); 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
static __inline __wchar_t *__cdecl _wcstok(__wchar_t *const 
#line 240
_String, const __wchar_t *const 
#line 241
_Delimiter) 
#line 243
{ 
#line 244
return wcstok(_String, _Delimiter, 0); 
#line 245
} 
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
extern "C++" 
#line 252
__declspec(deprecated("wcstok has been changed to conform with the ISO C standard, adding an extra context parameter. To use the legacy Microsoft wcsto" "k, define _CRT_NON_CONFORMING_WCSTOK.")) inline __wchar_t *__cdecl 
#line 253
wcstok(__wchar_t *
#line 254
_String, const __wchar_t *
#line 255
_Delimiter) throw() 
#line 257
{ 
#line 258
return wcstok(_String, _Delimiter, 0); 
#line 259
} 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrorNumber); 
#line 273
__declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, int _ErrorNumber); 
#line 279
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], int _Error ) throw ( ) { return _wcserror_s ( _Buffer, _Size, _Error ); }}
#line 288 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _String); 
#line 292
__declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrorMessage); 
#line 298
extern "C++" {template < size_t _Size > inline errno_t __cdecl __wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _ErrorMessage ) throw ( ) { return __wcserror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 309
__declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 315
__declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 321
__declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 328
__declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value, size_t _MaxCount); 
#line 335
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsnset_s ( wchar_t ( & _Destination ) [ _Size ], wchar_t _Value, size_t _MaxCount ) throw ( ) { return _wcsnset_s ( _Destination, _Size, _Value, _MaxCount ); }}
#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _String); 
#line 354
__declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Destination, size_t _SizeInWords, __wchar_t _Value); 
#line 360
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsset_s ( wchar_t ( & _String ) [ _Size ], wchar_t _Value ) throw ( ) { return _wcsset_s ( _String, _Size, _Value ); }}
#line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _String, size_t _SizeInWords); 
#line 378
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcslwr_s ( _String, _Size ); }}
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); 
#line 389 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _String, size_t _SizeInWords, _locale_t _Locale); 
#line 395
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcslwr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcslwr_s_l ( _String, _Size, _Locale ); }}
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); 
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _String, size_t _Size); 
#line 414
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcsupr_s ( _String, _Size ); }}
#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _String, size_t _Size, _locale_t _Locale); 
#line 431
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wcsupr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcsupr_s_l ( _String, _Size, _Locale ); }}
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); 
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount); 
#line 454
__declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Destination, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 462
__declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 468
__declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 475
__declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 481
__declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, _locale_t _Locale); 
#line 488
__declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 495
__declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 503
__declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 510
__declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 525
extern "C++" {
#line 529
inline __wchar_t *__cdecl wcschr(__wchar_t *_String, __wchar_t _C) 
#line 530
{ 
#line 531
return const_cast< __wchar_t *>(wcschr(static_cast< const __wchar_t *>(_String), _C)); 
#line 532
} 
#line 535
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_String, const __wchar_t *_Control) 
#line 536
{ 
#line 537
return const_cast< __wchar_t *>(wcspbrk(static_cast< const __wchar_t *>(_String), _Control)); 
#line 538
} 
#line 541
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_String, __wchar_t _C) 
#line 542
{ 
#line 543
return const_cast< __wchar_t *>(wcsrchr(static_cast< const __wchar_t *>(_String), _C)); 
#line 544
} 
#line 548
inline __wchar_t *__cdecl wcsstr(__wchar_t *_String, const __wchar_t *_SubStr) 
#line 549
{ 
#line 550
return const_cast< __wchar_t *>(wcsstr(static_cast< const __wchar_t *>(_String), _SubStr)); 
#line 551
} 
#line 553
}
#line 570 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _String); 
#line 582 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 588
__declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _String1, const __wchar_t * _String2, size_t _MaxCount); 
#line 596
__declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _String, __wchar_t _Value, size_t _MaxCount); 
#line 604
__declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _String); 
#line 610
__declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _String, __wchar_t _Value); 
#line 617
__declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _String); 
#line 623
__declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _String); 
#line 628
__declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _String1, const __wchar_t * _String2); 
#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
}__pragma( pack ( pop )) 
#line 641 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstring.h"
#pragma warning(pop)
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 23
__pragma( pack ( push, 8 )) extern "C" {
#line 32
__declspec(dllimport) errno_t __cdecl strcpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 39
__declspec(dllimport) errno_t __cdecl strcat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source); 
#line 46
__declspec(dllimport) errno_t __cdecl strerror_s(char * _Buffer, size_t _SizeInBytes, int _ErrorNumber); 
#line 52
__declspec(dllimport) errno_t __cdecl strncat_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 60
__declspec(dllimport) errno_t __cdecl strncpy_s(char * _Destination, rsize_t _SizeInBytes, const char * _Source, rsize_t _MaxCount); 
#line 68
__declspec(dllimport) char *__cdecl strtok_s(char * _String, const char * _Delimiter, char ** _Context); 
#line 76 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); 
#line 83
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcat_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcat_s ( _Destination, _Size, _Source ); }}
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
char *__cdecl strcat(char * _Destination, const char * _Source); 
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
int __cdecl strcmp(const char * _Str1, const char * _Str2); 
#line 106
__declspec(dllimport) int __cdecl _strcmpi(const char * _String1, const char * _String2); 
#line 112
__declspec(dllimport) int __cdecl strcoll(const char * _String1, const char * _String2); 
#line 118
__declspec(dllimport) int __cdecl _strcoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 124
extern "C++" {template < size_t _Size > inline errno_t __cdecl strcpy_s ( char ( & _Destination ) [ _Size ], char const * _Source ) throw ( ) { return strcpy_s ( _Destination, _Size, _Source ); }}
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
char *__cdecl strcpy(char * _Destination, const char * _Source); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); 
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup(const char * _Source); 
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strerror(const char * _ErrorMessage); 
#line 164
__declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buffer, size_t _SizeInBytes, const char * _ErrorMessage); 
#line 170
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strerror_s ( char ( & _Buffer ) [ _Size ], char const * _ErrorMessage ) throw ( ) { return _strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strerror(int _ErrorMessage); 
#line 182
extern "C++" {template < size_t _Size > inline errno_t __cdecl strerror_s ( char ( & _Buffer ) [ _Size ], int _ErrorMessage ) throw ( ) { return strerror_s ( _Buffer, _Size, _ErrorMessage ); }}
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl _stricmp(const char * _String1, const char * _String2); 
#line 195
__declspec(dllimport) int __cdecl _stricoll(const char * _String1, const char * _String2); 
#line 201
__declspec(dllimport) int __cdecl _stricoll_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 208
__declspec(dllimport) int __cdecl _stricmp_l(const char * _String1, const char * _String2, _locale_t _Locale); 
#line 215
size_t __cdecl strlen(const char * _Str); 
#line 220
__declspec(dllimport) errno_t __cdecl _strlwr_s(char * _String, size_t _Size); 
#line 225
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strlwr_s ( _String, _Size ); }}
#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr(char * _String); 
#line 236 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 242
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strlwr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strlwr_s_l ( _String, _Size, _Locale ); }}
#line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); 
#line 255 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncat_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncat_s ( _Destination, _Size, _Source, _Count ); }}
#line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncat(char * _Destination, const char * _Source, size_t _Count); 
#line 271 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); 
#line 278
__declspec(dllimport) int __cdecl _strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 285
__declspec(dllimport) int __cdecl _strnicmp_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 293
__declspec(dllimport) int __cdecl _strnicoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 300
__declspec(dllimport) int __cdecl _strnicoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 308
__declspec(dllimport) int __cdecl _strncoll(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 315
__declspec(dllimport) int __cdecl _strncoll_l(const char * _String1, const char * _String2, size_t _MaxCount, _locale_t _Locale); 
#line 322
__declspec(dllimport) size_t __cdecl __strncnt(const char * _String, size_t _Count); 
#line 327
extern "C++" {template < size_t _Size > inline errno_t __cdecl strncpy_s ( char ( & _Destination ) [ _Size ], char const * _Source, size_t _Count ) throw ( ) { return strncpy_s ( _Destination, _Size, _Source, _Count ); }}
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strncpy(char * _Destination, const char * _Source, size_t _Count); 
#line 351 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(const char * _String, size_t _MaxCount); 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
static __inline size_t __cdecl strnlen_s(const char *
#line 368
_String, size_t 
#line 369
_MaxCount) 
#line 371
{ 
#line 372
return (_String == (0)) ? 0 : strnlen(_String, _MaxCount); 
#line 373
} 
#line 378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strnset_s(char * _String, size_t _SizeInBytes, int _Value, size_t _MaxCount); 
#line 385
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strnset_s ( char ( & _Destination ) [ _Size ], int _Value, size_t _Count ) throw ( ) { return _strnset_s ( _Destination, _Size, _Value, _Count ); }}
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strnset(char * _Destination, int _Value, size_t _Count); 
#line 401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); 
#line 406
__declspec(dllimport) char *__cdecl _strrev(char * _Str); 
#line 411
__declspec(dllimport) errno_t __cdecl _strset_s(char * _Destination, size_t _DestinationSize, int _Value); 
#line 417
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strset_s ( char ( & _Destination ) [ _Size ], int _Value ) throw ( ) { return _strset_s ( _Destination, _Size, _Value ); }}
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
char *__cdecl _strset(char * _Destination, int _Value); 
#line 430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); 
#line 436
__declspec(dllimport) char *__cdecl strtok(char * _String, const char * _Delimiter); 
#line 442
__declspec(dllimport) errno_t __cdecl _strupr_s(char * _String, size_t _Size); 
#line 447
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strupr_s ( _String, _Size ); }}
#line 452 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr(char * _String); 
#line 458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _String, size_t _Size, _locale_t _Locale); 
#line 464
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strupr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strupr_s_l ( _String, _Size, _Locale ); }}
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); 
#line 479 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strxfrm(char * _Destination, const char * _Source, size_t _MaxCount); 
#line 487
__declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Destination, const char * _Source, size_t _MaxCount, _locale_t _Locale); 
#line 497
extern "C++" {
#line 500
inline char *__cdecl strchr(char *const _String, const int _Ch) 
#line 501
{ 
#line 502
return const_cast< char *>(strchr(static_cast< const char *>(_String), _Ch)); 
#line 503
} 
#line 506
inline char *__cdecl strpbrk(char *const _String, const char *const _Control) 
#line 507
{ 
#line 508
return const_cast< char *>(strpbrk(static_cast< const char *>(_String), _Control)); 
#line 509
} 
#line 512
inline char *__cdecl strrchr(char *const _String, const int _Ch) 
#line 513
{ 
#line 514
return const_cast< char *>(strrchr(static_cast< const char *>(_String), _Ch)); 
#line 515
} 
#line 518
inline char *__cdecl strstr(char *const _String, const char *const _SubString) 
#line 519
{ 
#line 520
return const_cast< char *>(strstr(static_cast< const char *>(_String), _SubString)); 
#line 521
} 
#line 522
}
#line 532 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
__declspec(dllimport) char *__cdecl strdup(const char * _String); 
#line 539
__declspec(dllimport) int __cdecl strcmpi(const char * _String1, const char * _String2); 
#line 545
__declspec(dllimport) int __cdecl stricmp(const char * _String1, const char * _String2); 
#line 551
__declspec(dllimport) char *__cdecl strlwr(char * _String); 
#line 556
__declspec(dllimport) int __cdecl strnicmp(const char * _String1, const char * _String2, size_t _MaxCount); 
#line 563
__declspec(dllimport) char *__cdecl strnset(char * _String, int _Value, size_t _MaxCount); 
#line 570
__declspec(dllimport) char *__cdecl strrev(char * _String); 
#line 575
char *__cdecl strset(char * _String, int _Value); 
#line 580
__declspec(dllimport) char *__cdecl strupr(char * _String); 
#line 588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\string.h"
}__pragma( pack ( pop )) 
#line 590
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 26
struct tm { 
#line 28
int tm_sec; 
#line 29
int tm_min; 
#line 30
int tm_hour; 
#line 31
int tm_mday; 
#line 32
int tm_mon; 
#line 33
int tm_year; 
#line 34
int tm_wday; 
#line 35
int tm_yday; 
#line 36
int tm_isdst; 
#line 37
}; 
#line 48
__declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); 
#line 54
__declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buffer, size_t _SizeInWords, const tm * _Tm); 
#line 60
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wasctime_s ( wchar_t ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return _wasctime_s ( _Buffer, _Size, _Time ); }}
#line 69 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); 
#line 78
__declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); 
#line 88
__declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); 
#line 93
__declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time32_t * _Time); 
#line 99
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime32_s ( wchar_t ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _wctime32_s ( _Buffer, _Size, _Time ); }}
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); 
#line 113
__declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buffer, size_t _SizeInWords, const __time64_t * _Time); 
#line 118
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wctime64_s ( wchar_t ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _wctime64_s ( _Buffer, _Size, _Time ); }}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 130
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrdate_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrdate_s ( _Buffer, _Size ); }}
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); 
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buffer, size_t _SizeInWords); 
#line 146
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wstrtime_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrtime_s ( _Buffer, _Size ); }}
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
__declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); 
#line 186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
static __inline __wchar_t *__cdecl _wctime(const time_t *const 
#line 187
_Time) 
#line 188
{ 
#line 189
return _wctime64(_Time); 
#line 190
} 
#line 193
static __inline errno_t __cdecl _wctime_s(__wchar_t *const 
#line 194
_Buffer, const size_t 
#line 195
_SizeInWords, const time_t *const 
#line 196
_Time) 
#line 198
{ 
#line 199
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 200
} 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wtime.h"
}__pragma( pack ( pop )) 
#line 207
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
typedef long clock_t; 
#line 32
struct _timespec32 { 
#line 34
__time32_t tv_sec; 
#line 35
long tv_nsec; 
#line 36
}; 
#line 38
struct _timespec64 { 
#line 40
__time64_t tv_sec; 
#line 41
long tv_nsec; 
#line 42
}; 
#line 45
struct timespec { 
#line 47
time_t tv_sec; 
#line 48
long tv_nsec; 
#line 49
}; 
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) int *__cdecl __daylight(); 
#line 74
__declspec(dllimport) long *__cdecl __dstbias(); 
#line 80
__declspec(dllimport) long *__cdecl __timezone(); 
#line 86
__declspec(dllimport) char **__cdecl __tzname(); 
#line 91
__declspec(dllimport) errno_t __cdecl _get_daylight(int * _Daylight); 
#line 96
__declspec(dllimport) errno_t __cdecl _get_dstbias(long * _DaylightSavingsBias); 
#line 101
__declspec(dllimport) errno_t __cdecl _get_timezone(long * _TimeZone); 
#line 106
__declspec(dllimport) errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); 
#line 123
__declspec(dllimport) char *__cdecl asctime(const tm * _Tm); 
#line 130
__declspec(dllimport) errno_t __cdecl asctime_s(char * _Buffer, size_t _SizeInBytes, const tm * _Tm); 
#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
extern "C++" {template < size_t _Size > inline errno_t __cdecl asctime_s ( char ( & _Buffer ) [ _Size ], struct tm const * _Time ) throw ( ) { return asctime_s ( _Buffer, _Size, _Time ); }}
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) clock_t __cdecl clock(); 
#line 149
__declspec(dllimport) char *__cdecl _ctime32(const __time32_t * _Time); 
#line 154
__declspec(dllimport) errno_t __cdecl _ctime32_s(char * _Buffer, size_t _SizeInBytes, const __time32_t * _Time); 
#line 160
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime32_s ( char ( & _Buffer ) [ _Size ], __time32_t const * _Time ) throw ( ) { return _ctime32_s ( _Buffer, _Size, _Time ); }}
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _ctime64(const __time64_t * _Time); 
#line 174
__declspec(dllimport) errno_t __cdecl _ctime64_s(char * _Buffer, size_t _SizeInBytes, const __time64_t * _Time); 
#line 180
extern "C++" {template < size_t _Size > inline errno_t __cdecl _ctime64_s ( char ( & _Buffer ) [ _Size ], __time64_t const * _Time ) throw ( ) { return _ctime64_s ( _Buffer, _Size, _Time ); }}
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); 
#line 193
__declspec(dllimport) double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); 
#line 200
__declspec(dllimport) tm *__cdecl _gmtime32(const __time32_t * _Time); 
#line 205
__declspec(dllimport) errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 212
__declspec(dllimport) tm *__cdecl _gmtime64(const __time64_t * _Time); 
#line 217
__declspec(dllimport) errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 224
__declspec(dllimport) tm *__cdecl _localtime32(const __time32_t * _Time); 
#line 229
__declspec(dllimport) errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); 
#line 236
__declspec(dllimport) tm *__cdecl _localtime64(const __time64_t * _Time); 
#line 241
__declspec(dllimport) errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); 
#line 247
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(tm * _Tm); 
#line 252
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(tm * _Tm); 
#line 257
__declspec(dllimport) __time32_t __cdecl _mktime32(tm * _Tm); 
#line 262
__declspec(dllimport) __time64_t __cdecl _mktime64(tm * _Tm); 
#line 268
__declspec(dllimport) size_t __cdecl strftime(char * _Buffer, size_t _SizeInBytes, const char * _Format, const tm * _Tm); 
#line 277
__declspec(dllimport) size_t __cdecl _strftime_l(char * _Buffer, size_t _MaxSize, const char * _Format, const tm * _Tm, _locale_t _Locale); 
#line 286
__declspec(dllimport) errno_t __cdecl _strdate_s(char * _Buffer, size_t _SizeInBytes); 
#line 291
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strdate_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strdate_s ( _Buffer, _Size ); }}
#line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strdate(char * _Buffer); 
#line 302 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) errno_t __cdecl _strtime_s(char * _Buffer, size_t _SizeInBytes); 
#line 307
extern "C++" {template < size_t _Size > inline errno_t __cdecl _strtime_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strtime_s ( _Buffer, _Size ); }}
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) char *__cdecl _strtime(char * _Buffer); 
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) __time32_t __cdecl _time32(__time32_t * _Time); 
#line 321
__declspec(dllimport) __time64_t __cdecl _time64(__time64_t * _Time); 
#line 327
__declspec(dllimport) int __cdecl _timespec32_get(_timespec32 * _Ts, int _Base); 
#line 334
__declspec(dllimport) int __cdecl _timespec64_get(_timespec64 * _Ts, int _Base); 
#line 348
__declspec(dllimport) void __cdecl _tzset(); 
#line 351
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) 
#line 352
__declspec(dllimport) unsigned __cdecl _getsystime(tm * _Tm); 
#line 356
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) 
#line 357
__declspec(dllimport) unsigned __cdecl _setsystime(tm * _Tm, unsigned _Milliseconds); 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
static __inline char *__cdecl ctime(const time_t *const 
#line 502
_Time) 
#line 504
{ 
#line 505
return _ctime64(_Time); 
#line 506
} 
#line 509
static __inline double __cdecl difftime(const time_t 
#line 510
_Time1, const time_t 
#line 511
_Time2) 
#line 513
{ 
#line 514
return _difftime64(_Time1, _Time2); 
#line 515
} 
#line 518
static __inline tm *__cdecl gmtime(const time_t *const 
#line 519
_Time) 
#line 520
{ 
#line 521
return _gmtime64(_Time); 
#line 522
} 
#line 525
static __inline tm *__cdecl localtime(const time_t *const 
#line 526
_Time) 
#line 528
{ 
#line 529
return _localtime64(_Time); 
#line 530
} 
#line 533
static __inline time_t __cdecl _mkgmtime(tm *const 
#line 534
_Tm) 
#line 536
{ 
#line 537
return _mkgmtime64(_Tm); 
#line 538
} 
#line 541
static __inline time_t __cdecl mktime(tm *const 
#line 542
_Tm) 
#line 544
{ 
#line 545
return _mktime64(_Tm); 
#line 546
} 
#line 548
static __inline time_t __cdecl time(time_t *const 
#line 549
_Time) 
#line 551
{ 
#line 552
return _time64(_Time); 
#line 553
} 
#line 556
static __inline int __cdecl timespec_get(timespec *const 
#line 557
_Ts, const int 
#line 558
_Base) 
#line 560
{ 
#line 561
return _timespec64_get((_timespec64 *)_Ts, _Base); 
#line 562
} 
#line 566
static __inline errno_t __cdecl ctime_s(char *const 
#line 567
_Buffer, const size_t 
#line 568
_SizeInBytes, const time_t *const 
#line 569
_Time) 
#line 571
{ 
#line 572
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 573
} 
#line 603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
static __inline errno_t __cdecl gmtime_s(tm *const 
#line 604
_Tm, const time_t *const 
#line 605
_Time) 
#line 607
{ 
#line 608
return _gmtime64_s(_Tm, _Time); 
#line 609
} 
#line 612
static __inline errno_t __cdecl localtime_s(tm *const 
#line 613
_Tm, const time_t *const 
#line 614
_Time) 
#line 616
{ 
#line 617
return _localtime64_s(_Tm, _Time); 
#line 618
} 
#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
__declspec(dllimport) void __cdecl tzset(); 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\time.h"
}__pragma( pack ( pop )) 
#line 647
#pragma warning(pop)
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt/common_functions.h"
extern "C" {
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt/common_functions.h"
__declspec(dllimport) extern clock_t __cdecl clock(); 
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt/common_functions.h"
extern void *__cdecl memset(void *, int, size_t); 
#line 97
extern void *__cdecl memcpy(void *, const void *, size_t); 
#line 99
}
#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern "C" {
#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern int __cdecl abs(int a); 
#line 230
extern long __cdecl labs(long a); 
#line 238
extern __int64 llabs(__int64 a); 
#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double __cdecl fabs(double x); 
#line 331
extern __inline float fabsf(float x); 
#line 341 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline int min(const int a, const int b); 
#line 348
extern inline unsigned umin(const unsigned a, const unsigned b); 
#line 355
extern inline __int64 llmin(const __int64 a, const __int64 b); 
#line 362
extern inline unsigned __int64 ullmin(const unsigned __int64 a, const unsigned __int64 b); 
#line 385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fminf(float x, float y); 
#line 405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmin(double x, double y); 
#line 416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline int max(const int a, const int b); 
#line 424
extern inline unsigned umax(const unsigned a, const unsigned b); 
#line 431
extern inline __int64 llmax(const __int64 a, const __int64 b); 
#line 438
extern inline unsigned __int64 ullmax(const unsigned __int64 a, const unsigned __int64 b); 
#line 461 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaxf(float x, float y); 
#line 481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fmax(double, double); 
#line 523 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double __cdecl sin(double x); 
#line 556
extern double __cdecl cos(double x); 
#line 575 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern void sincos(double x, double * sptr, double * cptr); 
#line 591
extern void sincosf(float x, float * sptr, float * cptr); 
#line 636 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double __cdecl tan(double x); 
#line 705
extern double __cdecl sqrt(double x); 
#line 777 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double rsqrt(double x); 
#line 847
extern float rsqrtf(float x); 
#line 905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl log2(double x); 
#line 970 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl exp2(double x); 
#line 1035 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl exp2f(float x); 
#line 1100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double exp10(double x); 
#line 1163
extern float exp10f(float x); 
#line 1258 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl expm1(double x); 
#line 1350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl expm1f(float x); 
#line 1406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl log2f(float x); 
#line 1458 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double __cdecl log10(double x); 
#line 1528
extern double __cdecl log(double x); 
#line 1626 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl log1p(double x); 
#line 1725 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl log1pf(float x); 
#line 1787 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl floor(double x); 
#line 1866
extern double __cdecl exp(double x); 
#line 1907
extern double __cdecl cosh(double x); 
#line 1957
extern double __cdecl sinh(double x); 
#line 2007
extern double __cdecl tanh(double x); 
#line 2064 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl acosh(double x); 
#line 2122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl acoshf(float x); 
#line 2175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl asinh(double x); 
#line 2228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl asinhf(float x); 
#line 2282 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl atanh(double x); 
#line 2336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl atanhf(float x); 
#line 2383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl ldexp(double x, int exp); 
#line 2429
extern __inline float ldexpf(float x, int exp); 
#line 2483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl logb(double x); 
#line 2538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl logbf(float x); 
#line 2578 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogb(double x); 
#line 2618 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern int __cdecl ilogbf(float x); 
#line 2694 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbn(double x, int n); 
#line 2770 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalbnf(float x, int n); 
#line 2846 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl scalbln(double x, long n); 
#line 2922 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl scalblnf(float x, long n); 
#line 2997 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl frexp(double x, int * nptr); 
#line 3071
extern __inline float frexpf(float x, int * nptr); 
#line 3125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl round(double x); 
#line 3180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl roundf(float x); 
#line 3198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lround(double x); 
#line 3216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lroundf(float x); 
#line 3234 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llround(double x); 
#line 3252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llroundf(float x); 
#line 3380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl rintf(float x); 
#line 3397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrint(double x); 
#line 3414 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern long __cdecl lrintf(float x); 
#line 3431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrint(double x); 
#line 3448 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern __int64 __cdecl llrintf(float x); 
#line 3501 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl nearbyint(double x); 
#line 3554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl nearbyintf(float x); 
#line 3614 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl ceil(double x); 
#line 3666 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl trunc(double x); 
#line 3719 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl truncf(float x); 
#line 3745 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fdim(double x, double y); 
#line 3771 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fdimf(float x, float y); 
#line 4069 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double __cdecl atan2(double y, double x); 
#line 4140
extern double __cdecl atan(double x); 
#line 4163
extern double __cdecl acos(double x); 
#line 4214
extern double __cdecl asin(double x); 
#line 4279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl hypot(double x, double y); 
#line 4403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline float __cdecl hypotf(float x, float y); 
#line 5193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl cbrt(double x); 
#line 5279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl cbrtf(float x); 
#line 5332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double rcbrt(double x); 
#line 5382
extern float rcbrtf(float x); 
#line 5442
extern double sinpi(double x); 
#line 5502
extern float sinpif(float x); 
#line 5554
extern double cospi(double x); 
#line 5606
extern float cospif(float x); 
#line 5636
extern void sincospi(double x, double * sptr, double * cptr); 
#line 5666
extern void sincospif(float x, float * sptr, float * cptr); 
#line 5999 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double __cdecl pow(double x, double y); 
#line 6055
__declspec(dllimport) extern double __cdecl modf(double x, double * iptr); 
#line 6114
extern double __cdecl fmod(double x, double y); 
#line 6212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl remainder(double x, double y); 
#line 6311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl remainderf(float x, float y); 
#line 6383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl remquo(double x, double y, int * quo); 
#line 6455 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl remquof(float x, float y, int * quo); 
#line 6494 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl j0(double x); 
#line 6536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern float j0f(float x); 
#line 6605 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl j1(double x); 
#line 6674 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern float j1f(float x); 
#line 6717 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl jn(int n, double x); 
#line 6760 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern float jnf(int n, float x); 
#line 6821 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl y0(double x); 
#line 6882 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern float y0f(float x); 
#line 6943 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl y1(double x); 
#line 7004 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern float y1f(float x); 
#line 7067 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl yn(int n, double x); 
#line 7130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern float ynf(int n, float x); 
#line 7321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl erf(double x); 
#line 7403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl erff(float x); 
#line 7473 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double erfinv(double x); 
#line 7538
extern float erfinvf(float x); 
#line 7579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl erfc(double x); 
#line 7617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl erfcf(float x); 
#line 7734 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl lgamma(double x); 
#line 7794 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern double erfcinv(double x); 
#line 7849
extern float erfcinvf(float x); 
#line 7917
extern double normcdfinv(double x); 
#line 7985
extern float normcdfinvf(float x); 
#line 8028
extern double normcdf(double x); 
#line 8071
extern float normcdff(float x); 
#line 8135
extern double erfcx(double x); 
#line 8199
extern float erfcxf(float x); 
#line 8320 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl lgammaf(float x); 
#line 8418 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl tgamma(double x); 
#line 8516 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl tgammaf(float x); 
#line 8529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl copysign(double x, double y); 
#line 8542 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl copysignf(float x, float y); 
#line 8561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl nextafter(double x, double y); 
#line 8580 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl nextafterf(float x, float y); 
#line 8596 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl nan(const char * tagp); 
#line 8612 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl nanf(const char * tagp); 
#line 8617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern int __isinff(float); 
#line 8618
extern int __isnanf(float); 
#line 8628 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern int __finite(double); 
#line 8629
extern int __finitef(float); 
#line 8630
extern int __signbit(double); 
#line 8631
extern int __isnan(double); 
#line 8632
extern int __isinf(double); 
#line 8635 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern int __signbitf(float); 
#line 8796 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern double __cdecl fma(double x, double y, double z); 
#line 8954 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl fmaf(float x, float y, float z); 
#line 8963 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern int __signbitl(long double); 
#line 8969 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern int __finitel(long double); 
#line 8970
extern int __isinfl(long double); 
#line 8971
extern int __isnanl(long double); 
#line 8975 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
__declspec(dllimport) extern float __cdecl acosf(float); 
#line 8976
__declspec(dllimport) extern float __cdecl asinf(float); 
#line 8977
__declspec(dllimport) extern float __cdecl atanf(float); 
#line 8978
__declspec(dllimport) extern float __cdecl atan2f(float, float); 
#line 8979
__declspec(dllimport) extern float __cdecl cosf(float); 
#line 8980
__declspec(dllimport) extern float __cdecl sinf(float); 
#line 8981
__declspec(dllimport) extern float __cdecl tanf(float); 
#line 8982
__declspec(dllimport) extern float __cdecl coshf(float); 
#line 8983
__declspec(dllimport) extern float __cdecl sinhf(float); 
#line 8984
__declspec(dllimport) extern float __cdecl tanhf(float); 
#line 8985
__declspec(dllimport) extern float __cdecl expf(float); 
#line 8986
__declspec(dllimport) extern float __cdecl logf(float); 
#line 8987
__declspec(dllimport) extern float __cdecl log10f(float); 
#line 8988
__declspec(dllimport) extern float __cdecl modff(float, float *); 
#line 8989
__declspec(dllimport) extern float __cdecl powf(float, float); 
#line 8990
__declspec(dllimport) extern float __cdecl sqrtf(float); 
#line 8991
__declspec(dllimport) extern float __cdecl ceilf(float); 
#line 8992
__declspec(dllimport) extern float __cdecl floorf(float); 
#line 8993
__declspec(dllimport) extern float __cdecl fmodf(float, float); 
#line 10547 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
}
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 23
struct _exception { 
#line 25
int type; 
#line 26
char *name; 
#line 27
double arg1; 
#line 28
double arg2; 
#line 29
double retval; 
#line 30
}; 
#line 37
struct _complex { 
#line 39
double x, y; 
#line 40
}; 
#line 59 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
typedef float float_t; 
#line 60
typedef double double_t; 
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
extern const double _HUGE; 
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
void __cdecl _fperrraise(int _Except); 
#line 177
__declspec(dllimport) short __cdecl _dclass(double _X); 
#line 178
__declspec(dllimport) short __cdecl _ldclass(long double _X); 
#line 179
__declspec(dllimport) short __cdecl _fdclass(float _X); 
#line 181
__declspec(dllimport) int __cdecl _dsign(double _X); 
#line 182
__declspec(dllimport) int __cdecl _ldsign(long double _X); 
#line 183
__declspec(dllimport) int __cdecl _fdsign(float _X); 
#line 185
__declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y); 
#line 186
__declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y); 
#line 187
__declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y); 
#line 189
__declspec(dllimport) short __cdecl _dtest(double * _Px); 
#line 190
__declspec(dllimport) short __cdecl _ldtest(long double * _Px); 
#line 191
__declspec(dllimport) short __cdecl _fdtest(float * _Px); 
#line 193
__declspec(dllimport) short __cdecl _d_int(double * _Px, short _Xexp); 
#line 194
__declspec(dllimport) short __cdecl _ld_int(long double * _Px, short _Xexp); 
#line 195
__declspec(dllimport) short __cdecl _fd_int(float * _Px, short _Xexp); 
#line 197
__declspec(dllimport) short __cdecl _dscale(double * _Px, long _Lexp); 
#line 198
__declspec(dllimport) short __cdecl _ldscale(long double * _Px, long _Lexp); 
#line 199
__declspec(dllimport) short __cdecl _fdscale(float * _Px, long _Lexp); 
#line 201
__declspec(dllimport) short __cdecl _dunscale(short * _Pex, double * _Px); 
#line 202
__declspec(dllimport) short __cdecl _ldunscale(short * _Pex, long double * _Px); 
#line 203
__declspec(dllimport) short __cdecl _fdunscale(short * _Pex, float * _Px); 
#line 205
__declspec(dllimport) short __cdecl _dexp(double * _Px, double _Y, long _Eoff); 
#line 206
__declspec(dllimport) short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); 
#line 207
__declspec(dllimport) short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); 
#line 209
__declspec(dllimport) short __cdecl _dnorm(unsigned short * _Ps); 
#line 210
__declspec(dllimport) short __cdecl _fdnorm(unsigned short * _Ps); 
#line 212
__declspec(dllimport) double __cdecl _dpoly(double _X, const double * _Tab, int _N); 
#line 213
__declspec(dllimport) long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); 
#line 214
__declspec(dllimport) float __cdecl _fdpoly(float _X, const float * _Tab, int _N); 
#line 216
__declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag); 
#line 217
__declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag); 
#line 218
__declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag); 
#line 220
__declspec(dllimport) double __cdecl _dsin(double _X, unsigned _Qoff); 
#line 221
__declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned _Qoff); 
#line 222
__declspec(dllimport) float __cdecl _fdsin(float _X, unsigned _Qoff); 
#line 229
typedef 
#line 226
union { 
#line 227
unsigned short _Sh[4]; 
#line 228
double _Val; 
#line 229
} _double_val; 
#line 236
typedef 
#line 233
union { 
#line 234
unsigned short _Sh[2]; 
#line 235
float _Val; 
#line 236
} _float_val; 
#line 243
typedef 
#line 240
union { 
#line 241
unsigned short _Sh[4]; 
#line 242
long double _Val; 
#line 243
} _ldouble_val; 
#line 251
typedef 
#line 246
union { 
#line 247
unsigned short _Word[4]; 
#line 248
float _Float; 
#line 249
double _Double; 
#line 250
long double _Long_double; 
#line 251
} _float_const; 
#line 253
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 254
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 255
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 257
extern const _float_const _Eps_C, _Rteps_C; 
#line 258
extern const _float_const _FEps_C, _FRteps_C; 
#line 259
extern const _float_const _LEps_C, _LRteps_C; 
#line 261
extern const double _Zero_C, _Xbig_C; 
#line 262
extern const float _FZero_C, _FXbig_C; 
#line 263
extern const long double _LZero_C, _LXbig_C; 
#line 292
extern "C++" {
#line 294
inline int fpclassify(float _X) throw() 
#line 295
{ 
#line 296
return _fdtest(&_X); 
#line 297
} 
#line 299
inline int fpclassify(double _X) throw() 
#line 300
{ 
#line 301
return _dtest(&_X); 
#line 302
} 
#line 304
inline int fpclassify(long double _X) throw() 
#line 305
{ 
#line 306
return _ldtest(&_X); 
#line 307
} 
#line 309
inline bool signbit(float _X) throw() 
#line 310
{ 
#line 311
return _fdsign(_X) != 0; 
#line 312
} 
#line 314
inline bool signbit(double _X) throw() 
#line 315
{ 
#line 316
return _dsign(_X) != 0; 
#line 317
} 
#line 319
inline bool signbit(long double _X) throw() 
#line 320
{ 
#line 321
return _ldsign(_X) != 0; 
#line 322
} 
#line 324
inline int _fpcomp(float _X, float _Y) throw() 
#line 325
{ 
#line 326
return _fdpcomp(_X, _Y); 
#line 327
} 
#line 329
inline int _fpcomp(double _X, double _Y) throw() 
#line 330
{ 
#line 331
return _dpcomp(_X, _Y); 
#line 332
} 
#line 334
inline int _fpcomp(long double _X, long double _Y) throw() 
#line 335
{ 
#line 336
return _ldpcomp(_X, _Y); 
#line 337
} 
#line 339
template< class _Trc, class _Tre> struct _Combined_type { 
#line 341
typedef float _Type; 
#line 342
}; 
#line 344
template<> struct _Combined_type< float, double>  { 
#line 346
typedef double _Type; 
#line 347
}; 
#line 349
template<> struct _Combined_type< float, long double>  { 
#line 351
typedef long double _Type; 
#line 352
}; 
#line 354
template< class _Ty, class _T2> struct _Real_widened { 
#line 356
typedef long double _Type; 
#line 357
}; 
#line 359
template<> struct _Real_widened< float, float>  { 
#line 361
typedef float _Type; 
#line 362
}; 
#line 364
template<> struct _Real_widened< float, double>  { 
#line 366
typedef double _Type; 
#line 367
}; 
#line 369
template<> struct _Real_widened< double, float>  { 
#line 371
typedef double _Type; 
#line 372
}; 
#line 374
template<> struct _Real_widened< double, double>  { 
#line 376
typedef double _Type; 
#line 377
}; 
#line 379
template< class _Ty> struct _Real_type { 
#line 381
typedef double _Type; 
#line 382
}; 
#line 384
template<> struct _Real_type< float>  { 
#line 386
typedef float _Type; 
#line 387
}; 
#line 389
template<> struct _Real_type< long double>  { 
#line 391
typedef long double _Type; 
#line 392
}; 
#line 394
template < class _T1, class _T2 >
      inline int _fpcomp ( _T1 _X, _T2 _Y ) throw ( )
    {
        typedef typename _Combined_type < float,
            typename _Real_widened <
            typename _Real_type < _T1 > :: _Type,
            typename _Real_type < _T2 > :: _Type > :: _Type > :: _Type _Tw;
        return _fpcomp ( ( _Tw ) _X, ( _Tw ) _Y );
    }
#line 404
template < class _Ty >
      inline bool isfinite ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) <= 0;
    }
#line 410
template < class _Ty >
      inline bool isinf ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 1;
    }
#line 416
template < class _Ty >
      inline bool isnan ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == 2;
    }
#line 422
template < class _Ty >
      inline bool isnormal ( _Ty _X ) throw ( )
    {
        return fpclassify ( _X ) == ( - 1 );
    }
#line 428
template < class _Ty1, class _Ty2 >
      inline bool isgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 4 ) != 0;
    }
#line 434
template < class _Ty1, class _Ty2 >
      inline bool isgreaterequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 2 | 4 ) ) != 0;
    }
#line 440
template < class _Ty1, class _Ty2 >
      inline bool isless ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & 1 ) != 0;
    }
#line 446
template < class _Ty1, class _Ty2 >
      inline bool islessequal ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 2 ) ) != 0;
    }
#line 452
template < class _Ty1, class _Ty2 >
      inline bool islessgreater ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return ( _fpcomp ( _X, _Y ) & ( 1 | 4 ) ) != 0;
    }
#line 458
template < class _Ty1, class _Ty2 >
      inline bool isunordered ( _Ty1 _X, _Ty2 _Y ) throw ( )
    {
        return _fpcomp ( _X, _Y ) == 0;
    }
#line 463
}
#line 470 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
int __cdecl abs(int _X); 
#line 471
long __cdecl labs(long _X); 
#line 472
__int64 __cdecl llabs(__int64 _X); 
#line 474
double __cdecl acos(double _X); 
#line 475
double __cdecl asin(double _X); 
#line 476
double __cdecl atan(double _X); 
#line 477
double __cdecl atan2(double _Y, double _X); 
#line 479
double __cdecl cos(double _X); 
#line 480
double __cdecl cosh(double _X); 
#line 481
double __cdecl exp(double _X); 
#line 482
double __cdecl fabs(double _X); 
#line 483
double __cdecl fmod(double _X, double _Y); 
#line 484
double __cdecl log(double _X); 
#line 485
double __cdecl log10(double _X); 
#line 486
double __cdecl pow(double _X, double _Y); 
#line 487
double __cdecl sin(double _X); 
#line 488
double __cdecl sinh(double _X); 
#line 489
double __cdecl sqrt(double _X); 
#line 490
double __cdecl tan(double _X); 
#line 491
double __cdecl tanh(double _X); 
#line 493
__declspec(dllimport) double __cdecl acosh(double _X); 
#line 494
__declspec(dllimport) double __cdecl asinh(double _X); 
#line 495
__declspec(dllimport) double __cdecl atanh(double _X); 
#line 496
__declspec(dllimport) double __cdecl atof(const char * _String); 
#line 497
__declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); 
#line 498
__declspec(dllimport) double __cdecl _cabs(_complex _Complex_value); 
#line 499
__declspec(dllimport) double __cdecl cbrt(double _X); 
#line 500
__declspec(dllimport) double __cdecl ceil(double _X); 
#line 501
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 502
__declspec(dllimport) double __cdecl copysign(double _Number, double _Sign); 
#line 503
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 504
__declspec(dllimport) double __cdecl erf(double _X); 
#line 505
__declspec(dllimport) double __cdecl erfc(double _X); 
#line 506
__declspec(dllimport) double __cdecl exp2(double _X); 
#line 507
__declspec(dllimport) double __cdecl expm1(double _X); 
#line 508
__declspec(dllimport) double __cdecl fdim(double _X, double _Y); 
#line 509
__declspec(dllimport) double __cdecl floor(double _X); 
#line 510
__declspec(dllimport) double __cdecl fma(double _X, double _Y, double _Z); 
#line 511
__declspec(dllimport) double __cdecl fmax(double _X, double _Y); 
#line 512
__declspec(dllimport) double __cdecl fmin(double _X, double _Y); 
#line 513
__declspec(dllimport) double __cdecl frexp(double _X, int * _Y); 
#line 514
__declspec(dllimport) double __cdecl hypot(double _X, double _Y); 
#line 515
__declspec(dllimport) double __cdecl _hypot(double _X, double _Y); 
#line 516
__declspec(dllimport) int __cdecl ilogb(double _X); 
#line 517
__declspec(dllimport) double __cdecl ldexp(double _X, int _Y); 
#line 518
__declspec(dllimport) double __cdecl lgamma(double _X); 
#line 519
__declspec(dllimport) __int64 __cdecl llrint(double _X); 
#line 520
__declspec(dllimport) __int64 __cdecl llround(double _X); 
#line 521
__declspec(dllimport) double __cdecl log1p(double _X); 
#line 522
__declspec(dllimport) double __cdecl log2(double _X); 
#line 523
__declspec(dllimport) double __cdecl logb(double _X); 
#line 524
__declspec(dllimport) long __cdecl lrint(double _X); 
#line 525
__declspec(dllimport) long __cdecl lround(double _X); 
#line 527
int __cdecl _matherr(_exception * _Except); 
#line 529
__declspec(dllimport) double __cdecl modf(double _X, double * _Y); 
#line 530
__declspec(dllimport) double __cdecl nan(const char * _X); 
#line 531
__declspec(dllimport) double __cdecl nearbyint(double _X); 
#line 532
__declspec(dllimport) double __cdecl nextafter(double _X, double _Y); 
#line 533
__declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y); 
#line 534
__declspec(dllimport) double __cdecl remainder(double _X, double _Y); 
#line 535
__declspec(dllimport) double __cdecl remquo(double _X, double _Y, int * _Z); 
#line 536
__declspec(dllimport) double __cdecl rint(double _X); 
#line 537
__declspec(dllimport) double __cdecl round(double _X); 
#line 538
__declspec(dllimport) double __cdecl scalbln(double _X, long _Y); 
#line 539
__declspec(dllimport) double __cdecl scalbn(double _X, int _Y); 
#line 540
__declspec(dllimport) double __cdecl tgamma(double _X); 
#line 541
__declspec(dllimport) double __cdecl trunc(double _X); 
#line 542
__declspec(dllimport) double __cdecl _j0(double _X); 
#line 543
__declspec(dllimport) double __cdecl _j1(double _X); 
#line 544
__declspec(dllimport) double __cdecl _jn(int _X, double _Y); 
#line 545
__declspec(dllimport) double __cdecl _y0(double _X); 
#line 546
__declspec(dllimport) double __cdecl _y1(double _X); 
#line 547
__declspec(dllimport) double __cdecl _yn(int _X, double _Y); 
#line 549
__declspec(dllimport) float __cdecl acoshf(float _X); 
#line 550
__declspec(dllimport) float __cdecl asinhf(float _X); 
#line 551
__declspec(dllimport) float __cdecl atanhf(float _X); 
#line 552
__declspec(dllimport) float __cdecl cbrtf(float _X); 
#line 553
__declspec(dllimport) float __cdecl _chgsignf(float _X); 
#line 554
__declspec(dllimport) float __cdecl copysignf(float _Number, float _Sign); 
#line 555
__declspec(dllimport) float __cdecl _copysignf(float _Number, float _Sign); 
#line 556
__declspec(dllimport) float __cdecl erff(float _X); 
#line 557
__declspec(dllimport) float __cdecl erfcf(float _X); 
#line 558
__declspec(dllimport) float __cdecl expm1f(float _X); 
#line 559
__declspec(dllimport) float __cdecl exp2f(float _X); 
#line 560
__declspec(dllimport) float __cdecl fdimf(float _X, float _Y); 
#line 561
__declspec(dllimport) float __cdecl fmaf(float _X, float _Y, float _Z); 
#line 562
__declspec(dllimport) float __cdecl fmaxf(float _X, float _Y); 
#line 563
__declspec(dllimport) float __cdecl fminf(float _X, float _Y); 
#line 564
__declspec(dllimport) float __cdecl _hypotf(float _X, float _Y); 
#line 565
__declspec(dllimport) int __cdecl ilogbf(float _X); 
#line 566
__declspec(dllimport) float __cdecl lgammaf(float _X); 
#line 567
__declspec(dllimport) __int64 __cdecl llrintf(float _X); 
#line 568
__declspec(dllimport) __int64 __cdecl llroundf(float _X); 
#line 569
__declspec(dllimport) float __cdecl log1pf(float _X); 
#line 570
__declspec(dllimport) float __cdecl log2f(float _X); 
#line 571
__declspec(dllimport) float __cdecl logbf(float _X); 
#line 572
__declspec(dllimport) long __cdecl lrintf(float _X); 
#line 573
__declspec(dllimport) long __cdecl lroundf(float _X); 
#line 574
__declspec(dllimport) float __cdecl nanf(const char * _X); 
#line 575
__declspec(dllimport) float __cdecl nearbyintf(float _X); 
#line 576
__declspec(dllimport) float __cdecl nextafterf(float _X, float _Y); 
#line 577
__declspec(dllimport) float __cdecl nexttowardf(float _X, long double _Y); 
#line 578
__declspec(dllimport) float __cdecl remainderf(float _X, float _Y); 
#line 579
__declspec(dllimport) float __cdecl remquof(float _X, float _Y, int * _Z); 
#line 580
__declspec(dllimport) float __cdecl rintf(float _X); 
#line 581
__declspec(dllimport) float __cdecl roundf(float _X); 
#line 582
__declspec(dllimport) float __cdecl scalblnf(float _X, long _Y); 
#line 583
__declspec(dllimport) float __cdecl scalbnf(float _X, int _Y); 
#line 584
__declspec(dllimport) float __cdecl tgammaf(float _X); 
#line 585
__declspec(dllimport) float __cdecl truncf(float _X); 
#line 595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) float __cdecl _logbf(float _X); 
#line 596
__declspec(dllimport) float __cdecl _nextafterf(float _X, float _Y); 
#line 597
__declspec(dllimport) int __cdecl _finitef(float _X); 
#line 598
__declspec(dllimport) int __cdecl _isnanf(float _X); 
#line 599
__declspec(dllimport) int __cdecl _fpclassf(float _X); 
#line 601
__declspec(dllimport) int __cdecl _set_FMA3_enable(int _Flag); 
#line 602
__declspec(dllimport) int __cdecl _get_FMA3_enable(); 
#line 615 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) float __cdecl acosf(float _X); 
#line 616
__declspec(dllimport) float __cdecl asinf(float _X); 
#line 617
__declspec(dllimport) float __cdecl atan2f(float _Y, float _X); 
#line 618
__declspec(dllimport) float __cdecl atanf(float _X); 
#line 619
__declspec(dllimport) float __cdecl ceilf(float _X); 
#line 620
__declspec(dllimport) float __cdecl cosf(float _X); 
#line 621
__declspec(dllimport) float __cdecl coshf(float _X); 
#line 622
__declspec(dllimport) float __cdecl expf(float _X); 
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
__inline float __cdecl fabsf(float _X) 
#line 679
{ 
#line 680
return (float)fabs(_X); 
#line 681
} 
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) float __cdecl floorf(float _X); 
#line 688
__declspec(dllimport) float __cdecl fmodf(float _X, float _Y); 
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
__inline float __cdecl frexpf(float _X, int *_Y) 
#line 705
{ 
#line 706
return (float)frexp(_X, _Y); 
#line 707
} 
#line 709
__inline float __cdecl hypotf(float _X, float _Y) 
#line 710
{ 
#line 711
return _hypotf(_X, _Y); 
#line 712
} 
#line 714
__inline float __cdecl ldexpf(float _X, int _Y) 
#line 715
{ 
#line 716
return (float)ldexp(_X, _Y); 
#line 717
} 
#line 721
__declspec(dllimport) float __cdecl log10f(float _X); 
#line 722
__declspec(dllimport) float __cdecl logf(float _X); 
#line 723
__declspec(dllimport) float __cdecl modff(float _X, float * _Y); 
#line 724
__declspec(dllimport) float __cdecl powf(float _X, float _Y); 
#line 725
__declspec(dllimport) float __cdecl sinf(float _X); 
#line 726
__declspec(dllimport) float __cdecl sinhf(float _X); 
#line 727
__declspec(dllimport) float __cdecl sqrtf(float _X); 
#line 728
__declspec(dllimport) float __cdecl tanf(float _X); 
#line 729
__declspec(dllimport) float __cdecl tanhf(float _X); 
#line 783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) long double __cdecl acoshl(long double _X); 
#line 785
__inline long double __cdecl acosl(long double _X) 
#line 786
{ 
#line 787
return acos((double)_X); 
#line 788
} 
#line 790
__declspec(dllimport) long double __cdecl asinhl(long double _X); 
#line 792
__inline long double __cdecl asinl(long double _X) 
#line 793
{ 
#line 794
return asin((double)_X); 
#line 795
} 
#line 797
__inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 798
{ 
#line 799
return atan2((double)_Y, (double)_X); 
#line 800
} 
#line 802
__declspec(dllimport) long double __cdecl atanhl(long double _X); 
#line 804
__inline long double __cdecl atanl(long double _X) 
#line 805
{ 
#line 806
return atan((double)_X); 
#line 807
} 
#line 809
__declspec(dllimport) long double __cdecl cbrtl(long double _X); 
#line 811
__inline long double __cdecl ceill(long double _X) 
#line 812
{ 
#line 813
return ceil((double)_X); 
#line 814
} 
#line 816
__inline long double __cdecl _chgsignl(long double _X) 
#line 817
{ 
#line 818
return _chgsign((double)_X); 
#line 819
} 
#line 821
__declspec(dllimport) long double __cdecl copysignl(long double _Number, long double _Sign); 
#line 823
__inline long double __cdecl _copysignl(long double _Number, long double _Sign) 
#line 824
{ 
#line 825
return _copysign((double)_Number, (double)_Sign); 
#line 826
} 
#line 828
__inline long double __cdecl coshl(long double _X) 
#line 829
{ 
#line 830
return cosh((double)_X); 
#line 831
} 
#line 833
__inline long double __cdecl cosl(long double _X) 
#line 834
{ 
#line 835
return cos((double)_X); 
#line 836
} 
#line 838
__declspec(dllimport) long double __cdecl erfl(long double _X); 
#line 839
__declspec(dllimport) long double __cdecl erfcl(long double _X); 
#line 841
__inline long double __cdecl expl(long double _X) 
#line 842
{ 
#line 843
return exp((double)_X); 
#line 844
} 
#line 846
__declspec(dllimport) long double __cdecl exp2l(long double _X); 
#line 847
__declspec(dllimport) long double __cdecl expm1l(long double _X); 
#line 849
__inline long double __cdecl fabsl(long double _X) 
#line 850
{ 
#line 851
return fabs((double)_X); 
#line 852
} 
#line 854
__declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y); 
#line 856
__inline long double __cdecl floorl(long double _X) 
#line 857
{ 
#line 858
return floor((double)_X); 
#line 859
} 
#line 861
__declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z); 
#line 862
__declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y); 
#line 863
__declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y); 
#line 865
__inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 866
{ 
#line 867
return fmod((double)_X, (double)_Y); 
#line 868
} 
#line 870
__inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 871
{ 
#line 872
return frexp((double)_X, _Y); 
#line 873
} 
#line 875
__declspec(dllimport) int __cdecl ilogbl(long double _X); 
#line 877
__inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 878
{ 
#line 879
return _hypot((double)_X, (double)_Y); 
#line 880
} 
#line 882
__inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 883
{ 
#line 884
return _hypot((double)_X, (double)_Y); 
#line 885
} 
#line 887
__inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 888
{ 
#line 889
return ldexp((double)_X, _Y); 
#line 890
} 
#line 892
__declspec(dllimport) long double __cdecl lgammal(long double _X); 
#line 893
__declspec(dllimport) __int64 __cdecl llrintl(long double _X); 
#line 894
__declspec(dllimport) __int64 __cdecl llroundl(long double _X); 
#line 896
__inline long double __cdecl logl(long double _X) 
#line 897
{ 
#line 898
return log((double)_X); 
#line 899
} 
#line 901
__inline long double __cdecl log10l(long double _X) 
#line 902
{ 
#line 903
return log10((double)_X); 
#line 904
} 
#line 906
__declspec(dllimport) long double __cdecl log1pl(long double _X); 
#line 907
__declspec(dllimport) long double __cdecl log2l(long double _X); 
#line 908
__declspec(dllimport) long double __cdecl logbl(long double _X); 
#line 909
__declspec(dllimport) long __cdecl lrintl(long double _X); 
#line 910
__declspec(dllimport) long __cdecl lroundl(long double _X); 
#line 912
__inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 913
{ 
#line 914
double _F, _I; 
#line 915
_F = modf((double)_X, &_I); 
#line 916
(*_Y) = _I; 
#line 917
return _F; 
#line 918
} 
#line 920
__declspec(dllimport) long double __cdecl nanl(const char * _X); 
#line 921
__declspec(dllimport) long double __cdecl nearbyintl(long double _X); 
#line 922
__declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y); 
#line 923
__declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y); 
#line 925
__inline long double __cdecl powl(long double _X, long double _Y) 
#line 926
{ 
#line 927
return pow((double)_X, (double)_Y); 
#line 928
} 
#line 930
__declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y); 
#line 931
__declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int * _Z); 
#line 932
__declspec(dllimport) long double __cdecl rintl(long double _X); 
#line 933
__declspec(dllimport) long double __cdecl roundl(long double _X); 
#line 934
__declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y); 
#line 935
__declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y); 
#line 937
__inline long double __cdecl sinhl(long double _X) 
#line 938
{ 
#line 939
return sinh((double)_X); 
#line 940
} 
#line 942
__inline long double __cdecl sinl(long double _X) 
#line 943
{ 
#line 944
return sin((double)_X); 
#line 945
} 
#line 947
__inline long double __cdecl sqrtl(long double _X) 
#line 948
{ 
#line 949
return sqrt((double)_X); 
#line 950
} 
#line 952
__inline long double __cdecl tanhl(long double _X) 
#line 953
{ 
#line 954
return tanh((double)_X); 
#line 955
} 
#line 957
__inline long double __cdecl tanl(long double _X) 
#line 958
{ 
#line 959
return tan((double)_X); 
#line 960
} 
#line 962
__declspec(dllimport) long double __cdecl tgammal(long double _X); 
#line 963
__declspec(dllimport) long double __cdecl truncl(long double _X); 
#line 984 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
extern double HUGE; 
#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
__declspec(dllimport) double __cdecl j0(double _X); 
#line 990
__declspec(dllimport) double __cdecl j1(double _X); 
#line 991
__declspec(dllimport) double __cdecl jn(int _X, double _Y); 
#line 992
__declspec(dllimport) double __cdecl y0(double _X); 
#line 993
__declspec(dllimport) double __cdecl y1(double _X); 
#line 994
__declspec(dllimport) double __cdecl yn(int _X, double _Y); 
#line 999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_math.h"
}__pragma( pack ( pop )) 
#line 1001
#pragma warning(pop)
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#pragma warning(disable: 4985)
#line 17
extern "C++" {
#line 19
#pragma pack ( push, 8 )
#line 33
namespace std { 
#line 35
struct nothrow_t { 
#line 36
explicit nothrow_t() = default;
#line 37
}; 
#line 42
extern const nothrow_t nothrow; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new.h"
}
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new.h"
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 48
operator new(size_t _Size); 
#line 52
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 53
operator new(size_t _Size, const std::nothrow_t &) noexcept; 
#line 58
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 59
operator new[](size_t _Size); 
#line 63
[[nodiscard]] __declspec(allocator) void *__cdecl 
#line 64
operator new[](size_t _Size, const std::nothrow_t &) noexcept; 
#line 69
void __cdecl operator delete(void * _Block) noexcept; 
#line 73
void __cdecl operator delete(void * _Block, const std::nothrow_t &) noexcept; 
#line 78
void __cdecl operator delete[](void * _Block) noexcept; 
#line 82
void __cdecl operator delete[](void * _Block, const std::nothrow_t &) noexcept; 
#line 87
void __cdecl operator delete(void * _Block, size_t _Size) noexcept; 
#line 92
void __cdecl operator delete[](void * _Block, size_t _Size) noexcept; 
#line 160
#pragma warning(push)
#pragma warning(disable: 4577)
#pragma warning(disable: 4514)
#line 165
[[nodiscard]] [[msvc::constexpr]] inline void *__cdecl 
#line 166
operator new(size_t _Size, void *
#line 167
_Where) noexcept 
#line 168
{ 
#line 169
(void)_Size; 
#line 170
return _Where; 
#line 171
} 
#line 173
inline void __cdecl operator delete(void *, void *) noexcept 
#line 174
{ 
#line 176
} 
#line 181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new.h"
[[nodiscard]] inline void *__cdecl 
#line 182
operator new[](size_t _Size, void *
#line 183
_Where) noexcept 
#line 184
{ 
#line 185
(void)_Size; 
#line 186
return _Where; 
#line 187
} 
#line 189
inline void __cdecl operator delete[](void *, void *) noexcept 
#line 190
{ 
#line 191
} 
#line 199 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new.h"
}
#line 193
#pragma warning(pop)
#line 197
#pragma pack ( pop )
#line 202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new.h"
#pragma warning(pop)
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new_debug.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 16
extern "C++" {
#line 18
#pragma pack ( push, 8 )
#line 25
[[nodiscard]] 
#line 26
__declspec(allocator) void *__cdecl operator new(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 33
[[nodiscard]] 
#line 34
__declspec(allocator) void *__cdecl operator new[](size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 41
void __cdecl operator delete(void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 48
void __cdecl operator delete[](void * _Block, int _BlockUse, const char * _FileName, int _LineNumber) noexcept; 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new_debug.h"
}
#line 59
#pragma pack ( pop )
#line 64 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_new_debug.h"
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\crtdbg.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 23
typedef void *_HFILE; 
#line 49
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *); 
#line 50
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, __wchar_t *, int *); 
#line 56
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int); 
#line 112
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t); 
#line 118
struct _CrtMemBlockHeader; 
#line 127
typedef 
#line 120
struct _CrtMemState { 
#line 122
_CrtMemBlockHeader *pBlockHeader; 
#line 123
size_t lCounts[5]; 
#line 124
size_t lSizes[5]; 
#line 125
size_t lHighWaterCount; 
#line 126
size_t lTotalCount; 
#line 127
} _CrtMemState; 
#line 156
__declspec(dllimport) int *__cdecl __p__crtDbgFlag(); 
#line 157
__declspec(dllimport) long *__cdecl __p__crtBreakAlloc(); 
#line 162
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtGetAllocHook(); 
#line 164
__declspec(dllimport) _CRT_ALLOC_HOOK __cdecl _CrtSetAllocHook(_CRT_ALLOC_HOOK _PfnNewHook); 
#line 168
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtGetDumpClient(); 
#line 170
__declspec(dllimport) _CRT_DUMP_CLIENT __cdecl _CrtSetDumpClient(_CRT_DUMP_CLIENT _PFnNewDump); 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtCheckMemory(); 
#line 178
typedef void (__cdecl *_CrtDoForAllClientObjectsCallback)(void *, void *); 
#line 180
__declspec(dllimport) void __cdecl _CrtDoForAllClientObjects(_CrtDoForAllClientObjectsCallback _Callback, void * _Context); 
#line 185
__declspec(dllimport) int __cdecl _CrtDumpMemoryLeaks(); 
#line 187
__declspec(dllimport) int __cdecl _CrtIsMemoryBlock(const void * _Block, unsigned _Size, long * _RequestNumber, char ** _FileName, int * _LineNumber); 
#line 196
__declspec(dllimport) int __cdecl _CrtIsValidHeapPointer(const void * _Pointer); 
#line 201
__declspec(dllimport) int __cdecl _CrtIsValidPointer(const void * _Pointer, unsigned _Size, int _ReadWrite); 
#line 207
__declspec(dllimport) void __cdecl _CrtMemCheckpoint(_CrtMemState * _State); 
#line 211
__declspec(dllimport) int __cdecl _CrtMemDifference(_CrtMemState * _State, const _CrtMemState * _OldState, const _CrtMemState * _NewState); 
#line 217
__declspec(dllimport) void __cdecl _CrtMemDumpAllObjectsSince(const _CrtMemState * _State); 
#line 221
__declspec(dllimport) void __cdecl _CrtMemDumpStatistics(const _CrtMemState * _State); 
#line 226
__declspec(dllimport) int __cdecl _CrtReportBlockType(const void * _Block); 
#line 230
__declspec(dllimport) long __cdecl _CrtSetBreakAlloc(long _NewValue); 
#line 234
__declspec(dllimport) int __cdecl _CrtSetDbgFlag(int _NewFlag); 
#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\crtdbg.h"
__declspec(dllimport) void __cdecl _aligned_free_dbg(void * _Block); 
#line 337
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_malloc_dbg(size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 344
__declspec(dllimport) size_t __cdecl _aligned_msize_dbg(void * _Block, size_t _Alignment, size_t _Offset); 
#line 351
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_malloc_dbg(size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 360
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_realloc_dbg(void * _Block, size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 370
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_offset_recalloc_dbg(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset, const char * _FileName, int _LineNumber); 
#line 381
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_realloc_dbg(void * _Block, size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 390
__declspec(dllimport) __declspec(allocator) void *__cdecl _aligned_recalloc_dbg(void * _Block, size_t _Count, size_t _Size, size_t _Alignment, const char * _FileName, int _LineNumber); 
#line 400
__declspec(dllimport) __declspec(allocator) void *__cdecl _calloc_dbg(size_t _Count, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 409
__declspec(dllimport) __declspec(allocator) void *__cdecl _expand_dbg(void * _Block, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 417
__declspec(dllimport) void __cdecl _free_dbg(void * _Block, int _BlockUse); 
#line 423
__declspec(dllimport) __declspec(allocator) void *__cdecl _malloc_dbg(size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 430
__declspec(dllimport) size_t __cdecl _msize_dbg(void * _Block, int _BlockUse); 
#line 436
__declspec(dllimport) __declspec(allocator) void *__cdecl _realloc_dbg(void * _Block, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 445
__declspec(dllimport) __declspec(allocator) void *__cdecl _recalloc_dbg(void * _Block, size_t _Count, size_t _Size, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 456
__declspec(dllimport) errno_t __cdecl _dupenv_s_dbg(char ** _PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName, int _BlockType, const char * _FileName, int _LineNumber); 
#line 467
__declspec(dllimport) __declspec(allocator) char *__cdecl _fullpath_dbg(char * _FullPath, const char * _Path, size_t _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 478
__declspec(dllimport) __declspec(allocator) char *__cdecl _getcwd_dbg(char * _DstBuf, int _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 489
__declspec(dllimport) __declspec(allocator) char *__cdecl _getdcwd_dbg(int _Drive, char * _DstBuf, int _SizeInBytes, int _BlockType, const char * _FileName, int _LineNumber); 
#line 499
__declspec(dllimport) __declspec(allocator) char *__cdecl _strdup_dbg(const char * _String, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 507
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam_dbg(const char * _DirName, const char * _FilePrefix, int _BlockType, const char * _FileName, int _LineNumber); 
#line 517
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wcsdup_dbg(const __wchar_t * _String, int _BlockUse, const char * _FileName, int _LineNumber); 
#line 526
__declspec(dllimport) errno_t __cdecl _wdupenv_s_dbg(__wchar_t ** _PBuffer, size_t * _PBufferSizeInWords, const __wchar_t * _VarName, int _BlockType, const char * _FileName, int _LineNumber); 
#line 537
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wfullpath_dbg(__wchar_t * _FullPath, const __wchar_t * _Path, size_t _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 548
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd_dbg(__wchar_t * _DstBuf, int _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 558
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd_dbg(int _Drive, __wchar_t * _DstBuf, int _SizeInWords, int _BlockType, const char * _FileName, int _LineNumber); 
#line 568
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam_dbg(const __wchar_t * _DirName, const __wchar_t * _FilePrefix, int _BlockType, const char * _FileName, int _LineNumber); 
#line 611 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\crtdbg.h"
__declspec(dllimport) int __cdecl _CrtDbgReport(int _ReportType, const char * _FileName, int _Linenumber, const char * _ModuleName, const char * _Format, ...); 
#line 619
__declspec(dllimport) int __cdecl _CrtDbgReportW(int _ReportType, const __wchar_t * _FileName, int _LineNumber, const __wchar_t * _ModuleName, const __wchar_t * _Format, ...); 
#line 628
__declspec(dllimport) int __cdecl _VCrtDbgReportA(int _ReportType, void * _ReturnAddress, const char * _FileName, int _LineNumber, const char * _ModuleName, const char * _Format, va_list _ArgList); 
#line 638
__declspec(dllimport) int __cdecl _VCrtDbgReportW(int _ReportType, void * _ReturnAddress, const __wchar_t * _FileName, int _LineNumber, const __wchar_t * _ModuleName, const __wchar_t * _Format, va_list _ArgList); 
#line 648
__declspec(dllimport) size_t __cdecl _CrtSetDebugFillThreshold(size_t _NewDebugFillThreshold); 
#line 652
__declspec(dllimport) size_t __cdecl _CrtGetDebugFillThreshold(); 
#line 654
__declspec(dllimport) _HFILE __cdecl _CrtSetReportFile(int _ReportType, _HFILE _ReportFile); 
#line 659
__declspec(dllimport) int __cdecl _CrtSetReportMode(int _ReportType, int _ReportMode); 
#line 666
extern long _crtAssertBusy; 
#line 668
__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtGetReportHook(); 
#line 673
__declspec(dllimport) _CRT_REPORT_HOOK __cdecl _CrtSetReportHook(_CRT_REPORT_HOOK _PFnNewHook); 
#line 677
__declspec(dllimport) int __cdecl _CrtSetReportHook2(int _Mode, _CRT_REPORT_HOOK _PFnNewHook); 
#line 682
__declspec(dllimport) int __cdecl _CrtSetReportHookW2(int _Mode, _CRT_REPORT_HOOKW _PFnNewHook); 
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\crtdbg.h"
}__pragma( pack ( pop )) 
#line 815
#pragma warning(pop)
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\yvals.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 141 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1900")
#line 145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 156 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
#line 47 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\use_ansi.h"
#pragma comment(lib, "msvcprtd")
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\yvals.h"
namespace std { 
#line 343
enum _Uninitialized { 
#line 344
_Noinit
#line 345
}; 
#line 347
class __declspec(dllimport) _Lockit { 
#line 363
public: __thiscall _Lockit() noexcept; 
#line 364
explicit __thiscall _Lockit(int) noexcept; 
#line 365
__thiscall ~_Lockit() noexcept; 
#line 368 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int) noexcept; 
#line 369
static void __cdecl _Lockit_dtor(int) noexcept; 
#line 372
private: static void __cdecl _Lockit_ctor(_Lockit *) noexcept; 
#line 373
static void __cdecl _Lockit_ctor(_Lockit *, int) noexcept; 
#line 374
static void __cdecl _Lockit_dtor(_Lockit *) noexcept; 
#line 377
public: _Lockit(const _Lockit &) = delete;
#line 378
_Lockit &operator=(const _Lockit &) = delete;
#line 381
private: int _Locktype; 
#line 382
}; 
#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\yvals.h"
}
#line 505
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cstdlib"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 22
[[nodiscard]] inline double abs(double _Xx) noexcept { 
#line 23
return ::fabs(_Xx); 
#line 24
} 
#line 26
[[nodiscard]] inline float abs(float _Xx) noexcept { 
#line 27
return ::fabsf(_Xx); 
#line 28
} 
#line 30
[[nodiscard]] inline long double abs(long double _Xx) noexcept { 
#line 31
return ::fabsl(_Xx); 
#line 32
} 
#line 34
namespace std { 
#line 35
using ::size_t;
#line 36
using ::div_t;
#line 37
using ::ldiv_t;
#line 38
using ::abort;
#line 39
using ::abs;
#line 40
using ::atexit;
#line 41
using ::atof;
#line 42
using ::atoi;
#line 43
using ::atol;
#line 44
using ::bsearch;
#line 45
using ::calloc;
#line 46
using ::div;
#line 47
using ::exit;
#line 48
using ::free;
#line 49
using ::labs;
#line 50
using ::ldiv;
#line 51
using ::malloc;
#line 52
using ::mblen;
#line 53
using ::mbstowcs;
#line 54
using ::mbtowc;
#line 55
using ::qsort;
#line 56
using ::rand;
#line 57
using ::realloc;
#line 58
using ::srand;
#line 59
using ::strtod;
#line 60
using ::strtol;
#line 61
using ::strtoul;
#line 62
using ::wcstombs;
#line 63
using ::wctomb;
#line 65
using ::lldiv_t;
#line 67
using ::getenv;
#line 68
using ::system;
#line 70
using ::atoll;
#line 71
using ::llabs;
#line 72
using ::lldiv;
#line 73
using ::strtof;
#line 74
using ::strtold;
#line 75
using ::strtoll;
#line 76
using ::strtoull;
#line 78
using ::_Exit;
#line 79
using ::at_quick_exit;
#line 80
using ::quick_exit;
#line 81
}
#line 85
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xtr1common"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 24
namespace std { 
#line 25
template < class _Ty, _Ty _Val >
struct integral_constant {
    static constexpr _Ty value = _Val;

    using value_type = _Ty;
    using type = integral_constant;

    constexpr operator value_type ( ) const noexcept {
        return value;
    }

    [ [ nodiscard ] ] constexpr value_type operator ( ) ( ) const noexcept {
        return value;
    }
};
#line 41
template< bool _Val> using bool_constant = integral_constant< bool, _Val> ; 
#line 44
using true_type = bool_constant< true> ; 
#line 45
using false_type = bool_constant< false> ; 
#line 47
template< bool _Test, class _Ty = void> 
#line 48
struct enable_if { }; 
#line 50
template< class _Ty> 
#line 51
struct enable_if< true, _Ty>  { 
#line 52
using type = _Ty; 
#line 53
}; 
#line 55
template< bool _Test, class _Ty = void> using enable_if_t = typename enable_if< _Test, _Ty> ::type; 
#line 58
template< bool _Test, class _Ty1, class _Ty2> 
#line 59
struct conditional { 
#line 60
using type = _Ty1; 
#line 61
}; 
#line 63
template< class _Ty1, class _Ty2> 
#line 64
struct conditional< false, _Ty1, _Ty2>  { 
#line 65
using type = _Ty2; 
#line 66
}; 
#line 68
template< bool _Test, class _Ty1, class _Ty2> using conditional_t = typename conditional< _Test, _Ty1, _Ty2> ::type; 
#line 78
template< class , class > constexpr bool 
#line 79
is_same_v = false; 
#line 80
template< class _Ty> constexpr bool 
#line 81
is_same_v< _Ty, _Ty>  = true; 
#line 83
template< class _Ty1, class _Ty2> 
#line 84
struct is_same : public bool_constant< is_same_v< _Ty1, _Ty2> >  { }; 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xtr1common"
template< class _Ty> 
#line 88
struct remove_const { 
#line 89
using type = _Ty; 
#line 90
}; 
#line 92
template< class _Ty> 
#line 93
struct remove_const< const _Ty>  { 
#line 94
using type = _Ty; 
#line 95
}; 
#line 97
template< class _Ty> using remove_const_t = typename remove_const< _Ty> ::type; 
#line 100
template< class _Ty> 
#line 101
struct remove_volatile { 
#line 102
using type = _Ty; 
#line 103
}; 
#line 105
template< class _Ty> 
#line 106
struct remove_volatile< volatile _Ty>  { 
#line 107
using type = _Ty; 
#line 108
}; 
#line 110
template< class _Ty> using remove_volatile_t = typename remove_volatile< _Ty> ::type; 
#line 113
template< class _Ty> 
#line 114
struct remove_cv { 
#line 115
using type = _Ty; 
#line 117
template< template< class >  class _Fn> using _Apply = _Fn< _Ty> ; 
#line 119
}; 
#line 121
template< class _Ty> 
#line 122
struct remove_cv< const _Ty>  { 
#line 123
using type = _Ty; 
#line 125
template< template< class >  class _Fn> using _Apply = const _Fn< _Ty> ; 
#line 127
}; 
#line 129
template< class _Ty> 
#line 130
struct remove_cv< volatile _Ty>  { 
#line 131
using type = _Ty; 
#line 133
template< template< class >  class _Fn> using _Apply = volatile _Fn< _Ty> ; 
#line 135
}; 
#line 137
template< class _Ty> 
#line 138
struct remove_cv< const volatile _Ty>  { 
#line 139
using type = _Ty; 
#line 141
template< template< class >  class _Fn> using _Apply = const volatile _Fn< _Ty> ; 
#line 143
}; 
#line 145
template< class _Ty> using remove_cv_t = typename remove_cv< _Ty> ::type; 
#line 148
template< bool _First_value, class _First, class ..._Rest> 
#line 149
struct _Disjunction { 
#line 150
using type = _First; 
#line 151
}; 
#line 153
template< class _False, class _Next, class ..._Rest> 
#line 154
struct _Disjunction< false, _False, _Next, _Rest...>  { 
#line 155
using type = typename std::_Disjunction< _Next::value, _Next, _Rest...> ::type; 
#line 156
}; 
#line 158
template< class ..._Traits> 
#line 159
struct disjunction : public false_type { }; 
#line 161
template< class _First, class ..._Rest> 
#line 162
struct disjunction< _First, _Rest...>  : public _Disjunction< _First::value, _First, _Rest...> ::type { 
#line 164
}; 
#line 166
template< class ..._Traits> constexpr bool 
#line 167
disjunction_v = (disjunction< _Traits...> ::value); 
#line 169
template< class _Ty, class ..._Types> constexpr bool 
#line 170
_Is_any_of_v = disjunction_v< is_same< _Ty, _Types> ...> ; 
#line 177 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xtr1common"
[[nodiscard]] constexpr bool _Is_constant_evaluated() noexcept { 
#line 178
return __builtin_is_constant_evaluated(); 
#line 179
} 
#line 187 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xtr1common"
template< class _Ty> constexpr bool 
#line 188
is_integral_v = _Is_any_of_v< remove_cv_t< _Ty> , bool, char, signed char, unsigned char, __wchar_t, char16_t, char32_t, short, unsigned short, int, unsigned, long, unsigned long, __int64, unsigned __int64> ; 
#line 195
template< class _Ty> 
#line 196
struct is_integral : public bool_constant< is_integral_v< _Ty> >  { }; 
#line 198
template< class _Ty> constexpr bool 
#line 199
is_floating_point_v = _Is_any_of_v< remove_cv_t< _Ty> , float, double, long double> ; 
#line 201
template< class _Ty> 
#line 202
struct is_floating_point : public bool_constant< is_floating_point_v< _Ty> >  { }; 
#line 204
template< class _Ty> constexpr bool 
#line 205
is_arithmetic_v = is_integral_v< _Ty>  || is_floating_point_v< _Ty> ; 
#line 208
template< class _Ty> 
#line 209
struct is_arithmetic : public bool_constant< is_arithmetic_v< _Ty> >  { }; 
#line 211
template< class _Ty> 
#line 212
struct remove_reference { 
#line 213
using type = _Ty; 
#line 214
using _Const_thru_ref_type = const _Ty; 
#line 215
}; 
#line 217
template< class _Ty> 
#line 218
struct remove_reference< _Ty &>  { 
#line 219
using type = _Ty; 
#line 220
using _Const_thru_ref_type = const _Ty &; 
#line 221
}; 
#line 223
template< class _Ty> 
#line 224
struct remove_reference< _Ty &&>  { 
#line 225
using type = _Ty; 
#line 226
using _Const_thru_ref_type = const _Ty &&; 
#line 227
}; 
#line 229
template< class _Ty> using remove_reference_t = typename remove_reference< _Ty> ::type; 
#line 232
template< class _Ty> using _Const_thru_ref = typename remove_reference< _Ty> ::_Const_thru_ref_type; 
#line 235
template< class _Ty> using _Remove_cvref_t = remove_cv_t< remove_reference_t< _Ty> > ; 
#line 248 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xtr1common"
}
#line 256
#pragma warning(pop)
#pragma pack ( pop )
#line 29 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 36
[[nodiscard]] inline float acos(float _Xx) noexcept { 
#line 37
return ::acosf(_Xx); 
#line 38
} 
#line 40
[[nodiscard]] inline float acosh(float _Xx) noexcept { 
#line 41
return ::acoshf(_Xx); 
#line 42
} 
#line 44
[[nodiscard]] inline float asin(float _Xx) noexcept { 
#line 45
return ::asinf(_Xx); 
#line 46
} 
#line 48
[[nodiscard]] inline float asinh(float _Xx) noexcept { 
#line 49
return ::asinhf(_Xx); 
#line 50
} 
#line 52
[[nodiscard]] inline float atan(float _Xx) noexcept { 
#line 53
return ::atanf(_Xx); 
#line 54
} 
#line 56
[[nodiscard]] inline float atanh(float _Xx) noexcept { 
#line 57
return ::atanhf(_Xx); 
#line 58
} 
#line 60
[[nodiscard]] inline float atan2(float _Yx, float _Xx) noexcept { 
#line 61
return ::atan2f(_Yx, _Xx); 
#line 62
} 
#line 64
[[nodiscard]] inline float cbrt(float _Xx) noexcept { 
#line 65
return ::cbrtf(_Xx); 
#line 66
} 
#line 68
[[nodiscard]] inline float ceil(float _Xx) noexcept { 
#line 74 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::ceilf(_Xx); 
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 78
[[nodiscard]] inline float copysign(float _Number, float _Sign) noexcept { 
#line 84 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::copysignf(_Number, _Sign); 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 88
[[nodiscard]] inline float cos(float _Xx) noexcept { 
#line 89
return ::cosf(_Xx); 
#line 90
} 
#line 92
[[nodiscard]] inline float cosh(float _Xx) noexcept { 
#line 93
return ::coshf(_Xx); 
#line 94
} 
#line 96
[[nodiscard]] inline float erf(float _Xx) noexcept { 
#line 97
return ::erff(_Xx); 
#line 98
} 
#line 100
[[nodiscard]] inline float erfc(float _Xx) noexcept { 
#line 101
return ::erfcf(_Xx); 
#line 102
} 
#line 104
[[nodiscard]] inline float exp(float _Xx) noexcept { 
#line 105
return ::expf(_Xx); 
#line 106
} 
#line 108
[[nodiscard]] inline float exp2(float _Xx) noexcept { 
#line 109
return ::exp2f(_Xx); 
#line 110
} 
#line 112
[[nodiscard]] inline float expm1(float _Xx) noexcept { 
#line 113
return ::expm1f(_Xx); 
#line 114
} 
#line 116
[[nodiscard]] inline float fabs(float _Xx) noexcept { 
#line 117
return ::fabsf(_Xx); 
#line 118
} 
#line 120
[[nodiscard]] inline float fdim(float _Xx, float _Yx) noexcept { 
#line 121
return ::fdimf(_Xx, _Yx); 
#line 122
} 
#line 124
[[nodiscard]] inline float floor(float _Xx) noexcept { 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::floorf(_Xx); 
#line 132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 134
[[nodiscard]] inline float fma(float _Xx, float _Yx, float _Zx) noexcept { 
#line 135
return ::fmaf(_Xx, _Yx, _Zx); 
#line 136
} 
#line 138
[[nodiscard]] inline float fmax(float _Xx, float _Yx) noexcept { 
#line 139
return ::fmaxf(_Xx, _Yx); 
#line 140
} 
#line 142
[[nodiscard]] inline float fmin(float _Xx, float _Yx) noexcept { 
#line 143
return ::fminf(_Xx, _Yx); 
#line 144
} 
#line 146
[[nodiscard]] inline float fmod(float _Xx, float _Yx) noexcept { 
#line 147
return ::fmodf(_Xx, _Yx); 
#line 148
} 
#line 150
inline float frexp(float _Xx, int *_Yx) noexcept { 
#line 151
return ::frexpf(_Xx, _Yx); 
#line 152
} 
#line 154
[[nodiscard]] inline float hypot(float _Xx, float _Yx) noexcept { 
#line 155
return ::hypotf(_Xx, _Yx); 
#line 156
} 
#line 158
[[nodiscard]] inline int ilogb(float _Xx) noexcept { 
#line 159
return ::ilogbf(_Xx); 
#line 160
} 
#line 162
[[nodiscard]] inline float ldexp(float _Xx, int _Yx) noexcept { 
#line 163
return ::ldexpf(_Xx, _Yx); 
#line 164
} 
#line 166
[[nodiscard]] inline float lgamma(float _Xx) noexcept { 
#line 167
return ::lgammaf(_Xx); 
#line 168
} 
#line 170
[[nodiscard]] inline __int64 llrint(float _Xx) noexcept { 
#line 171
return ::llrintf(_Xx); 
#line 172
} 
#line 174
[[nodiscard]] inline __int64 llround(float _Xx) noexcept { 
#line 175
return ::llroundf(_Xx); 
#line 176
} 
#line 178
[[nodiscard]] inline float log(float _Xx) noexcept { 
#line 179
return ::logf(_Xx); 
#line 180
} 
#line 182
[[nodiscard]] inline float log10(float _Xx) noexcept { 
#line 183
return ::log10f(_Xx); 
#line 184
} 
#line 186
[[nodiscard]] inline float log1p(float _Xx) noexcept { 
#line 187
return ::log1pf(_Xx); 
#line 188
} 
#line 190
[[nodiscard]] inline float log2(float _Xx) noexcept { 
#line 191
return ::log2f(_Xx); 
#line 192
} 
#line 194
[[nodiscard]] inline float logb(float _Xx) noexcept { 
#line 195
return ::logbf(_Xx); 
#line 196
} 
#line 198
[[nodiscard]] inline long lrint(float _Xx) noexcept { 
#line 199
return ::lrintf(_Xx); 
#line 200
} 
#line 202
[[nodiscard]] inline long lround(float _Xx) noexcept { 
#line 203
return ::lroundf(_Xx); 
#line 204
} 
#line 206
inline float modf(float _Xx, float *_Yx) noexcept { 
#line 207
return ::modff(_Xx, _Yx); 
#line 208
} 
#line 210
[[nodiscard]] inline float nearbyint(float _Xx) noexcept { 
#line 211
return ::nearbyintf(_Xx); 
#line 212
} 
#line 214
[[nodiscard]] inline float nextafter(float _Xx, float _Yx) noexcept { 
#line 215
return ::nextafterf(_Xx, _Yx); 
#line 216
} 
#line 218
[[nodiscard]] inline float nexttoward(float _Xx, long double _Yx) noexcept { 
#line 219
return ::nexttowardf(_Xx, _Yx); 
#line 220
} 
#line 222
[[nodiscard]] inline float pow(float _Xx, float _Yx) noexcept { 
#line 223
return ::powf(_Xx, _Yx); 
#line 224
} 
#line 226
[[nodiscard]] inline float remainder(float _Xx, float _Yx) noexcept { 
#line 227
return ::remainderf(_Xx, _Yx); 
#line 228
} 
#line 230
inline float remquo(float _Xx, float _Yx, int *_Zx) noexcept { 
#line 231
return ::remquof(_Xx, _Yx, _Zx); 
#line 232
} 
#line 234
[[nodiscard]] inline float rint(float _Xx) noexcept { 
#line 235
return ::rintf(_Xx); 
#line 236
} 
#line 238
[[nodiscard]] inline float round(float _Xx) noexcept { 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::roundf(_Xx); 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 248
[[nodiscard]] inline float scalbln(float _Xx, long _Yx) noexcept { 
#line 249
return ::scalblnf(_Xx, _Yx); 
#line 250
} 
#line 252
[[nodiscard]] inline float scalbn(float _Xx, int _Yx) noexcept { 
#line 253
return ::scalbnf(_Xx, _Yx); 
#line 254
} 
#line 256
[[nodiscard]] inline float sin(float _Xx) noexcept { 
#line 257
return ::sinf(_Xx); 
#line 258
} 
#line 260
[[nodiscard]] inline float sinh(float _Xx) noexcept { 
#line 261
return ::sinhf(_Xx); 
#line 262
} 
#line 264
[[nodiscard]] inline float sqrt(float _Xx) noexcept { 
#line 265
return ::sqrtf(_Xx); 
#line 266
} 
#line 268
[[nodiscard]] inline float tan(float _Xx) noexcept { 
#line 269
return ::tanf(_Xx); 
#line 270
} 
#line 272
[[nodiscard]] inline float tanh(float _Xx) noexcept { 
#line 273
return ::tanhf(_Xx); 
#line 274
} 
#line 276
[[nodiscard]] inline float tgamma(float _Xx) noexcept { 
#line 277
return ::tgammaf(_Xx); 
#line 278
} 
#line 280
[[nodiscard]] inline float trunc(float _Xx) noexcept { 
#line 286 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::truncf(_Xx); 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 290
[[nodiscard]] inline long double acos(long double _Xx) noexcept { 
#line 291
return ::acosl(_Xx); 
#line 292
} 
#line 294
[[nodiscard]] inline long double acosh(long double _Xx) noexcept { 
#line 295
return ::acoshl(_Xx); 
#line 296
} 
#line 298
[[nodiscard]] inline long double asin(long double _Xx) noexcept { 
#line 299
return ::asinl(_Xx); 
#line 300
} 
#line 302
[[nodiscard]] inline long double asinh(long double _Xx) noexcept { 
#line 303
return ::asinhl(_Xx); 
#line 304
} 
#line 306
[[nodiscard]] inline long double atan(long double _Xx) noexcept { 
#line 307
return ::atanl(_Xx); 
#line 308
} 
#line 310
[[nodiscard]] inline long double atanh(long double _Xx) noexcept { 
#line 311
return ::atanhl(_Xx); 
#line 312
} 
#line 314
[[nodiscard]] inline long double atan2(long double _Yx, long double _Xx) noexcept 
#line 315
{ 
#line 316
return ::atan2l(_Yx, _Xx); 
#line 317
} 
#line 319
[[nodiscard]] inline long double cbrt(long double _Xx) noexcept { 
#line 320
return ::cbrtl(_Xx); 
#line 321
} 
#line 323
[[nodiscard]] inline long double ceil(long double _Xx) noexcept { 
#line 329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::ceill(_Xx); 
#line 331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 333
[[nodiscard]] inline long double copysign(long double _Number, long double _Sign) noexcept 
#line 334
{ 
#line 340 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::copysignl(_Number, _Sign); 
#line 342 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 344
[[nodiscard]] inline long double cos(long double _Xx) noexcept { 
#line 345
return ::cosl(_Xx); 
#line 346
} 
#line 348
[[nodiscard]] inline long double cosh(long double _Xx) noexcept { 
#line 349
return ::coshl(_Xx); 
#line 350
} 
#line 352
[[nodiscard]] inline long double erf(long double _Xx) noexcept { 
#line 353
return ::erfl(_Xx); 
#line 354
} 
#line 356
[[nodiscard]] inline long double erfc(long double _Xx) noexcept { 
#line 357
return ::erfcl(_Xx); 
#line 358
} 
#line 360
[[nodiscard]] inline long double exp(long double _Xx) noexcept { 
#line 361
return ::expl(_Xx); 
#line 362
} 
#line 364
[[nodiscard]] inline long double exp2(long double _Xx) noexcept { 
#line 365
return ::exp2l(_Xx); 
#line 366
} 
#line 368
[[nodiscard]] inline long double expm1(long double _Xx) noexcept { 
#line 369
return ::expm1l(_Xx); 
#line 370
} 
#line 372
[[nodiscard]] inline long double fabs(long double _Xx) noexcept { 
#line 373
return ::fabsl(_Xx); 
#line 374
} 
#line 376
[[nodiscard]] inline long double fdim(long double _Xx, long double _Yx) noexcept 
#line 377
{ 
#line 378
return ::fdiml(_Xx, _Yx); 
#line 379
} 
#line 381
[[nodiscard]] inline long double floor(long double _Xx) noexcept { 
#line 387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::floorl(_Xx); 
#line 389 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 391
[[nodiscard]] inline long double fma(long double 
#line 392
_Xx, long double _Yx, long double _Zx) noexcept { 
#line 393
return ::fmal(_Xx, _Yx, _Zx); 
#line 394
} 
#line 396
[[nodiscard]] inline long double fmax(long double _Xx, long double _Yx) noexcept 
#line 397
{ 
#line 398
return ::fmaxl(_Xx, _Yx); 
#line 399
} 
#line 401
[[nodiscard]] inline long double fmin(long double _Xx, long double _Yx) noexcept 
#line 402
{ 
#line 403
return ::fminl(_Xx, _Yx); 
#line 404
} 
#line 406
[[nodiscard]] inline long double fmod(long double _Xx, long double _Yx) noexcept 
#line 407
{ 
#line 408
return ::fmodl(_Xx, _Yx); 
#line 409
} 
#line 411
inline long double frexp(long double _Xx, int *_Yx) noexcept { 
#line 412
return ::frexpl(_Xx, _Yx); 
#line 413
} 
#line 415
[[nodiscard]] inline long double hypot(long double _Xx, long double _Yx) noexcept 
#line 416
{ 
#line 417
return ::hypotl(_Xx, _Yx); 
#line 418
} 
#line 420
[[nodiscard]] inline int ilogb(long double _Xx) noexcept { 
#line 421
return ::ilogbl(_Xx); 
#line 422
} 
#line 424
[[nodiscard]] inline long double ldexp(long double _Xx, int _Yx) noexcept { 
#line 425
return ::ldexpl(_Xx, _Yx); 
#line 426
} 
#line 428
[[nodiscard]] inline long double lgamma(long double _Xx) noexcept { 
#line 429
return ::lgammal(_Xx); 
#line 430
} 
#line 432
[[nodiscard]] inline __int64 llrint(long double _Xx) noexcept { 
#line 433
return ::llrintl(_Xx); 
#line 434
} 
#line 436
[[nodiscard]] inline __int64 llround(long double _Xx) noexcept { 
#line 437
return ::llroundl(_Xx); 
#line 438
} 
#line 440
[[nodiscard]] inline long double log(long double _Xx) noexcept { 
#line 441
return ::logl(_Xx); 
#line 442
} 
#line 444
[[nodiscard]] inline long double log10(long double _Xx) noexcept { 
#line 445
return ::log10l(_Xx); 
#line 446
} 
#line 448
[[nodiscard]] inline long double log1p(long double _Xx) noexcept { 
#line 449
return ::log1pl(_Xx); 
#line 450
} 
#line 452
[[nodiscard]] inline long double log2(long double _Xx) noexcept { 
#line 453
return ::log2l(_Xx); 
#line 454
} 
#line 456
[[nodiscard]] inline long double logb(long double _Xx) noexcept { 
#line 457
return ::logbl(_Xx); 
#line 458
} 
#line 460
[[nodiscard]] inline long lrint(long double _Xx) noexcept { 
#line 461
return ::lrintl(_Xx); 
#line 462
} 
#line 464
[[nodiscard]] inline long lround(long double _Xx) noexcept { 
#line 465
return ::lroundl(_Xx); 
#line 466
} 
#line 468
inline long double modf(long double _Xx, long double *_Yx) noexcept { 
#line 469
return ::modfl(_Xx, _Yx); 
#line 470
} 
#line 472
[[nodiscard]] inline long double nearbyint(long double _Xx) noexcept { 
#line 473
return ::nearbyintl(_Xx); 
#line 474
} 
#line 476
[[nodiscard]] inline long double nextafter(long double _Xx, long double _Yx) noexcept 
#line 477
{ 
#line 478
return ::nextafterl(_Xx, _Yx); 
#line 479
} 
#line 481
[[nodiscard]] inline long double nexttoward(long double _Xx, long double _Yx) noexcept 
#line 482
{ 
#line 483
return ::nexttowardl(_Xx, _Yx); 
#line 484
} 
#line 486
[[nodiscard]] inline long double pow(long double _Xx, long double _Yx) noexcept 
#line 487
{ 
#line 488
return ::powl(_Xx, _Yx); 
#line 489
} 
#line 491
[[nodiscard]] inline long double remainder(long double _Xx, long double _Yx) noexcept 
#line 492
{ 
#line 493
return ::remainderl(_Xx, _Yx); 
#line 494
} 
#line 496
inline long double remquo(long double _Xx, long double _Yx, int *_Zx) noexcept { 
#line 497
return ::remquol(_Xx, _Yx, _Zx); 
#line 498
} 
#line 500
[[nodiscard]] inline long double rint(long double _Xx) noexcept { 
#line 501
return ::rintl(_Xx); 
#line 502
} 
#line 504
[[nodiscard]] inline long double round(long double _Xx) noexcept { 
#line 510 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::roundl(_Xx); 
#line 512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 514
[[nodiscard]] inline long double scalbln(long double _Xx, long _Yx) noexcept { 
#line 515
return ::scalblnl(_Xx, _Yx); 
#line 516
} 
#line 518
[[nodiscard]] inline long double scalbn(long double _Xx, int _Yx) noexcept { 
#line 519
return ::scalbnl(_Xx, _Yx); 
#line 520
} 
#line 522
[[nodiscard]] inline long double sin(long double _Xx) noexcept { 
#line 523
return ::sinl(_Xx); 
#line 524
} 
#line 526
[[nodiscard]] inline long double sinh(long double _Xx) noexcept { 
#line 527
return ::sinhl(_Xx); 
#line 528
} 
#line 530
[[nodiscard]] inline long double sqrt(long double _Xx) noexcept { 
#line 531
return ::sqrtl(_Xx); 
#line 532
} 
#line 534
[[nodiscard]] inline long double tan(long double _Xx) noexcept { 
#line 535
return ::tanl(_Xx); 
#line 536
} 
#line 538
[[nodiscard]] inline long double tanh(long double _Xx) noexcept { 
#line 539
return ::tanhl(_Xx); 
#line 540
} 
#line 542
[[nodiscard]] inline long double tgamma(long double _Xx) noexcept { 
#line 543
return ::tgammal(_Xx); 
#line 544
} 
#line 546
[[nodiscard]] inline long double trunc(long double _Xx) noexcept { 
#line 552 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
return ::truncl(_Xx); 
#line 554 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
} 
#line 556
namespace std { 
#line 557
template< class _Ty1, class _Ty2> using _Common_float_type_t = conditional_t< is_same_v< _Ty1, long double>  || is_same_v< _Ty2, long double> , long double, conditional_t< is_same_v< _Ty1, float>  && is_same_v< _Ty2, float> , float, double> > ; 
#line 561
}
#line 563
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 >
double frexp ( _Ty _Value, int * const _Exp ) noexcept {
    return :: frexp ( static_cast < double > ( _Value ), _Exp );
}
#line 568
template < class _Ty1, class _Ty2, class _Ty3,
    :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 > && :: std :: is_arithmetic_v < _Ty3 >, int > = 0 >
[ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 > > fma (
    _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right ) noexcept {
    using _Common = :: std :: _Common_float_type_t < _Ty1, :: std :: _Common_float_type_t < _Ty2, _Ty3 >>;
    if constexpr ( :: std :: is_same_v < _Common, float > ) {
        return :: fmaf ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    } else if constexpr ( :: std :: is_same_v < _Common, double > ) {
        return :: fma ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    } else {
        return :: fmal ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Middle ), static_cast < _Common > ( _Right ) );
    }
}
#line 582
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 >
:: std :: _Common_float_type_t < _Ty1, _Ty2 > remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo ) noexcept {
    using _Common = :: std :: _Common_float_type_t < _Ty1, _Ty2 >;
    if constexpr ( :: std :: is_same_v < _Common, float > ) {
        return :: remquof ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    } else if constexpr ( :: std :: is_same_v < _Common, double > ) {
        return :: remquo ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    } else {
        return :: remquol ( static_cast < _Common > ( _Left ), static_cast < _Common > ( _Right ), _Pquo );
    }
}
#line 641 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double acos ( _Ty _Left ) noexcept { return :: acos ( static_cast < double > ( _Left ) ); }
#line 642
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double asin ( _Ty _Left ) noexcept { return :: asin ( static_cast < double > ( _Left ) ); }
#line 643
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double atan ( _Ty _Left ) noexcept { return :: atan ( static_cast < double > ( _Left ) ); }
#line 644
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > atan2 ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: atan2 ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 645
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cos ( _Ty _Left ) noexcept { return :: cos ( static_cast < double > ( _Left ) ); }
#line 646
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sin ( _Ty _Left ) noexcept { return :: sin ( static_cast < double > ( _Left ) ); }
#line 647
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tan ( _Ty _Left ) noexcept { return :: tan ( static_cast < double > ( _Left ) ); }
#line 648
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double acosh ( _Ty _Left ) noexcept { return :: acosh ( static_cast < double > ( _Left ) ); }
#line 649
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double asinh ( _Ty _Left ) noexcept { return :: asinh ( static_cast < double > ( _Left ) ); }
#line 650
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double atanh ( _Ty _Left ) noexcept { return :: atanh ( static_cast < double > ( _Left ) ); }
#line 651
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cosh ( _Ty _Left ) noexcept { return :: cosh ( static_cast < double > ( _Left ) ); }
#line 652
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sinh ( _Ty _Left ) noexcept { return :: sinh ( static_cast < double > ( _Left ) ); }
#line 653
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tanh ( _Ty _Left ) noexcept { return :: tanh ( static_cast < double > ( _Left ) ); }
#line 654
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double exp ( _Ty _Left ) noexcept { return :: exp ( static_cast < double > ( _Left ) ); }
#line 655
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double exp2 ( _Ty _Left ) noexcept { return :: exp2 ( static_cast < double > ( _Left ) ); }
#line 656
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double expm1 ( _Ty _Left ) noexcept { return :: expm1 ( static_cast < double > ( _Left ) ); }
#line 658
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] int ilogb ( _Ty _Left ) noexcept { return :: ilogb ( static_cast < double > ( _Left ) ); }
#line 659
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double ldexp ( _Ty _Left, int _Arg2 ) noexcept { return :: ldexp ( static_cast < double > ( _Left ), _Arg2 ); }
#line 660
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log ( _Ty _Left ) noexcept { return :: log ( static_cast < double > ( _Left ) ); }
#line 661
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log10 ( _Ty _Left ) noexcept { return :: log10 ( static_cast < double > ( _Left ) ); }
#line 662
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log1p ( _Ty _Left ) noexcept { return :: log1p ( static_cast < double > ( _Left ) ); }
#line 663
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double log2 ( _Ty _Left ) noexcept { return :: log2 ( static_cast < double > ( _Left ) ); }
#line 664
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double logb ( _Ty _Left ) noexcept { return :: logb ( static_cast < double > ( _Left ) ); }
#line 666
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double scalbn ( _Ty _Left, int _Arg2 ) noexcept { return :: scalbn ( static_cast < double > ( _Left ), _Arg2 ); }
#line 667
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double scalbln ( _Ty _Left, long _Arg2 ) noexcept { return :: scalbln ( static_cast < double > ( _Left ), _Arg2 ); }
#line 668
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double cbrt ( _Ty _Left ) noexcept { return :: cbrt ( static_cast < double > ( _Left ) ); }
#line 670
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double fabs ( _Ty _Left ) noexcept { return :: fabs ( static_cast < double > ( _Left ) ); }
#line 671
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > hypot ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: hypot ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 673
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > pow ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: pow ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 674
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double sqrt ( _Ty _Left ) noexcept { return :: sqrt ( static_cast < double > ( _Left ) ); }
#line 675
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double erf ( _Ty _Left ) noexcept { return :: erf ( static_cast < double > ( _Left ) ); }
#line 676
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double erfc ( _Ty _Left ) noexcept { return :: erfc ( static_cast < double > ( _Left ) ); }
#line 677
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double lgamma ( _Ty _Left ) noexcept { return :: lgamma ( static_cast < double > ( _Left ) ); }
#line 678
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double tgamma ( _Ty _Left ) noexcept { return :: tgamma ( static_cast < double > ( _Left ) ); }
#line 679
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double ceil ( _Ty _Left ) noexcept { return :: ceil ( static_cast < double > ( _Left ) ); }
#line 680
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double floor ( _Ty _Left ) noexcept { return :: floor ( static_cast < double > ( _Left ) ); }
#line 681
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double nearbyint ( _Ty _Left ) noexcept { return :: nearbyint ( static_cast < double > ( _Left ) ); }
#line 682
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double rint ( _Ty _Left ) noexcept { return :: rint ( static_cast < double > ( _Left ) ); }
#line 683
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long lrint ( _Ty _Left ) noexcept { return :: lrint ( static_cast < double > ( _Left ) ); }
#line 684
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long long llrint ( _Ty _Left ) noexcept { return :: llrint ( static_cast < double > ( _Left ) ); }
#line 685
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double round ( _Ty _Left ) noexcept { return :: round ( static_cast < double > ( _Left ) ); }
#line 686
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long lround ( _Ty _Left ) noexcept { return :: lround ( static_cast < double > ( _Left ) ); }
#line 687
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] long long llround ( _Ty _Left ) noexcept { return :: llround ( static_cast < double > ( _Left ) ); }
#line 688
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double trunc ( _Ty _Left ) noexcept { return :: trunc ( static_cast < double > ( _Left ) ); }
#line 689
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmod ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmod ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 690
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > remainder ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: remainder ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 692
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > copysign ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: copysign ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 694
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > nextafter ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: nextafter ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 695
template < class _Ty, :: std :: enable_if_t < :: std :: is_integral_v < _Ty >, int > = 0 > [ [ nodiscard ] ] double nexttoward ( _Ty _Left, long double _Arg2 ) noexcept { return :: nexttoward ( static_cast < double > ( _Left ), _Arg2 ); }
#line 696
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fdim ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fdim ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 697
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmax ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmax ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 698
template < class _Ty1, class _Ty2, :: std :: enable_if_t < :: std :: is_arithmetic_v < _Ty1 > && :: std :: is_arithmetic_v < _Ty2 >, int > = 0 > [ [ nodiscard ] ] :: std :: _Common_float_type_t < _Ty1, _Ty2 > fmin ( _Ty1 _Left, _Ty2 _Right ) noexcept { return :: fmin ( static_cast < double > ( _Left ), static_cast < double > ( _Right ) ); }
#line 713
namespace std { 
#line 714
using ::abs;
#line 715
using ::acos;
#line 716
using ::asin;
#line 717
using ::atan;
#line 718
using ::atan2;
#line 719
using ::ceil;
#line 720
using ::cos;
#line 721
using ::cosh;
#line 722
using ::exp;
#line 723
using ::fabs;
#line 724
using ::floor;
#line 725
using ::fmod;
#line 726
using ::frexp;
#line 727
using ::ldexp;
#line 728
using ::log;
#line 729
using ::log10;
#line 730
using ::modf;
#line 731
using ::pow;
#line 732
using ::sin;
#line 733
using ::sinh;
#line 734
using ::sqrt;
#line 735
using ::tan;
#line 736
using ::tanh;
#line 738
using ::acosf;
#line 739
using ::asinf;
#line 740
using ::atanf;
#line 741
using ::atan2f;
#line 742
using ::ceilf;
#line 743
using ::cosf;
#line 744
using ::coshf;
#line 745
using ::expf;
#line 746
using ::fabsf;
#line 747
using ::floorf;
#line 748
using ::fmodf;
#line 749
using ::frexpf;
#line 750
using ::ldexpf;
#line 751
using ::logf;
#line 752
using ::log10f;
#line 753
using ::modff;
#line 754
using ::powf;
#line 755
using ::sinf;
#line 756
using ::sinhf;
#line 757
using ::sqrtf;
#line 758
using ::tanf;
#line 759
using ::tanhf;
#line 761
using ::acosl;
#line 762
using ::asinl;
#line 763
using ::atanl;
#line 764
using ::atan2l;
#line 765
using ::ceill;
#line 766
using ::cosl;
#line 767
using ::coshl;
#line 768
using ::expl;
#line 769
using ::fabsl;
#line 770
using ::floorl;
#line 771
using ::fmodl;
#line 772
using ::frexpl;
#line 773
using ::ldexpl;
#line 774
using ::logl;
#line 775
using ::log10l;
#line 776
using ::modfl;
#line 777
using ::powl;
#line 778
using ::sinl;
#line 779
using ::sinhl;
#line 780
using ::sqrtl;
#line 781
using ::tanl;
#line 782
using ::tanhl;
#line 784
using ::float_t;
#line 785
using ::double_t;
#line 787
using ::acosh;
#line 788
using ::asinh;
#line 789
using ::atanh;
#line 790
using ::cbrt;
#line 791
using ::erf;
#line 792
using ::erfc;
#line 793
using ::expm1;
#line 794
using ::exp2;
#line 796
inline namespace _Binary_hypot { 
#line 797
using ::hypot;
#line 798
}
#line 800
using ::ilogb;
#line 801
using ::lgamma;
#line 802
using ::log1p;
#line 803
using ::log2;
#line 804
using ::logb;
#line 805
using ::llrint;
#line 806
using ::lrint;
#line 807
using ::nearbyint;
#line 808
using ::rint;
#line 809
using ::llround;
#line 810
using ::lround;
#line 811
using ::fdim;
#line 812
using ::fma;
#line 813
using ::fmax;
#line 814
using ::fmin;
#line 815
using ::round;
#line 816
using ::trunc;
#line 817
using ::remainder;
#line 818
using ::remquo;
#line 819
using ::copysign;
#line 820
using ::nan;
#line 821
using ::nextafter;
#line 822
using ::scalbn;
#line 823
using ::scalbln;
#line 824
using ::nexttoward;
#line 825
using ::tgamma;
#line 827
using ::acoshf;
#line 828
using ::asinhf;
#line 829
using ::atanhf;
#line 830
using ::cbrtf;
#line 831
using ::erff;
#line 832
using ::erfcf;
#line 833
using ::expm1f;
#line 834
using ::exp2f;
#line 835
using ::hypotf;
#line 836
using ::ilogbf;
#line 837
using ::lgammaf;
#line 838
using ::log1pf;
#line 839
using ::log2f;
#line 840
using ::logbf;
#line 841
using ::llrintf;
#line 842
using ::lrintf;
#line 843
using ::nearbyintf;
#line 844
using ::rintf;
#line 845
using ::llroundf;
#line 846
using ::lroundf;
#line 847
using ::fdimf;
#line 848
using ::fmaf;
#line 849
using ::fmaxf;
#line 850
using ::fminf;
#line 851
using ::roundf;
#line 852
using ::truncf;
#line 853
using ::remainderf;
#line 854
using ::remquof;
#line 855
using ::copysignf;
#line 856
using ::nanf;
#line 857
using ::nextafterf;
#line 858
using ::scalbnf;
#line 859
using ::scalblnf;
#line 860
using ::nexttowardf;
#line 861
using ::tgammaf;
#line 863
using ::acoshl;
#line 864
using ::asinhl;
#line 865
using ::atanhl;
#line 866
using ::cbrtl;
#line 867
using ::erfl;
#line 868
using ::erfcl;
#line 869
using ::expm1l;
#line 870
using ::exp2l;
#line 871
using ::hypotl;
#line 872
using ::ilogbl;
#line 873
using ::lgammal;
#line 874
using ::log1pl;
#line 875
using ::log2l;
#line 876
using ::logbl;
#line 877
using ::llrintl;
#line 878
using ::lrintl;
#line 879
using ::nearbyintl;
#line 880
using ::rintl;
#line 881
using ::llroundl;
#line 882
using ::lroundl;
#line 883
using ::fdiml;
#line 884
using ::fmal;
#line 885
using ::fmaxl;
#line 886
using ::fminl;
#line 887
using ::roundl;
#line 888
using ::truncl;
#line 889
using ::remainderl;
#line 890
using ::remquol;
#line 891
using ::copysignl;
#line 892
using ::nanl;
#line 893
using ::nextafterl;
#line 894
using ::scalbnl;
#line 895
using ::scalblnl;
#line 896
using ::nexttowardl;
#line 897
using ::tgammal;
#line 899
using ::fpclassify;
#line 900
using ::signbit;
#line 901
using ::isfinite;
#line 902
using ::isinf;
#line 903
using ::isnan;
#line 904
using ::isnormal;
#line 905
using ::isgreater;
#line 906
using ::isgreaterequal;
#line 907
using ::isless;
#line 908
using ::islessequal;
#line 909
using ::islessgreater;
#line 910
using ::isunordered;
#line 911
}
#line 1489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cmath"
#pragma warning(pop)
#pragma pack ( pop )
#line 10839 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl _hypot(double x, double y); 
#line 10840
extern "C" __declspec(dllimport) float __cdecl _hypotf(float x, float y); 
#line 10850 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline bool signbit(long double) throw(); 
#line 10851
extern "C" __declspec(dllimport) int _ldsign(long double); 
#line 10894 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline bool signbit(double) throw(); 
#line 10895
extern "C" __declspec(dllimport) int _dsign(double); 
#line 10939 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline bool signbit(float) throw(); 
#line 10940
extern "C" __declspec(dllimport) int _fdsign(float); 
#line 10948 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isinf(long double a); 
#line 10983 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isinf(double a); 
#line 11021 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isinf(float a); 
#line 11028 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isnan(long double a); 
#line 11061 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isnan(double a); 
#line 11097 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isnan(float a); 
#line 11104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 11141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isfinite(double a); 
#line 11177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static __inline bool isfinite(float a); 
#line 11185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
template< class T> extern T _Pow_int(T, int) throw(); 
#line 11186
extern inline __int64 abs(__int64) throw(); 
#line 11267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 11271 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 11272
extern inline double __cdecl abs(double) throw(); 
#line 11273
extern inline float __cdecl fabs(float) throw(); 
#line 11274
extern inline float __cdecl ceil(float) throw(); 
#line 11275
extern inline float __cdecl floor(float) throw(); 
#line 11276
extern inline float __cdecl sqrt(float) throw(); 
#line 11277
extern inline float __cdecl pow(float, float) throw(); 
#line 11314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
template< class _Ty1, class _Ty2, std::enable_if_t< std::is_arithmetic_v< _Ty1>  && std::is_arithmetic_v< _Ty2> , int>  > [[nodiscard]] std::_Common_float_type_t< _Ty1, _Ty2>  __cdecl pow(_Ty1 _Left, _Ty2 _Right) noexcept; 
#line 11321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 11322
extern inline float __cdecl log10(float) throw(); 
#line 11323
extern inline float __cdecl fmod(float, float) throw(); 
#line 11324
extern inline float __cdecl modf(float, float *) throw(); 
#line 11325
extern inline float __cdecl exp(float) throw(); 
#line 11326
extern inline float __cdecl frexp(float, int *) throw(); 
#line 11327
extern inline float __cdecl ldexp(float, int) throw(); 
#line 11328
extern inline float __cdecl asin(float) throw(); 
#line 11329
extern inline float __cdecl sin(float) throw(); 
#line 11330
extern inline float __cdecl sinh(float) throw(); 
#line 11331
extern inline float __cdecl acos(float) throw(); 
#line 11332
extern inline float __cdecl cos(float) throw(); 
#line 11333
extern inline float __cdecl cosh(float) throw(); 
#line 11334
extern inline float __cdecl atan(float) throw(); 
#line 11335
extern inline float __cdecl atan2(float, float) throw(); 
#line 11336
extern inline float __cdecl tan(float) throw(); 
#line 11337
extern inline float __cdecl tanh(float) throw(); 
#line 11560 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 11561
extern inline int __cdecl ilogb(float) throw(); 
#line 11562
extern float __cdecl scalbn(float, float) throw(); 
#line 11563
extern inline float __cdecl scalbln(float, long) throw(); 
#line 11564
extern inline float __cdecl exp2(float) throw(); 
#line 11565
extern inline float __cdecl expm1(float) throw(); 
#line 11566
extern inline float __cdecl log2(float) throw(); 
#line 11567
extern inline float __cdecl log1p(float) throw(); 
#line 11568
extern inline float __cdecl acosh(float) throw(); 
#line 11569
extern inline float __cdecl asinh(float) throw(); 
#line 11570
extern inline float __cdecl atanh(float) throw(); 
#line 11571
extern inline float __cdecl hypot(float, float) throw(); 
#line 11572
extern inline float __cdecl cbrt(float) throw(); 
#line 11573
extern inline float __cdecl erf(float) throw(); 
#line 11574
extern inline float __cdecl erfc(float) throw(); 
#line 11575
extern inline float __cdecl lgamma(float) throw(); 
#line 11576
extern inline float __cdecl tgamma(float) throw(); 
#line 11577
extern inline float __cdecl copysign(float, float) throw(); 
#line 11578
extern inline float __cdecl nextafter(float, float) throw(); 
#line 11579
extern inline float __cdecl remainder(float, float) throw(); 
#line 11580
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 11581
extern inline float __cdecl round(float) throw(); 
#line 11582
extern inline long __cdecl lround(float) throw(); 
#line 11583
extern inline __int64 __cdecl llround(float) throw(); 
#line 11584
extern inline float __cdecl trunc(float) throw(); 
#line 11585
extern inline float __cdecl rint(float) throw(); 
#line 11586
extern inline long __cdecl lrint(float) throw(); 
#line 11587
extern inline __int64 __cdecl llrint(float) throw(); 
#line 11588
extern inline float __cdecl nearbyint(float) throw(); 
#line 11589
extern inline float __cdecl fdim(float, float) throw(); 
#line 11590
extern inline float __cdecl fma(float, float, float) throw(); 
#line 11591
extern inline float __cdecl fmax(float, float) throw(); 
#line 11592
extern inline float __cdecl fmin(float, float) throw(); 
#line 11595 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
static inline float exp10(const float a); 
#line 11597
static inline float rsqrt(const float a); 
#line 11599
static inline float rcbrt(const float a); 
#line 11601
static inline float sinpi(const float a); 
#line 11603
static inline float cospi(const float a); 
#line 11605
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
#line 11607
static inline void sincos(const float a, float *const sptr, float *const cptr); 
#line 11609
static inline float j0(const float a); 
#line 11611
static inline float j1(const float a); 
#line 11613
static inline float jn(const int n, const float a); 
#line 11615
static inline float y0(const float a); 
#line 11617
static inline float y1(const float a); 
#line 11619
static inline float yn(const int n, const float a); 
#line 11621
static inline float cyl_bessel_i0(const float a); 
#line 11623
static inline float cyl_bessel_i1(const float a); 
#line 11625
static inline float erfinv(const float a); 
#line 11627
static inline float erfcinv(const float a); 
#line 11629
static inline float normcdfinv(const float a); 
#line 11631
static inline float normcdf(const float a); 
#line 11633
static inline float erfcx(const float a); 
#line 11635
static inline double copysign(const double a, const float b); 
#line 11637
static inline double copysign(const float a, const double b); 
#line 11645
static inline unsigned min(const unsigned a, const unsigned b); 
#line 11653
static inline unsigned min(const int a, const unsigned b); 
#line 11661
static inline unsigned min(const unsigned a, const int b); 
#line 11669
static inline long min(const long a, const long b); 
#line 11677
static inline unsigned long min(const unsigned long a, const unsigned long b); 
#line 11685
static inline unsigned long min(const long a, const unsigned long b); 
#line 11693
static inline unsigned long min(const unsigned long a, const long b); 
#line 11701
static inline __int64 min(const __int64 a, const __int64 b); 
#line 11709
static inline unsigned __int64 min(const unsigned __int64 a, const unsigned __int64 b); 
#line 11717
static inline unsigned __int64 min(const __int64 a, const unsigned __int64 b); 
#line 11725
static inline unsigned __int64 min(const unsigned __int64 a, const __int64 b); 
#line 11736
static inline float min(const float a, const float b); 
#line 11747
static inline double min(const double a, const double b); 
#line 11757
static inline double min(const float a, const double b); 
#line 11767
static inline double min(const double a, const float b); 
#line 11775
static inline unsigned max(const unsigned a, const unsigned b); 
#line 11783
static inline unsigned max(const int a, const unsigned b); 
#line 11791
static inline unsigned max(const unsigned a, const int b); 
#line 11799
static inline long max(const long a, const long b); 
#line 11807
static inline unsigned long max(const unsigned long a, const unsigned long b); 
#line 11815
static inline unsigned long max(const long a, const unsigned long b); 
#line 11823
static inline unsigned long max(const unsigned long a, const long b); 
#line 11831
static inline __int64 max(const __int64 a, const __int64 b); 
#line 11839
static inline unsigned __int64 max(const unsigned __int64 a, const unsigned __int64 b); 
#line 11847
static inline unsigned __int64 max(const __int64 a, const unsigned __int64 b); 
#line 11855
static inline unsigned __int64 max(const unsigned __int64 a, const __int64 b); 
#line 11866
static inline float max(const float a, const float b); 
#line 11877
static inline double max(const double a, const double b); 
#line 11887
static inline double max(const float a, const double b); 
#line 11897
static inline double max(const double a, const float b); 
#line 11909
extern "C" {
#line 11910
inline void *__nv_aligned_device_malloc(size_t size, size_t align) {int volatile ___ = 1;(void)size;(void)align;::exit(___);}
#if 0
#line 11911
{ 
#line 11912
void *__nv_aligned_device_malloc_impl(size_t, size_t); 
#line 11913
return __nv_aligned_device_malloc_impl(size, align); 
#line 11914
} 
#endif
#line 11915 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.h"
}
#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const long double a) 
#line 434
{ 
#line 438 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isinf< long double> (a); 
#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 449 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const double a) 
#line 450
{ 
#line 454 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isinf< double> (a); 
#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isinf(const float a) 
#line 466
{ 
#line 470 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isinf< float> (a); 
#line 472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 481 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const long double a) 
#line 482
{ 
#line 486 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isnan< long double> (a); 
#line 488 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const double a) 
#line 498
{ 
#line 502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isnan< double> (a); 
#line 504 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 513 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isnan(const float a) 
#line 514
{ 
#line 518 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isnan< float> (a); 
#line 520 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const long double a) 
#line 530
{ 
#line 534 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isfinite< long double> (a); 
#line 536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const double a) 
#line 546
{ 
#line 550 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isfinite< double> (a); 
#line 552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 561 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static __inline bool isfinite(const float a) 
#line 562
{ 
#line 566 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
return isfinite< float> (a); 
#line 568 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
} 
#line 758 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static inline float exp10(const float a) 
#line 759
{ 
#line 760
return exp10f(a); 
#line 761
} 
#line 763
static inline float rsqrt(const float a) 
#line 764
{ 
#line 765
return rsqrtf(a); 
#line 766
} 
#line 768
static inline float rcbrt(const float a) 
#line 769
{ 
#line 770
return rcbrtf(a); 
#line 771
} 
#line 773
static inline float sinpi(const float a) 
#line 774
{ 
#line 775
return sinpif(a); 
#line 776
} 
#line 778
static inline float cospi(const float a) 
#line 779
{ 
#line 780
return cospif(a); 
#line 781
} 
#line 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
#line 784
{ 
#line 785
sincospif(a, sptr, cptr); 
#line 786
} 
#line 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
#line 789
{ 
#line 790
sincosf(a, sptr, cptr); 
#line 791
} 
#line 793
static inline float j0(const float a) 
#line 794
{ 
#line 795
return j0f(a); 
#line 796
} 
#line 798
static inline float j1(const float a) 
#line 799
{ 
#line 800
return j1f(a); 
#line 801
} 
#line 803
static inline float jn(const int n, const float a) 
#line 804
{ 
#line 805
return jnf(n, a); 
#line 806
} 
#line 808
static inline float y0(const float a) 
#line 809
{ 
#line 810
return y0f(a); 
#line 811
} 
#line 813
static inline float y1(const float a) 
#line 814
{ 
#line 815
return y1f(a); 
#line 816
} 
#line 818
static inline float yn(const int n, const float a) 
#line 819
{ 
#line 820
return ynf(n, a); 
#line 821
} 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 823
static inline float cyl_bessel_i0(const float a) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 824
{ 
#line 825
return cyl_bessel_i0f(a); 
#line 826
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 828 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static inline float cyl_bessel_i1(const float a) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;::exit(___);}
#if 0
#line 829
{ 
#line 830
return cyl_bessel_i1f(a); 
#line 831
} 
#endif
#line 833 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static inline float erfinv(const float a) 
#line 834
{ 
#line 835
return erfinvf(a); 
#line 836
} 
#line 838
static inline float erfcinv(const float a) 
#line 839
{ 
#line 840
return erfcinvf(a); 
#line 841
} 
#line 843
static inline float normcdfinv(const float a) 
#line 844
{ 
#line 845
return normcdfinvf(a); 
#line 846
} 
#line 848
static inline float normcdf(const float a) 
#line 849
{ 
#line 850
return normcdff(a); 
#line 851
} 
#line 853
static inline float erfcx(const float a) 
#line 854
{ 
#line 855
return erfcxf(a); 
#line 856
} 
#line 858
static inline double copysign(const double a, const float b) 
#line 859
{ 
#line 860
return copysign(a, static_cast< double>(b)); 
#line 861
} 
#line 863
static inline double copysign(const float a, const double b) 
#line 864
{ 
#line 865
return copysign(static_cast< double>(a), b); 
#line 866
} 
#line 868
static inline unsigned min(const unsigned a, const unsigned b) 
#line 869
{ 
#line 870
return umin(a, b); 
#line 871
} 
#line 873
static inline unsigned min(const int a, const unsigned b) 
#line 874
{ 
#line 875
return umin(static_cast< unsigned>(a), b); 
#line 876
} 
#line 878
static inline unsigned min(const unsigned a, const int b) 
#line 879
{ 
#line 880
return umin(a, static_cast< unsigned>(b)); 
#line 881
} 
#line 883
static inline long min(const long a, const long b) 
#line 884
{ 
#line 885
long retval; 
#line 888
#pragma warning (disable: 4127)
#line 891 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 893
#pragma warning (default: 4127)
#line 895 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
#line 896
} else { 
#line 897
retval = (static_cast< long>(llmin(static_cast< __int64>(a), static_cast< __int64>(b)))); 
#line 898
}  
#line 899
return retval; 
#line 900
} 
#line 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
#line 903
{ 
#line 904
unsigned long retval; 
#line 906
#pragma warning (disable: 4127)
#line 908 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 910
#pragma warning (default: 4127)
#line 912 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 913
} else { 
#line 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 915
}  
#line 916
return retval; 
#line 917
} 
#line 919
static inline unsigned long min(const long a, const unsigned long b) 
#line 920
{ 
#line 921
unsigned long retval; 
#line 923
#pragma warning (disable: 4127)
#line 925 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 927
#pragma warning (default: 4127)
#line 929 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 930
} else { 
#line 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 932
}  
#line 933
return retval; 
#line 934
} 
#line 936
static inline unsigned long min(const unsigned long a, const long b) 
#line 937
{ 
#line 938
unsigned long retval; 
#line 940
#pragma warning (disable: 4127)
#line 942 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 944
#pragma warning (default: 4127)
#line 946 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 947
} else { 
#line 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 949
}  
#line 950
return retval; 
#line 951
} 
#line 953
static inline __int64 min(const __int64 a, const __int64 b) 
#line 954
{ 
#line 955
return llmin(a, b); 
#line 956
} 
#line 958
static inline unsigned __int64 min(const unsigned __int64 a, const unsigned __int64 b) 
#line 959
{ 
#line 960
return ullmin(a, b); 
#line 961
} 
#line 963
static inline unsigned __int64 min(const __int64 a, const unsigned __int64 b) 
#line 964
{ 
#line 965
return ullmin(static_cast< unsigned __int64>(a), b); 
#line 966
} 
#line 968
static inline unsigned __int64 min(const unsigned __int64 a, const __int64 b) 
#line 969
{ 
#line 970
return ullmin(a, static_cast< unsigned __int64>(b)); 
#line 971
} 
#line 973
static inline float min(const float a, const float b) 
#line 974
{ 
#line 975
return fminf(a, b); 
#line 976
} 
#line 978
static inline double min(const double a, const double b) 
#line 979
{ 
#line 980
return fmin(a, b); 
#line 981
} 
#line 983
static inline double min(const float a, const double b) 
#line 984
{ 
#line 985
return fmin(static_cast< double>(a), b); 
#line 986
} 
#line 988
static inline double min(const double a, const float b) 
#line 989
{ 
#line 990
return fmin(a, static_cast< double>(b)); 
#line 991
} 
#line 993
static inline unsigned max(const unsigned a, const unsigned b) 
#line 994
{ 
#line 995
return umax(a, b); 
#line 996
} 
#line 998
static inline unsigned max(const int a, const unsigned b) 
#line 999
{ 
#line 1000
return umax(static_cast< unsigned>(a), b); 
#line 1001
} 
#line 1003
static inline unsigned max(const unsigned a, const int b) 
#line 1004
{ 
#line 1005
return umax(a, static_cast< unsigned>(b)); 
#line 1006
} 
#line 1008
static inline long max(const long a, const long b) 
#line 1009
{ 
#line 1010
long retval; 
#line 1013
#pragma warning (disable: 4127)
#line 1015 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(long) == sizeof(int)) { 
#line 1017
#pragma warning (default: 4127)
#line 1019 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
#line 1020
} else { 
#line 1021
retval = (static_cast< long>(llmax(static_cast< __int64>(a), static_cast< __int64>(b)))); 
#line 1022
}  
#line 1023
return retval; 
#line 1024
} 
#line 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
#line 1027
{ 
#line 1028
unsigned long retval; 
#line 1030
#pragma warning (disable: 4127)
#line 1032 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1034
#pragma warning (default: 4127)
#line 1036 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1037
} else { 
#line 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1039
}  
#line 1040
return retval; 
#line 1041
} 
#line 1043
static inline unsigned long max(const long a, const unsigned long b) 
#line 1044
{ 
#line 1045
unsigned long retval; 
#line 1047
#pragma warning (disable: 4127)
#line 1049 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1051
#pragma warning (default: 4127)
#line 1053 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1054
} else { 
#line 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1056
}  
#line 1057
return retval; 
#line 1058
} 
#line 1060
static inline unsigned long max(const unsigned long a, const long b) 
#line 1061
{ 
#line 1062
unsigned long retval; 
#line 1064
#pragma warning (disable: 4127)
#line 1066 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
if (sizeof(unsigned long) == sizeof(unsigned)) { 
#line 1068
#pragma warning (default: 4127)
#line 1070 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
#line 1071
} else { 
#line 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned __int64>(a), static_cast< unsigned __int64>(b)))); 
#line 1073
}  
#line 1074
return retval; 
#line 1075
} 
#line 1077
static inline __int64 max(const __int64 a, const __int64 b) 
#line 1078
{ 
#line 1079
return llmax(a, b); 
#line 1080
} 
#line 1082
static inline unsigned __int64 max(const unsigned __int64 a, const unsigned __int64 b) 
#line 1083
{ 
#line 1084
return ullmax(a, b); 
#line 1085
} 
#line 1087
static inline unsigned __int64 max(const __int64 a, const unsigned __int64 b) 
#line 1088
{ 
#line 1089
return ullmax(static_cast< unsigned __int64>(a), b); 
#line 1090
} 
#line 1092
static inline unsigned __int64 max(const unsigned __int64 a, const __int64 b) 
#line 1093
{ 
#line 1094
return ullmax(a, static_cast< unsigned __int64>(b)); 
#line 1095
} 
#line 1097
static inline float max(const float a, const float b) 
#line 1098
{ 
#line 1099
return fmaxf(a, b); 
#line 1100
} 
#line 1102
static inline double max(const double a, const double b) 
#line 1103
{ 
#line 1104
return fmax(a, b); 
#line 1105
} 
#line 1107
static inline double max(const float a, const double b) 
#line 1108
{ 
#line 1109
return fmax(static_cast< double>(a), b); 
#line 1110
} 
#line 1112
static inline double max(const double a, const float b) 
#line 1113
{ 
#line 1114
return fmax(a, static_cast< double>(b)); 
#line 1115
} 
#line 1121
#pragma warning(disable : 4211)
#line 1126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\math_functions.hpp"
static inline int min(const int a, const int b) 
#line 1127
{ 
#line 1128
return (a < b) ? a : b; 
#line 1129
} 
#line 1131
static inline unsigned umin(const unsigned a, const unsigned b) 
#line 1132
{ 
#line 1133
return (a < b) ? a : b; 
#line 1134
} 
#line 1136
static inline __int64 llmin(const __int64 a, const __int64 b) 
#line 1137
{ 
#line 1138
return (a < b) ? a : b; 
#line 1139
} 
#line 1141
static inline unsigned __int64 ullmin(const unsigned __int64 a, const unsigned __int64 
#line 1142
b) 
#line 1143
{ 
#line 1144
return (a < b) ? a : b; 
#line 1145
} 
#line 1147
static inline int max(const int a, const int b) 
#line 1148
{ 
#line 1149
return (a > b) ? a : b; 
#line 1150
} 
#line 1152
static inline unsigned umax(const unsigned a, const unsigned b) 
#line 1153
{ 
#line 1154
return (a > b) ? a : b; 
#line 1155
} 
#line 1157
static inline __int64 llmax(const __int64 a, const __int64 b) 
#line 1158
{ 
#line 1159
return (a > b) ? a : b; 
#line 1160
} 
#line 1162
static inline unsigned __int64 ullmax(const unsigned __int64 a, const unsigned __int64 
#line 1163
b) 
#line 1164
{ 
#line 1165
return (a > b) ? a : b; 
#line 1166
} 
#line 1169
#pragma warning(default: 4211)
#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt/device_functions.h"
extern "C" {
#line 3215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt/device_functions.h"
static __inline int __vimax_s32_relu(const int a, const int b); 
#line 3227
static __inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b); 
#line 3236
static __inline int __vimin_s32_relu(const int a, const int b); 
#line 3248
static __inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b); 
#line 3257
static __inline int __vimax3_s32(const int a, const int b, const int c); 
#line 3269
static __inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3278
static __inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3290
static __inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3299
static __inline int __vimin3_s32(const int a, const int b, const int c); 
#line 3311
static __inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3320
static __inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3332
static __inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3341
static __inline int __vimax3_s32_relu(const int a, const int b, const int c); 
#line 3353
static __inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3362
static __inline int __vimin3_s32_relu(const int a, const int b, const int c); 
#line 3374
static __inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3383
static __inline int __viaddmax_s32(const int a, const int b, const int c); 
#line 3395
static __inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3404
static __inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3416
static __inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3425
static __inline int __viaddmin_s32(const int a, const int b, const int c); 
#line 3437
static __inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3446
static __inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c); 
#line 3458
static __inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c); 
#line 3468
static __inline int __viaddmax_s32_relu(const int a, const int b, const int c); 
#line 3480
static __inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3490
static __inline int __viaddmin_s32_relu(const int a, const int b, const int c); 
#line 3502
static __inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
#line 3511
static __inline int __vibmax_s32(const int a, const int b, bool *const pred); 
#line 3520
static __inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred); 
#line 3529
static __inline int __vibmin_s32(const int a, const int b, bool *const pred); 
#line 3538
static __inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred); 
#line 3552
static __inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3566
static __inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3580
static __inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3594
static __inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
#line 3601
}
#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
static __inline int __vimax_s32_relu(const int a, const int b) { 
#line 115
int ans = max(a, b); 
#line 117
return (ans > 0) ? ans : 0; 
#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 121
static __inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b) { 
#line 122
unsigned res; 
#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 131
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 133
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 134
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 137
short aS_lo = *((short *)(&aU_lo)); 
#line 138
short aS_hi = *((short *)(&aU_hi)); 
#line 140
short bS_lo = *((short *)(&bU_lo)); 
#line 141
short bS_hi = *((short *)(&bU_hi)); 
#line 144
short ansS_lo = (short)max(aS_lo, bS_lo); 
#line 145
short ansS_hi = (short)max(aS_hi, bS_hi); 
#line 148
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 149
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 152
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 153
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 156
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 160
} 
#line 162
static __inline int __vimin_s32_relu(const int a, const int b) { 
#line 169
int ans = min(a, b); 
#line 171
return (ans > 0) ? ans : 0; 
#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 175
static __inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b) { 
#line 176
unsigned res; 
#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 185
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 187
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 188
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 191
short aS_lo = *((short *)(&aU_lo)); 
#line 192
short aS_hi = *((short *)(&aU_hi)); 
#line 194
short bS_lo = *((short *)(&bU_lo)); 
#line 195
short bS_hi = *((short *)(&bU_hi)); 
#line 198
short ansS_lo = (short)min(aS_lo, bS_lo); 
#line 199
short ansS_hi = (short)min(aS_hi, bS_hi); 
#line 202
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 203
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 206
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 207
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 210
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 214
} 
#line 216
static __inline int __vimax3_s32(const int a, const int b, const int c) { 
#line 226
return max(max(a, b), c); 
#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 230
static __inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 231
unsigned res; 
#line 243 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 244
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 246
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 247
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 249
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 250
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 253
short aS_lo = *((short *)(&aU_lo)); 
#line 254
short aS_hi = *((short *)(&aU_hi)); 
#line 256
short bS_lo = *((short *)(&bU_lo)); 
#line 257
short bS_hi = *((short *)(&bU_hi)); 
#line 259
short cS_lo = *((short *)(&cU_lo)); 
#line 260
short cS_hi = *((short *)(&cU_hi)); 
#line 263
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
#line 264
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
#line 267
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 268
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 271
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 273 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 274
} 
#line 276
static __inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 286
return max(max(a, b), c); 
#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 290
static __inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 291
unsigned res; 
#line 302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 303
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 305
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 306
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 308
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 309
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 312
unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo); 
#line 313
unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi); 
#line 316
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 319 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 320
} 
#line 322
static __inline int __vimin3_s32(const int a, const int b, const int c) { 
#line 332
return min(min(a, b), c); 
#line 334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 336
static __inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 337
unsigned res; 
#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 349
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 351
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 352
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 354
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 355
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 358
short aS_lo = *((short *)(&aU_lo)); 
#line 359
short aS_hi = *((short *)(&aU_hi)); 
#line 361
short bS_lo = *((short *)(&bU_lo)); 
#line 362
short bS_hi = *((short *)(&bU_hi)); 
#line 364
short cS_lo = *((short *)(&cU_lo)); 
#line 365
short cS_hi = *((short *)(&cU_hi)); 
#line 368
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
#line 369
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
#line 372
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 373
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 376
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 379 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 380
} 
#line 382
static __inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 392
return min(min(a, b), c); 
#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 396
static __inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 397
unsigned res; 
#line 408 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 409
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 411
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 412
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 414
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 415
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 418
unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo); 
#line 419
unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi); 
#line 422
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 426
} 
#line 428
static __inline int __vimax3_s32_relu(const int a, const int b, const int c) { 
#line 438
int ans = max(max(a, b), c); 
#line 440
return (ans > 0) ? ans : 0; 
#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 444
static __inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 445
unsigned res; 
#line 456 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 457
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 459
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 460
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 462
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 463
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 466
short aS_lo = *((short *)(&aU_lo)); 
#line 467
short aS_hi = *((short *)(&aU_hi)); 
#line 469
short bS_lo = *((short *)(&bU_lo)); 
#line 470
short bS_hi = *((short *)(&bU_hi)); 
#line 472
short cS_lo = *((short *)(&cU_lo)); 
#line 473
short cS_hi = *((short *)(&cU_hi)); 
#line 476
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
#line 477
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
#line 480
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 481
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 484
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 485
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 488
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 491 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 492
} 
#line 494
static __inline int __vimin3_s32_relu(const int a, const int b, const int c) { 
#line 504
int ans = min(min(a, b), c); 
#line 506
return (ans > 0) ? ans : 0; 
#line 508 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 510
static __inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 511
unsigned res; 
#line 522 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 523
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 525
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 526
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 528
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 529
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 532
short aS_lo = *((short *)(&aU_lo)); 
#line 533
short aS_hi = *((short *)(&aU_hi)); 
#line 535
short bS_lo = *((short *)(&bU_lo)); 
#line 536
short bS_hi = *((short *)(&bU_hi)); 
#line 538
short cS_lo = *((short *)(&cU_lo)); 
#line 539
short cS_hi = *((short *)(&cU_hi)); 
#line 542
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
#line 543
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
#line 546
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 547
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 550
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 551
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 554
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 557 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 558
} 
#line 560
static __inline int __viaddmax_s32(const int a, const int b, const int c) { 
#line 570
return max(a + b, c); 
#line 572 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 574
static __inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 575
unsigned res; 
#line 586 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 587
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 589
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 590
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 592
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 593
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 596
short aS_lo = *((short *)(&aU_lo)); 
#line 597
short aS_hi = *((short *)(&aU_hi)); 
#line 599
short bS_lo = *((short *)(&bU_lo)); 
#line 600
short bS_hi = *((short *)(&bU_hi)); 
#line 602
short cS_lo = *((short *)(&cU_lo)); 
#line 603
short cS_hi = *((short *)(&cU_hi)); 
#line 606
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
#line 607
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
#line 610
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 611
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 614
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 617 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 618
} 
#line 620
static __inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 630
return max(a + b, c); 
#line 632 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 634
static __inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 635
unsigned res; 
#line 646 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 647
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 649
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 650
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 652
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 653
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 656
unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo); 
#line 657
unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi); 
#line 660
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 663 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 664
} 
#line 666
static __inline int __viaddmin_s32(const int a, const int b, const int c) { 
#line 676
return min(a + b, c); 
#line 678 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 680
static __inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 681
unsigned res; 
#line 692 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 693
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 695
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 696
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 698
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 699
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 702
short aS_lo = *((short *)(&aU_lo)); 
#line 703
short aS_hi = *((short *)(&aU_hi)); 
#line 705
short bS_lo = *((short *)(&bU_lo)); 
#line 706
short bS_hi = *((short *)(&bU_hi)); 
#line 708
short cS_lo = *((short *)(&cU_lo)); 
#line 709
short cS_hi = *((short *)(&cU_hi)); 
#line 712
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
#line 713
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
#line 716
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 717
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 720
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 723 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 724
} 
#line 726
static __inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c) { 
#line 736
return min(a + b, c); 
#line 738 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 740
static __inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
#line 741
unsigned res; 
#line 752 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 753
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 755
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 756
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 758
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 759
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 762
unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo); 
#line 763
unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi); 
#line 766
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 769 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 770
} 
#line 772
static __inline int __viaddmax_s32_relu(const int a, const int b, const int c) { 
#line 782
int ans = max(a + b, c); 
#line 784
return (ans > 0) ? ans : 0; 
#line 786 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 788
static __inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 789
unsigned res; 
#line 800 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 801
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 803
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 804
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 806
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 807
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 810
short aS_lo = *((short *)(&aU_lo)); 
#line 811
short aS_hi = *((short *)(&aU_hi)); 
#line 813
short bS_lo = *((short *)(&bU_lo)); 
#line 814
short bS_hi = *((short *)(&bU_hi)); 
#line 816
short cS_lo = *((short *)(&cU_lo)); 
#line 817
short cS_hi = *((short *)(&cU_hi)); 
#line 820
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
#line 821
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
#line 823
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 824
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 827
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 828
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 831
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 834 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 835
} 
#line 837
static __inline int __viaddmin_s32_relu(const int a, const int b, const int c) { 
#line 847
int ans = min(a + b, c); 
#line 849
return (ans > 0) ? ans : 0; 
#line 851 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 853
static __inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
#line 854
unsigned res; 
#line 865 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 866
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 868
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 869
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 871
unsigned short cU_lo = (unsigned short)(c & 65535U); 
#line 872
unsigned short cU_hi = (unsigned short)(c >> 16); 
#line 875
short aS_lo = *((short *)(&aU_lo)); 
#line 876
short aS_hi = *((short *)(&aU_hi)); 
#line 878
short bS_lo = *((short *)(&bU_lo)); 
#line 879
short bS_hi = *((short *)(&bU_hi)); 
#line 881
short cS_lo = *((short *)(&cU_lo)); 
#line 882
short cS_hi = *((short *)(&cU_hi)); 
#line 885
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
#line 886
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
#line 888
if (ansS_lo < 0) { ansS_lo = (0); }  
#line 889
if (ansS_hi < 0) { ansS_hi = (0); }  
#line 892
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 893
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 896
res = (((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16)); 
#line 899 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
return res; 
#line 900
} 
#line 904
static __inline int __vibmax_s32(const int a, const int b, bool *const pred) { 
#line 918
int ans = max(a, b); 
#line 920
(*pred) = (a >= b); 
#line 921
return ans; 
#line 923 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 925
static __inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred) { 
#line 939
unsigned ans = max(a, b); 
#line 941
(*pred) = (a >= b); 
#line 942
return ans; 
#line 944 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 947
static __inline int __vibmin_s32(const int a, const int b, bool *const pred) { 
#line 961
int ans = min(a, b); 
#line 963
(*pred) = (a <= b); 
#line 964
return ans; 
#line 966 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 969
static __inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred) { 
#line 983
unsigned ans = min(a, b); 
#line 985
(*pred) = (a <= b); 
#line 986
return ans; 
#line 988 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 990
static __inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1012
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1013
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1015
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1016
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1019
short aS_lo = *((short *)(&aU_lo)); 
#line 1020
short aS_hi = *((short *)(&aU_hi)); 
#line 1022
short bS_lo = *((short *)(&bU_lo)); 
#line 1023
short bS_hi = *((short *)(&bU_hi)); 
#line 1026
short ansS_lo = (short)max(aS_lo, bS_lo); 
#line 1027
short ansS_hi = (short)max(aS_hi, bS_hi); 
#line 1029
(*pred_hi) = (aS_hi >= bS_hi); 
#line 1030
(*pred_lo) = (aS_lo >= bS_lo); 
#line 1033
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 1034
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 1037
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1039
return ans; 
#line 1041 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 1043
static __inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1065
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1066
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1068
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1069
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1072
unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo); 
#line 1073
unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi); 
#line 1075
(*pred_hi) = (aU_hi >= bU_hi); 
#line 1076
(*pred_lo) = (aU_lo >= bU_lo); 
#line 1079
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1081
return ans; 
#line 1083 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 1085
static __inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1107
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1108
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1110
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1111
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1114
short aS_lo = *((short *)(&aU_lo)); 
#line 1115
short aS_hi = *((short *)(&aU_hi)); 
#line 1117
short bS_lo = *((short *)(&bU_lo)); 
#line 1118
short bS_hi = *((short *)(&bU_hi)); 
#line 1121
short ansS_lo = (short)min(aS_lo, bS_lo); 
#line 1122
short ansS_hi = (short)min(aS_hi, bS_hi); 
#line 1124
(*pred_hi) = (aS_hi <= bS_hi); 
#line 1125
(*pred_lo) = (aS_lo <= bS_lo); 
#line 1128
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
#line 1129
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
#line 1132
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1134
return ans; 
#line 1136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
#line 1138
static __inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
#line 1160
unsigned short aU_lo = (unsigned short)(a & 65535U); 
#line 1161
unsigned short aU_hi = (unsigned short)(a >> 16); 
#line 1163
unsigned short bU_lo = (unsigned short)(b & 65535U); 
#line 1164
unsigned short bU_hi = (unsigned short)(b >> 16); 
#line 1167
unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo); 
#line 1168
unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi); 
#line 1170
(*pred_hi) = (aU_hi <= bU_hi); 
#line 1171
(*pred_lo) = (aU_lo <= bU_lo); 
#line 1174
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
#line 1176
return ans; 
#line 1178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_functions.hpp"
} 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 89 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 89
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 91
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicSub(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 93
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicSub(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 95
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicExch(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 97
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicExch(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 99
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline float atomicExch(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 101
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicMin(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 103
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicMin(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 105
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicMax(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 107
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicMax(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 109
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicInc(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 111
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicDec(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 113
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicAnd(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 115
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 117
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicOr(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 119
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicOr(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 121
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicXor(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 123
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicXor(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 125
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline int atomicCAS(int *address, int compare, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 127
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 129
{ } 
#endif
#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
extern "C" {
#line 160
}
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 169
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 169
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 171
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 173
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
__declspec(deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool any(bool cond) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
#line 175
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_atomic_functions.h"
__declspec(deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning).")) static __inline bool all(bool cond) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
#line 177
{ } 
#endif
#line 90 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.h"
extern "C" {
#line 1142
}
#line 1150
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1154
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1156
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1158
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1160
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1162
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1164
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1166
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1168
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1170
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1172
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1174
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1176
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;::exit(___);}
#if 0
#line 94
{ 
#line 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
#line 99
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}
#if 0
#line 102
{ 
#line 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
#line 107
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}
#if 0
#line 110
{ 
#line 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
#line 115
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)b;(void)mode;::exit(___);}
#if 0
#line 118
{ 
#line 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
#line 123
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 126
{ 
#line 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
#line 131
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 134
{ 
#line 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
#line 139
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 142
{ 
#line 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
#line 147
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 150
{ 
#line 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
#line 155
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 158
{ 
#line 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
#line 163
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 166
{ 
#line 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
#line 171
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 174
{ 
#line 175
return (double)a; 
#line 176
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 179
{ 
#line 180
return (double)a; 
#line 181
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)a;(void)mode;::exit(___);}
#if 0
#line 184
{ 
#line 185
return (double)a; 
#line 186
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 99
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 92
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMax(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 94
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicAnd(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 96
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicOr(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 98
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicXor(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 100
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 102
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 104
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 106
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 108
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_atomic_functions.h"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 110
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd(double *address, double val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 93
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 96
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicAdd_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 99
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 102
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAdd_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 105
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 108
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAdd_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 111
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_block(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 114
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline float atomicAdd_system(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 117
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_block(double *address, double val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 120
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline double atomicAdd_system(double *address, double val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 123
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicSub_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 126
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicSub_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 129
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 132
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicSub_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 135
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 138
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicExch_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 141
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 144
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicExch_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 147
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 150
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicExch_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 153
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_block(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 156
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline float atomicExch_system(float *address, float val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 159
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 162
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicMin_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 165
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 168
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMin_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 171
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 174
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMin_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 177
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 180
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMin_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 183
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 186
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicMax_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 189
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 192
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicMax_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 195
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 198
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicMax_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 201
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 204
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicMax_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 207
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 210 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 210
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicInc_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 213
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 216
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicDec_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 219
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_block(int *address, int compare, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 222
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicCAS_system(int *address, int compare, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 225
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
#line 229
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 229
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 232 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
#line 233
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 233
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_block(unsigned __int64 *address, unsigned __int64 
#line 237
compare, unsigned __int64 
#line 238
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 238
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 241 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicCAS_system(unsigned __int64 *address, unsigned __int64 
#line 242
compare, unsigned __int64 
#line 243
val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 243
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 246
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 249 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicAnd_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 249
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 252
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicAnd_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 255
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 258 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 258
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicAnd_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 261
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 264
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicAnd_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 267
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 270 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 270
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 273 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicOr_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 273
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 276
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicOr_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 279
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 282 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 282
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicOr_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 285
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 288
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicOr_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 291
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_block(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 294
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 297 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline int atomicXor_system(int *address, int val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 297
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 300 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_block(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 300
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 303 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline __int64 atomicXor_system(__int64 *address, __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 303
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 306 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_block(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 306
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned atomicXor_system(unsigned *address, unsigned val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 309
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_block(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 312
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 315 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_60_atomic_functions.h"
static __inline unsigned __int64 atomicXor_system(unsigned __int64 *address, unsigned __int64 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
#line 315
{ } 
#endif
#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
extern "C" {
#line 1513
}
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1525 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
__declspec(deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning).")) static __inline unsigned ballot(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1525
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1527 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline int syncthreads_count(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1527
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_and(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1529
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1531 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline bool syncthreads_or(bool pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
#line 1531
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1536 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGlobal(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1536
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1537 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline unsigned __isShared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1537
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1538 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline unsigned __isConstant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1538
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline unsigned __isLocal(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1539
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1541 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline unsigned __isGridConstant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1541
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1543 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_global(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1543
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1544 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_shared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1544
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_constant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1545
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1546 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_local(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1546
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1548 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline size_t __cvta_generic_to_grid_constant(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 1548
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1551 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_global_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1551
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1552 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_shared_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1552
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1553 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_constant_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1553
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_local_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1554
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 1556 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_20_intrinsics.h"
static __inline void *__cvta_grid_constant_to_generic(size_t rawbits) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
#line 1556
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __fns(unsigned mask, unsigned base, int offset) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
#line 123
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 124 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline void __barrier_sync(unsigned id) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)id;::exit(___);}
#if 0
#line 124
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline void __barrier_sync_count(unsigned id, unsigned cnt) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
#line 125
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline void __syncwarp(unsigned mask = 4294967295U) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
#line 126
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline int __all_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 127
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline int __any_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 128
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline int __uni_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 129
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 130 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __ballot_sync(unsigned mask, int pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
#line 130
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __activemask() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 131
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline int __shfl(int var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 140
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 141
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline int __shfl_up(int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 142
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 143 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 143
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline int __shfl_down(int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 144
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 145
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline int __shfl_xor(int var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 146
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 147
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline float __shfl(float var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 148
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline float __shfl_up(float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 149
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline float __shfl_down(float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 150
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline float __shfl_xor(float var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 151
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 154
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 155
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 156
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 157
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 158
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 159
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 160
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 161
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 162
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 163 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 163
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 164
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 165
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 169
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 170
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 171
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 172
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 173
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 174
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 175
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 176
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline double __shfl(double var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 177
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline double __shfl_up(double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 178
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline double __shfl_down(double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 179
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline double __shfl_xor(double var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 180
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_sync(unsigned mask, __int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 183
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_sync(unsigned mask, unsigned __int64 var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 184
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_up_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 185
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_up_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 186
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_down_sync(unsigned mask, __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 187
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_down_sync(unsigned mask, unsigned __int64 var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 188
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline __int64 __shfl_xor_sync(unsigned mask, __int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 189
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned __int64 __shfl_xor_sync(unsigned mask, unsigned __int64 var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 190
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 191 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 191
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 192
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 193
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 194
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 198 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline long __shfl(long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 198
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning).")) static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 199
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline long __shfl_up(long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 200
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning).")) static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 201
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 202 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline long __shfl_down(long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 202
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning).")) static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 203
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline long __shfl_xor(long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 204
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
__declspec(deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning).")) static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 205
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 208 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 208
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
#line 209
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 210 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 210
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 211
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 212
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
#line 213
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 214
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_30_intrinsics.h"
static __inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
#line 215
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 91
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldg(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 92
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char __ldg(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 94
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline signed char __ldg(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 95
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short __ldg(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 96
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int __ldg(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 97
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldg(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 98
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char2 __ldg(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 99
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char4 __ldg(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 100
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short2 __ldg(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 101
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short4 __ldg(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 102
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int2 __ldg(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 103
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int4 __ldg(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 104
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldg(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 105
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldg(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 107
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldg(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 108
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldg(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 109
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 110
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldg(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 111
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldg(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 112
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldg(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 113
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldg(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 114
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 115 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldg(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 115
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldg(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 116
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 117 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 117
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 119 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float __ldg(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 119
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 120 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double __ldg(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 120
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float2 __ldg(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 121
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float4 __ldg(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 122
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 123 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double2 __ldg(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 123
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 128 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline long __ldcg(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 128
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcg(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 129
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 131 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char __ldcg(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 131
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcg(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 132
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short __ldcg(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 133
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 134 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int __ldcg(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 134
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 135 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcg(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 135
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcg(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 136
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 137 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcg(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 137
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcg(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 138
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 139 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcg(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 139
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 140 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcg(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 140
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcg(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 141
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 142 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcg(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 142
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcg(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 144
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcg(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 145
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 146 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcg(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 146
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcg(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 147
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcg(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 148
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 149 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcg(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 149
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 150 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcg(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 150
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcg(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 151
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 152 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcg(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 152
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcg(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 153
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcg(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 154
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 156 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float __ldcg(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 156
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double __ldcg(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 157
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 158 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcg(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 158
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcg(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 159
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 160 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcg(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 160
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline long __ldca(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 164
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldca(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 165
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 167 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char __ldca(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 167
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 168 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline signed char __ldca(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 168
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short __ldca(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 169
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int __ldca(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 170
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldca(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 171
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 172 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char2 __ldca(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 172
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char4 __ldca(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 173
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 174 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short2 __ldca(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 174
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short4 __ldca(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 175
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 176 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int2 __ldca(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 176
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 177 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int4 __ldca(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 177
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 178 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldca(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 178
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 180 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldca(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 180
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 181 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldca(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 181
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldca(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 182
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldca(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 183
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 184 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldca(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 184
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 185 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldca(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 185
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 186 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldca(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 186
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldca(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 187
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldca(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 188
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldca(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 189
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 190 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldca(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 190
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 192 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float __ldca(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 192
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 193 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double __ldca(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 193
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 194 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float2 __ldca(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 194
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 195 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float4 __ldca(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 195
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 196 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double2 __ldca(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 196
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 200 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline long __ldcs(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 200
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 201 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcs(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 201
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char __ldcs(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 203
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 204 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcs(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 204
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 205 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short __ldcs(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 205
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int __ldcs(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 206
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcs(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 207
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 208 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcs(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 208
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcs(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 209
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 210 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcs(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 210
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 211 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcs(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 211
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 212 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcs(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 212
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcs(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 213
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 214 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcs(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 214
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcs(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 216
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 217 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcs(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 217
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 218 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcs(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 218
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 219 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcs(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 219
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 220 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcs(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 220
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcs(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 221
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 222 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcs(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 222
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 223 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcs(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 223
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcs(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 224
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcs(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 225
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 226 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcs(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 226
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 228 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float __ldcs(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 228
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 229 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double __ldcs(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 229
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 230 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcs(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 230
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcs(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 231
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 232 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcs(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 232
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline long __ldlu(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 236
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 237 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldlu(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 237
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 239 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char __ldlu(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 239
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 240 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline signed char __ldlu(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 240
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 241 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short __ldlu(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 241
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 242 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int __ldlu(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 242
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 243 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldlu(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 243
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char2 __ldlu(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 244
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 245 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char4 __ldlu(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 245
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short2 __ldlu(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 246
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 247 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short4 __ldlu(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 247
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 248 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int2 __ldlu(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 248
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 249 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int4 __ldlu(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 249
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 250 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldlu(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 250
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 252 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldlu(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 252
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 253 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldlu(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 253
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldlu(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 254
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 255 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldlu(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 255
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 256 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldlu(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 256
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 257 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldlu(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 257
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 258 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldlu(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 258
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 259 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldlu(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 259
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 260 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldlu(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 260
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldlu(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 261
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 262 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldlu(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 262
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 264 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float __ldlu(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 264
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 265 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double __ldlu(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 265
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 266 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float2 __ldlu(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 266
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 267 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float4 __ldlu(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 267
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 268 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double2 __ldlu(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 268
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 272 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline long __ldcv(const long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 272
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 273 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned long __ldcv(const unsigned long *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 273
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 275 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char __ldcv(const char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 275
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline signed char __ldcv(const signed char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 276
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 277 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short __ldcv(const short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 277
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 278 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int __ldcv(const int *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 278
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 279 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline __int64 __ldcv(const __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 279
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 280 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char2 __ldcv(const char2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 280
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 281 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline char4 __ldcv(const char4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 281
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 282 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short2 __ldcv(const short2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 282
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 283 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline short4 __ldcv(const short4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 283
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 284 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int2 __ldcv(const int2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 284
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 285 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline int4 __ldcv(const int4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 285
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 286 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline longlong2 __ldcv(const longlong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 286
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 288 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned char __ldcv(const unsigned char *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 288
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 289 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned short __ldcv(const unsigned short *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 289
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __ldcv(const unsigned *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 290
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 291 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __int64 __ldcv(const unsigned __int64 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 291
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 292 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar2 __ldcv(const uchar2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 292
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 293 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uchar4 __ldcv(const uchar4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 293
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 294 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort2 __ldcv(const ushort2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 294
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 295 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ushort4 __ldcv(const ushort4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 295
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 296 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint2 __ldcv(const uint2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 296
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 297 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline uint4 __ldcv(const uint4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 297
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 298 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline ulonglong2 __ldcv(const ulonglong2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 298
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 300 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float __ldcv(const float *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 300
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 301 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double __ldcv(const double *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 301
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 302 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float2 __ldcv(const float2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 302
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 303 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline float4 __ldcv(const float4 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 303
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 304 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline double2 __ldcv(const double2 *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 304
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 308 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 308
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 309 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 309
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 311 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 311
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 312 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 312
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 313 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 313
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 314 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 314
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 315 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 315
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 316 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 316
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 317
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 318 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 318
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 319 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 319
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 320 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 320
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 321 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 321
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 322 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 322
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 324 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 324
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 325 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 325
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 326 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 326
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 327 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 327
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 328 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 328
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 329 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 329
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 330 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 330
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 331 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 331
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 332
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 333 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 333
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 334 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 334
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 336 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 336
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 337 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 337
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 338
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 339 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 339
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwb(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 340
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 344 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 344
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 345 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 345
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 347 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 347
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 348
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 349 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 349
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 350 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 350
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 351
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 352 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 352
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 353 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 353
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 354 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 354
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 355 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 355
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 356
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 357 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 357
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 358 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 358
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 360 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 360
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 361 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 361
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 362 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 362
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 363 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 363
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 364 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 364
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 365 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 365
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 366 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 366
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 367
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 368 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 368
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 369 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 369
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 370 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 370
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 372 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 372
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 373
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 374 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 374
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 375 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 375
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 376 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcg(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 376
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 380 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 380
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 381 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 381
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 383 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 383
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 384 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 384
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 385 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 385
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 386 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 386
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 387 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 387
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 388 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 388
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 389 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 389
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 390
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 391 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 391
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 392 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 392
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 393 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 393
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 394 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 394
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 396 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 396
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 397 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 397
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 398 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 398
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 399 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 399
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 400 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 400
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 401
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 402 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 402
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 403 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 403
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 404 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 404
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 405 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 405
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 406 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 406
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 408 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 408
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 409 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 409
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 410 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 410
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 411 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 411
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 412 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stcs(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 412
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(long *ptr, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 416
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 417 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned long *ptr, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 417
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 419 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char *ptr, char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 419
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 420 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(signed char *ptr, signed char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 420
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 421 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short *ptr, short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 421
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 422 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int *ptr, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 422
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 423 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(__int64 *ptr, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 423
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 424 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char2 *ptr, char2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 424
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 425 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(char4 *ptr, char4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 425
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 426 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short2 *ptr, short2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 426
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 427 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(short4 *ptr, short4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 427
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 428 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int2 *ptr, int2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 428
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 429 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(int4 *ptr, int4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 429
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 430 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(longlong2 *ptr, longlong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 430
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 432 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned char *ptr, unsigned char value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 432
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 433 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned short *ptr, unsigned short value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 433
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 434 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned *ptr, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 434
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 435 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(unsigned __int64 *ptr, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 435
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 436 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uchar2 *ptr, uchar2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 436
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 437 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uchar4 *ptr, uchar4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 437
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 438 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ushort2 *ptr, ushort2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 438
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 439 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ushort4 *ptr, ushort4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 439
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 440 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uint2 *ptr, uint2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 440
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 441 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(uint4 *ptr, uint4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 441
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 442 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(ulonglong2 *ptr, ulonglong2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 442
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 444 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float *ptr, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 444
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 445 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(double *ptr, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 445
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 446 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float2 *ptr, float2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 446
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 447 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(float4 *ptr, float4 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 447
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 448 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline void __stwt(double2 *ptr, double2 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
#line 448
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 465 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 465
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 477 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 477
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 490 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 490
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 502 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_32_intrinsics.h"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
#line 502
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(int srcA, int srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 102
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 113
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_lo(short2 srcA, char4 srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 125
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 136
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 148 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(int srcA, int srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 148
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 159 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 159
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 171 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline int __dp2a_hi(short2 srcA, char4 srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 171
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 182 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 182
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(int srcA, int srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 197
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 206
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline int __dp4a(char4 srcA, char4 srcB, int c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 216
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 225 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\sm_61_intrinsics.h"
static __inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
#line 225
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 96
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 97
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 98
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, long value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 99
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, unsigned __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 100
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, __int64 value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 101
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, float value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 102
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_any_sync(unsigned mask, double value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 103
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 105
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, int value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 106
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 107
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 108 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, long value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 108
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, unsigned __int64 value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 109
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, __int64 value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 110
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, float value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 111
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned __match_all_sync(unsigned mask, double value, int *pred) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
#line 112
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline void __nanosleep(unsigned ns) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
#line 114
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 116 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_70_rt.h"
static __inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
#line 116
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_add_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 95
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_min_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 96
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_max_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 97
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_add_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 99
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_min_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 100
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline int __reduce_max_sync(unsigned mask, int value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 101
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_and_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 103
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_or_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 104
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
static __inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
#line 105
{ } 
#endif
#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
extern "C" {
#line 111
inline void *__nv_associate_access_property(const void *ptr, unsigned __int64 
#line 112
property) {int volatile ___ = 1;(void)ptr;(void)property;::exit(___);}
#if 0
#line 112
{ 
#line 113
extern void *__nv_associate_access_property_impl(const void *, unsigned __int64); 
#line 115
return __nv_associate_access_property_impl(ptr, property); 
#line 116
} 
#endif
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
#line 119
src, unsigned 
#line 120
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
#line 120
{ 
#line 121
extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
#line 124
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
#line 125
} 
#endif
#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
#line 128
src, unsigned 
#line 129
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
#line 129
{ 
#line 130
extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
#line 133
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
#line 134
} 
#endif
#line 136 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
#line 137
src, unsigned 
#line 138
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;::exit(___);}
#if 0
#line 138
{ 
#line 139
extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
#line 142
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
#line 143
} 
#endif
#line 145 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_80_rt.h"
}
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline unsigned __isCtaShared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 92
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline unsigned __isClusterShared(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 93
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 94 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)target_block_rank;::exit(___);}
#if 0
#line 94
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline unsigned __cluster_query_shared_rank(const void *ptr) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 95
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)cluster_cta_mask;::exit(___);}
#if 0
#line 96
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterDimIsSpecified() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 97
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 98 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterDim() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 98
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 99 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterRelativeBlockIdx() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 99
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 100 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterGridDimInClusters() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 100
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline dim3 __clusterIdx() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 101
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 102 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterRelativeBlockRank() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 102
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 103 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline unsigned __clusterSizeInBlocks() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 103
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_arrive() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 104
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 105 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_arrive_relaxed() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 105
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 106 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline void __cluster_barrier_wait() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 106
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 107 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline void __threadfence_cluster() 
__pragma(warning(pop))
{int volatile ___ = 1;::exit(___);}
#if 0
#line 107
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 109 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd(float2 *__address, float2 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
#line 109
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 110 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd_block(float2 *__address, float2 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
#line 110
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline float2 atomicAdd_system(float2 *__address, float2 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
#line 111
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd(float4 *__address, float4 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
#line 112
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 113 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd_block(float4 *__address, float4 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
#line 113
{ } 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static __inline float4 atomicAdd_system(float4 *__address, float4 val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)val;::exit(___);}
#if 0
#line 114
{ } 
#endif
#line 125 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
extern "C" {
#line 130
}
#line 137
template< bool __b, class _T> 
#line 138
struct __nv_atomic_enable_if { }; 
#line 140
template< class _T> 
#line 141
struct __nv_atomic_enable_if< true, _T>  { typedef _T __type; }; 
#line 151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
template< class _T> 
#line 152
struct __nv_atomic_triv_cp_helper { 
#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
static const bool __val = __is_trivially_copyable(_T); 
#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
}; 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 199 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 201
atomicCAS(_T *__address, _T __compare, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;::exit(___);}
#if 0
#line 201
{ 
#line 202
union _U { _T __ret; __inline _U() {int *volatile ___ = 0;::free(___);}
#if 0
#line 202
{ } 
#endif
#line 202 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
}; _U __u; 
#line 203
__u128AtomicCAS((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__compare)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
#line 207
return __u.__ret; 
#line 208
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 210 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 212
atomicCAS_block(_T *__address, _T __compare, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__compare;(void)__val;::exit(___);}
#if 0
#line 212
{ 
#line 213
union _U { _T __ret; __inline _U() {int *volatile ___ = 0;::free(___);}
#if 0
#line 213
{ } 
#endif
#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
}; _U __u; 
#line 214
__u128AtomicCAS_block((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__compare)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
#line 218
return __u.__ret; 
#line 219
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 223
atomicExch(_T *__address, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__val;::exit(___);}
#if 0
#line 223
{ 
#line 224
union _U { _T __ret; __inline _U() {int *volatile ___ = 0;::free(___);}
#if 0
#line 224
{ } 
#endif
#line 224 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
}; _U __u; 
#line 225
__u128AtomicExch((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
#line 228
return __u.__ret; 
#line 229
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 231 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
template< class _T> static __inline typename __nv_atomic_enable_if< ((sizeof(_T) == (16)) && (__alignof(_T) >= (16))) && __nv_atomic_triv_cp_helper< _T> ::__val, _T> ::__type 
#line 233
atomicExch_block(_T *__address, _T __val) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)__address;(void)__val;::exit(___);}
#if 0
#line 233
{ 
#line 234
union _U { _T __ret; __inline _U() {int *volatile ___ = 0;::free(___);}
#if 0
#line 234
{ } 
#endif
#line 234 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt\\sm_90_rt.h"
}; _U __u; 
#line 235
__u128AtomicExch_block((void *)__address, (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__val)))), (void *)(&(const_cast< char &>(reinterpret_cast< const volatile char &>(__u.__ret))))); 
#line 238
return __u.__ret; 
#line 239
} 
#endif
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
#line 66
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
#line 67
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
#line 68
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
#line 69
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
#line 70
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
#line 71
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
#line 72
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
#line 73
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
#line 74
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
#line 75
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
#line 76
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
#line 77
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
#line 78
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
#line 79
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
#line 80
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
#line 81
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
#line 82
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
#line 83
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
#line 84
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
#line 85
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
#line 86
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
#line 87
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
#line 88
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
#line 89
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
#line 90
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
#line 92
template<> struct __nv_itex_trait< long>  { typedef void type; }; 
#line 93
template<> struct __nv_itex_trait< long1>  { typedef void type; }; 
#line 94
template<> struct __nv_itex_trait< long2>  { typedef void type; }; 
#line 95
template<> struct __nv_itex_trait< long4>  { typedef void type; }; 
#line 96
template<> struct __nv_itex_trait< unsigned long>  { typedef void type; }; 
#line 97
template<> struct __nv_itex_trait< ulong1>  { typedef void type; }; 
#line 98
template<> struct __nv_itex_trait< ulong2>  { typedef void type; }; 
#line 99
template<> struct __nv_itex_trait< ulong4>  { typedef void type; }; 
#line 101 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
#line 102
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
#line 103
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
#line 104
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 108
template< class T> static typename __nv_itex_trait< T> ::type 
#line 109
tex1Dfetch(T *ptr, ::cudaTextureObject_t obj, int x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}
#if 0
#line 110
{ 
#line 111
__nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x); 
#line 112
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 115
tex1Dfetch(::cudaTextureObject_t texObject, int x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}
#if 0
#line 116
{ 
#line 117
T ret; 
#line 118
tex1Dfetch(&ret, texObject, x); 
#line 119
return ret; 
#line 120
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 122 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 123
tex1D(T *ptr, ::cudaTextureObject_t obj, float x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;::exit(___);}
#if 0
#line 124
{ 
#line 125
__nv_tex_surf_handler("__itex1D", ptr, obj, x); 
#line 126
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 129 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 130
tex1D(::cudaTextureObject_t texObject, float x) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;::exit(___);}
#if 0
#line 131
{ 
#line 132
T ret; 
#line 133
tex1D(&ret, texObject, x); 
#line 134
return ret; 
#line 135
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 138 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 139
tex2D(T *ptr, ::cudaTextureObject_t obj, float x, float y) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;::exit(___);}
#if 0
#line 140
{ 
#line 141
__nv_tex_surf_handler("__itex2D", ptr, obj, x, y); 
#line 142
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 145
tex2D(::cudaTextureObject_t texObject, float x, float y) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;::exit(___);}
#if 0
#line 146
{ 
#line 147
T ret; 
#line 148
tex2D(&ret, texObject, x, y); 
#line 149
return ret; 
#line 150
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 153 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 154
tex2D(T *ptr, ::cudaTextureObject_t obj, float x, float y, bool *
#line 155
isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;::exit(___);}
#if 0
#line 156
{ 
#line 157
unsigned char res; 
#line 158
__nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res); 
#line 159
(*isResident) = (res != 0); 
#line 160
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 163
tex2D(::cudaTextureObject_t texObject, float x, float y, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;::exit(___);}
#if 0
#line 164
{ 
#line 165
T ret; 
#line 166
tex2D(&ret, texObject, x, y, isResident); 
#line 167
return ret; 
#line 168
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 173 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 174
tex3D(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 175
{ 
#line 176
__nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z); 
#line 177
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 179 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 180
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 181
{ 
#line 182
T ret; 
#line 183
tex3D(&ret, texObject, x, y, z); 
#line 184
return ret; 
#line 185
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 188 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 189
tex3D(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, bool *
#line 190
isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;::exit(___);}
#if 0
#line 191
{ 
#line 192
unsigned char res; 
#line 193
__nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res); 
#line 194
(*isResident) = (res != 0); 
#line 195
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 198
tex3D(::cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;::exit(___);}
#if 0
#line 199
{ 
#line 200
T ret; 
#line 201
tex3D(&ret, texObject, x, y, z, isResident); 
#line 202
return ret; 
#line 203
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 208
tex1DLayered(T *ptr, ::cudaTextureObject_t obj, float x, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;::exit(___);}
#if 0
#line 209
{ 
#line 210
__nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer); 
#line 211
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 213 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 214
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;::exit(___);}
#if 0
#line 215
{ 
#line 216
T ret; 
#line 217
tex1DLayered(&ret, texObject, x, layer); 
#line 218
return ret; 
#line 219
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 222
tex2DLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;::exit(___);}
#if 0
#line 223
{ 
#line 224
__nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer); 
#line 225
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 228
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;::exit(___);}
#if 0
#line 229
{ 
#line 230
T ret; 
#line 231
tex2DLayered(&ret, texObject, x, y, layer); 
#line 232
return ret; 
#line 233
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 236 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 237
tex2DLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;::exit(___);}
#if 0
#line 238
{ 
#line 239
unsigned char res; 
#line 240
__nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res); 
#line 241
(*isResident) = (res != 0); 
#line 242
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 244 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 245
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;::exit(___);}
#if 0
#line 246
{ 
#line 247
T ret; 
#line 248
tex2DLayered(&ret, texObject, x, y, layer, isResident); 
#line 249
return ret; 
#line 250
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 254 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 255
texCubemap(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 256
{ 
#line 257
__nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z); 
#line 258
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 261 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 262
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;::exit(___);}
#if 0
#line 263
{ 
#line 264
T ret; 
#line 265
texCubemap(&ret, texObject, x, y, z); 
#line 266
return ret; 
#line 267
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 270 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 271
texCubemapLayered(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;::exit(___);}
#if 0
#line 272
{ 
#line 273
__nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer); 
#line 274
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 276 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 277
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;::exit(___);}
#if 0
#line 278
{ 
#line 279
T ret; 
#line 280
texCubemapLayered(&ret, texObject, x, y, z, layer); 
#line 281
return ret; 
#line 282
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 284 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 285
tex2Dgather(T *ptr, ::cudaTextureObject_t obj, float x, float y, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;::exit(___);}
#if 0
#line 286
{ 
#line 287
__nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp); 
#line 288
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 290 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 291
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;::exit(___);}
#if 0
#line 292
{ 
#line 293
T ret; 
#line 294
tex2Dgather(&ret, to, x, y, comp); 
#line 295
return ret; 
#line 296
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 299 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 300
tex2Dgather(T *ptr, ::cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;::exit(___);}
#if 0
#line 301
{ 
#line 302
unsigned char res; 
#line 303
__nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp, &res); 
#line 304
(*isResident) = (res != 0); 
#line 305
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 307 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 308
tex2Dgather(::cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;::exit(___);}
#if 0
#line 309
{ 
#line 310
T ret; 
#line 311
tex2Dgather(&ret, to, x, y, isResident, comp); 
#line 312
return ret; 
#line 313
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 317 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 318
tex1DLod(T *ptr, ::cudaTextureObject_t obj, float x, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;::exit(___);}
#if 0
#line 319
{ 
#line 320
__nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level); 
#line 321
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 323 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 324
tex1DLod(::cudaTextureObject_t texObject, float x, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;::exit(___);}
#if 0
#line 325
{ 
#line 326
T ret; 
#line 327
tex1DLod(&ret, texObject, x, level); 
#line 328
return ret; 
#line 329
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 332 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 333
tex2DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;::exit(___);}
#if 0
#line 334
{ 
#line 335
__nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level); 
#line 336
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 338 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 339
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;::exit(___);}
#if 0
#line 340
{ 
#line 341
T ret; 
#line 342
tex2DLod(&ret, texObject, x, y, level); 
#line 343
return ret; 
#line 344
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 348 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 349
tex2DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;::exit(___);}
#if 0
#line 350
{ 
#line 351
unsigned char res; 
#line 352
__nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res); 
#line 353
(*isResident) = (res != 0); 
#line 354
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 356 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 357
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;::exit(___);}
#if 0
#line 358
{ 
#line 359
T ret; 
#line 360
tex2DLod(&ret, texObject, x, y, level, isResident); 
#line 361
return ret; 
#line 362
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 367 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 368
tex3DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 369
{ 
#line 370
__nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level); 
#line 371
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 373 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 374
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 375
{ 
#line 376
T ret; 
#line 377
tex3DLod(&ret, texObject, x, y, z, level); 
#line 378
return ret; 
#line 379
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 383
tex3DLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;::exit(___);}
#if 0
#line 384
{ 
#line 385
unsigned char res; 
#line 386
__nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res); 
#line 387
(*isResident) = (res != 0); 
#line 388
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 390 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 391
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;::exit(___);}
#if 0
#line 392
{ 
#line 393
T ret; 
#line 394
tex3DLod(&ret, texObject, x, y, z, level, isResident); 
#line 395
return ret; 
#line 396
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 401 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 402
tex1DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;::exit(___);}
#if 0
#line 403
{ 
#line 404
__nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level); 
#line 405
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 407 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 408
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;::exit(___);}
#if 0
#line 409
{ 
#line 410
T ret; 
#line 411
tex1DLayeredLod(&ret, texObject, x, layer, level); 
#line 412
return ret; 
#line 413
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 416 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 417
tex2DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;::exit(___);}
#if 0
#line 418
{ 
#line 419
__nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level); 
#line 420
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 422 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 423
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;::exit(___);}
#if 0
#line 424
{ 
#line 425
T ret; 
#line 426
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
#line 427
return ret; 
#line 428
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 431 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 432
tex2DLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;::exit(___);}
#if 0
#line 433
{ 
#line 434
unsigned char res; 
#line 435
__nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res); 
#line 436
(*isResident) = (res != 0); 
#line 437
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 439 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 440
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;::exit(___);}
#if 0
#line 441
{ 
#line 442
T ret; 
#line 443
tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident); 
#line 444
return ret; 
#line 445
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 448 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 449
texCubemapLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 450
{ 
#line 451
__nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level); 
#line 452
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 454 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 455
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;::exit(___);}
#if 0
#line 456
{ 
#line 457
T ret; 
#line 458
texCubemapLod(&ret, texObject, x, y, z, level); 
#line 459
return ret; 
#line 460
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 463 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 464
texCubemapGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 465
{ 
#line 466
__nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
#line 467
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 469 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 470
texCubemapGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 471
{ 
#line 472
T ret; 
#line 473
texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
#line 474
return ret; 
#line 475
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 477 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 478
texCubemapLayeredLod(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}
#if 0
#line 479
{ 
#line 480
__nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level); 
#line 481
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 483 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 484
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;::exit(___);}
#if 0
#line 485
{ 
#line 486
T ret; 
#line 487
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
#line 488
return ret; 
#line 489
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 491 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 492
tex1DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 493
{ 
#line 494
__nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy); 
#line 495
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 497 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 498
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 499
{ 
#line 500
T ret; 
#line 501
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
#line 502
return ret; 
#line 503
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 506 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 507
tex2DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 508
{ 
#line 509
__nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy); 
#line 510
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 512 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 513
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 514
{ 
#line 515
T ret; 
#line 516
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
#line 517
return ret; 
#line 518
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 521 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 522
tex2DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 523
{ 
#line 524
unsigned char res; 
#line 525
__nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res); 
#line 526
(*isResident) = (res != 0); 
#line 527
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 529 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 530
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 531
{ 
#line 532
T ret; 
#line 533
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident); 
#line 534
return ret; 
#line 535
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 539 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 540
tex3DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 541
{ 
#line 542
__nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
#line 543
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 545 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 546
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 547
{ 
#line 548
T ret; 
#line 549
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
#line 550
return ret; 
#line 551
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 555
tex3DGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, ::float4 dPdx, ::float4 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 556
{ 
#line 557
unsigned char res; 
#line 558
__nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res); 
#line 559
(*isResident) = (res != 0); 
#line 560
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 562 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 563
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 564
{ 
#line 565
T ret; 
#line 566
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident); 
#line 567
return ret; 
#line 568
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 573 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 574
tex1DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 575
{ 
#line 576
__nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy); 
#line 577
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 579 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 580
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 581
{ 
#line 582
T ret; 
#line 583
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
#line 584
return ret; 
#line 585
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 588 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 589
tex2DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 590
{ 
#line 591
__nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy); 
#line 592
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 594 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 595
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 596
{ 
#line 597
T ret; 
#line 598
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
#line 599
return ret; 
#line 600
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 603 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 604
tex2DLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 605
{ 
#line 606
unsigned char res; 
#line 607
__nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res); 
#line 608
(*isResident) = (res != 0); 
#line 609
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 611 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 612
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy, bool *isResident) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;::exit(___);}
#if 0
#line 613
{ 
#line 614
T ret; 
#line 615
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident); 
#line 616
return ret; 
#line 617
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 621 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static typename __nv_itex_trait< T> ::type 
#line 622
texCubemapLayeredGrad(T *ptr, ::cudaTextureObject_t obj, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 623
{ 
#line 624
__nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy); 
#line 625
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 627 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\texture_indirect_functions.h"
template< class T> static T 
#line 628
texCubemapLayeredGrad(::cudaTextureObject_t texObject, float x, float y, float z, int layer, ::float4 dPdx, ::float4 dPdy) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;::exit(___);}
#if 0
#line 629
{ 
#line 630
T ret; 
#line 631
texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy); 
#line 632
return ret; 
#line 633
} 
#endif
#line 58 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
#line 59
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
#line 60
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
#line 61
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
#line 62
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
#line 63
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
#line 64
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
#line 65
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
#line 66
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
#line 67
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
#line 68
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
#line 69
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
#line 70
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
#line 71
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
#line 72
template<> struct __nv_isurf_trait< __int64>  { typedef void type; }; 
#line 73
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
#line 74
template<> struct __nv_isurf_trait< unsigned __int64>  { typedef void type; }; 
#line 75
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
#line 76
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
#line 77
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
#line 79
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
#line 80
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
#line 81
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
#line 82
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
#line 83
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
#line 84
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
#line 85
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
#line 86
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
#line 87
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
#line 89
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
#line 90
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
#line 91
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
#line 92
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
#line 93
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
#line 94
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
#line 95
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 98
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 99
surf1Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;::exit(___);}
#if 0
#line 100
{ 
#line 101
__nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode); 
#line 102
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 104 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 105
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;::exit(___);}
#if 0
#line 106
{ 
#line 107
T ret; 
#line 108
surf1Dread(&ret, surfObject, x, boundaryMode); 
#line 109
return ret; 
#line 110
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 112 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 113
surf2Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}
#if 0
#line 114
{ 
#line 115
__nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode); 
#line 116
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 119
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;::exit(___);}
#if 0
#line 120
{ 
#line 121
T ret; 
#line 122
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
#line 123
return ret; 
#line 124
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 128
surf3Dread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}
#if 0
#line 129
{ 
#line 130
__nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode); 
#line 131
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 133 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 134
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;::exit(___);}
#if 0
#line 135
{ 
#line 136
T ret; 
#line 137
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
#line 138
return ret; 
#line 139
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 141 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 142
surf1DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}
#if 0
#line 143
{ 
#line 144
__nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode); 
#line 145
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 147 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 148
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;::exit(___);}
#if 0
#line 149
{ 
#line 150
T ret; 
#line 151
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
#line 152
return ret; 
#line 153
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 155 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 156
surf2DLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}
#if 0
#line 157
{ 
#line 158
__nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode); 
#line 159
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 161 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 162
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;::exit(___);}
#if 0
#line 163
{ 
#line 164
T ret; 
#line 165
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
#line 166
return ret; 
#line 167
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 169 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 170
surfCubemapread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}
#if 0
#line 171
{ 
#line 172
__nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode); 
#line 173
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 175 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 176
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;::exit(___);}
#if 0
#line 177
{ 
#line 178
T ret; 
#line 179
surfCubemapread(&ret, surfObject, x, y, face, boundaryMode); 
#line 180
return ret; 
#line 181
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 183 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 184
surfCubemapLayeredread(T *ptr, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}
#if 0
#line 185
{ 
#line 186
__nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode); 
#line 187
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 189 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static T 
#line 190
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;::exit(___);}
#if 0
#line 191
{ 
#line 192
T ret; 
#line 193
surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode); 
#line 194
return ret; 
#line 195
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 197 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 198
surf1Dwrite(T val, ::cudaSurfaceObject_t obj, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;::exit(___);}
#if 0
#line 199
{ 
#line 200
__nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode); 
#line 201
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 203 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 204
surf2Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;::exit(___);}
#if 0
#line 205
{ 
#line 206
__nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode); 
#line 207
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 209 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 210
surf3Dwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;::exit(___);}
#if 0
#line 211
{ 
#line 212
__nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode); 
#line 213
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 215 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 216
surf1DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;::exit(___);}
#if 0
#line 217
{ 
#line 218
__nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode); 
#line 219
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 221 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 222
surf2DLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;::exit(___);}
#if 0
#line 223
{ 
#line 224
__nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode); 
#line 225
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 227 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 228
surfCubemapwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;::exit(___);}
#if 0
#line 229
{ 
#line 230
__nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode); 
#line 231
} 
#endif

__pragma(warning(push))
__pragma(warning(disable : 4505)) /* "unreferenced local function has been removed" */

#line 233 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\surface_indirect_functions.h"
template< class T> static typename __nv_isurf_trait< T> ::type 
#line 234
surfCubemapLayeredwrite(T val, ::cudaSurfaceObject_t obj, int x, int y, int layerface, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
__pragma(warning(pop))
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;::exit(___);}
#if 0
#line 235
{ 
#line 236
__nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode); 
#line 237
} 
#endif
#line 3639 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\crt/device_functions.h"
extern "C" unsigned __stdcall __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_launch_parameters.h"
extern "C" {
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\device_launch_parameters.h"
extern const uint3 __device_builtin_variable_threadIdx; 
#line 72
extern const uint3 __device_builtin_variable_blockIdx; 
#line 73
extern const dim3 __device_builtin_variable_blockDim; 
#line 74
extern const dim3 __device_builtin_variable_gridDim; 
#line 75
extern const int __device_builtin_variable_warpSize; 
#line 80
}
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cstddef"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 27
namespace std { 
#line 28
using ::ptrdiff_t;
#line 30
using max_align_t = double; 
#line 31
using nullptr_t = decltype(nullptr); 
#line 99
}
#line 101
using std::max_align_t;
#line 109
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\initializer_list"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
template < class _Elem >
class initializer_list {
public :
    using value_type = _Elem;
    using reference = const _Elem &;
    using const_reference = const _Elem &;
    using size_type = size_t;

    using iterator = const _Elem *;
    using const_iterator = const _Elem *;

    constexpr initializer_list ( ) noexcept : _First ( nullptr ), _Last ( nullptr ) { }

    constexpr initializer_list ( const _Elem * _First_arg, const _Elem * _Last_arg ) noexcept
        : _First ( _First_arg ), _Last ( _Last_arg ) { }

    [ [ nodiscard ] ] constexpr const _Elem * begin ( ) const noexcept {
        return _First;
    }

    [ [ nodiscard ] ] constexpr const _Elem * end ( ) const noexcept {
        return _Last;
    }

    [ [ nodiscard ] ] constexpr size_t size ( ) const noexcept {
        return static_cast < size_t > ( _Last - _First );
    }

private :
    const _Elem * _First;
    const _Elem * _Last;
};
#line 53
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * begin ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . begin ( );
}
#line 58
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * end ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . end ( );
}
#line 62
}
#line 65
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdint.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 18
typedef signed char int8_t; 
#line 19
typedef short int16_t; 
#line 20
typedef int int32_t; 
#line 21
typedef __int64 int64_t; 
#line 22
typedef unsigned char uint8_t; 
#line 23
typedef unsigned short uint16_t; 
#line 24
typedef unsigned uint32_t; 
#line 25
typedef unsigned __int64 uint64_t; 
#line 27
typedef signed char int_least8_t; 
#line 28
typedef short int_least16_t; 
#line 29
typedef int int_least32_t; 
#line 30
typedef __int64 int_least64_t; 
#line 31
typedef unsigned char uint_least8_t; 
#line 32
typedef unsigned short uint_least16_t; 
#line 33
typedef unsigned uint_least32_t; 
#line 34
typedef unsigned __int64 uint_least64_t; 
#line 36
typedef signed char int_fast8_t; 
#line 37
typedef int int_fast16_t; 
#line 38
typedef int int_fast32_t; 
#line 39
typedef __int64 int_fast64_t; 
#line 40
typedef unsigned char uint_fast8_t; 
#line 41
typedef unsigned uint_fast16_t; 
#line 42
typedef unsigned uint_fast32_t; 
#line 43
typedef unsigned __int64 uint_fast64_t; 
#line 45
typedef __int64 intmax_t; 
#line 46
typedef unsigned __int64 uintmax_t; 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdint.h"
#pragma warning(pop)
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cstdint"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
using ::int8_t;
#line 22
using ::int16_t;
#line 23
using ::int32_t;
#line 24
using ::int64_t;
#line 25
using ::uint8_t;
#line 26
using ::uint16_t;
#line 27
using ::uint32_t;
#line 28
using ::uint64_t;
#line 30
using ::int_least8_t;
#line 31
using ::int_least16_t;
#line 32
using ::int_least32_t;
#line 33
using ::int_least64_t;
#line 34
using ::uint_least8_t;
#line 35
using ::uint_least16_t;
#line 36
using ::uint_least32_t;
#line 37
using ::uint_least64_t;
#line 39
using ::int_fast8_t;
#line 40
using ::int_fast16_t;
#line 41
using ::int_fast32_t;
#line 42
using ::int_fast64_t;
#line 43
using ::uint_fast8_t;
#line 44
using ::uint_fast16_t;
#line 45
using ::uint_fast32_t;
#line 46
using ::uint_fast64_t;
#line 48
using ::intmax_t;
#line 49
using ::intptr_t;
#line 50
using ::uintmax_t;
#line 51
using ::uintptr_t;
#line 54
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 55
using ::int8_t;
#line 56
using ::int16_t;
#line 57
using ::int32_t;
#line 58
using ::int64_t;
#line 59
using ::uint8_t;
#line 60
using ::uint16_t;
#line 61
using ::uint32_t;
#line 62
using ::uint64_t;
#line 64
using ::int_least8_t;
#line 65
using ::int_least16_t;
#line 66
using ::int_least32_t;
#line 67
using ::int_least64_t;
#line 68
using ::uint_least8_t;
#line 69
using ::uint_least16_t;
#line 70
using ::uint_least32_t;
#line 71
using ::uint_least64_t;
#line 73
using ::int_fast8_t;
#line 74
using ::int_fast16_t;
#line 75
using ::int_fast32_t;
#line 76
using ::int_fast64_t;
#line 77
using ::uint_fast8_t;
#line 78
using ::uint_fast16_t;
#line 79
using ::uint_fast32_t;
#line 80
using ::uint_fast64_t;
#line 82
using ::intmax_t;
#line 83
using ::intptr_t;
#line 84
using ::uintmax_t;
#line 85
using ::uintptr_t;
#line 86
}
#line 88 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cstdint"
}
#line 92
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 29
namespace std { 
#line 30
template< class > constexpr bool 
#line 32
_Always_false = false; 
#line 34
template< bool _First_value, class _First, class ..._Rest> 
#line 35
struct _Conjunction { 
#line 36
using type = _First; 
#line 37
}; 
#line 39
template< class _True, class _Next, class ..._Rest> 
#line 40
struct _Conjunction< true, _True, _Next, _Rest...>  { 
#line 41
using type = typename std::_Conjunction< _Next::value, _Next, _Rest...> ::type; 
#line 42
}; 
#line 44
template< class ..._Traits> 
#line 45
struct conjunction : public true_type { }; 
#line 47
template< class _First, class ..._Rest> 
#line 48
struct conjunction< _First, _Rest...>  : public _Conjunction< _First::value, _First, _Rest...> ::type { 
#line 50
}; 
#line 52
template< class ..._Traits> constexpr bool 
#line 53
conjunction_v = (conjunction< _Traits...> ::value); 
#line 55
template< class _Trait> 
#line 56
struct negation : public bool_constant< !(static_cast< bool>(_Trait::value))>  { }; 
#line 58
template< class _Trait> constexpr bool 
#line 59
negation_v = (negation< _Trait> ::value); 
#line 61
template< class _Ty> constexpr bool 
#line 62
is_void_v = is_same_v< remove_cv_t< _Ty> , void> ; 
#line 64
template< class _Ty> 
#line 65
struct is_void : public bool_constant< is_void_v< _Ty> >  { }; 
#line 67
template< class ..._Types> using void_t = void; 
#line 70
template< class _Ty> 
#line 71
struct _Identity { 
#line 72
using type = _Ty; 
#line 73
}; 
#line 74
template< class _Ty> using _Identity_t = typename _Identity< _Ty> ::type; 
#line 78
template< class _Ty> 
#line 79
struct add_const { 
#line 80
using type = const _Ty; 
#line 81
}; 
#line 83
template< class _Ty> using add_const_t = typename add_const< _Ty> ::type; 
#line 86
template< class _Ty> 
#line 87
struct add_volatile { 
#line 88
using type = volatile _Ty; 
#line 89
}; 
#line 91
template< class _Ty> using add_volatile_t = typename add_volatile< _Ty> ::type; 
#line 94
template< class _Ty> 
#line 95
struct add_cv { 
#line 96
using type = const volatile _Ty; 
#line 97
}; 
#line 99
template< class _Ty> using add_cv_t = typename add_cv< _Ty> ::type; 
#line 102
template< class _Ty, class  = void> 
#line 103
struct _Add_reference { 
#line 104
using _Lvalue = _Ty; 
#line 105
using _Rvalue = _Ty; 
#line 106
}; 
#line 108
template< class _Ty> 
#line 109
struct _Add_reference< _Ty, void_t< _Ty &> >  { 
#line 110
using _Lvalue = _Ty &; 
#line 111
using _Rvalue = _Ty &&; 
#line 112
}; 
#line 114
template< class _Ty> 
#line 115
struct add_lvalue_reference { 
#line 116
using type = typename _Add_reference< _Ty> ::_Lvalue; 
#line 117
}; 
#line 119
template< class _Ty> using add_lvalue_reference_t = typename _Add_reference< _Ty> ::_Lvalue; 
#line 122
template< class _Ty> 
#line 123
struct add_rvalue_reference { 
#line 124
using type = typename _Add_reference< _Ty> ::_Rvalue; 
#line 125
}; 
#line 127
template< class _Ty> using add_rvalue_reference_t = typename _Add_reference< _Ty> ::_Rvalue; 
#line 130
template < class _Ty >
add_rvalue_reference_t < _Ty > declval ( ) noexcept {
    static_assert ( _Always_false < _Ty >, "Calling declval is ill-formed, see N4950 [declval]/2." );
}
#line 135
template< class _Ty> 
#line 136
struct remove_extent { 
#line 137
using type = _Ty; 
#line 138
}; 
#line 140
template< class _Ty, size_t _Ix> 
#line 141
struct remove_extent< _Ty [_Ix]>  { 
#line 142
using type = _Ty; 
#line 143
}; 
#line 145
template< class _Ty> 
#line 146
struct remove_extent< _Ty []>  { 
#line 147
using type = _Ty; 
#line 148
}; 
#line 150
template< class _Ty> using remove_extent_t = typename remove_extent< _Ty> ::type; 
#line 153
template< class _Ty> 
#line 154
struct remove_all_extents { 
#line 155
using type = _Ty; 
#line 156
}; 
#line 158
template< class _Ty, size_t _Ix> 
#line 159
struct remove_all_extents< _Ty [_Ix]>  { 
#line 160
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 161
}; 
#line 163
template< class _Ty> 
#line 164
struct remove_all_extents< _Ty []>  { 
#line 165
using type = typename std::remove_all_extents< _Ty> ::type; 
#line 166
}; 
#line 168
template< class _Ty> using remove_all_extents_t = typename remove_all_extents< _Ty> ::type; 
#line 171
template< class _Ty> 
#line 172
struct remove_pointer { 
#line 173
using type = _Ty; 
#line 174
}; 
#line 176
template< class _Ty> 
#line 177
struct remove_pointer< _Ty *>  { 
#line 178
using type = _Ty; 
#line 179
}; 
#line 181
template< class _Ty> 
#line 182
struct remove_pointer< _Ty *const>  { 
#line 183
using type = _Ty; 
#line 184
}; 
#line 186
template< class _Ty> 
#line 187
struct remove_pointer< _Ty *volatile>  { 
#line 188
using type = _Ty; 
#line 189
}; 
#line 191
template< class _Ty> 
#line 192
struct remove_pointer< _Ty *const volatile>  { 
#line 193
using type = _Ty; 
#line 194
}; 
#line 196
template< class _Ty> using remove_pointer_t = typename remove_pointer< _Ty> ::type; 
#line 199
template< class _Ty, class  = void> 
#line 200
struct _Add_pointer { 
#line 201
using type = _Ty; 
#line 202
}; 
#line 204
template< class _Ty> 
#line 205
struct _Add_pointer< _Ty, void_t< remove_reference_t< _Ty>  *> >  { 
#line 206
using type = remove_reference_t< _Ty>  *; 
#line 207
}; 
#line 209
template< class _Ty> 
#line 210
struct add_pointer { 
#line 211
using type = typename _Add_pointer< _Ty> ::type; 
#line 212
}; 
#line 214
template< class _Ty> using add_pointer_t = typename _Add_pointer< _Ty> ::type; 
#line 217
template< class > constexpr bool 
#line 218
is_array_v = false; 
#line 220
template< class _Ty, size_t _Nx> constexpr bool 
#line 221
is_array_v< _Ty [_Nx]>  = true; 
#line 223
template< class _Ty> constexpr bool 
#line 224
is_array_v< _Ty []>  = true; 
#line 226
template< class _Ty> 
#line 227
struct is_array : public bool_constant< is_array_v< _Ty> >  { }; 
#line 249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class > constexpr bool 
#line 250
is_lvalue_reference_v = false; 
#line 252
template< class _Ty> constexpr bool 
#line 253
is_lvalue_reference_v< _Ty &>  = true; 
#line 255
template< class _Ty> 
#line 256
struct is_lvalue_reference : public bool_constant< is_lvalue_reference_v< _Ty> >  { }; 
#line 258
template< class > constexpr bool 
#line 259
is_rvalue_reference_v = false; 
#line 261
template< class _Ty> constexpr bool 
#line 262
is_rvalue_reference_v< _Ty &&>  = true; 
#line 264
template< class _Ty> 
#line 265
struct is_rvalue_reference : public bool_constant< is_rvalue_reference_v< _Ty> >  { }; 
#line 267
template< class > constexpr bool 
#line 268
is_reference_v = false; 
#line 270
template< class _Ty> constexpr bool 
#line 271
is_reference_v< _Ty &>  = true; 
#line 273
template< class _Ty> constexpr bool 
#line 274
is_reference_v< _Ty &&>  = true; 
#line 276
template< class _Ty> 
#line 277
struct is_reference : public bool_constant< is_reference_v< _Ty> >  { }; 
#line 279
template< class > constexpr bool 
#line 280
is_pointer_v = false; 
#line 282
template< class _Ty> constexpr bool 
#line 283
is_pointer_v< _Ty *>  = true; 
#line 285
template< class _Ty> constexpr bool 
#line 286
is_pointer_v< _Ty *const>  = true; 
#line 288
template< class _Ty> constexpr bool 
#line 289
is_pointer_v< _Ty *volatile>  = true; 
#line 291
template< class _Ty> constexpr bool 
#line 292
is_pointer_v< _Ty *const volatile>  = true; 
#line 294
template< class _Ty> 
#line 295
struct is_pointer : public bool_constant< is_pointer_v< _Ty> >  { }; 
#line 297
template< class _Ty> constexpr bool 
#line 298
is_null_pointer_v = is_same_v< remove_cv_t< _Ty> , std::nullptr_t> ; 
#line 301
template< class _Ty> 
#line 302
struct is_null_pointer : public bool_constant< is_null_pointer_v< _Ty> >  { }; 
#line 304
template< class _Ty> 
#line 305
struct is_union : public bool_constant< __is_union(_Ty)>  { }; 
#line 307
template< class _Ty> constexpr bool 
#line 308
is_union_v = __is_union(_Ty); 
#line 310
template< class _Ty> 
#line 311
struct is_class : public bool_constant< __is_class(_Ty)>  { }; 
#line 313
template< class _Ty> constexpr bool 
#line 314
is_class_v = __is_class(_Ty); 
#line 316
template< class _Ty> constexpr bool 
#line 317
is_fundamental_v = (is_arithmetic_v< _Ty>  || is_void_v< _Ty> ) || is_null_pointer_v< _Ty> ; 
#line 319
template< class _Ty> 
#line 320
struct is_fundamental : public bool_constant< is_fundamental_v< _Ty> >  { }; 
#line 322
template< class _From, class _To> 
#line 323
struct is_convertible : public bool_constant< __is_convertible_to(_From, _To)>  { 
#line 325
}; 
#line 327
template< class _From, class _To> constexpr bool 
#line 328
is_convertible_v = __is_convertible_to(_From, _To); 
#line 331
template< class _Ty> 
#line 332
struct is_convertible< _Ty &, volatile _Ty &>  : public true_type { }; 
#line 334
template< class _Ty> 
#line 335
struct is_convertible< volatile _Ty &, volatile _Ty &>  : public true_type { }; 
#line 337
template< class _Ty> 
#line 338
struct is_convertible< _Ty &, const volatile _Ty &>  : public true_type { }; 
#line 340
template< class _Ty> 
#line 341
struct is_convertible< volatile _Ty &, const volatile _Ty &>  : public true_type { }; 
#line 343
template< class _Ty> constexpr bool 
#line 344
is_convertible_v< _Ty &, volatile _Ty &>  = true; 
#line 346
template< class _Ty> constexpr bool 
#line 347
is_convertible_v< volatile _Ty &, volatile _Ty &>  = true; 
#line 349
template< class _Ty> constexpr bool 
#line 350
is_convertible_v< _Ty &, const volatile _Ty &>  = true; 
#line 352
template< class _Ty> constexpr bool 
#line 353
is_convertible_v< volatile _Ty &, const volatile _Ty &>  = true; 
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 357
struct is_enum : public bool_constant< __is_enum(_Ty)>  { }; 
#line 359
template< class _Ty> constexpr bool 
#line 360
is_enum_v = __is_enum(_Ty); 
#line 370 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 371
struct is_compound : public bool_constant< !is_fundamental_v< _Ty> >  { }; 
#line 373
template< class _Ty> constexpr bool 
#line 374
is_compound_v = (!is_fundamental_v< _Ty> ); 
#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class ..._Types> 
#line 502
struct _Arg_types { }; 
#line 504
template< class _Ty1> 
#line 505
struct _Arg_types< _Ty1>  { 
#line 506
using argument_type = _Ty1; 
#line 507
}; 
#line 509
template< class _Ty1, class _Ty2> 
#line 510
struct _Arg_types< _Ty1, _Ty2>  { 
#line 511
using first_argument_type = _Ty1; 
#line 512
using second_argument_type = _Ty2; 
#line 513
}; 
#line 515
template< class _Ty> 
#line 516
struct _Is_memfunptr { 
#line 517
using _Bool_type = false_type; 
#line 518
}; 
#line 530
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...)>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< true, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) &&>  : public _Arg_types< _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const &&>  : public _Arg_types< const _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) volatile &&>  : public _Arg_types< volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__cdecl _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (__vectorcall _Arg0::*)(_Types ...) const volatile &&>  : public _Arg_types< const volatile _Arg0 *, _Types...>  { using _Bool_type = std::true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false, _Ret (_Types ...)> ; }; 
#line 543
template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...)>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) volatile &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; template< class _Ret, class _Arg0, class ..._Types> struct _Is_memfunptr< _Ret (_Arg0::*)(_Types ..., ...) const volatile &&>  { using _Bool_type = true_type; using result_type = _Ret; using _Class_type = _Arg0; using _Guide_type = enable_if< false> ; }; 
#line 566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> constexpr bool 
#line 567
is_member_function_pointer_v = (_Is_memfunptr< remove_cv_t< _Ty> > ::_Bool_type::value); 
#line 570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 571
struct is_member_function_pointer : public bool_constant< is_member_function_pointer_v< _Ty> >  { }; 
#line 573
template< class > constexpr bool 
#line 574
is_const_v = false; 
#line 576
template< class _Ty> constexpr bool 
#line 577
is_const_v< const _Ty>  = true; 
#line 579
template< class _Ty> 
#line 580
struct is_const : public bool_constant< is_const_v< _Ty> >  { }; 
#line 582
template< class > constexpr bool 
#line 583
is_volatile_v = false; 
#line 585
template< class _Ty> constexpr bool 
#line 586
is_volatile_v< volatile _Ty>  = true; 
#line 588
template< class _Ty> 
#line 589
struct is_volatile : public bool_constant< is_volatile_v< _Ty> >  { }; 
#line 591
template< class _Ty> constexpr bool 
#line 592
is_function_v = ((!is_const_v< const _Ty> ) && (!is_reference_v< _Ty> )); 
#line 595
template< class _Ty> 
#line 596
struct is_function : public bool_constant< is_function_v< _Ty> >  { }; 
#line 598
template< class _Ty> constexpr bool 
#line 599
is_object_v = is_const_v< const _Ty>  && (!is_void_v< _Ty> ); 
#line 602
template< class _Ty> 
#line 603
struct is_object : public bool_constant< is_object_v< _Ty> >  { }; 
#line 605
template< class > 
#line 606
struct _Is_member_object_pointer { 
#line 607
static constexpr bool value = false; 
#line 608
}; 
#line 610
template< class _Ty1, class _Ty2> 
#line 611
struct _Is_member_object_pointer< _Ty1 _Ty2::*>  { 
#line 612
static constexpr bool value = (!is_function_v< _Ty1> ); 
#line 613
using _Class_type = _Ty2; 
#line 614
}; 
#line 620
template< class _Ty> constexpr bool 
#line 621
is_member_object_pointer_v = (_Is_member_object_pointer< remove_cv_t< _Ty> > ::value); 
#line 624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 625
struct is_member_object_pointer : public bool_constant< is_member_object_pointer_v< _Ty> >  { }; 
#line 631
template< class _Ty> constexpr bool 
#line 632
is_member_pointer_v = is_member_object_pointer_v< _Ty>  || is_member_function_pointer_v< _Ty> ; 
#line 635 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 636
struct is_member_pointer : public bool_constant< is_member_pointer_v< _Ty> >  { }; 
#line 638
template< class _Ty> constexpr bool 
#line 639
is_scalar_v = (((is_arithmetic_v< _Ty>  || is_enum_v< _Ty> ) || is_pointer_v< _Ty> ) || is_member_pointer_v< _Ty> ) || is_null_pointer_v< _Ty> ; 
#line 642
template< class _Ty> 
#line 643
struct is_scalar : public bool_constant< is_scalar_v< _Ty> >  { }; 
#line 645
template< class _Ty> 
#line 646
struct is_pod : public bool_constant< __is_pod(_Ty)>  { }; 
#line 648
template< class _Ty> constexpr bool 
#line 649
is_pod_v = __is_pod(_Ty); 
#line 651
template< class _Ty> 
#line 652
struct is_empty : public bool_constant< __is_empty(_Ty)>  { }; 
#line 654
template< class _Ty> constexpr bool 
#line 655
is_empty_v = __is_empty(_Ty); 
#line 657
template< class _Ty> 
#line 658
struct is_polymorphic : public bool_constant< __is_polymorphic(_Ty)>  { }; 
#line 660
template< class _Ty> constexpr bool 
#line 661
is_polymorphic_v = __is_polymorphic(_Ty); 
#line 663
template< class _Ty> 
#line 664
struct is_abstract : public bool_constant< __is_abstract(_Ty)>  { }; 
#line 666
template< class _Ty> constexpr bool 
#line 667
is_abstract_v = __is_abstract(_Ty); 
#line 669
template< class _Ty> 
#line 670
struct is_final : public bool_constant< __is_final(_Ty)>  { }; 
#line 672
template< class _Ty> constexpr bool 
#line 673
is_final_v = __is_final(_Ty); 
#line 675
template< class _Ty> 
#line 676
struct is_standard_layout : public bool_constant< __is_standard_layout(_Ty)>  { }; 
#line 678
template< class _Ty> constexpr bool 
#line 679
is_standard_layout_v = __is_standard_layout(_Ty); 
#line 682
template< class _Ty> 
#line 683
struct is_literal_type : public bool_constant< __is_literal_type(_Ty)>  { 
#line 685
}; 
#line 687
template< class _Ty> constexpr bool 
#line 688
is_literal_type_v = __is_literal_type(_Ty); 
#line 692 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 693
struct is_trivial : public bool_constant< __is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)>  { 
#line 695
}; 
#line 697
template< class _Ty> constexpr bool 
#line 698
is_trivial_v = (__is_trivially_constructible(_Ty) && __is_trivially_copyable(_Ty)); 
#line 707 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 708
struct is_trivially_copyable : public bool_constant< __is_trivially_copyable(_Ty)>  { 
#line 710
}; 
#line 712
template< class _Ty> constexpr bool 
#line 713
is_trivially_copyable_v = __is_trivially_copyable(_Ty); 
#line 715
template< class _Ty> 
#line 716
struct has_virtual_destructor : public bool_constant< __has_virtual_destructor(_Ty)>  { 
#line 718
}; 
#line 720
template< class _Ty> constexpr bool 
#line 721
has_virtual_destructor_v = __has_virtual_destructor(_Ty); 
#line 750 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty, class ..._Args> 
#line 751
struct is_constructible : public bool_constant< __is_constructible(_Ty, _Args...)>  { 
#line 753
}; 
#line 755
template< class _Ty, class ..._Args> constexpr bool 
#line 756
is_constructible_v = __is_constructible(_Ty, _Args...); 
#line 758
template< class _Ty> 
#line 759
struct is_copy_constructible : public bool_constant< __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 761
}; 
#line 763
template< class _Ty> constexpr bool 
#line 764
is_copy_constructible_v = __is_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 766
template< class _Ty> 
#line 767
struct is_default_constructible : public bool_constant< __is_constructible(_Ty)>  { 
#line 769
}; 
#line 771
template< class _Ty> constexpr bool 
#line 772
is_default_constructible_v = __is_constructible(_Ty); 
#line 774
template< class _Ty, class  = void> 
#line 775
struct _Is_implicitly_default_constructible : public false_type { 
#line 777
}; 
#line 779
template< class _Ty> void _Implicitly_default_construct(const _Ty &); 
#line 782
template< class _Ty> 
#line 783
struct _Is_implicitly_default_constructible< _Ty, void_t< decltype(_Implicitly_default_construct< _Ty> ({}))> >  : public true_type { 
#line 784
}; 
#line 786
template< class _Ty> 
#line 787
struct is_move_constructible : public bool_constant< __is_constructible(_Ty, _Ty)>  { 
#line 789
}; 
#line 791
template< class _Ty> constexpr bool 
#line 792
is_move_constructible_v = __is_constructible(_Ty, _Ty); 
#line 794
template< class _To, class _From> 
#line 795
struct is_assignable : public bool_constant< __is_assignable(_To, _From)>  { }; 
#line 797
template< class _To, class _From> constexpr bool 
#line 798
is_assignable_v = __is_assignable(_To, _From); 
#line 804 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _To, class _From> using _Is_assignable_no_precondition_check = is_assignable< _To, _From> ; 
#line 808 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 809
struct is_copy_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 812
}; 
#line 814
template< class _Ty> constexpr bool 
#line 815
is_copy_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 828 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> using _Is_copy_assignable_no_precondition_check = is_copy_assignable< _Ty> ; 
#line 831
template< class _Ty> constexpr bool 
#line 832
_Is_copy_assignable_unchecked_v = is_copy_assignable_v< _Ty> ; 
#line 835 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 836
struct is_move_assignable : public bool_constant< __is_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 838
}; 
#line 840
template< class _Ty> constexpr bool 
#line 841
is_move_assignable_v = __is_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 852 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> using _Is_move_assignable_no_precondition_check = is_move_assignable< _Ty> ; 
#line 855
template< class _Ty> constexpr bool 
#line 856
_Is_move_assignable_unchecked_v = is_move_assignable_v< _Ty> ; 
#line 859 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 860
struct is_destructible : public bool_constant< __is_destructible(_Ty)>  { 
#line 862
}; 
#line 864
template< class _Ty> constexpr bool 
#line 865
is_destructible_v = __is_destructible(_Ty); 
#line 867
template< class _Ty, class ..._Args> 
#line 868
struct is_trivially_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Args...)>  { 
#line 870
}; 
#line 872
template< class _Ty, class ..._Args> constexpr bool 
#line 873
is_trivially_constructible_v = __is_trivially_constructible(_Ty, _Args...); 
#line 875
template< class _Ty> 
#line 876
struct is_trivially_copy_constructible : public bool_constant< __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 879
}; 
#line 881
template< class _Ty> constexpr bool 
#line 882
is_trivially_copy_constructible_v = __is_trivially_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 885
template< class _Ty> 
#line 886
struct is_trivially_default_constructible : public bool_constant< __is_trivially_constructible(_Ty)>  { 
#line 888
}; 
#line 890
template< class _Ty> constexpr bool 
#line 891
is_trivially_default_constructible_v = __is_trivially_constructible(_Ty); 
#line 893
template< class _Ty> 
#line 894
struct is_trivially_move_constructible : public bool_constant< __is_trivially_constructible(_Ty, _Ty)>  { 
#line 896
}; 
#line 898
template< class _Ty> constexpr bool 
#line 899
is_trivially_move_constructible_v = __is_trivially_constructible(_Ty, _Ty); 
#line 901
template< class _To, class _From> 
#line 902
struct is_trivially_assignable : public bool_constant< __is_trivially_assignable(_To, _From)>  { 
#line 904
}; 
#line 906
template< class _To, class _From> constexpr bool 
#line 907
is_trivially_assignable_v = __is_trivially_assignable(_To, _From); 
#line 909
template< class _Ty> 
#line 910
struct is_trivially_copy_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 913
}; 
#line 915
template< class _Ty> constexpr bool 
#line 916
is_trivially_copy_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 919
template< class _Ty> 
#line 920
struct is_trivially_move_assignable : public bool_constant< __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 922
}; 
#line 924
template< class _Ty> constexpr bool 
#line 925
is_trivially_move_assignable_v = __is_trivially_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 927
template< class _Ty> 
#line 928
struct is_trivially_destructible : public bool_constant< __is_trivially_destructible(_Ty)>  { 
#line 930
}; 
#line 932
template< class _Ty> constexpr bool 
#line 933
is_trivially_destructible_v = __is_trivially_destructible(_Ty); 
#line 935
template< class _Ty, class ..._Args> 
#line 936
struct is_nothrow_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Args...)>  { 
#line 938
}; 
#line 940
template< class _Ty, class ..._Args> constexpr bool 
#line 941
is_nothrow_constructible_v = __is_nothrow_constructible(_Ty, _Args...); 
#line 943
template< class _Ty> 
#line 944
struct is_nothrow_copy_constructible : public bool_constant< __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> )>  { 
#line 948
}; 
#line 950
template< class _Ty> constexpr bool 
#line 951
is_nothrow_copy_constructible_v = __is_nothrow_constructible(_Ty, add_lvalue_reference_t< const _Ty> ); 
#line 954
template< class _Ty> 
#line 955
struct is_nothrow_default_constructible : public bool_constant< __is_nothrow_constructible(_Ty)>  { 
#line 957
}; 
#line 959
template< class _Ty> constexpr bool 
#line 960
is_nothrow_default_constructible_v = __is_nothrow_constructible(_Ty); 
#line 962
template< class _Ty> 
#line 963
struct is_nothrow_move_constructible : public bool_constant< __is_nothrow_constructible(_Ty, _Ty)>  { 
#line 965
}; 
#line 967
template< class _Ty> constexpr bool 
#line 968
is_nothrow_move_constructible_v = __is_nothrow_constructible(_Ty, _Ty); 
#line 970
template< class _To, class _From> 
#line 971
struct is_nothrow_assignable : public bool_constant< __is_nothrow_assignable(_To, _From)>  { 
#line 973
}; 
#line 975
template< class _To, class _From> constexpr bool 
#line 976
is_nothrow_assignable_v = __is_nothrow_assignable(_To, _From); 
#line 978
template< class _Ty> 
#line 979
struct is_nothrow_copy_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> )>  { 
#line 982
}; 
#line 984
template< class _Ty> constexpr bool 
#line 985
is_nothrow_copy_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< const _Ty> ); 
#line 988
template< class _Ty> 
#line 989
struct is_nothrow_move_assignable : public bool_constant< __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty)>  { 
#line 991
}; 
#line 993
template< class _Ty> constexpr bool 
#line 994
is_nothrow_move_assignable_v = __is_nothrow_assignable(add_lvalue_reference_t< _Ty> , _Ty); 
#line 996
template< class _Ty> 
#line 997
struct is_nothrow_destructible : public bool_constant< __is_nothrow_destructible(_Ty)>  { 
#line 1000
}; 
#line 1002
template< class _Ty> constexpr bool 
#line 1003
is_nothrow_destructible_v = __is_nothrow_destructible(_Ty); 
#line 1005
template< class _Ty, bool  = is_integral_v< _Ty> > 
#line 1006
struct _Sign_base { 
#line 1007
using _Uty = remove_cv_t< _Ty> ; 
#line 1009
static constexpr bool _Signed = ((static_cast< _Uty>(-1)) < (static_cast< _Uty>(0))); 
#line 1010
static constexpr bool _Unsigned = (!_Signed); 
#line 1011
}; 
#line 1013
template< class _Ty> 
#line 1014
struct _Sign_base< _Ty, false>  { 
#line 1016
static constexpr bool _Signed = is_floating_point_v< _Ty> ; 
#line 1017
static constexpr bool _Unsigned = false; 
#line 1018
}; 
#line 1020
template< class _Ty> 
#line 1021
struct is_signed : public bool_constant< _Sign_base< _Ty> ::_Signed>  { }; 
#line 1023
template< class _Ty> constexpr bool 
#line 1024
is_signed_v = (_Sign_base< _Ty> ::_Signed); 
#line 1026
template< class _Ty> 
#line 1027
struct is_unsigned : public bool_constant< _Sign_base< _Ty> ::_Unsigned>  { }; 
#line 1029
template< class _Ty> constexpr bool 
#line 1030
is_unsigned_v = (_Sign_base< _Ty> ::_Unsigned); 
#line 1032
template< class _Ty> constexpr bool 
#line 1033
_Is_nonbool_integral = is_integral_v< _Ty>  && (!is_same_v< remove_cv_t< _Ty> , bool> ); 
#line 1035
template< bool > 
#line 1036
struct _Select { 
#line 1037
template< class _Ty1, class > using _Apply = _Ty1; 
#line 1039
}; 
#line 1042
template<> struct _Select< false>  { 
#line 1043
template< class , class _Ty2> using _Apply = _Ty2; 
#line 1045
}; 
#line 1047
template< size_t > struct _Make_signed2; 
#line 1051
template<> struct _Make_signed2< 1Ui64>  { 
#line 1052
template< class > using _Apply = signed char; 
#line 1054
}; 
#line 1057
template<> struct _Make_signed2< 2Ui64>  { 
#line 1058
template< class > using _Apply = short; 
#line 1060
}; 
#line 1063
template<> struct _Make_signed2< 4Ui64>  { 
#line 1064
template< class _Ty> using _Apply = typename _Select< is_same_v< _Ty, long>  || is_same_v< _Ty, unsigned long> > ::template _Apply< long, int> ; 
#line 1067
}; 
#line 1070
template<> struct _Make_signed2< 8Ui64>  { 
#line 1071
template< class > using _Apply = __int64; 
#line 1073
}; 
#line 1075
template< class _Ty> using _Make_signed1 = typename _Make_signed2< sizeof(_Ty)> ::template _Apply< _Ty> ; 
#line 1079
template< class _Ty> 
#line 1080
struct make_signed { 
#line 1081
static_assert((_Is_nonbool_integral< _Ty>  || is_enum_v< _Ty> ), "make_signed<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");
#line 1085
using type = typename remove_cv< _Ty> ::template _Apply< _Make_signed1> ; 
#line 1086
}; 
#line 1088
template< class _Ty> using make_signed_t = typename make_signed< _Ty> ::type; 
#line 1091
template< size_t > struct _Make_unsigned2; 
#line 1095
template<> struct _Make_unsigned2< 1Ui64>  { 
#line 1096
template< class > using _Apply = unsigned char; 
#line 1098
}; 
#line 1101
template<> struct _Make_unsigned2< 2Ui64>  { 
#line 1102
template< class > using _Apply = unsigned short; 
#line 1104
}; 
#line 1107
template<> struct _Make_unsigned2< 4Ui64>  { 
#line 1108
template< class _Ty> using _Apply = typename _Select< is_same_v< _Ty, long>  || is_same_v< _Ty, unsigned long> > ::template _Apply< unsigned long, unsigned> ; 
#line 1112
}; 
#line 1115
template<> struct _Make_unsigned2< 8Ui64>  { 
#line 1116
template< class > using _Apply = unsigned __int64; 
#line 1118
}; 
#line 1120
template< class _Ty> using _Make_unsigned1 = typename _Make_unsigned2< sizeof(_Ty)> ::template _Apply< _Ty> ; 
#line 1124
template< class _Ty> 
#line 1125
struct make_unsigned { 
#line 1126
static_assert((_Is_nonbool_integral< _Ty>  || is_enum_v< _Ty> ), "make_unsigned<T> requires that T shall be a (possibly cv-qualified) integral type or enumeration but not a bool type.");
#line 1130
using type = typename remove_cv< _Ty> ::template _Apply< _Make_unsigned1> ; 
#line 1131
}; 
#line 1133
template< class _Ty> using make_unsigned_t = typename make_unsigned< _Ty> ::type; 
#line 1136
template < class _Rep >
constexpr make_unsigned_t < _Rep > _Unsigned_value ( _Rep _Val ) {
    return static_cast < make_unsigned_t < _Rep >> ( _Val );
}
#line 1141
template< class _Ty> 
#line 1142
struct alignment_of : public integral_constant< unsigned __int64, __alignof(_Ty)>  { }; 
#line 1144
template< class _Ty> constexpr size_t 
#line 1145
alignment_of_v = __alignof(_Ty); 
#line 1147
template< class _Ty, size_t _Len> 
#line 1148
union _Align_type { 
#line 1149
_Ty _Val; 
#line 1150
char _Pad[_Len]; 
#line 1151
}; 
#line 1153
template< size_t _Len, size_t _Align, class _Ty, bool _Ok> struct _Aligned; 
#line 1156
template< size_t _Len, size_t _Align, class _Ty> 
#line 1157
struct _Aligned< _Len, _Align, _Ty, true>  { 
#line 1158
using type = _Align_type< _Ty, _Len> ; 
#line 1159
}; 
#line 1161
template< size_t _Len, size_t _Align> 
#line 1162
struct _Aligned< _Len, _Align, double, false>  { 
#line 1169
static_assert((_Always_false< _Aligned> ), "You\'ve instantiated std::aligned_storage<Len, Align> with an extended alignment (in other words, Align > alignof(max_align_t))." " Before VS 2017 15.8, the member \"type\" would non-conformingly have an alignment of only alignof(max_align_t). VS 2017 15.8 wa" "s fixed to handle this correctly, but the fix inherently changes layout and breaks binary compatibility (*only* for uses of alig" "ned_storage with extended alignments). To suppress this error, please define either (1) _ENABLE_EXTENDED_ALIGNED_STORAGE to conf" "irm that you want a type with an extended alignment, or (2) _DISABLE_EXTENDED_ALIGNED_STORAGE to get the old non-conforming beha" "vior.");
#line 1179 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
using type = _Align_type< max_align_t, _Len> ; 
#line 1181 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
}; 
#line 1183
template< size_t _Len, size_t _Align> 
#line 1184
struct _Aligned< _Len, _Align, int, false>  { 
#line 1185
using _Next = double; 
#line 1186
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1187
using type = typename std::_Aligned< _Len, _Align, double, _Fits> ::type; 
#line 1188
}; 
#line 1190
template< size_t _Len, size_t _Align> 
#line 1191
struct _Aligned< _Len, _Align, short, false>  { 
#line 1192
using _Next = int; 
#line 1193
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1194
using type = typename std::_Aligned< _Len, _Align, int, _Fits> ::type; 
#line 1195
}; 
#line 1197
template< size_t _Len, size_t _Align> 
#line 1198
struct _Aligned< _Len, _Align, char, false>  { 
#line 1199
using _Next = short; 
#line 1200
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1201
using type = typename std::_Aligned< _Len, _Align, short, _Fits> ::type; 
#line 1202
}; 
#line 1205
template< size_t _Len, size_t _Align = 8Ui64> 
#line 1206
struct _Aligned_storage { 
#line 1207
using _Next = char; 
#line 1208
static constexpr bool _Fits = (_Align <= __alignof(_Next)); 
#line 1209
using type = typename _Aligned< _Len, _Align, char, _Fits> ::type; 
#line 1210
}; 
#line 1212
template< size_t _Len, size_t _Align = 8Ui64> using _Aligned_storage_t = typename _Aligned_storage< _Len, _Align> ::type; 
#line 1215
template< size_t _Len, size_t _Align = 8Ui64> 
#line 1216
struct aligned_storage { 
#line 1217
using type = _Aligned_storage_t< _Len, _Align> ; 
#line 1218
}; 
#line 1220
template< size_t _Len, size_t _Align = 8Ui64> using aligned_storage_t = _Aligned_storage_t< _Len, _Align> ; 
#line 1223
template< size_t ..._Vals> struct _Maximum; 
#line 1227
template<> struct _Maximum< >  : public integral_constant< unsigned __int64, 0Ui64>  { }; 
#line 1229
template< size_t _Val> 
#line 1230
struct _Maximum< _Val>  : public integral_constant< unsigned __int64, _Val>  { }; 
#line 1232
template< size_t _First, size_t _Second, size_t ..._Rest> 
#line 1233
struct _Maximum< _First, _Second, _Rest...>  : public std::_Maximum< (((_First) < _Second) ? _Second : _First), _Rest...> ::type { 
#line 1235
}; 
#line 1237
template< size_t _Len, class ..._Types> 
#line 1238
struct aligned_union { 
#line 1240
static constexpr size_t _Max_len = (_Maximum< _Len, sizeof(_Types)...> ::value); 
#line 1241
static constexpr size_t alignment_value = (_Maximum< __alignof(_Types)...> ::value); 
#line 1243
using type = _Aligned_storage_t< _Max_len, alignment_value> ; 
#line 1244
}; 
#line 1246
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1247
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
#line 1249
__pragma( warning(pop)) 
#line 1251
template< class _Ty, bool  = is_enum_v< _Ty> > 
#line 1252
struct _Underlying_type { 
#line 1253
using type = __underlying_type(_Ty); 
#line 1254
}; 
#line 1256
template< class _Ty> 
#line 1257
struct _Underlying_type< _Ty, false>  { }; 
#line 1259
template< class _Ty> 
#line 1260
struct underlying_type : public _Underlying_type< _Ty>  { }; 
#line 1262
template< class _Ty> using underlying_type_t = typename _Underlying_type< _Ty> ::type; 
#line 1265
template< class _Ty> constexpr size_t 
#line 1266
rank_v = (0); 
#line 1268
template< class _Ty, size_t _Nx> constexpr size_t 
#line 1269
rank_v< _Ty [_Nx]>  = rank_v< _Ty>  + 1; 
#line 1271
template< class _Ty> constexpr size_t 
#line 1272
rank_v< _Ty []>  = rank_v< _Ty>  + 1; 
#line 1274
template< class _Ty> 
#line 1275
struct rank : public integral_constant< unsigned __int64, rank_v< _Ty> >  { }; 
#line 1277
template< class _Ty, unsigned _Ix = 0U> constexpr size_t 
#line 1278
extent_v = (0); 
#line 1280
template< class _Ty, size_t _Nx> constexpr size_t 
#line 1281
extent_v< _Ty [_Nx], 0>  = _Nx; 
#line 1283
template< class _Ty, unsigned _Ix, size_t _Nx> constexpr size_t 
#line 1284
extent_v< _Ty [_Nx], _Ix>  = extent_v< _Ty, _Ix - (1)> ; 
#line 1286
template< class _Ty, unsigned _Ix> constexpr size_t 
#line 1287
extent_v< _Ty [], _Ix>  = extent_v< _Ty, _Ix - (1)> ; 
#line 1289
template< class _Ty, unsigned _Ix = 0U> 
#line 1290
struct extent : public integral_constant< unsigned __int64, extent_v< _Ty, _Ix> >  { }; 
#line 1292
template< class _Base, class _Derived> 
#line 1293
struct is_base_of : public bool_constant< __is_base_of(_Base, _Derived)>  { 
#line 1295
}; 
#line 1297
template< class _Base, class _Derived> constexpr bool 
#line 1298
is_base_of_v = __is_base_of(_Base, _Derived); 
#line 1300
template< class _Ty> 
#line 1301
struct decay { 
#line 1302
using _Ty1 = remove_reference_t< _Ty> ; 
#line 1303
using _Ty2 = typename _Select< is_function_v< _Ty1> > ::template _Apply< add_pointer< _Ty1> , remove_cv< _Ty1> > ; 
#line 1304
using type = typename _Select< is_array_v< _Ty1> > ::template _Apply< add_pointer< remove_extent_t< _Ty1> > , _Ty2> ::type; 
#line 1305
}; 
#line 1307
template< class _Ty> using decay_t = typename decay< _Ty> ::type; 
#line 1310
template< class _Ty1, class _Ty2> using _Conditional_type = decltype(false ? std::declval< _Ty1> () : std::declval< _Ty2> ()); 
#line 1327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty1, class _Ty2, class  = void> 
#line 1328
struct _Decayed_cond_oper { }; 
#line 1331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty1, class _Ty2> 
#line 1332
struct _Decayed_cond_oper< _Ty1, _Ty2, void_t< _Conditional_type< _Ty1, _Ty2> > >  { 
#line 1333
using type = decay_t< _Conditional_type< _Ty1, _Ty2> > ; 
#line 1334
}; 
#line 1336
template< class ..._Ty> struct common_type; 
#line 1339
template< class ..._Ty> using common_type_t = typename common_type< _Ty...> ::type; 
#line 1343
template<> struct common_type< >  { }; 
#line 1345
template< class _Ty1> 
#line 1346
struct common_type< _Ty1>  : public std::common_type< _Ty1, _Ty1>  { }; 
#line 1348
template< class _Ty1, class _Ty2, class _Decayed1 = decay_t< _Ty1> , class _Decayed2 = decay_t< _Ty2> > 
#line 1349
struct _Common_type2 : public common_type< _Decayed1, _Decayed2>  { }; 
#line 1351
template< class _Ty1, class _Ty2> 
#line 1352
struct _Common_type2< _Ty1, _Ty2, _Ty1, _Ty2>  : public _Decayed_cond_oper< _Ty1, _Ty2>  { }; 
#line 1354
template< class _Ty1, class _Ty2> 
#line 1355
struct common_type< _Ty1, _Ty2>  : public _Common_type2< _Ty1, _Ty2>  { }; 
#line 1357
template< class _Void, class _Ty1, class _Ty2, class ..._Rest> 
#line 1358
struct _Common_type3 { }; 
#line 1360
template< class _Ty1, class _Ty2, class ..._Rest> 
#line 1361
struct _Common_type3< void_t< common_type_t< _Ty1, _Ty2> > , _Ty1, _Ty2, _Rest...>  : public common_type< common_type_t< _Ty1, _Ty2> , _Rest...>  { 
#line 1362
}; 
#line 1364
template< class _Ty1, class _Ty2, class ..._Rest> 
#line 1365
struct common_type< _Ty1, _Ty2, _Rest...>  : public _Common_type3< void, _Ty1, _Ty2, _Rest...>  { }; 
#line 1367
template< class _Ty> _Ty _Returns_exactly() noexcept; 
#line 1553 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Type, template< class ...>  class _Template> constexpr bool 
#line 1554
_Is_specialization_v = false; 
#line 1555
template< template< class ...>  class _Template, class ..._Types> constexpr bool 
#line 1556
_Is_specialization_v< _Template< _Types...> , _Template>  = true; 
#line 1558
template< class _Type, template< class ...>  class _Template> 
#line 1559
struct _Is_specialization : public bool_constant< _Is_specialization_v< _Type, _Template> >  { }; 
#line 1561
template< class _Ty> 
#line 1562
[[nodiscard]] constexpr _Ty &&forward(remove_reference_t< _Ty>  &_Arg) noexcept { 
#line 1563
return static_cast< _Ty &&>(_Arg); 
#line 1564
} 
#line 1566
template< class _Ty> 
#line 1567
[[nodiscard]] constexpr _Ty &&forward(remove_reference_t< _Ty>  &&_Arg) noexcept { 
#line 1568
static_assert((!is_lvalue_reference_v< _Ty> ), "bad forward call");
#line 1569
return static_cast< _Ty &&>(_Arg); 
#line 1570
} 
#line 1572
template< class _Ty> 
#line 1573
[[nodiscard]] constexpr remove_reference_t< _Ty>  &&move(_Ty &&_Arg) noexcept { 
#line 1574
return static_cast< remove_reference_t< _Ty>  &&>(_Arg); 
#line 1575
} 
#line 1577
template < class _Ty >
[ [ nodiscard ] ] constexpr
    conditional_t < ! is_nothrow_move_constructible_v < _Ty > && is_copy_constructible_v < _Ty >, const _Ty &, _Ty && >
    move_if_noexcept ( _Ty & _Arg ) noexcept {
    return :: std :: move ( _Arg );
}
#line 1584
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty * addressof ( _Ty & _Val ) noexcept {
    return __builtin_addressof ( _Val );
}
#line 1589
template < class _Ty >
const _Ty * addressof ( const _Ty && ) = delete;
#line 1592
#pragma warning(push)
#pragma warning(disable : 5215)
#pragma warning(disable : 5216)
#line 1601
template< class _Ty> 
#line 1602
[[nodiscard]] _Ty 
#line 1601
_Fake_copy_init(_Ty) noexcept; 
#line 1612
#pragma warning(pop)
#line 1614
template < class _Ty >
class reference_wrapper;
#line 1621
enum class _Invoker_strategy { 
#line 1622
_Functor, 
#line 1623
_Pmf_object, 
#line 1624
_Pmf_refwrap, 
#line 1625
_Pmf_pointer, 
#line 1626
_Pmd_object, 
#line 1627
_Pmd_refwrap, 
#line 1628
_Pmd_pointer
#line 1629
}; 
#line 1631
struct _Invoker_functor { 
#line 1632
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Functor; 
#line 1634
template < class _Callable, class ... _Types >
    static constexpr auto _Call ( _Callable && _Obj, _Types && ... _Args ) noexcept (
        noexcept ( static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... ) ) )
        -> decltype ( static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... ) ) {
        return static_cast < _Callable && > ( _Obj ) ( static_cast < _Types && > ( _Args ) ... );
    }
#line 1640
}; 
#line 1642
struct _Invoker_pmf_object { 
#line 1643
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_object; 
#line 1645
template < class _Decayed, class _Ty1, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1651
}; 
#line 1653
struct _Invoker_pmf_refwrap { 
#line 1654
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_refwrap; 
#line 1656
template < class _Decayed, class _Refwrap, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Refwrap _Rw, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( _Rw . get ( ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1662
}; 
#line 1664
struct _Invoker_pmf_pointer { 
#line 1665
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmf_pointer; 
#line 1667
template < class _Decayed, class _Ty1, class ... _Types2 >
    static constexpr auto _Call ( _Decayed _Pmf, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
        noexcept ( ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) )
        -> decltype ( ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... ) ) {
        return ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmf ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    }
#line 1673
}; 
#line 1675
struct _Invoker_pmd_object { 
#line 1676
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_object; 
#line 1678
template < class _Decayed, class _Ty1 >
    static constexpr auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept -> decltype ( static_cast < _Ty1 && > ( _Arg1 ) .* _Pmd ) {
        return static_cast < _Ty1 && > ( _Arg1 ) .* _Pmd;
    }
#line 1682
}; 
#line 1684
struct _Invoker_pmd_refwrap { 
#line 1685
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_refwrap; 
#line 1687
template < class _Decayed, class _Refwrap >
    static constexpr auto _Call ( _Decayed _Pmd, _Refwrap _Rw ) noexcept -> decltype ( _Rw . get ( ) .* _Pmd ) {
        return _Rw . get ( ) .* _Pmd;
    }
#line 1691
}; 
#line 1693
struct _Invoker_pmd_pointer { 
#line 1694
static constexpr _Invoker_strategy _Strategy = _Invoker_strategy::_Pmd_pointer; 
#line 1696
template < class _Decayed, class _Ty1 >
    static constexpr auto _Call ( _Decayed _Pmd, _Ty1 && _Arg1 ) noexcept ( noexcept ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd ) )
        -> decltype ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd ) {
        return ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Pmd;
    }
#line 1701
}; 
#line 1703
template< class _Callable, class _Ty1, class _Removed_cvref = _Remove_cvref_t< _Callable> , bool 
#line 1704
_Is_pmf = is_member_function_pointer_v< _Removed_cvref> , bool 
#line 1705
_Is_pmd = is_member_object_pointer_v< _Removed_cvref> > struct _Invoker1; 
#line 1708
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1709
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, true, false>  : public conditional_t< is_same_v< typename _Is_memfunptr< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> >  || is_base_of_v< typename _Is_memfunptr< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> > , _Invoker_pmf_object, conditional_t< _Is_specialization_v< _Remove_cvref_t< _Ty1> , reference_wrapper> , _Invoker_pmf_refwrap, _Invoker_pmf_pointer> >  { 
#line 1714
}; 
#line 1716
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1717
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, true>  : public conditional_t< is_same_v< typename _Is_member_object_pointer< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> >  || is_base_of_v< typename _Is_member_object_pointer< _Removed_cvref> ::_Class_type, _Remove_cvref_t< _Ty1> > , _Invoker_pmd_object, conditional_t< _Is_specialization_v< _Remove_cvref_t< _Ty1> , reference_wrapper> , _Invoker_pmd_refwrap, _Invoker_pmd_pointer> >  { 
#line 1723
}; 
#line 1725
template< class _Callable, class _Ty1, class _Removed_cvref> 
#line 1726
struct _Invoker1< _Callable, _Ty1, _Removed_cvref, false, false>  : public _Invoker_functor { }; 
#line 1728
template < class _Callable >
inline auto invoke ( _Callable && _Obj ) noexcept ( noexcept ( static_cast < _Callable && > ( _Obj ) ( ) ) )
    -> decltype ( static_cast < _Callable && > ( _Obj ) ( ) ) {
    return static_cast < _Callable && > ( _Obj ) ( );
}
#line 1734
template < class _Callable, class _Ty1, class ... _Types2 >
inline auto invoke ( _Callable && _Obj, _Ty1 && _Arg1, _Types2 && ... _Args2 ) noexcept (
    noexcept ( _Invoker1 < _Callable, _Ty1 > :: _Call (
        static_cast < _Callable && > ( _Obj ), static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... ) ) )
    -> decltype ( _Invoker1 < _Callable, _Ty1 > :: _Call (
        static_cast < _Callable && > ( _Obj ), static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... ) ) {
    if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Functor ) {
        return static_cast < _Callable && > ( _Obj ) ( static_cast < _Ty1 && > ( _Arg1 ), static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_object ) {
        return ( static_cast < _Ty1 && > ( _Arg1 ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_refwrap ) {
        return ( _Arg1 . get ( ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmf_pointer ) {
        return ( ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Obj ) ( static_cast < _Types2 && > ( _Args2 ) ... );
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmd_object ) {
        return static_cast < _Ty1 && > ( _Arg1 ) .* _Obj;
    } else if constexpr ( _Invoker1 < _Callable, _Ty1 > :: _Strategy == _Invoker_strategy :: _Pmd_refwrap ) {
        return _Arg1 . get ( ) .* _Obj;
    } else {
        ;
        return ( * static_cast < _Ty1 && > ( _Arg1 ) ) .* _Obj;
    }
}
#line 1758
#pragma warning(push)
#pragma warning(disable : 4242)
#pragma warning(disable : 4244)
#pragma warning(disable : 4365)
#line 1763
template< class _From, class _To, bool  = is_convertible_v< _From, _To> , bool  = is_void_v< _To> > constexpr bool 
#line 1764
_Is_nothrow_convertible_v = noexcept(_Fake_copy_init< _To> (std::declval< _From> ())); 
#line 1766
#pragma warning(pop)
#line 1768
template< class _From, class _To, bool _IsVoid> constexpr bool 
#line 1769
_Is_nothrow_convertible_v< _From, _To, false, _IsVoid>  = false; 
#line 1771
template< class _From, class _To> constexpr bool 
#line 1772
_Is_nothrow_convertible_v< _From, _To, true, true>  = true; 
#line 1774
template< class _From, class _To> 
#line 1775
struct _Is_nothrow_convertible : public bool_constant< _Is_nothrow_convertible_v< _From, _To, is_convertible_v< _From, _To> , is_void_v< _To> > >  { 
#line 1777
}; 
#line 1787 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _From, class _To, class  = void> 
#line 1788
struct _Invoke_convertible : public false_type { }; 
#line 1790
template< class _From, class _To> 
#line 1791
struct _Invoke_convertible< _From, _To, void_t< decltype(std::_Fake_copy_init< _To> (std::_Returns_exactly< _From> ()))> >  : public true_type { 
#line 1792
}; 
#line 1794
template< class _From, class _To> 
#line 1795
struct _Invoke_nothrow_convertible : public bool_constant< noexcept(std::_Fake_copy_init< _To> (std::_Returns_exactly< _From> ()))>  { 
#line 1796
}; 
#line 1798
template< class _Result, bool _Nothrow> 
#line 1799
struct _Invoke_traits_common { 
#line 1800
using type = _Result; 
#line 1801
using _Is_invocable = true_type; 
#line 1802
using _Is_nothrow_invocable = bool_constant< _Nothrow> ; 
#line 1803
template< class _Rx> using _Is_invocable_r = bool_constant< disjunction_v< is_void< _Rx> , _Invoke_convertible< type, _Rx> > > ; 
#line 1805
template< class _Rx> using _Is_nothrow_invocable_r = bool_constant< conjunction_v< _Is_nothrow_invocable, disjunction< is_void< _Rx> , conjunction< _Invoke_convertible< type, _Rx> , _Invoke_nothrow_convertible< type, _Rx> > > > > ; 
#line 1809
}; 
#line 1811
template< class _Void, class _Callable> 
#line 1812
struct _Invoke_traits_zero { 
#line 1814
using _Is_invocable = false_type; 
#line 1815
using _Is_nothrow_invocable = false_type; 
#line 1816
template< class _Rx> using _Is_invocable_r = false_type; 
#line 1818
template< class _Rx> using _Is_nothrow_invocable_r = false_type; 
#line 1820
}; 
#line 1822
template< class _Callable> using _Decltype_invoke_zero = decltype(std::declval< _Callable> ()()); 
#line 1825
template< class _Callable> 
#line 1826
struct _Invoke_traits_zero< void_t< _Decltype_invoke_zero< _Callable> > , _Callable>  : public _Invoke_traits_common< _Decltype_invoke_zero< _Callable> , noexcept(std::declval< _Callable> ()())>  { 
#line 1827
}; 
#line 1829
template< class _Void, class ..._Types> 
#line 1830
struct _Invoke_traits_nonzero { 
#line 1832
using _Is_invocable = false_type; 
#line 1833
using _Is_nothrow_invocable = false_type; 
#line 1834
template< class _Rx> using _Is_invocable_r = false_type; 
#line 1836
template< class _Rx> using _Is_nothrow_invocable_r = false_type; 
#line 1838
}; 
#line 1840
template< class _Callable, class _Ty1, class ..._Types2> using _Decltype_invoke_nonzero = decltype(_Invoker1< _Callable, _Ty1> ::_Call(std::declval< _Callable> (), std::declval< _Ty1> (), std::declval< _Types2> ()...)); 
#line 1844
template< class _Callable, class _Ty1, class ..._Types2> 
#line 1845
struct _Invoke_traits_nonzero< void_t< _Decltype_invoke_nonzero< _Callable, _Ty1, _Types2...> > , _Callable, _Ty1, _Types2...>  : public _Invoke_traits_common< _Decltype_invoke_nonzero< _Callable, _Ty1, _Types2...> , noexcept(_Invoker1< _Callable, _Ty1> ::_Call(std::declval< _Callable> (), std::declval< _Ty1> (), std::declval< _Types2> ()...))>  { 
#line 1848
}; 
#line 1850
template< class _Callable, class ..._Args> using _Select_invoke_traits = conditional_t< sizeof...(_Args) == (0), _Invoke_traits_zero< void, _Callable> , _Invoke_traits_nonzero< void, _Callable, _Args...> > ; 
#line 1855
template< class _Fty> 
#line 1856
struct result_of { 
#line 1857
static_assert((_Always_false< _Fty> ), "result_of<CallableType> is invalid; use result_of<CallableType(zero or more argument types)> instead.");
#line 1859
}; 
#line 1867
template< class _Callable, class ..._Args> struct result_of< _Callable __cdecl (_Args ...)>  : public _Select_invoke_traits< _Callable, _Args...>  { }; template< class _Callable, class ..._Args> struct result_of< _Callable __vectorcall (_Args ...)>  : public _Select_invoke_traits< _Callable, _Args...>  { }; 
#line 1870
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1871
template< class _Ty> using result_of_t = typename result_of< _Ty> ::type; 
#line 1873
__pragma( warning(pop)) 
#line 1876 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Callable, class ..._Args> using _Invoke_result_t = typename _Select_invoke_traits< _Callable, _Args...> ::type; 
#line 1879
template< class _Rx, class _Callable, class ..._Args> using _Is_invocable_r_ = typename conditional< sizeof...(_Args) == (0), _Invoke_traits_zero< void, _Callable> , _Invoke_traits_nonzero< void, _Callable, _Args...> > ::type::template _Is_invocable_r< _Rx> ; 
#line 1882
template< class _Rx, class _Callable, class ..._Args> 
#line 1883
struct _Is_invocable_r : public _Is_invocable_r_< _Rx, _Callable, _Args...>  { 
#line 1885
}; 
#line 1956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> 
#line 1957
struct _Function_args { }; 
#line 1965
template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...)>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...)>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile &>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __cdecl (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret __vectorcall (_Types ...) const volatile &&>  : public _Arg_types< _Types...>  { using result_type = _Ret; }; 
#line 1974
template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...)>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile &>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) volatile &&>  { using result_type = _Ret; }; template< class _Ret, class ..._Types> struct _Function_args< _Ret (_Types ..., ...) const volatile &&>  { using result_type = _Ret; }; 
#line 1977
template< class _Ty, class  = void> 
#line 1978
struct _Weak_result_type { }; 
#line 1980
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1981
template< class _Ty> 
#line 1982
struct _Weak_result_type< _Ty, void_t< typename _Ty::result_type> >  { 
#line 1983
using result_type = typename _Ty::result_type; 
#line 1984
}; 
#line 1985
__pragma( warning(pop)) 
#line 1987
template< class _Ty, class  = void> 
#line 1988
struct _Weak_argument_type : public _Weak_result_type< _Ty>  { }; 
#line 1990
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1991
template< class _Ty> 
#line 1992
struct _Weak_argument_type< _Ty, void_t< typename _Ty::argument_type> >  : public _Weak_result_type< _Ty>  { 
#line 1994
using argument_type = typename _Ty::argument_type; 
#line 1995
}; 
#line 1996
__pragma( warning(pop)) 
#line 1998
template< class _Ty, class  = void> 
#line 1999
struct _Weak_binary_args : public _Weak_argument_type< _Ty>  { }; 
#line 2001
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 2002
template< class _Ty> 
#line 2003
struct _Weak_binary_args< _Ty, void_t< typename _Ty::first_argument_type, typename _Ty::second_argument_type> >  : public _Weak_argument_type< _Ty>  { 
#line 2006
using first_argument_type = typename _Ty::first_argument_type; 
#line 2007
using second_argument_type = typename _Ty::second_argument_type; 
#line 2008
}; 
#line 2009
__pragma( warning(pop)) 
#line 2011
template< class _Ty> using _Weak_types = conditional_t< is_function_v< remove_pointer_t< _Ty> > , _Function_args< remove_pointer_t< _Ty> > , conditional_t< is_member_function_pointer_v< _Ty> , _Is_memfunptr< remove_cv_t< _Ty> > , _Weak_binary_args< _Ty> > > ; 
#line 2015
template< class _Ty> void _Refwrap_ctor_fun(_Identity_t< _Ty &> ) noexcept; 
#line 2017
template < class _Ty >
void _Refwrap_ctor_fun ( _Identity_t < _Ty && > ) = delete;
#line 2020
template< class _Ty, class _Uty, class  = void> 
#line 2021
struct _Refwrap_has_ctor_from : public false_type { }; 
#line 2023
template< class _Ty, class _Uty> 
#line 2024
struct _Refwrap_has_ctor_from< _Ty, _Uty, void_t< decltype(std::_Refwrap_ctor_fun< _Ty> (std::declval< _Uty> ()))> >  : public true_type { 
#line 2025
}; 
#line 2027
template < class _Ty >
class reference_wrapper

    : public _Weak_types < _Ty >

{
public :
    static_assert ( is_object_v < _Ty > || is_function_v < _Ty >,
        "reference_wrapper<T> requires T to be an object type or a function type." );

    using type = _Ty;

    template < class _Uty, enable_if_t < conjunction_v < negation < is_same < _Remove_cvref_t < _Uty >, reference_wrapper >>,
                                          _Refwrap_has_ctor_from < _Ty, _Uty >>,
                              int > = 0 >
    inline reference_wrapper ( _Uty && _Val ) noexcept (
        noexcept ( :: std :: _Refwrap_ctor_fun < _Ty > ( :: std :: declval < _Uty > ( ) ) ) ) {
        _Ty & _Ref = static_cast < _Uty && > ( _Val );
        _Ptr = :: std :: addressof ( _Ref );
    }

    inline operator _Ty & ( ) const noexcept {
        return * _Ptr;
    }

    [ [ nodiscard ] ] inline _Ty & get ( ) const noexcept {
        return * _Ptr;
    }

private :
    _Ty * _Ptr { };

public :
    template < class ... _Types >
    inline auto operator ( ) ( _Types && ... _Args ) const
        noexcept ( noexcept ( :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... ) ) )
            -> decltype ( :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... ) ) {
        return :: std :: invoke ( * _Ptr, static_cast < _Types && > ( _Args ) ... );
    }
};
#line 2073 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < _Ty > ref ( _Ty & _Val ) noexcept {
    return reference_wrapper < _Ty > ( _Val );
}
#line 2078
template < class _Ty >
void ref ( const _Ty && ) = delete;
#line 2081
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < _Ty > ref ( reference_wrapper < _Ty > _Val ) noexcept {
    return _Val;
}
#line 2086
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < const _Ty > cref ( const _Ty & _Val ) noexcept {
    return reference_wrapper < const _Ty > ( _Val );
}
#line 2091
template < class _Ty >
void cref ( const _Ty && ) = delete;
#line 2094
template < class _Ty >
[ [ nodiscard ] ] inline reference_wrapper < const _Ty > cref ( reference_wrapper < _Ty > _Val ) noexcept {
    return _Val;
}
#line 2119 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class _Ty> struct _Is_swappable; 
#line 2122
template< class _Ty> struct _Is_nothrow_swappable; 
#line 2128 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template < class _Ty, int _Enabled = 0 >

inline void swap ( _Ty &, _Ty & ) noexcept ( is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > );
#line 2132 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template < class _Ty, size_t _Size, enable_if_t < _Is_swappable < _Ty > :: value, int > = 0 >
inline void swap ( _Ty ( & ) [ _Size ], _Ty ( & ) [ _Size ] ) noexcept ( _Is_nothrow_swappable < _Ty > :: value );
#line 2135
template< class _Ty1, class _Ty2, class  = void> 
#line 2136
struct _Swappable_with_helper : public false_type { }; 
#line 2138
template< class _Ty1, class _Ty2> 
#line 2139
struct _Swappable_with_helper< _Ty1, _Ty2, void_t< decltype(swap(std::declval< _Ty1> (), std::declval< _Ty2> ()))> >  : public true_type { 
#line 2140
}; 
#line 2142
template< class _Ty1, class _Ty2> 
#line 2143
struct _Is_swappable_with : public bool_constant< conjunction_v< _Swappable_with_helper< _Ty1, _Ty2> , _Swappable_with_helper< _Ty2, _Ty1> > >  { 
#line 2146
}; 
#line 2148
template< class _Ty> 
#line 2149
struct _Is_swappable : public _Is_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2151
}; 
#line 2153
template< class _Ty1, class _Ty2> 
#line 2154
struct _Swap_cannot_throw : public bool_constant< noexcept(swap(std::declval< _Ty1> (), std::declval< _Ty2> ())) && noexcept(swap(std::declval< _Ty2> (), std::declval< _Ty1> ()))>  { 
#line 2158
}; 
#line 2160
template< class _Ty1, class _Ty2> 
#line 2161
struct _Is_nothrow_swappable_with : public bool_constant< conjunction_v< _Is_swappable_with< _Ty1, _Ty2> , _Swap_cannot_throw< _Ty1, _Ty2> > >  { 
#line 2165
}; 
#line 2167
template< class _Ty> 
#line 2168
struct _Is_nothrow_swappable : public _Is_nothrow_swappable_with< add_lvalue_reference_t< _Ty> , add_lvalue_reference_t< _Ty> > ::type { 
#line 2171
}; 
#line 2208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
namespace _Has_ADL_swap_detail { 
#line 2212 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
void swap(); 
#line 2215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
template< class , class  = void> 
#line 2216
struct _Has_ADL_swap : public false_type { }; 
#line 2217
template< class _Ty> 
#line 2218
struct _Has_ADL_swap< _Ty, void_t< decltype(swap(std::declval< _Ty &> (), std::declval< _Ty &> ()))> >  : public true_type { }; 
#line 2219
}
#line 2220
using _Has_ADL_swap_detail::_Has_ADL_swap;
#line 2222
template< class _Ty> constexpr bool 
#line 2223
_Is_trivially_swappable_v = conjunction_v< is_trivially_destructible< _Ty> , is_trivially_move_constructible< _Ty> , is_trivially_move_assignable< _Ty> , negation< _Has_ADL_swap_detail::_Has_ADL_swap< _Ty> > > ; 
#line 2231
template< class _Ty> 
#line 2232
struct _Is_trivially_swappable : public bool_constant< _Is_trivially_swappable_v< _Ty> >  { 
#line 2234
}; 
#line 2299
template < class _Bitmask >
[ [ nodiscard ] ] constexpr bool _Bitmask_includes_any ( _Bitmask _Left, _Bitmask _Elements ) noexcept {
    return ( _Left & _Elements ) != _Bitmask { };
}
#line 2304
template < class _Bitmask >
[ [ nodiscard ] ] constexpr bool _Bitmask_includes_all ( _Bitmask _Left, _Bitmask _Elements ) noexcept {
    return ( _Left & _Elements ) == _Elements;
}
#line 2312
constexpr size_t _FNV_offset_basis = 14695981039346656037Ui64; 
#line 2313
constexpr size_t _FNV_prime = 1099511628211Ui64; 
#line 2319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
[[nodiscard]] inline size_t _Fnv1a_append_bytes(size_t _Val, const unsigned char *const _First, const size_t 
#line 2320
_Count) noexcept { 
#line 2321
for (size_t _Idx = (0); _Idx < _Count; ++_Idx) { 
#line 2322
_Val ^= (static_cast< size_t>(_First[_Idx])); 
#line 2323
_Val *= _FNV_prime; 
#line 2324
}  
#line 2326
return _Val; 
#line 2327
} 
#line 2329
template < class _Ty >
[ [ nodiscard ] ] size_t _Fnv1a_append_range ( const size_t _Val, const _Ty * const _First,
    const _Ty * const _Last ) noexcept {
    static_assert ( is_trivial_v < _Ty >, "Only trivial types can be directly hashed." );
    const auto _Firstb = reinterpret_cast < const unsigned char * > ( _First );
    const auto _Lastb = reinterpret_cast < const unsigned char * > ( _Last );
    return _Fnv1a_append_bytes ( _Val, _Firstb, static_cast < size_t > ( _Lastb - _Firstb ) );
}
#line 2338
template < class _Kty >
[ [ nodiscard ] ] size_t _Fnv1a_append_value (
    const size_t _Val, const _Kty & _Keyval ) noexcept {
    static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
    return _Fnv1a_append_bytes ( _Val, & reinterpret_cast < const unsigned char & > ( _Keyval ), sizeof ( _Kty ) );
}
#line 2345
template < class _Kty >
[ [ nodiscard ] ] size_t _Hash_representation ( const _Kty & _Keyval ) noexcept {
    return _Fnv1a_append_value ( _FNV_offset_basis, _Keyval );
}
#line 2350
template < class _Kty >
[ [ nodiscard ] ] size_t _Hash_array_representation (
    const _Kty * const _First, const size_t _Count ) noexcept {
    static_assert ( is_trivial_v < _Kty >, "Only trivial types can be directly hashed." );
    return _Fnv1a_append_bytes (
        _FNV_offset_basis, reinterpret_cast < const unsigned char * > ( _First ), _Count * sizeof ( _Kty ) );
}
#line 2358
template < class _Kty >
struct hash;
#line 2361
template < class _Kty, bool _Enabled >
struct _Conditionally_enabled_hash {
    using argument_type = _Kty;
    using result_type = size_t;

    [ [ nodiscard ] ] size_t operator ( ) ( const _Kty & _Keyval ) const
        noexcept ( noexcept ( hash < _Kty > :: _Do_hash ( _Keyval ) ) ) {
        return hash < _Kty > :: _Do_hash ( _Keyval );
    }
};
#line 2372
template< class _Kty> 
#line 2373
struct _Conditionally_enabled_hash< _Kty, false>  { 
#line 2374
_Conditionally_enabled_hash() = delete;
#line 2375
_Conditionally_enabled_hash(const _Conditionally_enabled_hash &) = delete;
#line 2376
_Conditionally_enabled_hash(_Conditionally_enabled_hash &&) = delete;
#line 2377
_Conditionally_enabled_hash &operator=(const _Conditionally_enabled_hash &) = delete;
#line 2378
_Conditionally_enabled_hash &operator=(_Conditionally_enabled_hash &&) = delete;
#line 2379
}; 
#line 2381
template < class _Kty >
struct hash : _Conditionally_enabled_hash < _Kty, ! is_const_v < _Kty > && ! is_volatile_v < _Kty >
                                                    && ( is_enum_v < _Kty > || is_integral_v < _Kty > || is_pointer_v < _Kty > ) > {

    static size_t _Do_hash ( const _Kty & _Keyval ) noexcept {
        return _Hash_representation ( _Keyval );
    }
};
#line 2391
#pragma pack(8)
template<> 
#line 2391
struct hash< float>  { 
#line 2392
using argument_type = float; 
#line 2393
using result_type = size_t; 
#line 2394
[[nodiscard]] size_t operator()(const float _Keyval) const noexcept { 
#line 2395
return _Hash_representation((_Keyval == (0.0F)) ? (0.0F) : _Keyval); 
#line 2396
} 
#line 2397
}; 
#pragma pack()
#line 2400
#pragma pack(8)
template<> 
#line 2400
struct hash< double>  { 
#line 2401
using argument_type = double; 
#line 2402
using result_type = size_t; 
#line 2403
[[nodiscard]] size_t operator()(const double _Keyval) const noexcept { 
#line 2404
return _Hash_representation((_Keyval == (0.0)) ? (0.0) : _Keyval); 
#line 2405
} 
#line 2406
}; 
#pragma pack()
#line 2409
#pragma pack(8)
template<> 
#line 2409
struct hash< long double>  { 
#line 2410
using argument_type = long double; 
#line 2411
using result_type = size_t; 
#line 2412
[[nodiscard]] size_t operator()(const long double _Keyval) const noexcept { 
#line 2413
return _Hash_representation((_Keyval == (0.0L)) ? (0.0L) : _Keyval); 
#line 2414
} 
#line 2415
}; 
#pragma pack()
#line 2418
#pragma pack(8)
template<> 
#line 2418
struct hash< std::nullptr_t>  { 
#line 2419
using argument_type = nullptr_t; 
#line 2420
using result_type = size_t; 
#line 2421
[[nodiscard]] size_t operator()(nullptr_t) const noexcept { 
#line 2422
void *_Null{((void *)0i64)}; 
#line 2423
return _Hash_representation(_Null); 
#line 2424
} 
#line 2425
}; 
#pragma pack()
template< class _Kty, class  = void> 
#pragma pack(8)
#line 2428
struct _Is_nothrow_hashable : public false_type { }; 
#pragma pack()
template< class _Kty> 
#pragma pack(8)
#line 2431
struct _Is_nothrow_hashable< _Kty, void_t< decltype(hash< _Kty> {}(std::declval< const _Kty &> ()))> >  : public bool_constant< noexcept(hash< _Kty> {}(std::declval< const _Kty &> ()))>  { 
#line 2432
}; 
#pragma pack()
template < class _Ty = void >
struct less {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left < _Right ) ) ) {
        return _Left < _Right;
    }
};
#line 2447
template<> struct less<>  { 
#line 2448
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) < static_cast < _Ty2 && > ( _Right );
    }
#line 2455
using is_transparent = int; 
#line 2456
}; 
#line 2460
template< class _FloatingType> struct _Floating_type_traits; 
#line 2464
template<> struct _Floating_type_traits< float>  { 
#line 2465
static constexpr int32_t _Mantissa_bits = 24; 
#line 2466
static constexpr int32_t _Exponent_bits = 8; 
#line 2467
static constexpr int32_t _Maximum_binary_exponent = 127; 
#line 2468
static constexpr int32_t _Minimum_binary_exponent = (-126); 
#line 2469
static constexpr int32_t _Exponent_bias = 127; 
#line 2470
static constexpr int32_t _Sign_shift = 31; 
#line 2471
static constexpr int32_t _Exponent_shift = 23; 
#line 2473
using _Uint_type = uint32_t; 
#line 2475
static constexpr uint32_t _Exponent_mask = 255U; 
#line 2476
static constexpr uint32_t _Normal_mantissa_mask = 16777215U; 
#line 2477
static constexpr uint32_t _Denormal_mantissa_mask = 8388607U; 
#line 2478
static constexpr uint32_t _Special_nan_mantissa_mask = 4194304U; 
#line 2479
static constexpr uint32_t _Shifted_sign_mask = 2147483648U; 
#line 2480
static constexpr uint32_t _Shifted_exponent_mask = 2139095040U; 
#line 2481
}; 
#line 2484
template<> struct _Floating_type_traits< double>  { 
#line 2485
static constexpr int32_t _Mantissa_bits = 53; 
#line 2486
static constexpr int32_t _Exponent_bits = 11; 
#line 2487
static constexpr int32_t _Maximum_binary_exponent = 1023; 
#line 2488
static constexpr int32_t _Minimum_binary_exponent = (-1022); 
#line 2489
static constexpr int32_t _Exponent_bias = 1023; 
#line 2490
static constexpr int32_t _Sign_shift = 63; 
#line 2491
static constexpr int32_t _Exponent_shift = 52; 
#line 2493
using _Uint_type = uint64_t; 
#line 2495
static constexpr uint64_t _Exponent_mask = (2047U); 
#line 2496
static constexpr uint64_t _Normal_mantissa_mask = 9007199254740991Ui64; 
#line 2497
static constexpr uint64_t _Denormal_mantissa_mask = 4503599627370495Ui64; 
#line 2498
static constexpr uint64_t _Special_nan_mantissa_mask = 2251799813685248Ui64; 
#line 2499
static constexpr uint64_t _Shifted_sign_mask = 9223372036854775808Ui64; 
#line 2500
static constexpr uint64_t _Shifted_exponent_mask = 9218868437227405312Ui64; 
#line 2501
}; 
#line 2504
template<> struct _Floating_type_traits< long double>  : public std::_Floating_type_traits< double>  { }; 
#line 2508
template < class _To, class _From,
    enable_if_t < conjunction_v < bool_constant < sizeof ( _To ) == sizeof ( _From ) >, is_trivially_copyable < _To >,
                    is_trivially_copyable < _From > >,
        int > = 0 >
[ [ nodiscard ] ] constexpr _To _Bit_cast ( const _From & _Val ) noexcept {
    return __builtin_bit_cast ( _To, _Val );
}
#line 2517
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 2518
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 2519
using std::add_const;
#line 2520
using std::add_cv;
#line 2521
using std::add_pointer;
#line 2522
using std::add_volatile;
#line 2523
using std::aligned_storage;
#line 2524
using std::alignment_of;
#line 2525
using std::conditional;
#line 2526
using std::decay;
#line 2527
using std::enable_if;
#line 2528
using std::extent;
#line 2529
using std::false_type;
#line 2530
using std::has_virtual_destructor;
#line 2531
using std::integral_constant;
#line 2532
using std::is_abstract;
#line 2533
using std::is_arithmetic;
#line 2534
using std::is_array;
#line 2535
using std::is_base_of;
#line 2536
using std::is_class;
#line 2537
using std::is_compound;
#line 2538
using std::is_const;
#line 2539
using std::is_convertible;
#line 2540
using std::is_empty;
#line 2541
using std::is_enum;
#line 2542
using std::is_floating_point;
#line 2543
using std::is_function;
#line 2544
using std::is_fundamental;
#line 2545
using std::is_integral;
#line 2546
using std::is_member_function_pointer;
#line 2547
using std::is_member_object_pointer;
#line 2548
using std::is_member_pointer;
#line 2549
using std::is_object;
#line 2550
using std::is_pod;
#line 2551
using std::is_pointer;
#line 2552
using std::is_polymorphic;
#line 2553
using std::is_reference;
#line 2554
using std::is_same;
#line 2555
using std::is_scalar;
#line 2556
using std::is_signed;
#line 2557
using std::is_union;
#line 2558
using std::is_unsigned;
#line 2559
using std::is_void;
#line 2560
using std::is_volatile;
#line 2561
using std::make_signed;
#line 2562
using std::make_unsigned;
#line 2563
using std::rank;
#line 2564
using std::remove_all_extents;
#line 2565
using std::remove_const;
#line 2566
using std::remove_cv;
#line 2567
using std::remove_extent;
#line 2568
using std::remove_pointer;
#line 2569
using std::remove_reference;
#line 2570
using std::remove_volatile;
#line 2571
using std::true_type;
#line 2572
using std::cref;
#line 2573
using std::ref;
#line 2574
using std::reference_wrapper;
#line 2576
using std::result_of;
#line 2578 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
using std::hash;
#line 2579
}
#line 2580
__pragma( warning(pop)) 
#line 2583 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\type_traits"
}
#line 2592
#pragma warning(pop)
#pragma pack ( pop )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 40
namespace std { 
#line 41
template < class _Ty, _Ty ... _Vals >
struct integer_sequence {
    static_assert ( is_integral_v < _Ty >, "integer_sequence<T, I...> requires T to be an integral type." );

    using value_type = _Ty;

    [ [ nodiscard ] ] static constexpr size_t size ( ) noexcept {
        return sizeof ... ( _Vals );
    }
};
#line 52
template< class _Ty, _Ty _Size> using make_integer_sequence = __make_integer_seq< integer_sequence, _Ty, _Size> ; 
#line 55
template< size_t ..._Vals> using index_sequence = integer_sequence< unsigned __int64, _Vals...> ; 
#line 58
template< size_t _Size> using make_index_sequence = make_integer_sequence< unsigned __int64, _Size> ; 
#line 61
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
#line 64
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr const _Ty & ( max ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred ) noexcept (
    noexcept ( _Pred ( _Left, _Right ) ) ) {

    return _Pred ( _Left, _Right ) ? _Right : _Left;
}
#line 71
#pragma warning(push)
#pragma warning(disable : 28285)
template < class _Ty >
[ [ nodiscard ] ] constexpr const _Ty &
    ( max ) ( const _Ty & _Left, const _Ty & _Right ) noexcept ( noexcept ( _Left < _Right ) ) {

    return _Left < _Right ? _Right : _Left;
}
#pragma warning(pop)
#line 81
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty >, _Pr );
#line 84
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > );
#line 87
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr const _Ty & ( min ) ( const _Ty & _Left, const _Ty & _Right, _Pr _Pred ) noexcept (
    noexcept ( _Pred ( _Right, _Left ) ) ) {

    return _Pred ( _Right, _Left ) ? _Right : _Left;
}
#line 94
#pragma warning(push)
#pragma warning(disable : 28285)
template < class _Ty >
[ [ nodiscard ] ] constexpr const _Ty &
    ( min ) ( const _Ty & _Left, const _Ty & _Right ) noexcept ( noexcept ( _Right < _Left ) ) {

    return _Right < _Left ? _Right : _Left;
}
#pragma warning(pop)
#line 104
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty >, _Pr );
#line 107
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > );
#line 110
template < class _Ty, size_t _Size, enable_if_t < _Is_swappable < _Ty > :: value, int > >
inline void swap ( _Ty ( & _Left ) [ _Size ], _Ty ( & _Right ) [ _Size ] ) noexcept ( _Is_nothrow_swappable < _Ty > :: value ) {
    if ( & _Left != & _Right ) {
        _Ty * _First1 = _Left;
        _Ty * _Last1 = _First1 + _Size;
        _Ty * _First2 = _Right;
        for (; _First1 != _Last1; ++ _First1, ++ _First2 ) {
            swap ( * _First1, * _First2 );
        }
    }
}
#line 125 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
template < class _Ty, int _Enabled >

inline void swap ( _Ty & _Left, _Ty & _Right ) noexcept (
    is_nothrow_move_constructible_v < _Ty > && is_nothrow_move_assignable_v < _Ty > ) {
    _Ty _Tmp = :: std :: move ( _Left );
    _Left = :: std :: move ( _Right );
    _Right = :: std :: move ( _Tmp );
}
#line 134 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
#pragma pack(8)
#line 134
struct piecewise_construct_t { 
#line 135
explicit piecewise_construct_t() = default;
#line 136
}; 
#pragma pack()
constexpr piecewise_construct_t piecewise_construct{}; 
#line 140
template< class ..._Types> class tuple; 
#line 143
template < class _Ty1, class _Ty2 >
struct pair;
#line 146
template< class _Ty, size_t _Size> class array; 
#line 149
template< class _Tuple> struct tuple_size; 
#line 152
template< class _Ty> constexpr size_t 
#line 153
tuple_size_v = (tuple_size< _Ty> ::value); 
#line 155
template< size_t _Index, class _Tuple> struct tuple_element; 
#line 158
template< size_t _Index, class _Tuple> using tuple_element_t = typename tuple_element< _Index, _Tuple> ::type; 
#line 161
template< size_t _Index, class ..._Types> 
#line 162
[[nodiscard]] constexpr auto &&
#line 161
_Tuple_get(tuple< _Types...>  && _Tuple) noexcept; 
#line 164
template< size_t _Index, class ..._Types> 
#line 165
[[nodiscard]] constexpr tuple_element_t< _Index, tuple< _Types...> >  &
#line 164
get(tuple< _Types...>  & _Tuple) noexcept; 
#line 167
template< size_t _Index, class ..._Types> 
#line 168
[[nodiscard]] constexpr const tuple_element_t< _Index, tuple< _Types...> >  &
#line 167
get(const tuple< _Types...>  & _Tuple) noexcept; 
#line 170
template< size_t _Index, class ..._Types> 
#line 171
[[nodiscard]] constexpr tuple_element_t< _Index, tuple< _Types...> >  &&
#line 170
get(tuple< _Types...>  && _Tuple) noexcept; 
#line 173
template< size_t _Index, class ..._Types> 
#line 174
[[nodiscard]] constexpr const tuple_element_t< _Index, tuple< _Types...> >  &&
#line 173
get(const tuple< _Types...>  && _Tuple) noexcept; 
#line 176
template< size_t _Idx, class _Ty, size_t _Size> 
#line 177
[[nodiscard]] constexpr _Ty &
#line 176
get(array< _Ty, _Size>  & _Arr) noexcept; 
#line 179
template< size_t _Idx, class _Ty, size_t _Size> 
#line 180
[[nodiscard]] constexpr const _Ty &
#line 179
get(const array< _Ty, _Size>  & _Arr) noexcept; 
#line 182
template< size_t _Idx, class _Ty, size_t _Size> 
#line 183
[[nodiscard]] constexpr _Ty &&
#line 182
get(array< _Ty, _Size>  && _Arr) noexcept; 
#line 185
template< size_t _Idx, class _Ty, size_t _Size> 
#line 186
[[nodiscard]] constexpr const _Ty &&
#line 185
get(const array< _Ty, _Size>  && _Arr) noexcept; 
#line 221
template < class _Ty1, class _Ty2 >
struct pair {
    using first_type = _Ty1;
    using second_type = _Ty2;

    template < class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t < conjunction_v < is_default_constructible < _Uty1 >, is_default_constructible < _Uty2 >>, int > = 0 >
    constexpr explicit (
        ! conjunction_v < _Is_implicitly_default_constructible < _Uty1 >, _Is_implicitly_default_constructible < _Uty2 >> )
        pair ( ) noexcept (
            is_nothrow_default_constructible_v < _Uty1 > && is_nothrow_default_constructible_v < _Uty2 > )
        : first ( ), second ( ) { }

    template < class _Uty1 = _Ty1, class _Uty2 = _Ty2,
        enable_if_t < conjunction_v < is_copy_constructible < _Uty1 >, is_copy_constructible < _Uty2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < const _Uty1 &, _Uty1 >, is_convertible < const _Uty2 &, _Uty2 >> )
        pair ( const _Ty1 & _Val1, const _Ty2 & _Val2 ) noexcept (
            is_nothrow_copy_constructible_v < _Uty1 > && is_nothrow_copy_constructible_v < _Uty2 > )
        : first ( _Val1 ), second ( _Val2 ) { }




    template < class _Other1, class _Other2,

        enable_if_t < conjunction_v < is_constructible < _Ty1, _Other1 >, is_constructible < _Ty2, _Other2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < _Other1, _Ty1 >, is_convertible < _Other2, _Ty2 >> )
        pair ( _Other1 && _Val1, _Other2 && _Val2 ) noexcept (
            is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )
        : first ( :: std :: forward < _Other1 > ( _Val1 ) ), second ( :: std :: forward < _Other2 > ( _Val2 ) ) {
    }

    pair ( const pair & ) = default;
    pair ( pair && ) = default;










    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < is_constructible < _Ty1, const _Other1 & >, is_constructible < _Ty2, const _Other2 & >>,
            int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < const _Other1 &, _Ty1 >, is_convertible < const _Other2 &, _Ty2 >> )
        pair ( const pair < _Other1, _Other2 > & _Right ) noexcept ( is_nothrow_constructible_v < _Ty1, const _Other1 & > &&
                is_nothrow_constructible_v < _Ty2, const _Other2 & > )
        : first ( _Right . first ), second ( _Right . second ) { }

    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < is_constructible < _Ty1, _Other1 >, is_constructible < _Ty2, _Other2 >>, int > = 0 >
    constexpr explicit ( ! conjunction_v < is_convertible < _Other1, _Ty1 >, is_convertible < _Other2, _Ty2 >> )
        pair ( pair < _Other1, _Other2 > && _Right ) noexcept (
            is_nothrow_constructible_v < _Ty1, _Other1 > && is_nothrow_constructible_v < _Ty2, _Other2 > )
        : first ( :: std :: forward < _Other1 > ( _Right . first ) ), second ( :: std :: forward < _Other2 > ( _Right . second ) ) { }




























    template < class _Tuple1, class _Tuple2, size_t ... _Indices1, size_t ... _Indices2 >
    constexpr pair ( _Tuple1 & _Val1, _Tuple2 & _Val2, index_sequence < _Indices1 ... >, index_sequence < _Indices2 ... > )
        : first ( _Tuple_get < _Indices1 > ( :: std :: move ( _Val1 ) ) ... ), second ( _Tuple_get < _Indices2 > ( :: std :: move ( _Val2 ) ) ... ) { }

    template < class ... _Types1, class ... _Types2 >
    inline pair ( piecewise_construct_t, tuple < _Types1 ... > _Val1, tuple < _Types2 ... > _Val2 )
        : pair ( _Val1, _Val2, index_sequence_for < _Types1 ... > { }, index_sequence_for < _Types2 ... > { } ) { }

    pair & operator = ( const volatile pair & ) = delete;

    template < class _Myself = pair,
        enable_if_t < conjunction_v < _Is_copy_assignable_no_precondition_check < typename _Myself :: first_type >,
                        _Is_copy_assignable_no_precondition_check < typename _Myself :: second_type >>,
            int > = 0 >
    inline pair & operator = ( _Identity_t < const _Myself & > _Right ) noexcept (
        conjunction_v < is_nothrow_copy_assignable < _Ty1 >, is_nothrow_copy_assignable < _Ty2 >> ) {
        first = _Right . first;
        second = _Right . second;
        return * this;
    }















    template < class _Myself = pair,
        enable_if_t < conjunction_v < _Is_move_assignable_no_precondition_check < typename _Myself :: first_type >,
                        _Is_move_assignable_no_precondition_check < typename _Myself :: second_type >>,
            int > = 0 >
    inline pair & operator = ( _Identity_t < _Myself && > _Right ) noexcept (
        conjunction_v < is_nothrow_move_assignable < _Ty1 >, is_nothrow_move_assignable < _Ty2 >> ) {
        first = :: std :: forward < _Ty1 > ( _Right . first );
        second = :: std :: forward < _Ty2 > ( _Right . second );
        return * this;
    }















    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < negation < is_same < pair, pair < _Other1, _Other2 >> >, is_assignable < _Ty1 &, const _Other1 & >,
                        is_assignable < _Ty2 &, const _Other2 & >>,
            int > = 0 >
    inline pair & operator = ( const pair < _Other1, _Other2 > & _Right ) noexcept (
        is_nothrow_assignable_v < _Ty1 &, const _Other1 & > &&
            is_nothrow_assignable_v < _Ty2 &, const _Other2 & > ) {
        first = _Right . first;
        second = _Right . second;
        return * this;
    }















    template < class _Other1, class _Other2,
        enable_if_t < conjunction_v < negation < is_same < pair, pair < _Other1, _Other2 >> >, is_assignable < _Ty1 &, _Other1 >,
                        is_assignable < _Ty2 &, _Other2 >>,
            int > = 0 >
    inline pair & operator = ( pair < _Other1, _Other2 > && _Right ) noexcept (
        is_nothrow_assignable_v < _Ty1 &, _Other1 > && is_nothrow_assignable_v < _Ty2 &, _Other2 > ) {
        first = :: std :: forward < _Other1 > ( _Right . first );
        second = :: std :: forward < _Other2 > ( _Right . second );
        return * this;
    }









































    inline void swap ( pair & _Right ) noexcept (
        _Is_nothrow_swappable < _Ty1 > :: value && _Is_nothrow_swappable < _Ty2 > :: value ) {
        using :: std :: swap;
        if ( this != :: std :: addressof ( _Right ) ) {
            swap ( first, _Right . first );
            swap ( second, _Right . second );
        }
    }













    _Ty1 first;
    _Ty2 second;
};
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
template < class _Ty1, class _Ty2,
    enable_if_t < _Is_swappable < _Ty1 > :: value && _Is_swappable < _Ty2 > :: value, int > = 0 >
inline void swap ( pair < _Ty1, _Ty2 > & _Left, pair < _Ty1, _Ty2 > & _Right ) noexcept ( noexcept ( _Left . swap ( _Right ) ) ) {
    _Left . swap ( _Right );
}
#line 489 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator == ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Left . first == _Right . first && _Left . second == _Right . second;
}
#line 506
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator != ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Left == _Right );
}
#line 512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator < ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Left . first < _Right . first || ( ! ( _Right . first < _Left . first ) && _Left . second < _Right . second );
}
#line 517
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator > ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return _Right < _Left;
}
#line 522
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator <= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Right < _Left );
}
#line 527
template < class _Ty1, class _Ty2, class _Uty1, class _Uty2 >
[ [ nodiscard ] ] constexpr bool operator >= ( const pair < _Ty1, _Ty2 > & _Left, const pair < _Uty1, _Uty2 > & _Right ) {
    return ! ( _Left < _Right );
}
#line 550 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
template< class _Ty> 
#line 551
struct _Unrefwrap_helper { 
#line 552
using type = _Ty; 
#line 553
}; 
#line 555
template< class _Ty> 
#line 556
struct _Unrefwrap_helper< reference_wrapper< _Ty> >  { 
#line 557
using type = _Ty &; 
#line 558
}; 
#line 561
template< class _Ty> using _Unrefwrap_t = typename _Unrefwrap_helper< decay_t< _Ty> > ::type; 
#line 564
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 > > make_pair ( _Ty1 && _Val1, _Ty2 && _Val2 ) noexcept (
    is_nothrow_constructible_v < _Unrefwrap_t < _Ty1 >, _Ty1 > &&
        is_nothrow_constructible_v < _Unrefwrap_t < _Ty2 >, _Ty2 > ) {

    using _Mypair = pair < _Unrefwrap_t < _Ty1 >, _Unrefwrap_t < _Ty2 >>;
    return _Mypair ( :: std :: forward < _Ty1 > ( _Val1 ), :: std :: forward < _Ty2 > ( _Val2 ) );
}
#line 573
namespace rel_ops { 
#line 574
template < class _Ty >
     [ [ nodiscard ] ] bool operator != ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Left == _Right );
    }
#line 579
template < class _Ty >
     [ [ nodiscard ] ] bool operator > ( const _Ty & _Left, const _Ty & _Right ) {
        return _Right < _Left;
    }
#line 584
template < class _Ty >
     [ [ nodiscard ] ] bool operator <= ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Right < _Left );
    }
#line 589
template < class _Ty >
     [ [ nodiscard ] ] bool operator >= ( const _Ty & _Left, const _Ty & _Right ) {
        return ! ( _Left < _Right );
    }
#line 593
}
#line 595
template< class _Tuple, class  = void> 
#line 596
struct _Tuple_size_sfinae { }; 
#line 598
template< class _Tuple> 
#line 599
struct _Tuple_size_sfinae< _Tuple, void_t< decltype(tuple_size< _Tuple> ::value)> >  : public integral_constant< unsigned __int64, tuple_size< _Tuple> ::value>  { 
#line 600
}; 
#line 602
template< class _Tuple> 
#line 603
struct tuple_size< const _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 605
template< class _Tuple> 
#line 606
struct tuple_size< volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 608
template< class _Tuple> 
#line 609
struct tuple_size< const volatile _Tuple>  : public _Tuple_size_sfinae< _Tuple>  { }; 
#line 611
template< size_t _Index, class _Tuple> 
#line 612
struct tuple_element< _Index, const _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 613
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 614
using type = std::add_const_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 615
}; 
#line 617
template< size_t _Index, class _Tuple> 
#line 618
struct tuple_element< _Index, volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 620
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 621
using type = std::add_volatile_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 622
}; 
#line 624
template< size_t _Index, class _Tuple> 
#line 625
struct tuple_element< _Index, const volatile _Tuple>  : public std::tuple_element< _Index, _Tuple>  { 
#line 627
using _Mybase = std::tuple_element< _Index, _Tuple> ; 
#line 628
using type = std::add_cv_t< typename std::tuple_element< _Index, _Tuple> ::type> ; 
#line 629
}; 
#line 631
template< class _Ty, size_t _Size> 
#line 632
struct tuple_size< array< _Ty, _Size> >  : public integral_constant< unsigned __int64, _Size>  { }; 
#line 634
template< size_t _Idx, class _Ty, size_t _Size> 
#line 635
struct tuple_element< _Idx, array< _Ty, _Size> >  { 
#line 636
static_assert((_Idx < _Size), "array index out of bounds");
#line 638
using type = _Ty; 
#line 639
}; 
#line 641
template< class ..._Types> 
#line 642
struct tuple_size< tuple< _Types...> >  : public integral_constant< unsigned __int64, sizeof...(_Types)>  { }; 
#line 644
template< size_t _Index> 
#line 645
struct tuple_element< _Index, tuple< > >  { 
#line 646
static_assert((_Always_false< integral_constant< size_t, _Index> > ), "tuple index out of bounds");
#line 647
}; 
#line 649
template< class _This, class ..._Rest> 
#line 650
struct tuple_element< 0, tuple< _This, _Rest...> >  { 
#line 651
using type = _This; 
#line 653
using _Ttype = tuple< _This, _Rest...> ; 
#line 654
}; 
#line 656
template< size_t _Index, class _This, class ..._Rest> 
#line 657
struct tuple_element< _Index, tuple< _This, _Rest...> >  : public std::tuple_element< _Index - (1), tuple< _Rest...> >  { 
#line 658
}; 
#line 660
template< class _Ty1, class _Ty2> 
#line 661
struct tuple_size< pair< _Ty1, _Ty2> >  : public integral_constant< unsigned __int64, 2Ui64>  { }; 
#line 663
template< size_t _Idx, class _Ty1, class _Ty2> 
#line 664
struct tuple_element< _Idx, pair< _Ty1, _Ty2> >  { 
#line 665
static_assert((_Idx < (2)), "pair index out of bounds");
#line 667
using type = conditional_t< _Idx == (0), _Ty1, _Ty2> ; 
#line 668
}; 
#line 670
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return _Pr . first;
    } else {
        return _Pr . second;
    }
}
#line 680
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr _Ty1 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . first;
}
#line 686
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr _Ty2 & get ( pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . second;
}
#line 692
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return _Pr . first;
    } else {
        return _Pr . second;
    }
}
#line 702
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const _Ty1 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . first;
}
#line 708
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr const _Ty2 & get ( const pair < _Ty1, _Ty2 > & _Pr ) noexcept {

    return _Pr . second;
}
#line 714
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return :: std :: forward < _Ty1 > ( _Pr . first );
    } else {
        return :: std :: forward < _Ty2 > ( _Pr . second );
    }
}
#line 724
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr _Ty1 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < _Ty1 > ( _Pr . first );
}
#line 730
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr _Ty2 && get ( pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < _Ty2 > ( _Pr . second );
}
#line 736
template < size_t _Idx, class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const tuple_element_t < _Idx, pair < _Ty1, _Ty2 > > && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    if constexpr ( _Idx == 0 ) {
        return :: std :: forward < const _Ty1 > ( _Pr . first );
    } else {
        return :: std :: forward < const _Ty2 > ( _Pr . second );
    }
}
#line 746
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] constexpr const _Ty1 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < const _Ty1 > ( _Pr . first );
}
#line 752
template < class _Ty2, class _Ty1 >
[ [ nodiscard ] ] constexpr const _Ty2 && get ( const pair < _Ty1, _Ty2 > && _Pr ) noexcept {

    return :: std :: forward < const _Ty2 > ( _Pr . second );
}
#line 758
template < class _Ty, class _Other = _Ty >
inline _Ty exchange ( _Ty & _Val, _Other && _New_val ) noexcept (
    conjunction_v < is_nothrow_move_constructible < _Ty >, is_nothrow_assignable < _Ty &, _Other >> ) {

    _Ty _Old_val = static_cast < _Ty && > ( _Val );
    _Val = static_cast < _Other && > ( _New_val );
    return _Old_val;
}
#line 767
template < class _Ty >
[ [ nodiscard ] ] constexpr add_const_t < _Ty > & as_const ( _Ty & _Val ) noexcept {
    return _Val;
}
#line 772
template < class _Ty >
void as_const ( const _Ty && ) = delete;
#line 956 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 957
using std::get;
#line 958
using std::tuple_element;
#line 959
using std::tuple_size;
#line 960
}
#line 963 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\utility"
}
#line 972
#pragma warning(pop)
#pragma pack ( pop )
#line 206 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 207
cudaLaunchKernel(const T *
#line 208
func, ::dim3 
#line 209
gridDim, ::dim3 
#line 210
blockDim, void **
#line 211
args, ::size_t 
#line 212
sharedMem = 0, ::cudaStream_t 
#line 213
stream = 0) 
#line 215
{ 
#line 216
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 217
} 
#line 277
template< class ...ExpTypes, class ...ActTypes> static __inline ::cudaError_t 
#line 278
cudaLaunchKernelEx(const ::cudaLaunchConfig_t *
#line 279
config, void (*
#line 280
kernel)(ExpTypes ...), ActTypes &&...
#line 281
args) 
#line 283
{ 
#line 284
return [&](ExpTypes ...coercedArgs) { 
#line 285
void *pArgs[] = {(&coercedArgs)...}; 
#line 286
return ::cudaLaunchKernelExC(config, (const void *)(kernel), pArgs); 
#line 287
} (std::forward< ActTypes> (args)...); 
#line 288
} 
#line 340 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 341
cudaLaunchCooperativeKernel(const T *
#line 342
func, ::dim3 
#line 343
gridDim, ::dim3 
#line 344
blockDim, void **
#line 345
args, ::size_t 
#line 346
sharedMem = 0, ::cudaStream_t 
#line 347
stream = 0) 
#line 349
{ 
#line 350
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 351
} 
#line 384
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 385
event, unsigned 
#line 386
flags) 
#line 388
{ 
#line 389
return ::cudaEventCreateWithFlags(event, flags); 
#line 390
} 
#line 428
static __inline cudaError_t cudaGraphInstantiate(cudaGraphExec_t *
#line 429
pGraphExec, cudaGraph_t 
#line 430
graph, cudaGraphNode_t *
#line 431
pErrorNode, char *
#line 432
pLogBuffer, size_t 
#line 433
bufferSize) 
#line 435
{ 
#line 436
(void)pErrorNode; 
#line 437
(void)pLogBuffer; 
#line 438
(void)bufferSize; 
#line 439
return ::cudaGraphInstantiate(pGraphExec, graph, 0); 
#line 440
} 
#line 499
static __inline cudaError_t cudaMallocHost(void **
#line 500
ptr, size_t 
#line 501
size, unsigned 
#line 502
flags) 
#line 504
{ 
#line 505
return ::cudaHostAlloc(ptr, size, flags); 
#line 506
} 
#line 508
template< class T> static __inline ::cudaError_t 
#line 509
cudaHostAlloc(T **
#line 510
ptr, ::size_t 
#line 511
size, unsigned 
#line 512
flags) 
#line 514
{ 
#line 515
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 516
} 
#line 518
template< class T> static __inline ::cudaError_t 
#line 519
cudaHostGetDevicePointer(T **
#line 520
pDevice, void *
#line 521
pHost, unsigned 
#line 522
flags) 
#line 524
{ 
#line 525
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 526
} 
#line 628
template< class T> static __inline ::cudaError_t 
#line 629
cudaMallocManaged(T **
#line 630
devPtr, ::size_t 
#line 631
size, unsigned 
#line 632
flags = 1) 
#line 634
{ 
#line 635
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 636
} 
#line 646
template< class T> ::cudaError_t 
#line 647
cudaMemAdvise(T *
#line 648
devPtr, ::size_t 
#line 649
count, ::cudaMemoryAdvise 
#line 650
advice, ::cudaMemLocation 
#line 651
location) 
#line 653
{ 
#line 654
return ::cudaMemAdvise_v2((const void *)devPtr, count, advice, location); 
#line 655
} 
#line 657
template< class T> static __inline ::cudaError_t 
#line 658
cudaMemPrefetchAsync(T *
#line 659
devPtr, ::size_t 
#line 660
count, ::cudaMemLocation 
#line 661
location, unsigned 
#line 662
flags, ::cudaStream_t 
#line 663
stream = 0) 
#line 665
{ 
#line 666
return ::cudaMemPrefetchAsync_v2((const void *)devPtr, count, location, flags, stream); 
#line 667
} 
#line 749
template< class T> static __inline ::cudaError_t 
#line 750
cudaStreamAttachMemAsync(::cudaStream_t 
#line 751
stream, T *
#line 752
devPtr, ::size_t 
#line 753
length = 0, unsigned 
#line 754
flags = 4) 
#line 756
{ 
#line 757
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 758
} 
#line 760
template< class T> __inline ::cudaError_t 
#line 761
cudaMalloc(T **
#line 762
devPtr, ::size_t 
#line 763
size) 
#line 765
{ 
#line 766
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 767
} 
#line 769
template< class T> static __inline ::cudaError_t 
#line 770
cudaMallocHost(T **
#line 771
ptr, ::size_t 
#line 772
size, unsigned 
#line 773
flags = 0) 
#line 775
{ 
#line 776
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 777
} 
#line 779
template< class T> static __inline ::cudaError_t 
#line 780
cudaMallocPitch(T **
#line 781
devPtr, ::size_t *
#line 782
pitch, ::size_t 
#line 783
width, ::size_t 
#line 784
height) 
#line 786
{ 
#line 787
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 788
} 
#line 799
static __inline cudaError_t cudaMallocAsync(void **
#line 800
ptr, size_t 
#line 801
size, cudaMemPool_t 
#line 802
memPool, cudaStream_t 
#line 803
stream) 
#line 805
{ 
#line 806
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
#line 807
} 
#line 809
template< class T> static __inline ::cudaError_t 
#line 810
cudaMallocAsync(T **
#line 811
ptr, ::size_t 
#line 812
size, ::cudaMemPool_t 
#line 813
memPool, ::cudaStream_t 
#line 814
stream) 
#line 816
{ 
#line 817
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
#line 818
} 
#line 820
template< class T> static __inline ::cudaError_t 
#line 821
cudaMallocAsync(T **
#line 822
ptr, ::size_t 
#line 823
size, ::cudaStream_t 
#line 824
stream) 
#line 826
{ 
#line 827
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
#line 828
} 
#line 830
template< class T> static __inline ::cudaError_t 
#line 831
cudaMallocFromPoolAsync(T **
#line 832
ptr, ::size_t 
#line 833
size, ::cudaMemPool_t 
#line 834
memPool, ::cudaStream_t 
#line 835
stream) 
#line 837
{ 
#line 838
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
#line 839
} 
#line 878
template< class T> static __inline ::cudaError_t 
#line 879
cudaMemcpyToSymbol(const T &
#line 880
symbol, const void *
#line 881
src, ::size_t 
#line 882
count, ::size_t 
#line 883
offset = 0, ::cudaMemcpyKind 
#line 884
kind = cudaMemcpyHostToDevice) 
#line 886
{ 
#line 887
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 888
} 
#line 932
template< class T> static __inline ::cudaError_t 
#line 933
cudaMemcpyToSymbolAsync(const T &
#line 934
symbol, const void *
#line 935
src, ::size_t 
#line 936
count, ::size_t 
#line 937
offset = 0, ::cudaMemcpyKind 
#line 938
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 939
stream = 0) 
#line 941
{ 
#line 942
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 943
} 
#line 980
template< class T> static __inline ::cudaError_t 
#line 981
cudaMemcpyFromSymbol(void *
#line 982
dst, const T &
#line 983
symbol, ::size_t 
#line 984
count, ::size_t 
#line 985
offset = 0, ::cudaMemcpyKind 
#line 986
kind = cudaMemcpyDeviceToHost) 
#line 988
{ 
#line 989
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 990
} 
#line 1034
template< class T> static __inline ::cudaError_t 
#line 1035
cudaMemcpyFromSymbolAsync(void *
#line 1036
dst, const T &
#line 1037
symbol, ::size_t 
#line 1038
count, ::size_t 
#line 1039
offset = 0, ::cudaMemcpyKind 
#line 1040
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 1041
stream = 0) 
#line 1043
{ 
#line 1044
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 1045
} 
#line 1103
template< class T> static __inline ::cudaError_t 
#line 1104
cudaGraphAddMemcpyNodeToSymbol(::cudaGraphNode_t *
#line 1105
pGraphNode, ::cudaGraph_t 
#line 1106
graph, const ::cudaGraphNode_t *
#line 1107
pDependencies, ::size_t 
#line 1108
numDependencies, const T &
#line 1109
symbol, const void *
#line 1110
src, ::size_t 
#line 1111
count, ::size_t 
#line 1112
offset, ::cudaMemcpyKind 
#line 1113
kind) 
#line 1114
{ 
#line 1115
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
#line 1116
} 
#line 1174
template< class T> static __inline ::cudaError_t 
#line 1175
cudaGraphAddMemcpyNodeFromSymbol(::cudaGraphNode_t *
#line 1176
pGraphNode, ::cudaGraph_t 
#line 1177
graph, const ::cudaGraphNode_t *
#line 1178
pDependencies, ::size_t 
#line 1179
numDependencies, void *
#line 1180
dst, const T &
#line 1181
symbol, ::size_t 
#line 1182
count, ::size_t 
#line 1183
offset, ::cudaMemcpyKind 
#line 1184
kind) 
#line 1185
{ 
#line 1186
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
#line 1187
} 
#line 1225
template< class T> static __inline ::cudaError_t 
#line 1226
cudaGraphMemcpyNodeSetParamsToSymbol(::cudaGraphNode_t 
#line 1227
node, const T &
#line 1228
symbol, const void *
#line 1229
src, ::size_t 
#line 1230
count, ::size_t 
#line 1231
offset, ::cudaMemcpyKind 
#line 1232
kind) 
#line 1233
{ 
#line 1234
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
#line 1235
} 
#line 1273
template< class T> static __inline ::cudaError_t 
#line 1274
cudaGraphMemcpyNodeSetParamsFromSymbol(::cudaGraphNode_t 
#line 1275
node, void *
#line 1276
dst, const T &
#line 1277
symbol, ::size_t 
#line 1278
count, ::size_t 
#line 1279
offset, ::cudaMemcpyKind 
#line 1280
kind) 
#line 1281
{ 
#line 1282
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
#line 1283
} 
#line 1331
template< class T> static __inline ::cudaError_t 
#line 1332
cudaGraphExecMemcpyNodeSetParamsToSymbol(::cudaGraphExec_t 
#line 1333
hGraphExec, ::cudaGraphNode_t 
#line 1334
node, const T &
#line 1335
symbol, const void *
#line 1336
src, ::size_t 
#line 1337
count, ::size_t 
#line 1338
offset, ::cudaMemcpyKind 
#line 1339
kind) 
#line 1340
{ 
#line 1341
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
#line 1342
} 
#line 1390
template< class T> static __inline ::cudaError_t 
#line 1391
cudaGraphExecMemcpyNodeSetParamsFromSymbol(::cudaGraphExec_t 
#line 1392
hGraphExec, ::cudaGraphNode_t 
#line 1393
node, void *
#line 1394
dst, const T &
#line 1395
symbol, ::size_t 
#line 1396
count, ::size_t 
#line 1397
offset, ::cudaMemcpyKind 
#line 1398
kind) 
#line 1399
{ 
#line 1400
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
#line 1401
} 
#line 1404
static __inline cudaError_t __stdcall cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, cudaGraphExecUpdateResult *updateResult_out) 
#line 1405
{ 
#line 1406
cudaGraphExecUpdateResultInfo resultInfo; 
#line 1407
cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo); 
#line 1408
if (hErrorNode_out) { 
#line 1409
(*hErrorNode_out) = (resultInfo.errorNode); 
#line 1410
}  
#line 1411
if (updateResult_out) { 
#line 1412
(*updateResult_out) = (resultInfo.result); 
#line 1413
}  
#line 1414
return status; 
#line 1415
} 
#line 1443
template< class T> static __inline ::cudaError_t 
#line 1444
cudaUserObjectCreate(::cudaUserObject_t *
#line 1445
object_out, T *
#line 1446
objectToWrap, unsigned 
#line 1447
initialRefcount, unsigned 
#line 1448
flags) 
#line 1449
{ 
#line 1450
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
#line 1453
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
#line 1456
} 
#line 1458
template< class T> static __inline ::cudaError_t 
#line 1459
cudaUserObjectCreate(::cudaUserObject_t *
#line 1460
object_out, T *
#line 1461
objectToWrap, unsigned 
#line 1462
initialRefcount, ::cudaUserObjectFlags 
#line 1463
flags) 
#line 1464
{ 
#line 1465
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
#line 1466
} 
#line 1493 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 1494
cudaGetSymbolAddress(void **
#line 1495
devPtr, const T &
#line 1496
symbol) 
#line 1498
{ 
#line 1499
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 1500
} 
#line 1525
template< class T> static __inline ::cudaError_t 
#line 1526
cudaGetSymbolSize(::size_t *
#line 1527
size, const T &
#line 1528
symbol) 
#line 1530
{ 
#line 1531
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 1532
} 
#line 1577
template< class T> static __inline ::cudaError_t 
#line 1578
cudaFuncSetCacheConfig(T *
#line 1579
func, ::cudaFuncCache 
#line 1580
cacheConfig) 
#line 1582
{ 
#line 1583
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1584
} 
#line 1586
template< class T> static __inline ::cudaError_t 
#line 1587
cudaFuncSetSharedMemConfig(T *
#line 1588
func, ::cudaSharedMemConfig 
#line 1589
config) 
#line 1591
{ 
#line 1592
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1593
} 
#line 1625 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime.h"
template< class T> __inline ::cudaError_t 
#line 1626
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1627
numBlocks, T 
#line 1628
func, int 
#line 1629
blockSize, ::size_t 
#line 1630
dynamicSMemSize) 
#line 1631
{ 
#line 1632
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1633
} 
#line 1677
template< class T> __inline ::cudaError_t 
#line 1678
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1679
numBlocks, T 
#line 1680
func, int 
#line 1681
blockSize, ::size_t 
#line 1682
dynamicSMemSize, unsigned 
#line 1683
flags) 
#line 1684
{ 
#line 1685
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1686
} 
#line 1691
class __cudaOccupancyB2DHelper { 
#line 1692
size_t n; 
#line 1694
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1695
size_t operator()(int) 
#line 1696
{ 
#line 1697
return n; 
#line 1698
} 
#line 1699
}; 
#line 1747
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1748
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1749
minGridSize, int *
#line 1750
blockSize, T 
#line 1751
func, UnaryFunction 
#line 1752
blockSizeToDynamicSMemSize, int 
#line 1753
blockSizeLimit = 0, unsigned 
#line 1754
flags = 0) 
#line 1755
{ 
#line 1756
::cudaError_t status; 
#line 1759
int device; 
#line 1760
::cudaFuncAttributes attr; 
#line 1763
int maxThreadsPerMultiProcessor; 
#line 1764
int warpSize; 
#line 1765
int devMaxThreadsPerBlock; 
#line 1766
int multiProcessorCount; 
#line 1767
int funcMaxThreadsPerBlock; 
#line 1768
int occupancyLimit; 
#line 1769
int granularity; 
#line 1772
int maxBlockSize = 0; 
#line 1773
int numBlocks = 0; 
#line 1774
int maxOccupancy = 0; 
#line 1777
int blockSizeToTryAligned; 
#line 1778
int blockSizeToTry; 
#line 1779
int blockSizeLimitAligned; 
#line 1780
int occupancyInBlocks; 
#line 1781
int occupancyInThreads; 
#line 1782
::size_t dynamicSMemSize; 
#line 1788
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1789
return cudaErrorInvalidValue; 
#line 1790
}  
#line 1796
status = ::cudaGetDevice(&device); 
#line 1797
if (status != (cudaSuccess)) { 
#line 1798
return status; 
#line 1799
}  
#line 1801
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1805
if (status != (cudaSuccess)) { 
#line 1806
return status; 
#line 1807
}  
#line 1809
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1813
if (status != (cudaSuccess)) { 
#line 1814
return status; 
#line 1815
}  
#line 1817
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1821
if (status != (cudaSuccess)) { 
#line 1822
return status; 
#line 1823
}  
#line 1825
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1829
if (status != (cudaSuccess)) { 
#line 1830
return status; 
#line 1831
}  
#line 1833
status = cudaFuncGetAttributes(&attr, func); 
#line 1834
if (status != (cudaSuccess)) { 
#line 1835
return status; 
#line 1836
}  
#line 1838
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1844
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1845
granularity = warpSize; 
#line 1847
if (blockSizeLimit == 0) { 
#line 1848
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1849
}  
#line 1851
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1852
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1853
}  
#line 1855
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1856
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1857
}  
#line 1859
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1861
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1865
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1866
blockSizeToTry = blockSizeLimit; 
#line 1867
} else { 
#line 1868
blockSizeToTry = blockSizeToTryAligned; 
#line 1869
}  
#line 1871
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1873
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1880
if (status != (cudaSuccess)) { 
#line 1881
return status; 
#line 1882
}  
#line 1884
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1886
if (occupancyInThreads > maxOccupancy) { 
#line 1887
maxBlockSize = blockSizeToTry; 
#line 1888
numBlocks = occupancyInBlocks; 
#line 1889
maxOccupancy = occupancyInThreads; 
#line 1890
}  
#line 1894
if (occupancyLimit == maxOccupancy) { 
#line 1895
break; 
#line 1896
}  
#line 1897
}  
#line 1905
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1906
(*blockSize) = maxBlockSize; 
#line 1908
return status; 
#line 1909
} 
#line 1943
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1944
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1945
minGridSize, int *
#line 1946
blockSize, T 
#line 1947
func, UnaryFunction 
#line 1948
blockSizeToDynamicSMemSize, int 
#line 1949
blockSizeLimit = 0) 
#line 1950
{ 
#line 1951
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1952
} 
#line 1989
template< class T> static __inline ::cudaError_t 
#line 1990
cudaOccupancyMaxPotentialBlockSize(int *
#line 1991
minGridSize, int *
#line 1992
blockSize, T 
#line 1993
func, ::size_t 
#line 1994
dynamicSMemSize = 0, int 
#line 1995
blockSizeLimit = 0) 
#line 1996
{ 
#line 1997
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1998
} 
#line 2027
template< class T> static __inline ::cudaError_t 
#line 2028
cudaOccupancyAvailableDynamicSMemPerBlock(::size_t *
#line 2029
dynamicSmemSize, T 
#line 2030
func, int 
#line 2031
numBlocks, int 
#line 2032
blockSize) 
#line 2033
{ 
#line 2034
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
#line 2035
} 
#line 2086
template< class T> static __inline ::cudaError_t 
#line 2087
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 2088
minGridSize, int *
#line 2089
blockSize, T 
#line 2090
func, ::size_t 
#line 2091
dynamicSMemSize = 0, int 
#line 2092
blockSizeLimit = 0, unsigned 
#line 2093
flags = 0) 
#line 2094
{ 
#line 2095
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 2096
} 
#line 2130
template< class T> static __inline ::cudaError_t 
#line 2131
cudaOccupancyMaxPotentialClusterSize(int *
#line 2132
clusterSize, T *
#line 2133
func, const ::cudaLaunchConfig_t *
#line 2134
config) 
#line 2135
{ 
#line 2136
return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void *)func, config); 
#line 2137
} 
#line 2173
template< class T> static __inline ::cudaError_t 
#line 2174
cudaOccupancyMaxActiveClusters(int *
#line 2175
numClusters, T *
#line 2176
func, const ::cudaLaunchConfig_t *
#line 2177
config) 
#line 2178
{ 
#line 2179
return ::cudaOccupancyMaxActiveClusters(numClusters, (const void *)func, config); 
#line 2180
} 
#line 2213
template< class T> __inline ::cudaError_t 
#line 2214
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 2215
attr, T *
#line 2216
entry) 
#line 2218
{ 
#line 2219
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 2220
} 
#line 2275
template< class T> static __inline ::cudaError_t 
#line 2276
cudaFuncSetAttribute(T *
#line 2277
entry, ::cudaFuncAttribute 
#line 2278
attr, int 
#line 2279
value) 
#line 2281
{ 
#line 2282
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
#line 2283
} 
#line 2307
template< class T> static __inline ::cudaError_t __stdcall 
#line 2308
cudaFuncGetName(const char **
#line 2309
name, const T *
#line 2310
func) 
#line 2312
{ 
#line 2313
return ::cudaFuncGetName(name, (const void *)func); 
#line 2314
} 
#line 2330
template< class T> static __inline ::cudaError_t 
#line 2331
cudaGetKernel(::cudaKernel_t *
#line 2332
kernelPtr, const T *
#line 2333
entryFuncAddr) 
#line 2335
{ 
#line 2336
return ::cudaGetKernel(kernelPtr, (const void *)entryFuncAddr); 
#line 2337
} 
#line 2351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.3\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_stdio_config.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 16
__pragma( pack ( push, 8 )) extern "C" {
#line 72 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_stdio_config.h"
#pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
#line 89 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_stdio_config.h"
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_printf_options() 
#line 90
{ 
#line 91
static unsigned __int64 _OptionsStorage; 
#line 92
return &_OptionsStorage; 
#line 93
} 
#line 99
__declspec(noinline) __inline unsigned __int64 *__cdecl __local_stdio_scanf_options() 
#line 100
{ 
#line 101
static unsigned __int64 _OptionsStorage; 
#line 102
return &_OptionsStorage; 
#line 103
} 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_stdio_config.h"
}__pragma( pack ( pop )) 
#line 131
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 31
typedef 
#line 28
struct _iobuf { 
#line 30
void *_Placeholder; 
#line 31
} FILE; 
#line 34 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) FILE *__cdecl __acrt_iob_func(unsigned _Ix); 
#line 51
__declspec(dllimport) wint_t __cdecl fgetwc(FILE * _Stream); 
#line 56
__declspec(dllimport) wint_t __cdecl _fgetwchar(); 
#line 59
__declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Character, FILE * _Stream); 
#line 64
__declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Character); 
#line 69
__declspec(dllimport) wint_t __cdecl getwc(FILE * _Stream); 
#line 74
__declspec(dllimport) wint_t __cdecl getwchar(); 
#line 79
__declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Buffer, int _BufferCount, FILE * _Stream); 
#line 86
__declspec(dllimport) int __cdecl fputws(const __wchar_t * _Buffer, FILE * _Stream); 
#line 93
__declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 98
extern "C++" {template < size_t _Size > inline wchar_t * __cdecl _getws_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _getws_s ( _Buffer, _Size ); }}
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Character, FILE * _Stream); 
#line 111
__declspec(dllimport) wint_t __cdecl putwchar(__wchar_t _Character); 
#line 116
__declspec(dllimport) int __cdecl _putws(const __wchar_t * _Buffer); 
#line 121
__declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Character, FILE * _Stream); 
#line 127
__declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); 
#line 133
__declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 139
__declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode); 
#line 147
__declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 154
__declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _Stream, const __wchar_t * _FileName, const __wchar_t * _Mode, FILE * _OldStream); 
#line 162
__declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _FileName, const __wchar_t * _Mode, int _ShFlag); 
#line 168
__declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrorMessage); 
#line 175
__declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); 
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl _wremove(const __wchar_t * _FileName); 
#line 190
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); 
#line 199
__declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _Buffer, size_t _BufferCount); 
#line 204
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wtmpnam_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wtmpnam_s ( _Buffer, _Size ); }}
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); 
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _Stream); 
#line 229
__declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 235
__declspec(dllimport) wint_t __cdecl _getwc_nolock(FILE * _Stream); 
#line 240
__declspec(dllimport) wint_t __cdecl _putwc_nolock(__wchar_t _Character, FILE * _Stream); 
#line 246
__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Character, FILE * _Stream); 
#line 272 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 281
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 290
__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 299
__inline int __cdecl _vfwprintf_l(FILE *const 
#line 300
_Stream, const __wchar_t *const 
#line 301
_Format, const _locale_t 
#line 302
_Locale, va_list 
#line 303
_ArgList) 
#line 308 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 309
return __stdio_common_vfwprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 310
} 
#line 314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf(FILE *const 
#line 315
_Stream, const __wchar_t *const 
#line 316
_Format, va_list 
#line 317
_ArgList) 
#line 322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 323
return _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 324
} 
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_s_l(FILE *const 
#line 329
_Stream, const __wchar_t *const 
#line 330
_Format, const _locale_t 
#line 331
_Locale, va_list 
#line 332
_ArgList) 
#line 337 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 338
return __stdio_common_vfwprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 339
} 
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwprintf_s(FILE *const 
#line 346
_Stream, const __wchar_t *const 
#line 347
_Format, va_list 
#line 348
_ArgList) 
#line 353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 354
return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 355
} 
#line 361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p_l(FILE *const 
#line 362
_Stream, const __wchar_t *const 
#line 363
_Format, const _locale_t 
#line 364
_Locale, va_list 
#line 365
_ArgList) 
#line 370 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 371
return __stdio_common_vfwprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 372
} 
#line 376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwprintf_p(FILE *const 
#line 377
_Stream, const __wchar_t *const 
#line 378
_Format, va_list 
#line 379
_ArgList) 
#line 384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 385
return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 386
} 
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_l(const __wchar_t *const 
#line 391
_Format, const _locale_t 
#line 392
_Locale, va_list 
#line 393
_ArgList) 
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 399
return _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 400
} 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf(const __wchar_t *const 
#line 405
_Format, va_list 
#line 406
_ArgList) 
#line 411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 412
return _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 413
} 
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_s_l(const __wchar_t *const 
#line 418
_Format, const _locale_t 
#line 419
_Locale, va_list 
#line 420
_ArgList) 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 426
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 427
} 
#line 433 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwprintf_s(const __wchar_t *const 
#line 434
_Format, va_list 
#line 435
_ArgList) 
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 441
return _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 442
} 
#line 448 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p_l(const __wchar_t *const 
#line 449
_Format, const _locale_t 
#line 450
_Locale, va_list 
#line 451
_ArgList) 
#line 456 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 457
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 458
} 
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwprintf_p(const __wchar_t *const 
#line 463
_Format, va_list 
#line 464
_ArgList) 
#line 469 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 470
return _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 471
} 
#line 475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_l(FILE *const 
#line 476
_Stream, const __wchar_t *const 
#line 477
_Format, const _locale_t 
#line 478
_Locale, ...) 
#line 483 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 484
int _Result; 
#line 485
va_list _ArgList; 
#line 486
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 487
_Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 488
(void)(_ArgList = ((va_list)0)); 
#line 489
return _Result; 
#line 490
} 
#line 494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf(FILE *const 
#line 495
_Stream, const __wchar_t *const 
#line 496
_Format, ...) 
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 502
int _Result; 
#line 503
va_list _ArgList; 
#line 504
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 505
_Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList); 
#line 506
(void)(_ArgList = ((va_list)0)); 
#line 507
return _Result; 
#line 508
} 
#line 512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_s_l(FILE *const 
#line 513
_Stream, const __wchar_t *const 
#line 514
_Format, const _locale_t 
#line 515
_Locale, ...) 
#line 520 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 521
int _Result; 
#line 522
va_list _ArgList; 
#line 523
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 524
_Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 525
(void)(_ArgList = ((va_list)0)); 
#line 526
return _Result; 
#line 527
} 
#line 533 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwprintf_s(FILE *const 
#line 534
_Stream, const __wchar_t *const 
#line 535
_Format, ...) 
#line 540 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 541
int _Result; 
#line 542
va_list _ArgList; 
#line 543
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 544
_Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 545
(void)(_ArgList = ((va_list)0)); 
#line 546
return _Result; 
#line 547
} 
#line 553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p_l(FILE *const 
#line 554
_Stream, const __wchar_t *const 
#line 555
_Format, const _locale_t 
#line 556
_Locale, ...) 
#line 561 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 562
int _Result; 
#line 563
va_list _ArgList; 
#line 564
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 565
_Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 566
(void)(_ArgList = ((va_list)0)); 
#line 567
return _Result; 
#line 568
} 
#line 572 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwprintf_p(FILE *const 
#line 573
_Stream, const __wchar_t *const 
#line 574
_Format, ...) 
#line 579 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 580
int _Result; 
#line 581
va_list _ArgList; 
#line 582
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 583
_Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 584
(void)(_ArgList = ((va_list)0)); 
#line 585
return _Result; 
#line 586
} 
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_l(const __wchar_t *const 
#line 591
_Format, const _locale_t 
#line 592
_Locale, ...) 
#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 598
int _Result; 
#line 599
va_list _ArgList; 
#line 600
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 601
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 602
(void)(_ArgList = ((va_list)0)); 
#line 603
return _Result; 
#line 604
} 
#line 608 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf(const __wchar_t *const 
#line 609
_Format, ...) 
#line 614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 615
int _Result; 
#line 616
va_list _ArgList; 
#line 617
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 618
_Result = _vfwprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 619
(void)(_ArgList = ((va_list)0)); 
#line 620
return _Result; 
#line 621
} 
#line 625 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_s_l(const __wchar_t *const 
#line 626
_Format, const _locale_t 
#line 627
_Locale, ...) 
#line 632 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 633
int _Result; 
#line 634
va_list _ArgList; 
#line 635
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 636
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 637
(void)(_ArgList = ((va_list)0)); 
#line 638
return _Result; 
#line 639
} 
#line 645 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wprintf_s(const __wchar_t *const 
#line 646
_Format, ...) 
#line 651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 652
int _Result; 
#line 653
va_list _ArgList; 
#line 654
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 655
_Result = _vfwprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 656
(void)(_ArgList = ((va_list)0)); 
#line 657
return _Result; 
#line 658
} 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p_l(const __wchar_t *const 
#line 665
_Format, const _locale_t 
#line 666
_Locale, ...) 
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 672
int _Result; 
#line 673
va_list _ArgList; 
#line 674
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 675
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 676
(void)(_ArgList = ((va_list)0)); 
#line 677
return _Result; 
#line 678
} 
#line 682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wprintf_p(const __wchar_t *const 
#line 683
_Format, ...) 
#line 688 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 689
int _Result; 
#line 690
va_list _ArgList; 
#line 691
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 692
_Result = _vfwprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 693
(void)(_ArgList = ((va_list)0)); 
#line 694
return _Result; 
#line 695
} 
#line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(unsigned __int64 _Options, FILE * _Stream, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 714
__inline int __cdecl _vfwscanf_l(FILE *const 
#line 715
_Stream, const __wchar_t *const 
#line 716
_Format, const _locale_t 
#line 717
_Locale, va_list 
#line 718
_ArgList) 
#line 723 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 724
return __stdio_common_vfwscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 727
} 
#line 731 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf(FILE *const 
#line 732
_Stream, const __wchar_t *const 
#line 733
_Format, va_list 
#line 734
_ArgList) 
#line 739 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 740
return _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 741
} 
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vfwscanf_s_l(FILE *const 
#line 746
_Stream, const __wchar_t *const 
#line 747
_Format, const _locale_t 
#line 748
_Locale, va_list 
#line 749
_ArgList) 
#line 754 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 755
return __stdio_common_vfwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 758
} 
#line 764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vfwscanf_s(FILE *const 
#line 765
_Stream, const __wchar_t *const 
#line 766
_Format, va_list 
#line 767
_ArgList) 
#line 772 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 773
return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 774
} 
#line 779 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_l(const __wchar_t *const 
#line 780
_Format, const _locale_t 
#line 781
_Locale, va_list 
#line 782
_ArgList) 
#line 787 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 788
return _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 789
} 
#line 793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf(const __wchar_t *const 
#line 794
_Format, va_list 
#line 795
_ArgList) 
#line 800 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 801
return _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 802
} 
#line 806 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vwscanf_s_l(const __wchar_t *const 
#line 807
_Format, const _locale_t 
#line 808
_Locale, va_list 
#line 809
_ArgList) 
#line 814 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 815
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 816
} 
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vwscanf_s(const __wchar_t *const 
#line 823
_Format, va_list 
#line 824
_ArgList) 
#line 829 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 830
return _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 831
} 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_l(FILE *const 
#line 838
_Stream, const __wchar_t *const 
#line 839
_Format, const _locale_t 
#line 840
_Locale, ...) 
#line 845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 846
int _Result; 
#line 847
va_list _ArgList; 
#line 848
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 849
_Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 850
(void)(_ArgList = ((va_list)0)); 
#line 851
return _Result; 
#line 852
} 
#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf(FILE *const 
#line 857
_Stream, const __wchar_t *const 
#line 858
_Format, ...) 
#line 863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 864
int _Result; 
#line 865
va_list _ArgList; 
#line 866
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 867
_Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList); 
#line 868
(void)(_ArgList = ((va_list)0)); 
#line 869
return _Result; 
#line 870
} 
#line 874 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _fwscanf_s_l(FILE *const 
#line 875
_Stream, const __wchar_t *const 
#line 876
_Format, const _locale_t 
#line 877
_Locale, ...) 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 883
int _Result; 
#line 884
va_list _ArgList; 
#line 885
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 886
_Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 887
(void)(_ArgList = ((va_list)0)); 
#line 888
return _Result; 
#line 889
} 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl fwscanf_s(FILE *const 
#line 896
_Stream, const __wchar_t *const 
#line 897
_Format, ...) 
#line 902 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 903
int _Result; 
#line 904
va_list _ArgList; 
#line 905
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 906
_Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 907
(void)(_ArgList = ((va_list)0)); 
#line 908
return _Result; 
#line 909
} 
#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_l(const __wchar_t *const 
#line 916
_Format, const _locale_t 
#line 917
_Locale, ...) 
#line 922 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 923
int _Result; 
#line 924
va_list _ArgList; 
#line 925
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 926
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 927
(void)(_ArgList = ((va_list)0)); 
#line 928
return _Result; 
#line 929
} 
#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf(const __wchar_t *const 
#line 934
_Format, ...) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 940
int _Result; 
#line 941
va_list _ArgList; 
#line 942
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 943
_Result = _vfwscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 944
(void)(_ArgList = ((va_list)0)); 
#line 945
return _Result; 
#line 946
} 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _wscanf_s_l(const __wchar_t *const 
#line 951
_Format, const _locale_t 
#line 952
_Locale, ...) 
#line 957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 958
int _Result; 
#line 959
va_list _ArgList; 
#line 960
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 961
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 962
(void)(_ArgList = ((va_list)0)); 
#line 963
return _Result; 
#line 964
} 
#line 970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl wscanf_s(const __wchar_t *const 
#line 971
_Format, ...) 
#line 976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 977
int _Result; 
#line 978
va_list _ArgList; 
#line 979
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 980
_Result = _vfwscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 981
(void)(_ArgList = ((va_list)0)); 
#line 982
return _Result; 
#line 983
} 
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswprintf(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1017
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1028
__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1040
__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(unsigned __int64 _Options, __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1051
__inline int __cdecl _vsnwprintf_l(__wchar_t *const 
#line 1052
_Buffer, const size_t 
#line 1053
_BufferCount, const __wchar_t *const 
#line 1054
_Format, const _locale_t 
#line 1055
_Locale, va_list 
#line 1056
_ArgList) 
#line 1061 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1062
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1066
return (_Result < 0) ? -1 : _Result; 
#line 1067
} 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s_l(__wchar_t *const 
#line 1073
_Buffer, const size_t 
#line 1074
_BufferCount, const size_t 
#line 1075
_MaxCount, const __wchar_t *const 
#line 1076
_Format, const _locale_t 
#line 1077
_Locale, va_list 
#line 1078
_ArgList) 
#line 1083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1084
const int _Result = __stdio_common_vsnwprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1088
return (_Result < 0) ? -1 : _Result; 
#line 1089
} 
#line 1094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf_s(__wchar_t *const 
#line 1095
_Buffer, const size_t 
#line 1096
_BufferCount, const size_t 
#line 1097
_MaxCount, const __wchar_t *const 
#line 1098
_Format, va_list 
#line 1099
_ArgList) 
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1105
return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1106
} 
#line 1109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, ...); __inline int __cdecl _vsnwprintf(__wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, va_list _Args); 
#line 1120 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwprintf(__wchar_t *
#line 1121
_Buffer, size_t 
#line 1122
_BufferCount, const __wchar_t *
#line 1123
_Format, va_list 
#line 1124
_ArgList) 
#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1130
return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1131
} 
#line 1134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, va_list _ArgList ) throw ( ) { return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c_l(__wchar_t *const 
#line 1146
_Buffer, const size_t 
#line 1147
_BufferCount, const __wchar_t *const 
#line 1148
_Format, const _locale_t 
#line 1149
_Locale, va_list 
#line 1150
_ArgList) 
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1156
const int _Result = __stdio_common_vswprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1160
return (_Result < 0) ? -1 : _Result; 
#line 1161
} 
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_c(__wchar_t *const 
#line 1167
_Buffer, const size_t 
#line 1168
_BufferCount, const __wchar_t *const 
#line 1169
_Format, va_list 
#line 1170
_ArgList) 
#line 1175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1176
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1177
} 
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_l(__wchar_t *const 
#line 1183
_Buffer, const size_t 
#line 1184
_BufferCount, const __wchar_t *const 
#line 1185
_Format, const _locale_t 
#line 1186
_Locale, va_list 
#line 1187
_ArgList) 
#line 1192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1193
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1194
} 
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __vswprintf_l(__wchar_t *const 
#line 1200
_Buffer, const __wchar_t *const 
#line 1201
_Format, const _locale_t 
#line 1202
_Locale, va_list 
#line 1203
_ArgList) 
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1209
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1210
} 
#line 1215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf(__wchar_t *const 
#line 1216
_Buffer, const __wchar_t *const 
#line 1217
_Format, va_list 
#line 1218
_ArgList) 
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1224
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1225
} 
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf(__wchar_t *const 
#line 1231
_Buffer, const size_t 
#line 1232
_BufferCount, const __wchar_t *const 
#line 1233
_Format, va_list 
#line 1234
_ArgList) 
#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1240
return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1241
} 
#line 1246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_s_l(__wchar_t *const 
#line 1247
_Buffer, const size_t 
#line 1248
_BufferCount, const __wchar_t *const 
#line 1249
_Format, const _locale_t 
#line 1250
_Locale, va_list 
#line 1251
_ArgList) 
#line 1256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1257
const int _Result = __stdio_common_vswprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1261
return (_Result < 0) ? -1 : _Result; 
#line 1262
} 
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswprintf_s(__wchar_t *const 
#line 1269
_Buffer, const size_t 
#line 1270
_BufferCount, const __wchar_t *const 
#line 1271
_Format, va_list 
#line 1272
_ArgList) 
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1278
return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1279
} 
#line 1284 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p_l(__wchar_t *const 
#line 1295
_Buffer, const size_t 
#line 1296
_BufferCount, const __wchar_t *const 
#line 1297
_Format, const _locale_t 
#line 1298
_Locale, va_list 
#line 1299
_ArgList) 
#line 1304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1305
const int _Result = __stdio_common_vswprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1309
return (_Result < 0) ? -1 : _Result; 
#line 1310
} 
#line 1315 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswprintf_p(__wchar_t *const 
#line 1316
_Buffer, const size_t 
#line 1317
_BufferCount, const __wchar_t *const 
#line 1318
_Format, va_list 
#line 1319
_ArgList) 
#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1325
return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1326
} 
#line 1331 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_l(const __wchar_t *const 
#line 1332
_Format, const _locale_t 
#line 1333
_Locale, va_list 
#line 1334
_ArgList) 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1340
const int _Result = __stdio_common_vswprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1344
return (_Result < 0) ? -1 : _Result; 
#line 1345
} 
#line 1350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf(const __wchar_t *const 
#line 1351
_Format, va_list 
#line 1352
_ArgList) 
#line 1357 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1358
return _vscwprintf_l(_Format, 0, _ArgList); 
#line 1359
} 
#line 1364 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p_l(const __wchar_t *const 
#line 1365
_Format, const _locale_t 
#line 1366
_Locale, va_list 
#line 1367
_ArgList) 
#line 1372 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1373
const int _Result = __stdio_common_vswprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1377
return (_Result < 0) ? -1 : _Result; 
#line 1378
} 
#line 1383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vscwprintf_p(const __wchar_t *const 
#line 1384
_Format, va_list 
#line 1385
_ArgList) 
#line 1390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1391
return _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1392
} 
#line 1397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t *const 
#line 1398
_Buffer, const __wchar_t *const 
#line 1399
_Format, const _locale_t 
#line 1400
_Locale, ...) 
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1406
int _Result; 
#line 1407
va_list _ArgList; 
#line 1408
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1409
_Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1410
(void)(_ArgList = ((va_list)0)); 
#line 1411
return _Result; 
#line 1412
} 
#line 1417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_l(__wchar_t *const 
#line 1418
_Buffer, const size_t 
#line 1419
_BufferCount, const __wchar_t *const 
#line 1420
_Format, const _locale_t 
#line 1421
_Locale, ...) 
#line 1426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1427
int _Result; 
#line 1428
va_list _ArgList; 
#line 1429
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1430
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1431
(void)(_ArgList = ((va_list)0)); 
#line 1432
return _Result; 
#line 1433
} 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t *const 
#line 1439
_Buffer, const __wchar_t *const 
#line 1440
_Format, ...) 
#line 1445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1446
int _Result; 
#line 1447
va_list _ArgList; 
#line 1448
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1449
_Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1450
(void)(_ArgList = ((va_list)0)); 
#line 1451
return _Result; 
#line 1452
} 
#line 1457 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf(__wchar_t *const 
#line 1458
_Buffer, const size_t 
#line 1459
_BufferCount, const __wchar_t *const 
#line 1460
_Format, ...) 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1466
int _Result; 
#line 1467
va_list _ArgList; 
#line 1468
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1469
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1470
(void)(_ArgList = ((va_list)0)); 
#line 1471
return _Result; 
#line 1472
} 
#line 1475 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl __swprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, ...); __inline int __cdecl __vswprintf_l(__wchar_t * _Buffer, const __wchar_t * _Format, _locale_t _Locale, va_list _Args); 
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf(__wchar_t * _Buffer, const __wchar_t * _Format, ...); __inline int __cdecl _vswprintf(__wchar_t * _Buffer, const __wchar_t * _Format, va_list _Args); 
#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_s_l(__wchar_t *const 
#line 1494
_Buffer, const size_t 
#line 1495
_BufferCount, const __wchar_t *const 
#line 1496
_Format, const _locale_t 
#line 1497
_Locale, ...) 
#line 1502 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1503
int _Result; 
#line 1504
va_list _ArgList; 
#line 1505
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1506
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1507
(void)(_ArgList = ((va_list)0)); 
#line 1508
return _Result; 
#line 1509
} 
#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swprintf_s(__wchar_t *const 
#line 1516
_Buffer, const size_t 
#line 1517
_BufferCount, const __wchar_t *const 
#line 1518
_Format, ...) 
#line 1523 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1524
int _Result; 
#line 1525
va_list _ArgList; 
#line 1526
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1527
_Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1528
(void)(_ArgList = ((va_list)0)); 
#line 1529
return _Result; 
#line 1530
} 
#line 1535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl swprintf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vswprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p_l(__wchar_t *const 
#line 1545
_Buffer, const size_t 
#line 1546
_BufferCount, const __wchar_t *const 
#line 1547
_Format, const _locale_t 
#line 1548
_Locale, ...) 
#line 1553 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1554
int _Result; 
#line 1555
va_list _ArgList; 
#line 1556
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1557
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1558
(void)(_ArgList = ((va_list)0)); 
#line 1559
return _Result; 
#line 1560
} 
#line 1565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_p(__wchar_t *const 
#line 1566
_Buffer, const size_t 
#line 1567
_BufferCount, const __wchar_t *const 
#line 1568
_Format, ...) 
#line 1573 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1574
int _Result; 
#line 1575
va_list _ArgList; 
#line 1576
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1577
_Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1578
(void)(_ArgList = ((va_list)0)); 
#line 1579
return _Result; 
#line 1580
} 
#line 1585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c_l(__wchar_t *const 
#line 1586
_Buffer, const size_t 
#line 1587
_BufferCount, const __wchar_t *const 
#line 1588
_Format, const _locale_t 
#line 1589
_Locale, ...) 
#line 1594 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1595
int _Result; 
#line 1596
va_list _ArgList; 
#line 1597
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1598
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1599
(void)(_ArgList = ((va_list)0)); 
#line 1600
return _Result; 
#line 1601
} 
#line 1606 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swprintf_c(__wchar_t *const 
#line 1607
_Buffer, const size_t 
#line 1608
_BufferCount, const __wchar_t *const 
#line 1609
_Format, ...) 
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1615
int _Result; 
#line 1616
va_list _ArgList; 
#line 1617
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1618
_Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1619
(void)(_ArgList = ((va_list)0)); 
#line 1620
return _Result; 
#line 1621
} 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_l(__wchar_t *const 
#line 1627
_Buffer, const size_t 
#line 1628
_BufferCount, const __wchar_t *const 
#line 1629
_Format, const _locale_t 
#line 1630
_Locale, ...) 
#line 1635 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1636
int _Result; 
#line 1637
va_list _ArgList; 
#line 1638
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1640
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1642
(void)(_ArgList = ((va_list)0)); 
#line 1643
return _Result; 
#line 1644
} 
#line 1649 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf(__wchar_t *
#line 1650
_Buffer, size_t 
#line 1651
_BufferCount, const __wchar_t *
#line 1652
_Format, ...) 
#line 1657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1658
int _Result; 
#line 1659
va_list _ArgList; 
#line 1660
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1662
_Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1664
(void)(_ArgList = ((va_list)0)); 
#line 1665
return _Result; 
#line 1666
} 
#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s_l(__wchar_t *const 
#line 1672
_Buffer, const size_t 
#line 1673
_BufferCount, const size_t 
#line 1674
_MaxCount, const __wchar_t *const 
#line 1675
_Format, const _locale_t 
#line 1676
_Locale, ...) 
#line 1681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1682
int _Result; 
#line 1683
va_list _ArgList; 
#line 1684
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1685
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1686
(void)(_ArgList = ((va_list)0)); 
#line 1687
return _Result; 
#line 1688
} 
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwprintf_s(__wchar_t *const 
#line 1694
_Buffer, const size_t 
#line 1695
_BufferCount, const size_t 
#line 1696
_MaxCount, const __wchar_t *const 
#line 1697
_Format, ...) 
#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1703
int _Result; 
#line 1704
va_list _ArgList; 
#line 1705
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1706
_Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1707
(void)(_ArgList = ((va_list)0)); 
#line 1708
return _Result; 
#line 1709
} 
#line 1712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _snwprintf_s ( wchar_t ( & _Buffer ) [ _Size ], size_t _BufferCount, wchar_t const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnwprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_l(const __wchar_t *const 
#line 1722
_Format, const _locale_t 
#line 1723
_Locale, ...) 
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1729
int _Result; 
#line 1730
va_list _ArgList; 
#line 1731
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1732
_Result = _vscwprintf_l(_Format, _Locale, _ArgList); 
#line 1733
(void)(_ArgList = ((va_list)0)); 
#line 1734
return _Result; 
#line 1735
} 
#line 1740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf(const __wchar_t *const 
#line 1741
_Format, ...) 
#line 1746 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1747
int _Result; 
#line 1748
va_list _ArgList; 
#line 1749
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1750
_Result = _vscwprintf_l(_Format, 0, _ArgList); 
#line 1751
(void)(_ArgList = ((va_list)0)); 
#line 1752
return _Result; 
#line 1753
} 
#line 1758 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p_l(const __wchar_t *const 
#line 1759
_Format, const _locale_t 
#line 1760
_Locale, ...) 
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1766
int _Result; 
#line 1767
va_list _ArgList; 
#line 1768
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1769
_Result = _vscwprintf_p_l(_Format, _Locale, _ArgList); 
#line 1770
(void)(_ArgList = ((va_list)0)); 
#line 1771
return _Result; 
#line 1772
} 
#line 1777 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _scwprintf_p(const __wchar_t *const 
#line 1778
_Format, ...) 
#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1784
int _Result; 
#line 1785
va_list _ArgList; 
#line 1786
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1787
_Result = _vscwprintf_p_l(_Format, 0, _ArgList); 
#line 1788
(void)(_ArgList = ((va_list)0)); 
#line 1789
return _Result; 
#line 1790
} 
#line 1797 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(push)
#pragma warning(disable: 4141 6054)
#line 1803
extern "C++" 
#line 1802
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1803
swprintf(__wchar_t *const 
#line 1804
_Buffer, const __wchar_t *const 
#line 1805
_Format, ...) throw() 
#line 1807
{ 
#line 1808
int _Result; 
#line 1809
va_list _ArgList; 
#line 1810
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1811
_Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1812
(void)(_ArgList = ((va_list)0)); 
#line 1813
return _Result; 
#line 1814
} 
#line 1817
extern "C++" 
#line 1816
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1817
vswprintf(__wchar_t *const 
#line 1818
_Buffer, const __wchar_t *const 
#line 1819
_Format, va_list 
#line 1820
_ArgList) throw() 
#line 1822
{ 
#line 1823
return vswprintf(_Buffer, 2147483647, _Format, _ArgList); 
#line 1824
} 
#line 1827
extern "C++" 
#line 1826
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int 
#line 1827
_swprintf_l(__wchar_t *const 
#line 1828
_Buffer, const __wchar_t *const 
#line 1829
_Format, const _locale_t 
#line 1830
_Locale, ...) throw() 
#line 1832
{ 
#line 1833
int _Result; 
#line 1834
va_list _ArgList; 
#line 1835
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1836
_Result = _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1837
(void)(_ArgList = ((va_list)0)); 
#line 1838
return _Result; 
#line 1839
} 
#line 1842
extern "C++" 
#line 1841
__declspec(deprecated("function has been changed to conform with the ISO C standard, adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) inline int __cdecl 
#line 1842
_vswprintf_l(__wchar_t *const 
#line 1843
_Buffer, const __wchar_t *const 
#line 1844
_Format, const _locale_t 
#line 1845
_Locale, va_list 
#line 1846
_ArgList) throw() 
#line 1848
{ 
#line 1849
return _vswprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1850
} 
#line 1854 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
#pragma warning(pop)
#line 1871 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(unsigned __int64 _Options, const __wchar_t * _Buffer, size_t _BufferCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1882
__inline int __cdecl _vswscanf_l(const __wchar_t *const 
#line 1883
_Buffer, const __wchar_t *const 
#line 1884
_Format, const _locale_t 
#line 1885
_Locale, va_list 
#line 1886
_ArgList) 
#line 1891 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1892
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1895
} 
#line 1900 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf(const __wchar_t *
#line 1901
_Buffer, const __wchar_t *
#line 1902
_Format, va_list 
#line 1903
_ArgList) 
#line 1908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1909
return _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 1910
} 
#line 1915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vswscanf_s_l(const __wchar_t *const 
#line 1916
_Buffer, const __wchar_t *const 
#line 1917
_Format, const _locale_t 
#line 1918
_Locale, va_list 
#line 1919
_ArgList) 
#line 1924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1925
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1928
} 
#line 1935 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl vswscanf_s(const __wchar_t *const 
#line 1936
_Buffer, const __wchar_t *const 
#line 1937
_Format, va_list 
#line 1938
_ArgList) 
#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1944
return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 1945
} 
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vswscanf_s ( wchar_t ( & _Buffer ) [ _Size ], wchar_t const * _Format, va_list _ArgList ) throw ( ) { return vswscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_l(const __wchar_t *const 
#line 1961
_Buffer, const size_t 
#line 1962
_BufferCount, const __wchar_t *const 
#line 1963
_Format, const _locale_t 
#line 1964
_Locale, va_list 
#line 1965
_ArgList) 
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1971
return __stdio_common_vswscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1974
} 
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _vsnwscanf_s_l(const __wchar_t *const 
#line 1980
_Buffer, const size_t 
#line 1981
_BufferCount, const __wchar_t *const 
#line 1982
_Format, const _locale_t 
#line 1983
_Locale, va_list 
#line 1984
_ArgList) 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 1990
return __stdio_common_vswscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1993
} 
#line 1998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_l(const __wchar_t *const 
#line 1999
_Buffer, const __wchar_t *const 
#line 2000
_Format, _locale_t 
#line 2001
_Locale, ...) 
#line 2006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2007
int _Result; 
#line 2008
va_list _ArgList; 
#line 2009
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2010
_Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2011
(void)(_ArgList = ((va_list)0)); 
#line 2012
return _Result; 
#line 2013
} 
#line 2018 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf(const __wchar_t *const 
#line 2019
_Buffer, const __wchar_t *const 
#line 2020
_Format, ...) 
#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2026
int _Result; 
#line 2027
va_list _ArgList; 
#line 2028
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2029
_Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2030
(void)(_ArgList = ((va_list)0)); 
#line 2031
return _Result; 
#line 2032
} 
#line 2037 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _swscanf_s_l(const __wchar_t *const 
#line 2038
_Buffer, const __wchar_t *const 
#line 2039
_Format, const _locale_t 
#line 2040
_Locale, ...) 
#line 2045 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2046
int _Result; 
#line 2047
va_list _ArgList; 
#line 2048
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2049
_Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2050
(void)(_ArgList = ((va_list)0)); 
#line 2051
return _Result; 
#line 2052
} 
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl swscanf_s(const __wchar_t *const 
#line 2060
_Buffer, const __wchar_t *const 
#line 2061
_Format, ...) 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2067
int _Result; 
#line 2068
va_list _ArgList; 
#line 2069
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2070
_Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2071
(void)(_ArgList = ((va_list)0)); 
#line 2072
return _Result; 
#line 2073
} 
#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_l(const __wchar_t *const 
#line 2081
_Buffer, const size_t 
#line 2082
_BufferCount, const __wchar_t *const 
#line 2083
_Format, const _locale_t 
#line 2084
_Locale, ...) 
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2090
int _Result; 
#line 2091
va_list _ArgList; 
#line 2092
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2094
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2096
(void)(_ArgList = ((va_list)0)); 
#line 2097
return _Result; 
#line 2098
} 
#line 2103 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf(const __wchar_t *const 
#line 2104
_Buffer, const size_t 
#line 2105
_BufferCount, const __wchar_t *const 
#line 2106
_Format, ...) 
#line 2111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2112
int _Result; 
#line 2113
va_list _ArgList; 
#line 2114
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2116
_Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2118
(void)(_ArgList = ((va_list)0)); 
#line 2119
return _Result; 
#line 2120
} 
#line 2125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s_l(const __wchar_t *const 
#line 2126
_Buffer, const size_t 
#line 2127
_BufferCount, const __wchar_t *const 
#line 2128
_Format, const _locale_t 
#line 2129
_Locale, ...) 
#line 2134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2135
int _Result; 
#line 2136
va_list _ArgList; 
#line 2137
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2138
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2139
(void)(_ArgList = ((va_list)0)); 
#line 2140
return _Result; 
#line 2141
} 
#line 2146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
__inline int __cdecl _snwscanf_s(const __wchar_t *const 
#line 2147
_Buffer, const size_t 
#line 2148
_BufferCount, const __wchar_t *const 
#line 2149
_Format, ...) 
#line 2154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
{ 
#line 2155
int _Result; 
#line 2156
va_list _ArgList; 
#line 2157
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2158
_Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2159
(void)(_ArgList = ((va_list)0)); 
#line 2160
return _Result; 
#line 2161
} 
#line 2169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wstdio.h"
}__pragma( pack ( pop )) 
#line 2171
#pragma warning(pop)
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
typedef __int64 fpos_t; 
#line 80
__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(FILE * _Stream, char *** _Base, char *** _Pointer, int ** _Count); 
#line 96
__declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _Stream); 
#line 102
__declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode); 
#line 110
__declspec(dllimport) size_t __cdecl fread_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 119
__declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _Stream, const char * _FileName, const char * _Mode, FILE * _OldStream); 
#line 127
__declspec(dllimport) char *__cdecl gets_s(char * _Buffer, rsize_t _Size); 
#line 133
__declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _Stream); 
#line 139
__declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buffer, rsize_t _Size); 
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl clearerr(FILE * _Stream); 
#line 152
__declspec(dllimport) int __cdecl fclose(FILE * _Stream); 
#line 157
__declspec(dllimport) int __cdecl _fcloseall(); 
#line 160
__declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); 
#line 166
__declspec(dllimport) int __cdecl feof(FILE * _Stream); 
#line 171
__declspec(dllimport) int __cdecl ferror(FILE * _Stream); 
#line 176
__declspec(dllimport) int __cdecl fflush(FILE * _Stream); 
#line 182
__declspec(dllimport) int __cdecl fgetc(FILE * _Stream); 
#line 187
__declspec(dllimport) int __cdecl _fgetchar(); 
#line 191
__declspec(dllimport) int __cdecl fgetpos(FILE * _Stream, fpos_t * _Position); 
#line 198
__declspec(dllimport) char *__cdecl fgets(char * _Buffer, int _MaxCount, FILE * _Stream); 
#line 205
__declspec(dllimport) int __cdecl _fileno(FILE * _Stream); 
#line 210
__declspec(dllimport) int __cdecl _flushall(); 
#line 213
__declspec(dllimport) FILE *__cdecl fopen(const char * _FileName, const char * _Mode); 
#line 221
__declspec(dllimport) int __cdecl fputc(int _Character, FILE * _Stream); 
#line 227
__declspec(dllimport) int __cdecl _fputchar(int _Character); 
#line 233
__declspec(dllimport) int __cdecl fputs(const char * _Buffer, FILE * _Stream); 
#line 239
__declspec(dllimport) size_t __cdecl fread(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 248
__declspec(dllimport) FILE *__cdecl freopen(const char * _FileName, const char * _Mode, FILE * _Stream); 
#line 255
__declspec(dllimport) FILE *__cdecl _fsopen(const char * _FileName, const char * _Mode, int _ShFlag); 
#line 263
__declspec(dllimport) int __cdecl fsetpos(FILE * _Stream, const fpos_t * _Position); 
#line 270
__declspec(dllimport) int __cdecl fseek(FILE * _Stream, long _Offset, int _Origin); 
#line 278
__declspec(dllimport) int __cdecl _fseeki64(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 286
__declspec(dllimport) long __cdecl ftell(FILE * _Stream); 
#line 292
__declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _Stream); 
#line 297
__declspec(dllimport) size_t __cdecl fwrite(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 306
__declspec(dllimport) int __cdecl getc(FILE * _Stream); 
#line 311
__declspec(dllimport) int __cdecl getchar(); 
#line 314
__declspec(dllimport) int __cdecl _getmaxstdio(); 
#line 316
extern "C++" {template < size_t _Size > inline char * __cdecl gets_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return gets_s ( _Buffer, _Size ); }}
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _getw(FILE * _Stream); 
#line 325
__declspec(dllimport) void __cdecl perror(const char * _ErrorMessage); 
#line 333
__declspec(dllimport) int __cdecl _pclose(FILE * _Stream); 
#line 338
__declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl putc(int _Character, FILE * _Stream); 
#line 353
__declspec(dllimport) int __cdecl putchar(int _Character); 
#line 358
__declspec(dllimport) int __cdecl puts(const char * _Buffer); 
#line 364
__declspec(dllimport) int __cdecl _putw(int _Word, FILE * _Stream); 
#line 369
__declspec(dllimport) int __cdecl remove(const char * _FileName); 
#line 374
__declspec(dllimport) int __cdecl rename(const char * _OldFileName, const char * _NewFileName); 
#line 379
__declspec(dllimport) int __cdecl _unlink(const char * _FileName); 
#line 386
__declspec(dllimport) int __cdecl unlink(const char * _FileName); 
#line 392 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) void __cdecl rewind(FILE * _Stream); 
#line 397
__declspec(dllimport) int __cdecl _rmtmp(); 
#line 400
__declspec(dllimport) void __cdecl setbuf(FILE * _Stream, char * _Buffer); 
#line 406
__declspec(dllimport) int __cdecl _setmaxstdio(int _Maximum); 
#line 412
__declspec(dllimport) int __cdecl setvbuf(FILE * _Stream, char * _Buffer, int _Mode, size_t _Size); 
#line 425 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) __declspec(allocator) char *__cdecl _tempnam(const char * _DirectoryName, const char * _FilePrefix); 
#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) FILE *__cdecl tmpfile(); 
#line 437
extern "C++" {template < size_t _Size > inline errno_t __cdecl tmpnam_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return tmpnam_s ( _Buffer, _Size ); }}
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); 
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl ungetc(int _Character, FILE * _Stream); 
#line 463
__declspec(dllimport) void __cdecl _lock_file(FILE * _Stream); 
#line 467
__declspec(dllimport) void __cdecl _unlock_file(FILE * _Stream); 
#line 473
__declspec(dllimport) int __cdecl _fclose_nolock(FILE * _Stream); 
#line 479
__declspec(dllimport) int __cdecl _fflush_nolock(FILE * _Stream); 
#line 485
__declspec(dllimport) int __cdecl _fgetc_nolock(FILE * _Stream); 
#line 491
__declspec(dllimport) int __cdecl _fputc_nolock(int _Character, FILE * _Stream); 
#line 497
__declspec(dllimport) size_t __cdecl _fread_nolock(void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 506
__declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _Buffer, size_t _BufferSize, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 515
__declspec(dllimport) int __cdecl _fseek_nolock(FILE * _Stream, long _Offset, int _Origin); 
#line 522
__declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _Stream, __int64 _Offset, int _Origin); 
#line 529
__declspec(dllimport) long __cdecl _ftell_nolock(FILE * _Stream); 
#line 534
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _Stream); 
#line 539
__declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _Buffer, size_t _ElementSize, size_t _ElementCount, FILE * _Stream); 
#line 547
__declspec(dllimport) int __cdecl _getc_nolock(FILE * _Stream); 
#line 552
__declspec(dllimport) int __cdecl _putc_nolock(int _Character, FILE * _Stream); 
#line 558
__declspec(dllimport) int __cdecl _ungetc_nolock(int _Character, FILE * _Stream); 
#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int *__cdecl __p__commode(); 
#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfprintf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 617
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 626
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 635
__inline int __cdecl _vfprintf_l(FILE *const 
#line 636
_Stream, const char *const 
#line 637
_Format, const _locale_t 
#line 638
_Locale, va_list 
#line 639
_ArgList) 
#line 644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 645
return __stdio_common_vfprintf(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 646
} 
#line 650 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf(FILE *const 
#line 651
_Stream, const char *const 
#line 652
_Format, va_list 
#line 653
_ArgList) 
#line 658 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 659
return _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 660
} 
#line 664 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_s_l(FILE *const 
#line 665
_Stream, const char *const 
#line 666
_Format, const _locale_t 
#line 667
_Locale, va_list 
#line 668
_ArgList) 
#line 673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 674
return __stdio_common_vfprintf_s(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 675
} 
#line 681 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vfprintf_s(FILE *const 
#line 682
_Stream, const char *const 
#line 683
_Format, va_list 
#line 684
_ArgList) 
#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 690
return _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 691
} 
#line 697 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p_l(FILE *const 
#line 698
_Stream, const char *const 
#line 699
_Format, const _locale_t 
#line 700
_Locale, va_list 
#line 701
_ArgList) 
#line 706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 707
return __stdio_common_vfprintf_p(*__local_stdio_printf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 708
} 
#line 712 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vfprintf_p(FILE *const 
#line 713
_Stream, const char *const 
#line 714
_Format, va_list 
#line 715
_ArgList) 
#line 720 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 721
return _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 722
} 
#line 726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_l(const char *const 
#line 727
_Format, const _locale_t 
#line 728
_Locale, va_list 
#line 729
_ArgList) 
#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 735
return _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 736
} 
#line 740 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf(const char *const 
#line 741
_Format, va_list 
#line 742
_ArgList) 
#line 747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 748
return _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 749
} 
#line 753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_s_l(const char *const 
#line 754
_Format, const _locale_t 
#line 755
_Locale, va_list 
#line 756
_ArgList) 
#line 761 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 762
return _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 763
} 
#line 769 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vprintf_s(const char *const 
#line 770
_Format, va_list 
#line 771
_ArgList) 
#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 777
return _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 778
} 
#line 784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p_l(const char *const 
#line 785
_Format, const _locale_t 
#line 786
_Locale, va_list 
#line 787
_ArgList) 
#line 792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 793
return _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 794
} 
#line 798 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vprintf_p(const char *const 
#line 799
_Format, va_list 
#line 800
_ArgList) 
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 806
return _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 807
} 
#line 811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_l(FILE *const 
#line 812
_Stream, const char *const 
#line 813
_Format, const _locale_t 
#line 814
_Locale, ...) 
#line 819 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 820
int _Result; 
#line 821
va_list _ArgList; 
#line 822
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 823
_Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList); 
#line 824
(void)(_ArgList = ((va_list)0)); 
#line 825
return _Result; 
#line 826
} 
#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf(FILE *const 
#line 831
_Stream, const char *const 
#line 832
_Format, ...) 
#line 837 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 838
int _Result; 
#line 839
va_list _ArgList; 
#line 840
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 841
_Result = _vfprintf_l(_Stream, _Format, 0, _ArgList); 
#line 842
(void)(_ArgList = ((va_list)0)); 
#line 843
return _Result; 
#line 844
} 
#line 847 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); 
#line 851
__declspec(dllimport) int __cdecl _get_printf_count_output(); 
#line 854
__inline int __cdecl _fprintf_s_l(FILE *const 
#line 855
_Stream, const char *const 
#line 856
_Format, const _locale_t 
#line 857
_Locale, ...) 
#line 862 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 863
int _Result; 
#line 864
va_list _ArgList; 
#line 865
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 866
_Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 867
(void)(_ArgList = ((va_list)0)); 
#line 868
return _Result; 
#line 869
} 
#line 875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl fprintf_s(FILE *const 
#line 876
_Stream, const char *const 
#line 877
_Format, ...) 
#line 882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 883
int _Result; 
#line 884
va_list _ArgList; 
#line 885
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 886
_Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList); 
#line 887
(void)(_ArgList = ((va_list)0)); 
#line 888
return _Result; 
#line 889
} 
#line 895 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p_l(FILE *const 
#line 896
_Stream, const char *const 
#line 897
_Format, const _locale_t 
#line 898
_Locale, ...) 
#line 903 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 904
int _Result; 
#line 905
va_list _ArgList; 
#line 906
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 907
_Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList); 
#line 908
(void)(_ArgList = ((va_list)0)); 
#line 909
return _Result; 
#line 910
} 
#line 914 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _fprintf_p(FILE *const 
#line 915
_Stream, const char *const 
#line 916
_Format, ...) 
#line 921 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 922
int _Result; 
#line 923
va_list _ArgList; 
#line 924
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 925
_Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList); 
#line 926
(void)(_ArgList = ((va_list)0)); 
#line 927
return _Result; 
#line 928
} 
#line 932 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_l(const char *const 
#line 933
_Format, const _locale_t 
#line 934
_Locale, ...) 
#line 939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 940
int _Result; 
#line 941
va_list _ArgList; 
#line 942
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 943
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 944
(void)(_ArgList = ((va_list)0)); 
#line 945
return _Result; 
#line 946
} 
#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl printf(const char *const 
#line 951
_Format, ...) 
#line 956 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 957
int _Result; 
#line 958
va_list _ArgList; 
#line 959
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 960
_Result = _vfprintf_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 961
(void)(_ArgList = ((va_list)0)); 
#line 962
return _Result; 
#line 963
} 
#line 967 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_s_l(const char *const 
#line 968
_Format, const _locale_t 
#line 969
_Locale, ...) 
#line 974 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 975
int _Result; 
#line 976
va_list _ArgList; 
#line 977
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 978
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 979
(void)(_ArgList = ((va_list)0)); 
#line 980
return _Result; 
#line 981
} 
#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl printf_s(const char *const 
#line 988
_Format, ...) 
#line 993 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 994
int _Result; 
#line 995
va_list _ArgList; 
#line 996
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 997
_Result = _vfprintf_s_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 998
(void)(_ArgList = ((va_list)0)); 
#line 999
return _Result; 
#line 1000
} 
#line 1006 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p_l(const char *const 
#line 1007
_Format, const _locale_t 
#line 1008
_Locale, ...) 
#line 1013 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1014
int _Result; 
#line 1015
va_list _ArgList; 
#line 1016
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1017
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, _Locale, _ArgList); 
#line 1018
(void)(_ArgList = ((va_list)0)); 
#line 1019
return _Result; 
#line 1020
} 
#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _printf_p(const char *const 
#line 1025
_Format, ...) 
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1031
int _Result; 
#line 1032
va_list _ArgList; 
#line 1033
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1034
_Result = _vfprintf_p_l(__acrt_iob_func(1), _Format, 0, _ArgList); 
#line 1035
(void)(_ArgList = ((va_list)0)); 
#line 1036
return _Result; 
#line 1037
} 
#line 1046 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vfscanf(unsigned __int64 _Options, FILE * _Stream, const char * _Format, _locale_t _Locale, va_list _Arglist); 
#line 1055
__inline int __cdecl _vfscanf_l(FILE *const 
#line 1056
_Stream, const char *const 
#line 1057
_Format, const _locale_t 
#line 1058
_Locale, va_list 
#line 1059
_ArgList) 
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1065
return __stdio_common_vfscanf(*__local_stdio_scanf_options(), _Stream, _Format, _Locale, _ArgList); 
#line 1068
} 
#line 1072 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf(FILE *const 
#line 1073
_Stream, const char *const 
#line 1074
_Format, va_list 
#line 1075
_ArgList) 
#line 1080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1081
return _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1082
} 
#line 1086 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vfscanf_s_l(FILE *const 
#line 1087
_Stream, const char *const 
#line 1088
_Format, const _locale_t 
#line 1089
_Locale, va_list 
#line 1090
_ArgList) 
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1096
return __stdio_common_vfscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Stream, _Format, _Locale, _ArgList); 
#line 1099
} 
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vfscanf_s(FILE *const 
#line 1107
_Stream, const char *const 
#line 1108
_Format, va_list 
#line 1109
_ArgList) 
#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1115
return _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1116
} 
#line 1122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_l(const char *const 
#line 1123
_Format, const _locale_t 
#line 1124
_Locale, va_list 
#line 1125
_ArgList) 
#line 1130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1131
return _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1132
} 
#line 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf(const char *const 
#line 1137
_Format, va_list 
#line 1138
_ArgList) 
#line 1143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1144
return _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1145
} 
#line 1149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vscanf_s_l(const char *const 
#line 1150
_Format, const _locale_t 
#line 1151
_Locale, va_list 
#line 1152
_ArgList) 
#line 1157 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1158
return _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1159
} 
#line 1165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vscanf_s(const char *const 
#line 1166
_Format, va_list 
#line 1167
_ArgList) 
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1173
return _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1174
} 
#line 1180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_l(FILE *const 
#line 1181
_Stream, const char *const 
#line 1182
_Format, const _locale_t 
#line 1183
_Locale, ...) 
#line 1188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1189
int _Result; 
#line 1190
va_list _ArgList; 
#line 1191
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1192
_Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList); 
#line 1193
(void)(_ArgList = ((va_list)0)); 
#line 1194
return _Result; 
#line 1195
} 
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf(FILE *const 
#line 1200
_Stream, const char *const 
#line 1201
_Format, ...) 
#line 1206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1207
int _Result; 
#line 1208
va_list _ArgList; 
#line 1209
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1210
_Result = _vfscanf_l(_Stream, _Format, 0, _ArgList); 
#line 1211
(void)(_ArgList = ((va_list)0)); 
#line 1212
return _Result; 
#line 1213
} 
#line 1217 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _fscanf_s_l(FILE *const 
#line 1218
_Stream, const char *const 
#line 1219
_Format, const _locale_t 
#line 1220
_Locale, ...) 
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1226
int _Result; 
#line 1227
va_list _ArgList; 
#line 1228
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1229
_Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList); 
#line 1230
(void)(_ArgList = ((va_list)0)); 
#line 1231
return _Result; 
#line 1232
} 
#line 1238 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl fscanf_s(FILE *const 
#line 1239
_Stream, const char *const 
#line 1240
_Format, ...) 
#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1246
int _Result; 
#line 1247
va_list _ArgList; 
#line 1248
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1249
_Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList); 
#line 1250
(void)(_ArgList = ((va_list)0)); 
#line 1251
return _Result; 
#line 1252
} 
#line 1258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_l(const char *const 
#line 1259
_Format, const _locale_t 
#line 1260
_Locale, ...) 
#line 1265 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1266
int _Result; 
#line 1267
va_list _ArgList; 
#line 1268
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1269
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1270
(void)(_ArgList = ((va_list)0)); 
#line 1271
return _Result; 
#line 1272
} 
#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl scanf(const char *const 
#line 1277
_Format, ...) 
#line 1282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1283
int _Result; 
#line 1284
va_list _ArgList; 
#line 1285
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1286
_Result = _vfscanf_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1287
(void)(_ArgList = ((va_list)0)); 
#line 1288
return _Result; 
#line 1289
} 
#line 1293 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _scanf_s_l(const char *const 
#line 1294
_Format, const _locale_t 
#line 1295
_Locale, ...) 
#line 1300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1301
int _Result; 
#line 1302
va_list _ArgList; 
#line 1303
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1304
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, _Locale, _ArgList); 
#line 1305
(void)(_ArgList = ((va_list)0)); 
#line 1306
return _Result; 
#line 1307
} 
#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl scanf_s(const char *const 
#line 1314
_Format, ...) 
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1320
int _Result; 
#line 1321
va_list _ArgList; 
#line 1322
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1323
_Result = _vfscanf_s_l(__acrt_iob_func(0), _Format, 0, _ArgList); 
#line 1324
(void)(_ArgList = ((va_list)0)); 
#line 1325
return _Result; 
#line 1326
} 
#line 1339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1349
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1359
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1370
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(unsigned __int64 _Options, char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 1381
__inline int __cdecl _vsnprintf_l(char *const 
#line 1382
_Buffer, const size_t 
#line 1383
_BufferCount, const char *const 
#line 1384
_Format, const _locale_t 
#line 1385
_Locale, va_list 
#line 1386
_ArgList) 
#line 1391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1392
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1396
return (_Result < 0) ? -1 : _Result; 
#line 1397
} 
#line 1402 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf(char *const 
#line 1403
_Buffer, const size_t 
#line 1404
_BufferCount, const char *const 
#line 1405
_Format, va_list 
#line 1406
_ArgList) 
#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1412
return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1413
} 
#line 1429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf(char *const 
#line 1430
_Buffer, const size_t 
#line 1431
_BufferCount, const char *const 
#line 1432
_Format, va_list 
#line 1433
_ArgList) 
#line 1438 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1439
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1443
return (_Result < 0) ? -1 : _Result; 
#line 1444
} 
#line 1449 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_l(char *const 
#line 1450
_Buffer, const char *const 
#line 1451
_Format, const _locale_t 
#line 1452
_Locale, va_list 
#line 1453
_ArgList) 
#line 1458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1459
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 1460
} 
#line 1465 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf(char *const 
#line 1466
_Buffer, const char *const 
#line 1467
_Format, va_list 
#line 1468
_ArgList) 
#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1474
return _vsnprintf_l(_Buffer, (size_t)(-1), _Format, 0, _ArgList); 
#line 1475
} 
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_s_l(char *const 
#line 1481
_Buffer, const size_t 
#line 1482
_BufferCount, const char *const 
#line 1483
_Format, const _locale_t 
#line 1484
_Locale, va_list 
#line 1485
_ArgList) 
#line 1490 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1491
const int _Result = __stdio_common_vsprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1495
return (_Result < 0) ? -1 : _Result; 
#line 1496
} 
#line 1503 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vsprintf_s(char *const 
#line 1504
_Buffer, const size_t 
#line 1505
_BufferCount, const char *const 
#line 1506
_Format, va_list 
#line 1507
_ArgList) 
#line 1512 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1513
return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1514
} 
#line 1517 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p_l(char *const 
#line 1530
_Buffer, const size_t 
#line 1531
_BufferCount, const char *const 
#line 1532
_Format, const _locale_t 
#line 1533
_Locale, va_list 
#line 1534
_ArgList) 
#line 1539 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1540
const int _Result = __stdio_common_vsprintf_p(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1544
return (_Result < 0) ? -1 : _Result; 
#line 1545
} 
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsprintf_p(char *const 
#line 1551
_Buffer, const size_t 
#line 1552
_BufferCount, const char *const 
#line 1553
_Format, va_list 
#line 1554
_ArgList) 
#line 1559 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1560
return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1561
} 
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s_l(char *const 
#line 1567
_Buffer, const size_t 
#line 1568
_BufferCount, const size_t 
#line 1569
_MaxCount, const char *const 
#line 1570
_Format, const _locale_t 
#line 1571
_Locale, va_list 
#line 1572
_ArgList) 
#line 1577 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1578
const int _Result = __stdio_common_vsnprintf_s(*__local_stdio_printf_options(), _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 1582
return (_Result < 0) ? -1 : _Result; 
#line 1583
} 
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_s(char *const 
#line 1589
_Buffer, const size_t 
#line 1590
_BufferCount, const size_t 
#line 1591
_MaxCount, const char *const 
#line 1592
_Format, va_list 
#line 1593
_ArgList) 
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1599
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1600
} 
#line 1603 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vsnprintf_s(char *const 
#line 1617
_Buffer, const size_t 
#line 1618
_BufferCount, const size_t 
#line 1619
_MaxCount, const char *const 
#line 1620
_Format, va_list 
#line 1621
_ArgList) 
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1627
return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 1628
} 
#line 1631 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsnprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, va_list _ArgList ) throw ( ) { return vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 1643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_l(const char *const 
#line 1644
_Format, const _locale_t 
#line 1645
_Locale, va_list 
#line 1646
_ArgList) 
#line 1651 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1652
const int _Result = __stdio_common_vsprintf((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1656
return (_Result < 0) ? -1 : _Result; 
#line 1657
} 
#line 1661 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf(const char *const 
#line 1662
_Format, va_list 
#line 1663
_ArgList) 
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1669
return _vscprintf_l(_Format, 0, _ArgList); 
#line 1670
} 
#line 1674 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p_l(const char *const 
#line 1675
_Format, const _locale_t 
#line 1676
_Locale, va_list 
#line 1677
_ArgList) 
#line 1682 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1683
const int _Result = __stdio_common_vsprintf_p((*__local_stdio_printf_options()) | (1Ui64 << 1), 0, 0, _Format, _Locale, _ArgList); 
#line 1687
return (_Result < 0) ? -1 : _Result; 
#line 1688
} 
#line 1692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vscprintf_p(const char *const 
#line 1693
_Format, va_list 
#line 1694
_ArgList) 
#line 1699 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1700
return _vscprintf_p_l(_Format, 0, _ArgList); 
#line 1701
} 
#line 1705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c_l(char *const 
#line 1706
_Buffer, const size_t 
#line 1707
_BufferCount, const char *const 
#line 1708
_Format, const _locale_t 
#line 1709
_Locale, va_list 
#line 1710
_ArgList) 
#line 1715 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1716
const int _Result = __stdio_common_vsprintf(*__local_stdio_printf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1720
return (_Result < 0) ? -1 : _Result; 
#line 1721
} 
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsnprintf_c(char *const 
#line 1727
_Buffer, const size_t 
#line 1728
_BufferCount, const char *const 
#line 1729
_Format, va_list 
#line 1730
_ArgList) 
#line 1735 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1736
return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1737
} 
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_l(char *const 
#line 1743
_Buffer, const char *const 
#line 1744
_Format, const _locale_t 
#line 1745
_Locale, ...) 
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1751
int _Result; 
#line 1752
va_list _ArgList; 
#line 1753
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1755
_Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 1757
(void)(_ArgList = ((va_list)0)); 
#line 1758
return _Result; 
#line 1759
} 
#line 1764 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char *const 
#line 1765
_Buffer, const char *const 
#line 1766
_Format, ...) 
#line 1771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1772
int _Result; 
#line 1773
va_list _ArgList; 
#line 1774
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1776
_Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList); 
#line 1778
(void)(_ArgList = ((va_list)0)); 
#line 1779
return _Result; 
#line 1780
} 
#line 1783 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf(char * _Buffer, const char * _Format, ...); __inline int __cdecl vsprintf(char * _Buffer, const char * _Format, va_list _Args); 
#line 1792 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_s_l(char *const 
#line 1793
_Buffer, const size_t 
#line 1794
_BufferCount, const char *const 
#line 1795
_Format, const _locale_t 
#line 1796
_Locale, ...) 
#line 1801 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1802
int _Result; 
#line 1803
va_list _ArgList; 
#line 1804
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1805
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1806
(void)(_ArgList = ((va_list)0)); 
#line 1807
return _Result; 
#line 1808
} 
#line 1815 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl sprintf_s(char *const 
#line 1816
_Buffer, const size_t 
#line 1817
_BufferCount, const char *const 
#line 1818
_Format, ...) 
#line 1823 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1824
int _Result; 
#line 1825
va_list _ArgList; 
#line 1826
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1827
_Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1828
(void)(_ArgList = ((va_list)0)); 
#line 1829
return _Result; 
#line 1830
} 
#line 1835 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl sprintf_s ( char ( & _Buffer ) [ _Size ], char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return vsprintf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 1844 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p_l(char *const 
#line 1845
_Buffer, const size_t 
#line 1846
_BufferCount, const char *const 
#line 1847
_Format, const _locale_t 
#line 1848
_Locale, ...) 
#line 1853 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1854
int _Result; 
#line 1855
va_list _ArgList; 
#line 1856
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1857
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1858
(void)(_ArgList = ((va_list)0)); 
#line 1859
return _Result; 
#line 1860
} 
#line 1865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _sprintf_p(char *const 
#line 1866
_Buffer, const size_t 
#line 1867
_BufferCount, const char *const 
#line 1868
_Format, ...) 
#line 1873 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1874
int _Result; 
#line 1875
va_list _ArgList; 
#line 1876
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1877
_Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 1878
(void)(_ArgList = ((va_list)0)); 
#line 1879
return _Result; 
#line 1880
} 
#line 1885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_l(char *const 
#line 1886
_Buffer, const size_t 
#line 1887
_BufferCount, const char *const 
#line 1888
_Format, const _locale_t 
#line 1889
_Locale, ...) 
#line 1894 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1895
int _Result; 
#line 1896
va_list _ArgList; 
#line 1897
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1899
_Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1901
(void)(_ArgList = ((va_list)0)); 
#line 1902
return _Result; 
#line 1903
} 
#line 1919 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl snprintf(char *const 
#line 1920
_Buffer, const size_t 
#line 1921
_BufferCount, const char *const 
#line 1922
_Format, ...) 
#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1928
int _Result; 
#line 1929
va_list _ArgList; 
#line 1930
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1931
_Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1932
(void)(_ArgList = ((va_list)0)); 
#line 1933
return _Result; 
#line 1934
} 
#line 1939 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char *const 
#line 1940
_Buffer, const size_t 
#line 1941
_BufferCount, const char *const 
#line 1942
_Format, ...) 
#line 1947 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1948
int _Result; 
#line 1949
va_list _ArgList; 
#line 1950
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 1951
_Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList); 
#line 1952
(void)(_ArgList = ((va_list)0)); 
#line 1953
return _Result; 
#line 1954
} 
#line 1957 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf(char * _Buffer, size_t _BufferCount, const char * _Format, ...); __inline int __cdecl _vsnprintf(char * _Buffer, size_t _BufferCount, const char * _Format, va_list _Args); 
#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c_l(char *const 
#line 1969
_Buffer, const size_t 
#line 1970
_BufferCount, const char *const 
#line 1971
_Format, const _locale_t 
#line 1972
_Locale, ...) 
#line 1977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1978
int _Result; 
#line 1979
va_list _ArgList; 
#line 1980
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 1981
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 1982
(void)(_ArgList = ((va_list)0)); 
#line 1983
return _Result; 
#line 1984
} 
#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_c(char *const 
#line 1990
_Buffer, const size_t 
#line 1991
_BufferCount, const char *const 
#line 1992
_Format, ...) 
#line 1997 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 1998
int _Result; 
#line 1999
va_list _ArgList; 
#line 2000
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2001
_Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2002
(void)(_ArgList = ((va_list)0)); 
#line 2003
return _Result; 
#line 2004
} 
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s_l(char *const 
#line 2010
_Buffer, const size_t 
#line 2011
_BufferCount, const size_t 
#line 2012
_MaxCount, const char *const 
#line 2013
_Format, const _locale_t 
#line 2014
_Locale, ...) 
#line 2019 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2020
int _Result; 
#line 2021
va_list _ArgList; 
#line 2022
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2023
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList); 
#line 2024
(void)(_ArgList = ((va_list)0)); 
#line 2025
return _Result; 
#line 2026
} 
#line 2031 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snprintf_s(char *const 
#line 2032
_Buffer, const size_t 
#line 2033
_BufferCount, const size_t 
#line 2034
_MaxCount, const char *const 
#line 2035
_Format, ...) 
#line 2040 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2041
int _Result; 
#line 2042
va_list _ArgList; 
#line 2043
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2044
_Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList); 
#line 2045
(void)(_ArgList = ((va_list)0)); 
#line 2046
return _Result; 
#line 2047
} 
#line 2050 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl _snprintf_s ( char ( & _Buffer ) [ _Size ], size_t _BufferCount, char const * _Format, ... ) throw ( ) { va_list _ArgList; ( ( void ) ( __vcrt_assert_va_start_is_not_reference < decltype ( _Format ) > ( ), ( ( void ) ( __va_start ( & _ArgList, _Format ) ) ) ) ); return _vsnprintf_s ( _Buffer, _Size, _BufferCount, _Format, _ArgList ); }}
#line 2059 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_l(const char *const 
#line 2060
_Format, const _locale_t 
#line 2061
_Locale, ...) 
#line 2066 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2067
int _Result; 
#line 2068
va_list _ArgList; 
#line 2069
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2070
_Result = _vscprintf_l(_Format, _Locale, _ArgList); 
#line 2071
(void)(_ArgList = ((va_list)0)); 
#line 2072
return _Result; 
#line 2073
} 
#line 2077 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf(const char *const 
#line 2078
_Format, ...) 
#line 2083 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2084
int _Result; 
#line 2085
va_list _ArgList; 
#line 2086
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2087
_Result = _vscprintf_l(_Format, 0, _ArgList); 
#line 2088
(void)(_ArgList = ((va_list)0)); 
#line 2089
return _Result; 
#line 2090
} 
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p_l(const char *const 
#line 2095
_Format, const _locale_t 
#line 2096
_Locale, ...) 
#line 2101 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2102
int _Result; 
#line 2103
va_list _ArgList; 
#line 2104
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2105
_Result = _vscprintf_p_l(_Format, _Locale, _ArgList); 
#line 2106
(void)(_ArgList = ((va_list)0)); 
#line 2107
return _Result; 
#line 2108
} 
#line 2112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _scprintf_p(const char *const 
#line 2113
_Format, ...) 
#line 2118 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2119
int _Result; 
#line 2120
va_list _ArgList; 
#line 2121
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2122
_Result = _vscprintf_p(_Format, _ArgList); 
#line 2123
(void)(_ArgList = ((va_list)0)); 
#line 2124
return _Result; 
#line 2125
} 
#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl __stdio_common_vsscanf(unsigned __int64 _Options, const char * _Buffer, size_t _BufferCount, const char * _Format, _locale_t _Locale, va_list _ArgList); 
#line 2143
__inline int __cdecl _vsscanf_l(const char *const 
#line 2144
_Buffer, const char *const 
#line 2145
_Format, const _locale_t 
#line 2146
_Locale, va_list 
#line 2147
_ArgList) 
#line 2152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2153
return __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2156
} 
#line 2160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl vsscanf(const char *const 
#line 2161
_Buffer, const char *const 
#line 2162
_Format, va_list 
#line 2163
_ArgList) 
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2169
return _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2170
} 
#line 2174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _vsscanf_s_l(const char *const 
#line 2175
_Buffer, const char *const 
#line 2176
_Format, const _locale_t 
#line 2177
_Locale, va_list 
#line 2178
_ArgList) 
#line 2183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2184
return __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, (size_t)(-1), _Format, _Locale, _ArgList); 
#line 2187
} 
#line 2192 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 6530)
#line 2196
__inline int __cdecl vsscanf_s(const char *const 
#line 2197
_Buffer, const char *const 
#line 2198
_Format, va_list 
#line 2199
_ArgList) 
#line 2204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2205
return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList); 
#line 2206
} 
#line 2209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
extern "C++" {template < size_t _Size > inline int __cdecl vsscanf_s ( char const ( & _Buffer ) [ _Size ], char const * _Format, va_list _ArgList ) throw ( ) { return vsscanf_s ( _Buffer, _Size, _Format, _ArgList ); }}
#line 2216 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2221 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_l(const char *const 
#line 2222
_Buffer, const char *const 
#line 2223
_Format, const _locale_t 
#line 2224
_Locale, ...) 
#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2230
int _Result; 
#line 2231
va_list _ArgList; 
#line 2232
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2233
_Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2234
(void)(_ArgList = ((va_list)0)); 
#line 2235
return _Result; 
#line 2236
} 
#line 2240 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf(const char *const 
#line 2241
_Buffer, const char *const 
#line 2242
_Format, ...) 
#line 2247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2248
int _Result; 
#line 2249
va_list _ArgList; 
#line 2250
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2251
_Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList); 
#line 2252
(void)(_ArgList = ((va_list)0)); 
#line 2253
return _Result; 
#line 2254
} 
#line 2258 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _sscanf_s_l(const char *const 
#line 2259
_Buffer, const char *const 
#line 2260
_Format, const _locale_t 
#line 2261
_Locale, ...) 
#line 2266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2267
int _Result; 
#line 2268
va_list _ArgList; 
#line 2269
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2270
_Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList); 
#line 2271
(void)(_ArgList = ((va_list)0)); 
#line 2272
return _Result; 
#line 2273
} 
#line 2279 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl sscanf_s(const char *const 
#line 2280
_Buffer, const char *const 
#line 2281
_Format, ...) 
#line 2286 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2287
int _Result; 
#line 2288
va_list _ArgList; 
#line 2289
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2291
_Result = vsscanf_s(_Buffer, _Format, _ArgList); 
#line 2293
(void)(_ArgList = ((va_list)0)); 
#line 2294
return _Result; 
#line 2295
} 
#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
#pragma warning(push)
#pragma warning(disable: 6530)
#line 2304
__inline int __cdecl _snscanf_l(const char *const 
#line 2305
_Buffer, const size_t 
#line 2306
_BufferCount, const char *const 
#line 2307
_Format, const _locale_t 
#line 2308
_Locale, ...) 
#line 2313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2314
int _Result; 
#line 2315
va_list _ArgList; 
#line 2316
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2318
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2322
(void)(_ArgList = ((va_list)0)); 
#line 2323
return _Result; 
#line 2324
} 
#line 2328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf(const char *const 
#line 2329
_Buffer, const size_t 
#line 2330
_BufferCount, const char *const 
#line 2331
_Format, ...) 
#line 2336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2337
int _Result; 
#line 2338
va_list _ArgList; 
#line 2339
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2341
_Result = __stdio_common_vsscanf(*__local_stdio_scanf_options(), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2345
(void)(_ArgList = ((va_list)0)); 
#line 2346
return _Result; 
#line 2347
} 
#line 2352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s_l(const char *const 
#line 2353
_Buffer, const size_t 
#line 2354
_BufferCount, const char *const 
#line 2355
_Format, const _locale_t 
#line 2356
_Locale, ...) 
#line 2361 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2362
int _Result; 
#line 2363
va_list _ArgList; 
#line 2364
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 2366
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, _Locale, _ArgList); 
#line 2370
(void)(_ArgList = ((va_list)0)); 
#line 2371
return _Result; 
#line 2372
} 
#line 2376 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__inline int __cdecl _snscanf_s(const char *const 
#line 2377
_Buffer, const size_t 
#line 2378
_BufferCount, const char *const 
#line 2379
_Format, ...) 
#line 2384 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
{ 
#line 2385
int _Result; 
#line 2386
va_list _ArgList; 
#line 2387
(void)(__vcrt_assert_va_start_is_not_reference< const char *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 2389
_Result = __stdio_common_vsscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Buffer, _BufferCount, _Format, 0, _ArgList); 
#line 2393
(void)(_ArgList = ((va_list)0)); 
#line 2394
return _Result; 
#line 2395
} 
#line 2398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
#pragma warning(pop)
#line 2421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); 
#line 2430 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
__declspec(dllimport) int __cdecl fcloseall(); 
#line 2431
__declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); 
#line 2432
__declspec(dllimport) int __cdecl fgetchar(); 
#line 2433
__declspec(dllimport) int __cdecl fileno(FILE * _Stream); 
#line 2434
__declspec(dllimport) int __cdecl flushall(); 
#line 2435
__declspec(dllimport) int __cdecl fputchar(int _Ch); 
#line 2436
__declspec(dllimport) int __cdecl getw(FILE * _Stream); 
#line 2437
__declspec(dllimport) int __cdecl putw(int _Ch, FILE * _Stream); 
#line 2438
__declspec(dllimport) int __cdecl rmtmp(); 
#line 2445 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\stdio.h"
}__pragma( pack ( pop )) 
#line 2447
#pragma warning(pop)
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cstdio"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 32
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 36
using ::_Mbstatet;
#line 39
using ::fpos_t;
#line 40
using ::FILE;
#line 41
using ::clearerr;
#line 42
using ::fclose;
#line 43
using ::feof;
#line 44
using ::ferror;
#line 45
using ::fflush;
#line 46
using ::fgetc;
#line 47
using ::fgetpos;
#line 48
using ::fgets;
#line 49
using ::fopen;
#line 50
using ::fprintf;
#line 51
using ::fputc;
#line 52
using ::fputs;
#line 53
using ::fread;
#line 54
using ::freopen;
#line 55
using ::fscanf;
#line 56
using ::fseek;
#line 57
using ::fsetpos;
#line 58
using ::ftell;
#line 59
using ::fwrite;
#line 60
using ::getc;
#line 61
using ::getchar;
#line 62
using ::perror;
#line 63
using ::putc;
#line 64
using ::putchar;
#line 65
using ::printf;
#line 66
using ::puts;
#line 67
using ::remove;
#line 68
using ::rename;
#line 69
using ::rewind;
#line 70
using ::scanf;
#line 71
using ::setbuf;
#line 72
using ::setvbuf;
#line 73
using ::sprintf;
#line 74
using ::sscanf;
#line 75
using ::tmpfile;
#line 76
using ::tmpnam;
#line 77
using ::ungetc;
#line 78
using ::vfprintf;
#line 79
using ::vprintf;
#line 80
using ::vsprintf;
#line 82
using ::snprintf;
#line 83
using ::vsnprintf;
#line 84
using ::vfscanf;
#line 85
using ::vscanf;
#line 86
using ::vsscanf;
#line 88
#pragma warning(pop)
}
#line 93
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cstring"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 25
using ::memchr;
#line 26
using ::memcmp;
#line 27
using ::memcpy;
#line 28
using ::memmove;
#line 29
using ::memset;
#line 30
using ::strcat;
#line 31
using ::strchr;
#line 32
using ::strcmp;
#line 33
using ::strcoll;
#line 34
using ::strcpy;
#line 35
using ::strcspn;
#line 36
using ::strerror;
#line 37
using ::strlen;
#line 38
using ::strncat;
#line 39
using ::strncmp;
#line 40
using ::strncpy;
#line 41
using ::strpbrk;
#line 42
using ::strrchr;
#line 43
using ::strspn;
#line 44
using ::strstr;
#line 45
using ::strtok;
#line 46
using ::strxfrm;
#line 48
#pragma warning(pop)
}
#line 53
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 28
__declspec(dllimport) errno_t __cdecl _cgetws_s(__wchar_t * _Buffer, size_t _BufferCount, size_t * _SizeRead); 
#line 34
extern "C++" {template < size_t _Size > inline errno_t __cdecl _cgetws_s ( wchar_t ( & _Buffer ) [ _Size ], size_t * _SizeRead ) throw ( ) { return _cgetws_s ( _Buffer, _Size, _SizeRead ); }}
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl _cputws(const __wchar_t * _Buffer); 
#line 46
__declspec(dllimport) wint_t __cdecl _getwch(); 
#line 47
__declspec(dllimport) wint_t __cdecl _getwche(); 
#line 48
__declspec(dllimport) wint_t __cdecl _putwch(__wchar_t _Character); 
#line 49
__declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _Character); 
#line 51
__declspec(dllimport) wint_t __cdecl _getwch_nolock(); 
#line 52
__declspec(dllimport) wint_t __cdecl _getwche_nolock(); 
#line 53
__declspec(dllimport) wint_t __cdecl _putwch_nolock(__wchar_t _Character); 
#line 54
__declspec(dllimport) wint_t __cdecl _ungetwch_nolock(wint_t _Character); 
#line 64
__declspec(dllimport) int __cdecl __conio_common_vcwprintf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 72
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 80
__declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 88
__inline int __cdecl _vcwprintf_l(const __wchar_t *const 
#line 89
_Format, const _locale_t 
#line 90
_Locale, va_list 
#line 91
_ArgList) 
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 97
return __conio_common_vcwprintf(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 98
} 
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf(const __wchar_t *const 
#line 103
_Format, va_list 
#line 104
_ArgList) 
#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 110
return _vcwprintf_l(_Format, 0, _ArgList); 
#line 111
} 
#line 115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s_l(const __wchar_t *const 
#line 116
_Format, const _locale_t 
#line 117
_Locale, va_list 
#line 118
_ArgList) 
#line 123 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 124
return __conio_common_vcwprintf_s(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 125
} 
#line 129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_s(const __wchar_t *const 
#line 130
_Format, va_list 
#line 131
_ArgList) 
#line 136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 137
return _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 138
} 
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p_l(const __wchar_t *const 
#line 143
_Format, const _locale_t 
#line 144
_Locale, va_list 
#line 145
_ArgList) 
#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 151
return __conio_common_vcwprintf_p(*__local_stdio_printf_options(), _Format, _Locale, _ArgList); 
#line 152
} 
#line 156 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwprintf_p(const __wchar_t *const 
#line 157
_Format, va_list 
#line 158
_ArgList) 
#line 163 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 164
return _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 165
} 
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_l(const __wchar_t *const 
#line 170
_Format, const _locale_t 
#line 171
_Locale, ...) 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 177
int _Result; 
#line 178
va_list _ArgList; 
#line 179
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 180
_Result = _vcwprintf_l(_Format, _Locale, _ArgList); 
#line 181
(void)(_ArgList = ((va_list)0)); 
#line 182
return _Result; 
#line 183
} 
#line 187 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf(const __wchar_t *const 
#line 188
_Format, ...) 
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 194
int _Result; 
#line 195
va_list _ArgList; 
#line 196
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 197
_Result = _vcwprintf_l(_Format, 0, _ArgList); 
#line 198
(void)(_ArgList = ((va_list)0)); 
#line 199
return _Result; 
#line 200
} 
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s_l(const __wchar_t *const 
#line 205
_Format, const _locale_t 
#line 206
_Locale, ...) 
#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 212
int _Result; 
#line 213
va_list _ArgList; 
#line 214
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 215
_Result = _vcwprintf_s_l(_Format, _Locale, _ArgList); 
#line 216
(void)(_ArgList = ((va_list)0)); 
#line 217
return _Result; 
#line 218
} 
#line 222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_s(const __wchar_t *const 
#line 223
_Format, ...) 
#line 228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 229
int _Result; 
#line 230
va_list _ArgList; 
#line 231
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 232
_Result = _vcwprintf_s_l(_Format, 0, _ArgList); 
#line 233
(void)(_ArgList = ((va_list)0)); 
#line 234
return _Result; 
#line 235
} 
#line 239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p_l(const __wchar_t *const 
#line 240
_Format, const _locale_t 
#line 241
_Locale, ...) 
#line 246 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 247
int _Result; 
#line 248
va_list _ArgList; 
#line 249
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 250
_Result = _vcwprintf_p_l(_Format, _Locale, _ArgList); 
#line 251
(void)(_ArgList = ((va_list)0)); 
#line 252
return _Result; 
#line 253
} 
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwprintf_p(const __wchar_t *const 
#line 258
_Format, ...) 
#line 263 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 264
int _Result; 
#line 265
va_list _ArgList; 
#line 266
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 267
_Result = _vcwprintf_p_l(_Format, 0, _ArgList); 
#line 268
(void)(_ArgList = ((va_list)0)); 
#line 269
return _Result; 
#line 270
} 
#line 281 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__declspec(dllimport) int __cdecl __conio_common_vcwscanf(unsigned __int64 _Options, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); 
#line 289
__inline int __cdecl _vcwscanf_l(const __wchar_t *const 
#line 290
_Format, const _locale_t 
#line 291
_Locale, va_list 
#line 292
_ArgList) 
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 298
return __conio_common_vcwscanf(*__local_stdio_scanf_options(), _Format, _Locale, _ArgList); 
#line 301
} 
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf(const __wchar_t *const 
#line 306
_Format, va_list 
#line 307
_ArgList) 
#line 312 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 313
return _vcwscanf_l(_Format, 0, _ArgList); 
#line 314
} 
#line 318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s_l(const __wchar_t *const 
#line 319
_Format, const _locale_t 
#line 320
_Locale, va_list 
#line 321
_ArgList) 
#line 326 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 327
return __conio_common_vcwscanf((*__local_stdio_scanf_options()) | (1Ui64 << 0), _Format, _Locale, _ArgList); 
#line 330
} 
#line 334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _vcwscanf_s(const __wchar_t *const 
#line 335
_Format, va_list 
#line 336
_ArgList) 
#line 341 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 342
return _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 343
} 
#line 347 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_l(const __wchar_t *const 
#line 348
_Format, const _locale_t 
#line 349
_Locale, ...) 
#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 355
int _Result; 
#line 356
va_list _ArgList; 
#line 357
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 359
_Result = _vcwscanf_l(_Format, _Locale, _ArgList); 
#line 361
(void)(_ArgList = ((va_list)0)); 
#line 362
return _Result; 
#line 363
} 
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf(const __wchar_t *const 
#line 368
_Format, ...) 
#line 373 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 374
int _Result; 
#line 375
va_list _ArgList; 
#line 376
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 378
_Result = _vcwscanf_l(_Format, 0, _ArgList); 
#line 380
(void)(_ArgList = ((va_list)0)); 
#line 381
return _Result; 
#line 382
} 
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s_l(const __wchar_t *const 
#line 387
_Format, const _locale_t 
#line 388
_Locale, ...) 
#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 394
int _Result; 
#line 395
va_list _ArgList; 
#line 396
(void)(__vcrt_assert_va_start_is_not_reference< __crt_locale_pointers *const> (), ((void)__va_start(&_ArgList, _Locale))); 
#line 397
_Result = _vcwscanf_s_l(_Format, _Locale, _ArgList); 
#line 398
(void)(_ArgList = ((va_list)0)); 
#line 399
return _Result; 
#line 400
} 
#line 404 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
__inline int __cdecl _cwscanf_s(const __wchar_t *const 
#line 405
_Format, ...) 
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
{ 
#line 411
int _Result; 
#line 412
va_list _ArgList; 
#line 413
(void)(__vcrt_assert_va_start_is_not_reference< const __wchar_t *const> (), ((void)__va_start(&_ArgList, _Format))); 
#line 414
_Result = _vcwscanf_s_l(_Format, 0, _ArgList); 
#line 415
(void)(_ArgList = ((va_list)0)); 
#line 416
return _Result; 
#line 417
} 
#line 422 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wconio.h"
}__pragma( pack ( pop )) 
#line 424
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wdirect.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 26
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetcwd(__wchar_t * _DstBuf, int _SizeInWords); 
#line 33
__declspec(dllimport) __declspec(allocator) __wchar_t *__cdecl _wgetdcwd(int _Drive, __wchar_t * _DstBuf, int _SizeInWords); 
#line 45
__declspec(dllimport) int __cdecl _wchdir(const __wchar_t * _Path); 
#line 50
__declspec(dllimport) int __cdecl _wmkdir(const __wchar_t * _Path); 
#line 55
__declspec(dllimport) int __cdecl _wrmdir(const __wchar_t * _Path); 
#line 61
}__pragma( pack ( pop )) 
#line 63
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_share.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_share.h"
#pragma warning(pop)
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wio.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wio.h"
typedef unsigned long _fsize_t; 
#line 35
struct _wfinddata32_t { 
#line 37
unsigned attrib; 
#line 38
__time32_t time_create; 
#line 39
__time32_t time_access; 
#line 40
__time32_t time_write; 
#line 41
_fsize_t size; 
#line 42
__wchar_t name[260]; 
#line 43
}; 
#line 45
struct _wfinddata32i64_t { 
#line 47
unsigned attrib; 
#line 48
__time32_t time_create; 
#line 49
__time32_t time_access; 
#line 50
__time32_t time_write; 
#line 51
__int64 size; 
#line 52
__wchar_t name[260]; 
#line 53
}; 
#line 55
struct _wfinddata64i32_t { 
#line 57
unsigned attrib; 
#line 58
__time64_t time_create; 
#line 59
__time64_t time_access; 
#line 60
__time64_t time_write; 
#line 61
_fsize_t size; 
#line 62
__wchar_t name[260]; 
#line 63
}; 
#line 65
struct _wfinddata64_t { 
#line 67
unsigned attrib; 
#line 68
__time64_t time_create; 
#line 69
__time64_t time_access; 
#line 70
__time64_t time_write; 
#line 71
__int64 size; 
#line 72
__wchar_t name[260]; 
#line 73
}; 
#line 95 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) int __cdecl _waccess(const __wchar_t * _FileName, int _AccessMode); 
#line 101
__declspec(dllimport) errno_t __cdecl _waccess_s(const __wchar_t * _FileName, int _AccessMode); 
#line 107
__declspec(dllimport) int __cdecl _wchmod(const __wchar_t * _FileName, int _Mode); 
#line 113
__declspec(dllimport) int __cdecl _wcreat(const __wchar_t * _FileName, int _PermissionMode); 
#line 120
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(const __wchar_t * _FileName, _wfinddata32_t * _FindData); 
#line 127
__declspec(dllimport) int __cdecl _wfindnext32(intptr_t _FindHandle, _wfinddata32_t * _FindData); 
#line 132
__declspec(dllimport) int __cdecl _wunlink(const __wchar_t * _FileName); 
#line 137
__declspec(dllimport) int __cdecl _wrename(const __wchar_t * _OldFileName, const __wchar_t * _NewFileName); 
#line 142
__declspec(dllimport) errno_t __cdecl _wmktemp_s(__wchar_t * _TemplateName, size_t _SizeInWords); 
#line 147
extern "C++" {template < size_t _Size > inline errno_t __cdecl _wmktemp_s ( wchar_t ( & _TemplateName ) [ _Size ] ) throw ( ) { return _wmktemp_s ( _TemplateName, _Size ); }}
#line 153 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) __wchar_t *__cdecl _wmktemp(__wchar_t * _TemplateName); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wio.h"
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(const __wchar_t * _FileName, _wfinddata32i64_t * _FindData); 
#line 167
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(const __wchar_t * _FileName, _wfinddata64i32_t * _FindData); 
#line 174
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(const __wchar_t * _FileName, _wfinddata64_t * _FindData); 
#line 181
__declspec(dllimport) int __cdecl _wfindnext32i64(intptr_t _FindHandle, _wfinddata32i64_t * _FindData); 
#line 188
__declspec(dllimport) int __cdecl _wfindnext64i32(intptr_t _FindHandle, _wfinddata64i32_t * _FindData); 
#line 195
__declspec(dllimport) int __cdecl _wfindnext64(intptr_t _FindHandle, _wfinddata64_t * _FindData); 
#line 201
__declspec(dllimport) errno_t __cdecl _wsopen_s(int * _FileHandle, const __wchar_t * _FileName, int _OpenFlag, int _ShareFlag, int _PermissionFlag); 
#line 209
__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(const __wchar_t * _FileName, int _OFlag, int _ShFlag, int _PMode, int * _PFileHandle, int _BSecure); 
#line 224
extern "C++" inline int __cdecl _wopen(const __wchar_t *
#line 225
_FileName, int 
#line 226
_OFlag, int 
#line 227
_PMode = 0) 
#line 229
{ 
#line 230
int _FileHandle; 
#line 232
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, 64, _PMode, &_FileHandle, 0); 
#line 233
return (_Result) ? -1 : _FileHandle; 
#line 234
} 
#line 237
extern "C++" inline int __cdecl _wsopen(const __wchar_t *
#line 238
_FileName, int 
#line 239
_OFlag, int 
#line 240
_ShFlag, int 
#line 241
_PMode = 0) 
#line 243
{ 
#line 244
int _FileHandle; 
#line 246
const errno_t _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0); 
#line 247
return (_Result) ? -1 : _FileHandle; 
#line 248
} 
#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wio.h"
}__pragma( pack ( pop )) 
#line 270
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wprocess.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 24
__declspec(dllimport) intptr_t __cdecl _wexecl(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 29
__declspec(dllimport) intptr_t __cdecl _wexecle(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 34
__declspec(dllimport) intptr_t __cdecl _wexeclp(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 39
__declspec(dllimport) intptr_t __cdecl _wexeclpe(const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 44
__declspec(dllimport) intptr_t __cdecl _wexecv(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 49
__declspec(dllimport) intptr_t __cdecl _wexecve(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 55
__declspec(dllimport) intptr_t __cdecl _wexecvp(const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 60
__declspec(dllimport) intptr_t __cdecl _wexecvpe(const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 66
__declspec(dllimport) intptr_t __cdecl _wspawnl(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 72
__declspec(dllimport) intptr_t __cdecl _wspawnle(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 78
__declspec(dllimport) intptr_t __cdecl _wspawnlp(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 84
__declspec(dllimport) intptr_t __cdecl _wspawnlpe(int _Mode, const __wchar_t * _FileName, const __wchar_t * _ArgList, ...); 
#line 90
__declspec(dllimport) intptr_t __cdecl _wspawnv(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 96
__declspec(dllimport) intptr_t __cdecl _wspawnve(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 103
__declspec(dllimport) intptr_t __cdecl _wspawnvp(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList); 
#line 109
__declspec(dllimport) intptr_t __cdecl _wspawnvpe(int _Mode, const __wchar_t * _FileName, const __wchar_t *const * _ArgList, const __wchar_t *const * _Env); 
#line 116
__declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); 
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_wprocess.h"
}__pragma( pack ( pop )) 
#line 127
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\sys/types.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
typedef unsigned short _ino_t; 
#line 22
typedef _ino_t ino_t; 
#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\sys/types.h"
typedef unsigned _dev_t; 
#line 34
typedef _dev_t dev_t; 
#line 43 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\sys/types.h"
typedef long _off_t; 
#line 46
typedef _off_t off_t; 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\sys/types.h"
#pragma warning(pop)
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\sys/stat.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 17
__pragma( pack ( push, 8 )) extern "C" {
#line 24
struct _stat32 { 
#line 26
_dev_t st_dev; 
#line 27
_ino_t st_ino; 
#line 28
unsigned short st_mode; 
#line 29
short st_nlink; 
#line 30
short st_uid; 
#line 31
short st_gid; 
#line 32
_dev_t st_rdev; 
#line 33
_off_t st_size; 
#line 34
__time32_t st_atime; 
#line 35
__time32_t st_mtime; 
#line 36
__time32_t st_ctime; 
#line 37
}; 
#line 39
struct _stat32i64 { 
#line 41
_dev_t st_dev; 
#line 42
_ino_t st_ino; 
#line 43
unsigned short st_mode; 
#line 44
short st_nlink; 
#line 45
short st_uid; 
#line 46
short st_gid; 
#line 47
_dev_t st_rdev; 
#line 48
__int64 st_size; 
#line 49
__time32_t st_atime; 
#line 50
__time32_t st_mtime; 
#line 51
__time32_t st_ctime; 
#line 52
}; 
#line 54
struct _stat64i32 { 
#line 56
_dev_t st_dev; 
#line 57
_ino_t st_ino; 
#line 58
unsigned short st_mode; 
#line 59
short st_nlink; 
#line 60
short st_uid; 
#line 61
short st_gid; 
#line 62
_dev_t st_rdev; 
#line 63
_off_t st_size; 
#line 64
__time64_t st_atime; 
#line 65
__time64_t st_mtime; 
#line 66
__time64_t st_ctime; 
#line 67
}; 
#line 69
struct _stat64 { 
#line 71
_dev_t st_dev; 
#line 72
_ino_t st_ino; 
#line 73
unsigned short st_mode; 
#line 74
short st_nlink; 
#line 75
short st_uid; 
#line 76
short st_gid; 
#line 77
_dev_t st_rdev; 
#line 78
__int64 st_size; 
#line 79
__time64_t st_atime; 
#line 80
__time64_t st_mtime; 
#line 81
__time64_t st_ctime; 
#line 82
}; 
#line 87
struct stat { 
#line 89
_dev_t st_dev; 
#line 90
_ino_t st_ino; 
#line 91
unsigned short st_mode; 
#line 92
short st_nlink; 
#line 93
short st_uid; 
#line 94
short st_gid; 
#line 95
_dev_t st_rdev; 
#line 96
_off_t st_size; 
#line 97
time_t st_atime; 
#line 98
time_t st_mtime; 
#line 99
time_t st_ctime; 
#line 100
}; 
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\sys/stat.h"
__declspec(dllimport) int __cdecl _fstat32(int _FileHandle, struct _stat32 * _Stat); 
#line 159
__declspec(dllimport) int __cdecl _fstat32i64(int _FileHandle, struct _stat32i64 * _Stat); 
#line 164
__declspec(dllimport) int __cdecl _fstat64i32(int _FileHandle, struct _stat64i32 * _Stat); 
#line 169
__declspec(dllimport) int __cdecl _fstat64(int _FileHandle, struct _stat64 * _Stat); 
#line 174
__declspec(dllimport) int __cdecl _stat32(const char * _FileName, struct _stat32 * _Stat); 
#line 179
__declspec(dllimport) int __cdecl _stat32i64(const char * _FileName, struct _stat32i64 * _Stat); 
#line 184
__declspec(dllimport) int __cdecl _stat64i32(const char * _FileName, struct _stat64i32 * _Stat); 
#line 189
__declspec(dllimport) int __cdecl _stat64(const char * _FileName, struct _stat64 * _Stat); 
#line 194
__declspec(dllimport) int __cdecl _wstat32(const __wchar_t * _FileName, struct _stat32 * _Stat); 
#line 199
__declspec(dllimport) int __cdecl _wstat32i64(const __wchar_t * _FileName, struct _stat32i64 * _Stat); 
#line 204
__declspec(dllimport) int __cdecl _wstat64i32(const __wchar_t * _FileName, struct _stat64i32 * _Stat); 
#line 209
__declspec(dllimport) int __cdecl _wstat64(const __wchar_t * _FileName, struct _stat64 * _Stat); 
#line 233
static __inline int __cdecl fstat(const int _FileHandle, struct stat *const _Stat) 
#line 234
{ 
#line 235
static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct stat) == sizeof(struct _stat64i32)");
#line 236
return _fstat64i32(_FileHandle, (struct _stat64i32 *)_Stat); 
#line 237
} 
#line 238
static __inline int __cdecl stat(const char *const _FileName, struct stat *const _Stat) 
#line 239
{ 
#line 240
static_assert((sizeof(struct stat) == sizeof(struct _stat64i32)), "sizeof(struct stat) == sizeof(struct _stat64i32)");
#line 241
return _stat64i32(_FileName, (struct _stat64i32 *)_Stat); 
#line 242
} 
#line 247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\sys/stat.h"
}__pragma( pack ( pop )) 
#line 249
#pragma warning(pop)
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 33
__pragma( pack ( push, 8 )) extern "C" {
#line 42
typedef __wchar_t _Wint_t; 
#line 49
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 55
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 62
__declspec(dllimport) wint_t __cdecl btowc(int _Ch); 
#line 66
__declspec(dllimport) size_t __cdecl mbrlen(const char * _Ch, size_t _SizeInBytes, mbstate_t * _State); 
#line 72
__declspec(dllimport) size_t __cdecl mbrtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SizeInBytes, mbstate_t * _State); 
#line 80
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(size_t * _Retval, __wchar_t * _Dst, size_t _Size, const char ** _PSrc, size_t _N, mbstate_t * _State); 
#line 89
extern "C++" {template < size_t _Size > inline errno_t __cdecl mbsrtowcs_s ( size_t * _Retval, wchar_t ( & _Dest ) [ _Size ], char const * * _PSource, size_t _Count, mbstate_t * _State ) throw ( ) { return mbsrtowcs_s ( _Retval, _Dest, _Size, _PSource, _Count, _State ); }}
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl mbsrtowcs(__wchar_t * _Dest, const char ** _PSrc, size_t _Count, mbstate_t * _State); 
#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcrtomb_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, __wchar_t _Ch, mbstate_t * _State); 
#line 116
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcrtomb_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t _Source, mbstate_t * _State ) throw ( ) { return wcrtomb_s ( _Retval, _Dest, _Size, _Source, _State ); }}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcrtomb(char * _Dest, __wchar_t _Source, mbstate_t * _State); 
#line 133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(size_t * _Retval, char * _Dst, size_t _SizeInBytes, const __wchar_t ** _Src, size_t _Size, mbstate_t * _State); 
#line 142
extern "C++" {template < size_t _Size > inline errno_t __cdecl wcsrtombs_s ( size_t * _Retval, char ( & _Dest ) [ _Size ], wchar_t const * * _PSrc, size_t _Count, mbstate_t * _State ) throw ( ) { return wcsrtombs_s ( _Retval, _Dest, _Size, _PSrc, _Count, _State ); }}
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
__declspec(dllimport) size_t __cdecl wcsrtombs(char * _Dest, const __wchar_t ** _PSource, size_t _Count, mbstate_t * _State); 
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
__declspec(dllimport) int __cdecl wctob(wint_t _WCh); 
#line 167
errno_t __cdecl wmemcpy_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 175
errno_t __cdecl wmemmove_s(__wchar_t * _S1, rsize_t _N1, const __wchar_t * _S2, rsize_t _N); 
#line 184 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
__inline int __cdecl fwide(FILE *
#line 185
_F, int 
#line 186
_M) 
#line 188
{ 
#line 189
(void)_F; 
#line 190
return _M; 
#line 191
} 
#line 193
__inline int __cdecl mbsinit(const mbstate_t *
#line 194
_P) 
#line 196
{ 
#line 197
return (_P == (0)) || ((_P->_Wchar) == (0)); 
#line 198
} 
#line 200
__inline const __wchar_t *__cdecl wmemchr(const __wchar_t *
#line 201
_S, __wchar_t 
#line 202
_C, size_t 
#line 203
_N) 
#line 205
{ 
#line 206
for (; (0) < _N; (++_S), (--_N)) { 
#line 207
if ((*_S) == _C) { 
#line 208
return (const __wchar_t *)_S; }  }  
#line 210
return 0; 
#line 211
} 
#line 213
__inline int __cdecl wmemcmp(const __wchar_t *
#line 214
_S1, const __wchar_t *
#line 215
_S2, size_t 
#line 216
_N) 
#line 218
{ 
#line 219
for (; (0) < _N; ((++_S1), (++_S2)), (--_N)) { 
#line 220
if ((*_S1) != (*_S2)) { 
#line 221
return ((*_S1) < (*_S2)) ? -1 : 1; }  }  
#line 223
return 0; 
#line 224
} 
#line 229
__inline __wchar_t *__cdecl wmemcpy(__wchar_t *
#line 230
_S1, const __wchar_t *
#line 231
_S2, size_t 
#line 232
_N) 
#line 234
{ 
#pragma warning(suppress: 6386)
return (__wchar_t *)memcpy(_S1, _S2, _N * sizeof(__wchar_t)); 
#line 237
} 
#line 240
__inline __wchar_t *__cdecl wmemmove(__wchar_t *
#line 241
_S1, const __wchar_t *
#line 242
_S2, size_t 
#line 243
_N) 
#line 245
{ 
#pragma warning(suppress: 6386)
return (__wchar_t *)memmove(_S1, _S2, _N * sizeof(__wchar_t)); 
#line 248
} 
#line 252
__inline __wchar_t *__cdecl wmemset(__wchar_t *
#line 253
_S, __wchar_t 
#line 254
_C, size_t 
#line 255
_N) 
#line 257
{ 
#line 258
__wchar_t *_Su = _S; 
#line 259
for (; (0) < _N; (++_Su), (--_N)) 
#line 260
{ 
#line 261
(*_Su) = _C; 
#line 262
}  
#line 263
return _S; 
#line 264
} 
#line 268
extern "C++" inline __wchar_t *__cdecl wmemchr(__wchar_t *
#line 269
_S, __wchar_t 
#line 270
_C, size_t 
#line 271
_N) 
#line 273
{ 
#line 274
const __wchar_t *const _SC = _S; 
#line 275
return const_cast< __wchar_t *>(wmemchr(_SC, _C, _N)); 
#line 276
} 
#line 283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\wchar.h"
}__pragma( pack ( pop )) 
#line 285
#pragma warning(pop)
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cwchar"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
extern "C" { using _Mbstatet = mbstate_t; }
#line 23
namespace std { 
#pragma warning(push)
#pragma warning(disable : 4995)
#line 29
using ::mbstate_t;
#line 31
using ::tm;
#line 32
using ::wint_t;
#line 34
using ::btowc;
#line 35
using ::fgetwc;
#line 36
using ::fgetws;
#line 37
using ::fputwc;
#line 38
using ::fputws;
#line 39
using ::fwide;
#line 40
using ::fwprintf;
#line 41
using ::fwscanf;
#line 42
using ::getwc;
#line 43
using ::getwchar;
#line 44
using ::mbrlen;
#line 45
using ::mbrtowc;
#line 46
using ::mbsrtowcs;
#line 47
using ::mbsinit;
#line 48
using ::putwc;
#line 49
using ::putwchar;
#line 50
using ::swprintf;
#line 51
using ::swscanf;
#line 52
using ::ungetwc;
#line 53
using ::vfwprintf;
#line 54
using ::vswprintf;
#line 55
using ::vwprintf;
#line 56
using ::wcrtomb;
#line 57
using ::wprintf;
#line 58
using ::wscanf;
#line 59
using ::wcsrtombs;
#line 60
using ::wcstol;
#line 61
using ::wcscat;
#line 62
using ::wcschr;
#line 63
using ::wcscmp;
#line 64
using ::wcscoll;
#line 65
using ::wcscpy;
#line 66
using ::wcscspn;
#line 67
using ::wcslen;
#line 68
using ::wcsncat;
#line 69
using ::wcsncmp;
#line 70
using ::wcsncpy;
#line 71
using ::wcspbrk;
#line 72
using ::wcsrchr;
#line 73
using ::wcsspn;
#line 74
using ::wcstod;
#line 75
using ::wcstoul;
#line 76
using ::wcsstr;
#line 77
using ::wcstok;
#line 78
using ::wcsxfrm;
#line 79
using ::wctob;
#line 80
using ::wmemchr;
#line 81
using ::wmemcmp;
#line 82
using ::wmemcpy;
#line 83
using ::wmemmove;
#line 84
using ::wmemset;
#line 85
using ::wcsftime;
#line 87
using ::vfwscanf;
#line 88
using ::vswscanf;
#line 89
using ::vwscanf;
#line 90
using ::wcstof;
#line 91
using ::wcstold;
#line 92
using ::wcstoll;
#line 93
using ::wcstoull;
#line 95
#pragma warning(pop)
}
#line 100
#pragma warning(pop)
#pragma pack ( pop )
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 23
namespace std { 
#line 46 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
using streamoff = __int64; 
#line 47
using streamsize = __int64; 
#line 49
template < class _Statetype >
class fpos {
public :
     fpos ( streamoff _Off = 0 ) : _Myoff ( _Off ), _Fpos ( 0 ), _Mystate ( ) { }

    fpos ( _Statetype _State, fpos_t _Fileposition ) : _Myoff ( _Fileposition ), _Fpos ( 0 ), _Mystate ( _State ) { }

    [ [ nodiscard ] ] _Statetype state ( ) const {
        return _Mystate;
    }

    void state ( _Statetype _State ) {
        _Mystate = _State;
    }

    operator streamoff ( ) const noexcept {


        return _Myoff + _Fpos;
    }


    [ [ deprecated ( "warning STL4019: The member std::fpos::seekpos() is non-Standard, and is preserved only for compatibility with workarounds for o" "ld versions of Visual C++. It will be removed in a future release, and in this release always returns 0. Please use standards-co" "nforming mechanisms to manipulate fpos, such as conversions to and from streamoff, or an integral type, instead. If you are rece" "iving this message while compiling Boost.IOStreams, a fix has been submitted upstream to make Boost use standards-conforming mec" "hanisms, as it does for other compilers. You can define _SILENCE_FPOS_SEEKPOS_DEPRECATION_WARNING to suppress this warning, or d" "efine _REMOVE_FPOS_SEEKPOS to remove std::fpos::seekpos entirely." ) ] ] fpos_t seekpos ( ) const noexcept {
        return { };
    }


    [ [ nodiscard ] ] streamoff operator - ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) - static_cast < streamoff > ( _Right );
    }

    fpos & operator += ( streamoff _Off ) noexcept {
        _Myoff += _Off;
        return * this;
    }

    fpos & operator -= ( streamoff _Off ) noexcept {
        _Myoff -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] fpos operator + ( streamoff _Off ) const {
        fpos _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] fpos operator - ( streamoff _Off ) const {
        fpos _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] bool operator == ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) == static_cast < streamoff > ( _Right );
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator == ( const fpos & _Left, const _Int _Right ) noexcept {
        return static_cast < streamoff > ( _Left ) == _Right;
    }


    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator == ( const _Int _Left, const fpos & _Right ) noexcept {
        return _Left == static_cast < streamoff > ( _Right );
    }

    [ [ nodiscard ] ] bool operator != ( const fpos & _Right ) const noexcept {
        return static_cast < streamoff > ( * this ) != static_cast < streamoff > ( _Right );
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator != ( const fpos & _Left, const _Int _Right ) noexcept {
        return static_cast < streamoff > ( _Left ) != _Right;
    }

    template < class _Int, enable_if_t < is_integral_v < _Int >, int > = 0 >
    friend bool operator != ( const _Int _Left, const fpos & _Right ) noexcept {
        return _Left != static_cast < streamoff > ( _Right );
    }


private :
    streamoff _Myoff;
    fpos_t _Fpos;
    _Statetype _Mystate;
};
#line 138 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
using streampos = fpos< _Mbstatet> ; 
#line 139
using wstreampos = streampos; 
#line 143
using u16streampos = streampos; 
#line 144
using u32streampos = streampos; 
#line 146
class locale; 
#line 147
template < class _Facet >
const _Facet & __cdecl use_facet ( const locale & );
#line 150
template< class _Elem> struct char_traits; 
#line 153
template<> struct char_traits< char> ; 
#line 159
template<> struct char_traits< char16_t> ; 
#line 161
template<> struct char_traits< char32_t> ; 
#line 163
template<> struct char_traits< __wchar_t> ; 
#line 169
template < class _Ty >
class allocator;
#line 171
class ios_base; 
#line 172
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ios;
#line 174
template < class _Elem, class _Traits = char_traits < _Elem > >
class istreambuf_iterator;
#line 176
template < class _Elem, class _Traits = char_traits < _Elem > >
class ostreambuf_iterator;
#line 178
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_streambuf;
#line 181
#pragma vtordisp(push, 2)
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_istream;
#line 184
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_ostream;
#pragma vtordisp(pop)
#line 188
template < class _Elem, class _Traits = char_traits < _Elem > >
class basic_iostream;
#line 190
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_stringbuf; 
#line 192
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_istringstream; 
#line 194
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_ostringstream; 
#line 196
template< class _Elem, class _Traits = char_traits< _Elem> , class _Alloc = allocator< _Elem> > class basic_stringstream; 
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_filebuf; 
#line 210
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_ifstream; 
#line 212
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_ofstream; 
#line 214
template< class _Elem, class _Traits = char_traits< _Elem> > class basic_fstream; 
#line 226 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
template < class _Elem, class _InIt >
class num_get;
#line 228
template < class _Elem, class _OutIt >
class num_put;
#line 230
template< class _Elem> class collate; 
#line 234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
using ios = basic_ios< char, char_traits< char> > ; 
#line 235
using streambuf = basic_streambuf< char, char_traits< char> > ; 
#line 236
using istream = basic_istream< char, char_traits< char> > ; 
#line 237
using ostream = basic_ostream< char, char_traits< char> > ; 
#line 238
using iostream = basic_iostream< char, char_traits< char> > ; 
#line 239
using stringbuf = basic_stringbuf< char, char_traits< char> , allocator< char> > ; 
#line 240
using istringstream = basic_istringstream< char, char_traits< char> , allocator< char> > ; 
#line 241
using ostringstream = basic_ostringstream< char, char_traits< char> , allocator< char> > ; 
#line 242
using stringstream = basic_stringstream< char, char_traits< char> , allocator< char> > ; 
#line 243
using filebuf = basic_filebuf< char, char_traits< char> > ; 
#line 244
using ifstream = basic_ifstream< char, char_traits< char> > ; 
#line 245
using ofstream = basic_ofstream< char, char_traits< char> > ; 
#line 246
using fstream = basic_fstream< char, char_traits< char> > ; 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
using wios = basic_ios< __wchar_t, char_traits< __wchar_t> > ; 
#line 259
using wstreambuf = basic_streambuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 260
using wistream = basic_istream< __wchar_t, char_traits< __wchar_t> > ; 
#line 261
using wostream = basic_ostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 262
using wiostream = basic_iostream< __wchar_t, char_traits< __wchar_t> > ; 
#line 263
using wstringbuf = basic_stringbuf< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 264
using wistringstream = basic_istringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 265
using wostringstream = basic_ostringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 266
using wstringstream = basic_stringstream< __wchar_t, char_traits< __wchar_t> , allocator< __wchar_t> > ; 
#line 267
using wfilebuf = basic_filebuf< __wchar_t, char_traits< __wchar_t> > ; 
#line 268
using wifstream = basic_ifstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 269
using wofstream = basic_ofstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 270
using wfstream = basic_fstream< __wchar_t, char_traits< __wchar_t> > ; 
#line 282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iosfwd"
}
#line 286
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_iter_core.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
template< class _Ty, class _Alloc, class  = void> 
#line 21
struct _Has_allocator_type : public false_type { }; 
#line 23
template< class _Ty, class _Alloc> 
#line 24
struct _Has_allocator_type< _Ty, _Alloc, void_t< typename _Ty::allocator_type> >  : public is_convertible< _Alloc, typename _Ty::allocator_type> ::type { 
#line 25
}; 
#line 27
struct allocator_arg_t { 
#line 28
explicit allocator_arg_t() = default;
#line 29
}; 
#line 31
constexpr allocator_arg_t allocator_arg{}; 
#line 33
template< class _Ty, class _Alloc> 
#line 34
struct uses_allocator : public _Has_allocator_type< _Ty, _Alloc> ::type { }; 
#line 36
template< class _Ty, class _Alloc> constexpr bool 
#line 37
uses_allocator_v = (uses_allocator< _Ty, _Alloc> ::value); 
#line 40
struct input_iterator_tag { }; 
#line 42
struct output_iterator_tag { }; 
#line 44
struct forward_iterator_tag : public input_iterator_tag { }; 
#line 46
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
#line 48
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
#line 480
template< class , class  = void> 
#line 481
struct _Iterator_traits_base { }; 
#line 483
template< class _Iter> 
#line 484
struct _Iterator_traits_base< _Iter, void_t< typename _Iter::iterator_category, typename _Iter::value_type, typename _Iter::difference_type, typename _Iter::pointer, typename _Iter::reference> >  { 
#line 488
using iterator_category = typename _Iter::iterator_category; 
#line 489
using value_type = typename _Iter::value_type; 
#line 490
using difference_type = typename _Iter::difference_type; 
#line 491
using pointer = typename _Iter::pointer; 
#line 492
using reference = typename _Iter::reference; 
#line 493
}; 
#line 495
template< class _Ty, bool  = is_object_v< _Ty> > 
#line 496
struct _Iterator_traits_pointer_base { 
#line 497
using iterator_category = random_access_iterator_tag; 
#line 498
using value_type = remove_cv_t< _Ty> ; 
#line 499
using difference_type = ptrdiff_t; 
#line 500
using pointer = _Ty *; 
#line 501
using reference = _Ty &; 
#line 502
}; 
#line 504
template< class _Ty> 
#line 505
struct _Iterator_traits_pointer_base< _Ty, false>  { }; 
#line 507
template< class _Iter> 
#line 508
struct iterator_traits : public _Iterator_traits_base< _Iter>  { }; 
#line 510
template< class _Ty> 
#line 511
struct iterator_traits< _Ty *>  : public _Iterator_traits_pointer_base< _Ty>  { }; 
#line 513 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_iter_core.hpp"
}
#line 517
#pragma warning(pop)
#pragma pack ( pop )
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 52 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
extern "C" {
#line 60
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_1(void * _First, void * _Last) noexcept; 
#line 61
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_2(void * _First, void * _Last) noexcept; 
#line 62
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_4(void * _First, void * _Last) noexcept; 
#line 63
__declspec(noalias) void __cdecl __std_reverse_trivially_swappable_8(void * _First, void * _Last) noexcept; 
#line 64
__declspec(noalias) void __cdecl __std_swap_ranges_trivially_swappable_noalias(void * _First1, void * _Last1, void * _First2) noexcept; 
#line 67
__declspec(noalias) size_t __stdcall 
#line 68
__std_count_trivial_1(const void * _First, const void * _Last, uint8_t _Val) noexcept; 
#line 69
__declspec(noalias) size_t __stdcall 
#line 70
__std_count_trivial_2(const void * _First, const void * _Last, uint16_t _Val) noexcept; 
#line 71
__declspec(noalias) size_t __stdcall 
#line 72
__std_count_trivial_4(const void * _First, const void * _Last, uint32_t _Val) noexcept; 
#line 73
__declspec(noalias) size_t __stdcall 
#line 74
__std_count_trivial_8(const void * _First, const void * _Last, uint64_t _Val) noexcept; 
#line 76
const void *__stdcall __std_find_trivial_1(const void * _First, const void * _Last, uint8_t _Val) noexcept; 
#line 77
const void *__stdcall __std_find_trivial_2(const void * _First, const void * _Last, uint16_t _Val) noexcept; 
#line 78
const void *__stdcall __std_find_trivial_4(const void * _First, const void * _Last, uint32_t _Val) noexcept; 
#line 79
const void *__stdcall __std_find_trivial_8(const void * _First, const void * _Last, uint64_t _Val) noexcept; 
#line 81
const void *__stdcall __std_find_trivial_unsized_1(const void * _First, uint8_t _Val) noexcept; 
#line 82
const void *__stdcall __std_find_trivial_unsized_2(const void * _First, uint16_t _Val) noexcept; 
#line 83
const void *__stdcall __std_find_trivial_unsized_4(const void * _First, uint32_t _Val) noexcept; 
#line 84
const void *__stdcall __std_find_trivial_unsized_8(const void * _First, uint64_t _Val) noexcept; 
#line 86
const void *__stdcall __std_min_element_1(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 87
const void *__stdcall __std_min_element_2(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 88
const void *__stdcall __std_min_element_4(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 89
const void *__stdcall __std_min_element_8(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 91
const void *__stdcall __std_max_element_1(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 92
const void *__stdcall __std_max_element_2(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 93
const void *__stdcall __std_max_element_4(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 94
const void *__stdcall __std_max_element_8(const void * _First, const void * _Last, bool _Signed) noexcept; 
#line 95
}
#line 97
template < class _Ty, class _TVal >
__declspec ( noalias ) size_t __std_count_trivial ( _Ty * _First, _Ty * _Last, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_count_trivial ( _First, _Last, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return __std_count_trivial_1 ( _First, _Last, static_cast < uint8_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return __std_count_trivial_2 ( _First, _Last, static_cast < uint16_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return __std_count_trivial_4 ( _First, _Last, static_cast < uint32_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return __std_count_trivial_8 ( _First, _Last, static_cast < uint64_t > ( _Val ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 114
template < class _Ty, class _TVal >
_Ty * __std_find_trivial ( _Ty * _First, _Ty * _Last, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_find_trivial ( _First, _Last, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_1 ( _First, _Last, static_cast < uint8_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_2 ( _First, _Last, static_cast < uint16_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_4 ( _First, _Last, static_cast < uint32_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_8 ( _First, _Last, static_cast < uint64_t > ( _Val ) ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 135
template < class _Ty, class _TVal >
_Ty * __std_find_trivial_unsized ( _Ty * _First, const _TVal _Val ) noexcept {
    if constexpr ( :: std :: is_pointer_v < _TVal > || :: std :: is_null_pointer_v < _TVal > ) {
        return __std_find_trivial_unsized ( _First, reinterpret_cast < uintptr_t > ( _Val ) );
    } else if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_1 ( _First, static_cast < uint8_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_2 ( _First, static_cast < uint16_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_4 ( _First, static_cast < uint32_t > ( _Val ) ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > (
            static_cast < const _Ty * > ( __std_find_trivial_unsized_8 ( _First, static_cast < uint64_t > ( _Val ) ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 156
template < class _Ty >
_Ty * __std_min_element ( _Ty * _First, _Ty * _Last ) noexcept {
    constexpr bool _Signed = :: std :: is_signed_v < _Ty >;

    if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_1 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_2 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_4 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_min_element_8 ( _First, _Last, _Signed ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 173
template < class _Ty >
_Ty * __std_max_element ( _Ty * _First, _Ty * _Last ) noexcept {
    constexpr bool _Signed = :: std :: is_signed_v < _Ty >;

    if constexpr ( sizeof ( _Ty ) == 1 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_1 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 2 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_2 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 4 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_4 ( _First, _Last, _Signed ) ) );
    } else if constexpr ( sizeof ( _Ty ) == 8 ) {
        return const_cast < _Ty * > ( static_cast < const _Ty * > ( __std_max_element_8 ( _First, _Last, _Signed ) ) );
    } else {
        static_assert ( :: std :: _Always_false < _Ty >, "Unexpected size" );
    }
}
#line 192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
namespace std { 
#line 194
template< class _Ty> struct _Get_first_parameter; 
#line 197
template< template< class , class ...>  class _Ty, class _First, class ..._Rest> 
#line 198
struct _Get_first_parameter< _Ty< _First, _Rest...> >  { 
#line 199
using type = _First; 
#line 200
}; 
#line 202
template< class _Newfirst, class _Ty> struct _Replace_first_parameter; 
#line 205
template< class _Newfirst, template< class , class ...>  class _Ty, class _First, class ..._Rest> 
#line 206
struct _Replace_first_parameter< _Newfirst, _Ty< _First, _Rest...> >  { 
#line 207
using type = _Ty< _Newfirst, _Rest...> ; 
#line 208
}; 
#line 210
template< class _Ty, class  = void> 
#line 211
struct _Get_ptr_difference_type { 
#line 212
using type = ptrdiff_t; 
#line 213
}; 
#line 215
template< class _Ty> 
#line 216
struct _Get_ptr_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 217
using type = typename _Ty::difference_type; 
#line 218
}; 
#line 220
template< class _Ty, class _Other, class  = void> 
#line 221
struct _Get_rebind_alias { 
#line 222
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 223
}; 
#line 225
template< class _Ty, class _Other> 
#line 226
struct _Get_rebind_alias< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> > >  { 
#line 227
using type = typename _Ty::template rebind< _Other> ; 
#line 228
}; 
#line 246 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Ty, class ... _Types >
inline void _Construct_in_place ( _Ty & _Obj, _Types && ... _Args ) noexcept (
    is_nothrow_constructible_v < _Ty, _Types ... > ) {





    {
        :: new ( static_cast < void * > ( :: std :: addressof ( _Obj ) ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
    }
}
#line 259 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Ty >
void _Default_construct_in_place ( _Ty & _Obj ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) {
    :: new ( static_cast < void * > ( :: std :: addressof ( _Obj ) ) ) _Ty;
}
#line 264
template < class _Ty, class _Elem >
struct _Ptr_traits_base {
    using pointer = _Ty;
    using element_type = _Elem;
    using difference_type = typename _Get_ptr_difference_type < _Ty > :: type;

    template < class _Other >
    using rebind = typename _Get_rebind_alias < _Ty, _Other > :: type;

    using _Reftype = conditional_t < is_void_v < _Elem >, char, _Elem > &;

    [ [ nodiscard ] ] static inline pointer pointer_to ( _Reftype _Val ) noexcept (
        noexcept ( _Ty :: pointer_to ( _Val ) ) ) {
        return _Ty :: pointer_to ( _Val );
    }
};
#line 281
template< class , class  = void, class  = void> 
#line 282
struct _Ptr_traits_sfinae_layer { }; 
#line 284
template< class _Ty, class _Uty> 
#line 285
struct _Ptr_traits_sfinae_layer< _Ty, _Uty, void_t< typename _Get_first_parameter< _Ty> ::type> >  : public _Ptr_traits_base< _Ty, typename _Get_first_parameter< _Ty> ::type>  { 
#line 286
}; 
#line 288
template< class _Ty> 
#line 289
struct _Ptr_traits_sfinae_layer< _Ty, void_t< typename _Ty::element_type> , void>  : public _Ptr_traits_base< _Ty, typename _Ty::element_type>  { 
#line 290
}; 
#line 292
template< class _Ty> 
#line 293
struct pointer_traits : public _Ptr_traits_sfinae_layer< _Ty>  { }; 
#line 295
template < class _Ty >
struct pointer_traits < _Ty * > {
    using pointer = _Ty *;
    using element_type = _Ty;
    using difference_type = ptrdiff_t;

    template < class _Other >
    using rebind = _Other *;

    using _Reftype = conditional_t < is_void_v < _Ty >, char, _Ty > &;

    [ [ nodiscard ] ] static inline pointer pointer_to ( _Reftype _Val ) noexcept {
        return :: std :: addressof ( _Val );
    }
};
#line 352 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Ty = void >
struct plus {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left + _Right;
    }
};
#line 363
template < class _Ty = void >
struct minus {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left - _Right;
    }
};
#line 374
template < class _Ty = void >
struct multiplies {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = _Ty;

    [ [ nodiscard ] ] constexpr _Ty operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const {
        return _Left * _Right;
    }
};
#line 385
template < class _Ty = void >
struct equal_to {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left == _Right ) ) ) {
        return _Left == _Right;
    }
};
#line 397
template < class _Ty = void >
struct not_equal_to {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left != _Right ) ) ) {
        return _Left != _Right;
    }
};
#line 409
template < class _Ty = void >
struct greater {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left > _Right ) ) ) {
        return _Left > _Right;
    }
};
#line 421
template < class _Ty = void >
struct greater_equal {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left >= _Right ) ) ) {
        return _Left >= _Right;
    }
};
#line 433
template < class _Ty = void >
struct less_equal {
    using first_argument_type = _Ty;
    using second_argument_type = _Ty;
    using result_type = bool;

    [ [ nodiscard ] ] constexpr bool operator ( ) ( const _Ty & _Left, const _Ty & _Right ) const
        noexcept ( noexcept ( _Fake_copy_init < bool > ( _Left <= _Right ) ) ) {
        return _Left <= _Right;
    }
};
#line 446
template<> struct plus< void>  { 
#line 447
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) + static_cast < _Ty2 && > ( _Right );
    }
#line 454
using is_transparent = int; 
#line 455
}; 
#line 458
template<> struct minus< void>  { 
#line 459
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) - static_cast < _Ty2 && > ( _Right );
    }
#line 466
using is_transparent = int; 
#line 467
}; 
#line 470
template<> struct multiplies< void>  { 
#line 471
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) * static_cast < _Ty2 && > ( _Right );
    }
#line 478
using is_transparent = int; 
#line 479
}; 
#line 482
template<> struct equal_to<>  { 
#line 483
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) == static_cast < _Ty2 && > ( _Right );
    }
#line 490
using is_transparent = int; 
#line 491
}; 
#line 494
template<> struct not_equal_to< void>  { 
#line 495
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) != static_cast < _Ty2 && > ( _Right );
    }
#line 502
using is_transparent = int; 
#line 503
}; 
#line 506
template<> struct greater<>  { 
#line 507
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) > static_cast < _Ty2 && > ( _Right );
    }
#line 514
using is_transparent = int; 
#line 515
}; 
#line 518
template<> struct greater_equal< void>  { 
#line 519
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) >= static_cast < _Ty2 && > ( _Right );
    }
#line 526
using is_transparent = int; 
#line 527
}; 
#line 530
template<> struct less_equal< void>  { 
#line 531
template < class _Ty1, class _Ty2 >
    [ [ nodiscard ] ] constexpr auto operator ( ) ( _Ty1 && _Left, _Ty2 && _Right ) const
        noexcept ( noexcept ( static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right ) ) )
        -> decltype ( static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right ) ) {
        return static_cast < _Ty1 && > ( _Left ) <= static_cast < _Ty2 && > ( _Right );
    }
#line 538
using is_transparent = int; 
#line 539
}; 
#line 541
template< class _Fx> 
#line 542
struct _Ref_fn { 
#line 543
template < class ... _Args >
    constexpr decltype ( auto ) operator ( ) ( _Args && ... _Vals ) {
        if constexpr ( is_member_pointer_v < _Fx > ) {
            return :: std :: invoke ( _Fn, :: std :: forward < _Args > ( _Vals ) ... );
        } else {
            return _Fn ( :: std :: forward < _Args > ( _Vals ) ... );
        }
    }
#line 552
_Fx &_Fn; 
#line 553
}; 
#line 555
template < class _Fn >
[ [ nodiscard ] ] constexpr auto _Pass_fn ( _Fn & _Func ) noexcept {
    constexpr bool _Pass_by_value = conjunction_v < bool_constant < sizeof ( _Fn ) <= sizeof ( void * ) >,
        is_trivially_copy_constructible < _Fn >, is_trivially_destructible < _Fn >>;
    if constexpr ( _Pass_by_value ) {
        return _Func;
    } else {
        return _Ref_fn < _Fn > { _Func };
    }
}
#line 579 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
struct _Unused_parameter { 
#line 580
constexpr _Unused_parameter() noexcept = default;
#line 581
template < class _Ty >
    constexpr _Unused_parameter ( _Ty && ) noexcept { }
#line 583
}; 
#line 585
template< class _Ty> using _Algorithm_int_t = conditional_t< is_integral_v< _Ty> , _Ty, __int64> ; 
#line 1049
template< class _Iter> using _Iter_ref_t = typename iterator_traits< _Iter> ::reference; 
#line 1052
template< class _Iter> using _Iter_value_t = typename iterator_traits< _Iter> ::value_type; 
#line 1055
template< class _Iter> using _Iter_diff_t = typename iterator_traits< _Iter> ::difference_type; 
#line 1058
template< class _Ty> using _Make_unsigned_like_t = make_unsigned_t< _Ty> ; 
#line 1062 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template< class ..._Iters> using _Common_diff_t = common_type_t< _Iter_diff_t< _Iters> ...> ; 
#line 1065
template< class _Iter> using _Iter_cat_t = typename iterator_traits< _Iter> ::iterator_category; 
#line 1068
template< class _Ty, class  = void> constexpr bool 
#line 1069
_Is_iterator_v = false; 
#line 1071
template< class _Ty> constexpr bool 
#line 1072
_Is_iterator_v< _Ty, void_t< _Iter_cat_t< _Ty> > >  = true; 
#line 1074
template< class _Ty> 
#line 1075
struct _Is_iterator : public bool_constant< _Is_iterator_v< _Ty, void> >  { }; 
#line 1077
template< class _Iter> constexpr bool 
#line 1078
_Is_cpp17_input_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , input_iterator_tag> ; 
#line 1080
template< class _Iter> constexpr bool 
#line 1081
_Is_ranges_input_iter_v = _Is_cpp17_input_iter_v< _Iter> ; 
#line 1087
template< class _Iter> constexpr bool 
#line 1088
_Is_cpp17_fwd_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , forward_iterator_tag> ; 
#line 1090
template< class _Iter> constexpr bool 
#line 1091
_Is_ranges_fwd_iter_v = _Is_cpp17_fwd_iter_v< _Iter> ; 
#line 1097
template< class _Iter> constexpr bool 
#line 1098
_Is_cpp17_bidi_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , bidirectional_iterator_tag> ; 
#line 1100
template< class _Iter> constexpr bool 
#line 1101
_Is_ranges_bidi_iter_v = _Is_cpp17_bidi_iter_v< _Iter> ; 
#line 1107
template< class _Iter> constexpr bool 
#line 1108
_Is_cpp17_random_iter_v = is_convertible_v< _Iter_cat_t< _Iter> , random_access_iterator_tag> ; 
#line 1110
template< class _Iter> constexpr bool 
#line 1111
_Is_ranges_random_iter_v = _Is_cpp17_random_iter_v< _Iter> ; 
#line 1125
template< class , class  = void> 
#line 1126
struct _Is_checked_helper { }; 
#line 1129
template < class _Ty >
constexpr void _Verify_range ( const _Ty * const _First, const _Ty * const _Last ) noexcept {

    do { if ( _First <= _Last ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility", 1132, 0, "%s", "transposed pointer range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x74\x72\x61\x6e\x73\x70\x6f\x73\x65\x64\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x75\x74\x69\x6c\x69" L"\x74\x79", 1132, 0 ); } while ( false ); }; } while ( false );
}
#line 1136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template< class _Iter, class  = void> constexpr bool 
#line 1137
_Allow_inheriting_unwrap_v = true; 
#line 1139
template< class _Iter> constexpr bool 
#line 1140
_Allow_inheriting_unwrap_v< _Iter, void_t< typename _Iter::_Prevent_inheriting_unwrap> >  = is_same_v< _Iter, typename _Iter::_Prevent_inheriting_unwrap> ; 
#line 1143
template< class _Iter, class _Sentinel = _Iter, class  = void> constexpr bool 
#line 1144
_Range_verifiable_v = false; 
#line 1146
template< class _Iter, class _Sentinel> constexpr bool 
#line 1147
_Range_verifiable_v< _Iter, _Sentinel, void_t< decltype(_Verify_range(std::declval< const _Iter &> (), std::declval< const _Sentinel &> ()))> >  = _Allow_inheriting_unwrap_v< _Iter, void> ; 
#line 1151
template < class _Iter, class _Sentinel >
constexpr void _Adl_verify_range ( const _Iter & _First, const _Sentinel & _Last ) {

    if constexpr ( _Range_verifiable_v < _Iter, _Sentinel > ) {
        _Verify_range ( _First, _Last );
    }
}
#line 1159
template< class _Iter, class  = void> constexpr bool 
#line 1160
_Unwrappable_v = false; 
#line 1162
template< class _Iter> constexpr bool 
#line 1163
_Unwrappable_v< _Iter, void_t< decltype(std::declval< _Remove_cvref_t< _Iter>  &> ()._Seek_to(std::declval< _Iter> ()._Unwrapped()))> >  = _Allow_inheriting_unwrap_v< _Remove_cvref_t< _Iter> , void> ; 
#line 1167
template< class _Iter, class  = void> constexpr bool 
#line 1168
_Has_nothrow_unwrapped = false; 
#line 1169
template< class _Iter> constexpr bool 
#line 1170
_Has_nothrow_unwrapped< _Iter, void_t< decltype(std::declval< _Iter> ()._Unwrapped())> >  = noexcept(std::declval< _Iter> ()._Unwrapped()); 
#line 1173
template < class _Iter >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped ( _Iter && _It ) noexcept (
    ! _Unwrappable_v < _Iter > || _Has_nothrow_unwrapped < _Iter > ) {

    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_v < _Iter > ) {
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {
        return static_cast < _Iter && > ( _It );
    }
}
#line 1186
template< class _Iter> using _Unwrapped_t = _Remove_cvref_t< decltype(_Get_unwrapped(std::declval< _Iter> ()))> ; 
#line 1189
template< class _Iter, class  = bool> constexpr bool 
#line 1190
_Do_unwrap_when_unverified_v = false; 
#line 1192
template< class _Iter> constexpr bool 
#line 1194
_Do_unwrap_when_unverified_v< _Iter, decltype(static_cast< bool>(_Iter::_Unwrap_when_unverified))>  = (static_cast< bool>(_Iter::_Unwrap_when_unverified)); 
#line 1197
template< class _Iter> constexpr bool 
#line 1198
_Unwrappable_for_unverified_v = _Unwrappable_v< _Iter, void>  && _Do_unwrap_when_unverified_v< _Remove_cvref_t< _Iter> , bool> ; 
#line 1201
template < class _Iter >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped_unverified ( _Iter && _It ) {

    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_for_unverified_v < _Iter > ) {
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {
        return static_cast < _Iter && > ( _It );
    }
}
#line 1213
template< class _Iter> using _Unwrapped_unverified_t = _Remove_cvref_t< decltype(_Get_unwrapped_unverified(std::declval< _Iter> ()))> ; 
#line 1216
struct _Distance_unknown { 
#line 1217
constexpr _Distance_unknown operator-() const noexcept { 
#line 1218
return {}; 
#line 1219
} 
#line 1220
}; 
#line 1222
template< class _Diff> constexpr _Diff 
#line 1223
_Max_possible_v{((static_cast< _Make_unsigned_like_t< _Diff> >(-1)) >> 1)}; 
#line 1225
template< class _Diff> constexpr _Diff 
#line 1226
_Min_possible_v{((-_Max_possible_v< _Diff> ) - 1)}; 
#line 1228
template< class _Iter, class  = void> constexpr bool 
#line 1229
_Offset_verifiable_v = false; 
#line 1231
template< class _Iter> constexpr bool 
#line 1233
_Offset_verifiable_v< _Iter, void_t< decltype(std::declval< const _Iter &> ()._Verify_offset(_Iter_diff_t< _Iter> {}))> >  = true; 
#line 1236
template< class _Iter> constexpr bool 
#line 1237
_Unwrappable_for_offset_v = _Unwrappable_v< _Iter, void>  && _Offset_verifiable_v< _Remove_cvref_t< _Iter> , void> ; 
#line 1240
template < class _Iter, class _Diff >
[ [ nodiscard ] ] constexpr decltype ( auto ) _Get_unwrapped_n ( _Iter && _It, const _Diff _Off ) {
    if constexpr ( is_pointer_v < decay_t < _Iter >> ) {
        return _It + 0;
    } else if constexpr ( _Unwrappable_for_offset_v < _Iter > && is_integral_v < _Diff > ) {

        using _IDiff = _Iter_diff_t < _Remove_cvref_t < _Iter >>;
        using _CDiff = common_type_t < _Diff, _IDiff >;
        const auto _COff = static_cast < _CDiff > ( _Off );

        do { if ( _COff <= static_cast < _CDiff > ( _Max_possible_v < _IDiff > ) && ( is_unsigned_v < _Diff > || static_cast < _CDiff > ( _Min_possible_v < _IDiff > ) <= _COff ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility", 1252, 0, "%s", "integer overflow" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x74\x65\x67\x65\x72\x20\x6f\x76\x65\x72\x66\x6c\x6f\x77\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x75\x74\x69\x6c\x69" L"\x74\x79", 1252, 0 ); } while ( false ); }; } while ( false );

        ( void ) _COff;

        _It . _Verify_offset ( static_cast < _IDiff > ( _Off ) );
        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else if constexpr ( _Unwrappable_for_unverified_v < _Iter > ) {

        return static_cast < _Iter && > ( _It ) . _Unwrapped ( );
    } else {

        return static_cast < _Iter && > ( _It );
    }
}
#line 1266 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template< class _Iter, class _UIter, class  = void> constexpr bool 
#line 1267
_Wrapped_seekable_v = false; 
#line 1269
template< class _Iter, class _UIter> constexpr bool 
#line 1271
_Wrapped_seekable_v< _Iter, _UIter, void_t< decltype(std::declval< _Iter &> ()._Seek_to(std::declval< _UIter> ()))> >  = true; 
#line 1274
template < class _Iter, class _UIter >
constexpr void _Seek_wrapped ( _Iter & _It, _UIter && _UIt ) {
    if constexpr ( _Wrapped_seekable_v < _Iter, _UIter > ) {
        _It . _Seek_to ( :: std :: forward < _UIter > ( _UIt ) );
    } else {
        _It = :: std :: forward < _UIter > ( _UIt );
    }
}
#line 1335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Checked, class _Iter >
[ [ nodiscard ] ] constexpr auto _Idl_distance ( const _Iter & _First, const _Iter & _Last ) {

    if constexpr ( _Is_ranges_random_iter_v < _Iter > ) {
        return static_cast < _Iter_diff_t < _Checked >> ( _Last - _First );
    } else {
        return _Distance_unknown { };
    }
}
#line 1345
template< class _Elem, bool _Is_enum = is_enum_v< _Elem> > 
#line 1346
struct _Unwrap_enum { 
#line 1347
using type = underlying_type_t< _Elem> ; 
#line 1348
}; 
#line 1350
template< class _Elem> 
#line 1351
struct _Unwrap_enum< _Elem, false>  { 
#line 1352
using type = _Elem; 
#line 1353
}; 
#line 1355
template< class _Elem> using _Unwrap_enum_t = typename _Unwrap_enum< _Elem> ::type; 
#line 1369 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Pr, class _Ty1, class _Ty2,
    enable_if_t < is_same_v < _Remove_cvref_t < _Ty1 >, _Remove_cvref_t < _Ty2 > >, int > = 0 >
constexpr bool _Debug_lt_pred ( _Pr && _Pred, _Ty1 && _Left, _Ty2 && _Right ) noexcept (
    noexcept ( _Pred ( _Left, _Right ) ) && noexcept ( _Pred ( _Right, _Left ) ) ) {

    const auto _Result = static_cast < bool > ( _Pred ( _Left, _Right ) );
    if ( _Result ) {
        do { if ( ! _Pred ( _Right, _Left ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility", 1376, 0, "%s", "invalid comparator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x63\x6f\x6d\x70\x61\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x75\x74\x69\x6c\x69" L"\x74\x79", 1376, 0 ); } while ( false ); }; } while ( false );
    }

    return _Result;
}
#line 1382
template < class _Pr, class _Ty1, class _Ty2,
    enable_if_t < ! is_same_v < _Remove_cvref_t < _Ty1 >, _Remove_cvref_t < _Ty2 > >, int > = 0 >
constexpr bool _Debug_lt_pred ( _Pr && _Pred, _Ty1 && _Left, _Ty2 && _Right ) noexcept ( noexcept ( _Pred ( _Left, _Right ) ) ) {

    return static_cast < bool > ( _Pred ( _Left, _Right ) );
}
#line 1389
template < class _InIt, class _Sentinel, class _Pr >
constexpr void _Debug_order_unchecked ( _InIt _First, _Sentinel _Last, _Pr && _Pred ) {

    if constexpr ( _Is_ranges_fwd_iter_v < _InIt > ) {
        if ( _First != _Last ) {
            for ( auto _Next = _First; ++ _Next != _Last; _First = _Next ) {
                do { if ( ! static_cast < bool > ( _Pred ( * _Next, * _First ) ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility", 1395, 0, "%s", "sequence not ordered" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x65\x71\x75\x65\x6e\x63\x65\x20\x6e\x6f\x74\x20\x6f\x72\x64\x65\x72\x65\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x75\x74\x69\x6c\x69" L"\x74\x79", 1395, 0 ); } while ( false ); }; } while ( false );
            }
        }
    }
}
#line 1401
template < class _OtherIt, class _InIt, class _Pr >
constexpr void _Debug_order_set_unchecked ( _InIt _First, _InIt _Last, _Pr && _Pred ) {

    if constexpr ( is_same_v < _Iter_value_t < _OtherIt >, _Iter_value_t < _InIt >> ) {
        _Debug_order_unchecked ( _First, _Last, _Pred );
    }
}
#line 1411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _Diff >
inline void advance ( _InIt & _Where, _Diff _Off ) {
    if constexpr ( _Is_ranges_random_iter_v < _InIt > ) {
        _Where += _Off;
    } else {
        if constexpr ( is_signed_v < _Diff > && ! _Is_ranges_bidi_iter_v < _InIt > ) {
            do { if ( _Off >= 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility", 1417, 0, "%s", "negative advance of non-bidirectional iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6e\x65\x67\x61\x74\x69\x76\x65\x20\x61\x64\x76\x61\x6e\x63\x65\x20\x6f\x66\x20\x6e\x6f\x6e\x2d\x62\x69\x64\x69\x72\x65\x63" L"\x74\x69\x6f\x6e\x61\x6c\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x75\x74\x69\x6c\x69" L"\x74\x79", 1417, 0 ); } while ( false ); }; } while ( false );
        }

        decltype ( auto ) _UWhere = _Get_unwrapped_n ( :: std :: move ( _Where ), _Off );
        constexpr bool _Need_rewrap = ! is_reference_v < decltype ( _Get_unwrapped_n ( :: std :: move ( _Where ), _Off ) ) >;

        if constexpr ( is_signed_v < _Diff > && _Is_ranges_bidi_iter_v < _InIt > ) {
            for (; _Off < 0; ++ _Off ) {
                -- _UWhere;
            }
        }

        for (; 0 < _Off; -- _Off ) {
            ++ _UWhere;
        }

        if constexpr ( _Need_rewrap ) {
            _Seek_wrapped ( _Where, :: std :: move ( _UWhere ) );
        }
    }
}
#line 1439
template < class _InIt >
[ [ nodiscard ] ] inline _Iter_diff_t < _InIt > distance ( _InIt _First, _InIt _Last ) {
    if constexpr ( _Is_ranges_random_iter_v < _InIt > ) {
        return _Last - _First;
    } else {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        _Iter_diff_t < _InIt > _Off = 0;
        for (; _UFirst != _ULast; ++ _UFirst ) {
            ++ _Off;
        }

        return _Off;
    }
}
#line 1456
template < class _InIt >
constexpr _InIt _Next_iter ( _InIt _First ) {
    return ++ _First;
}
#line 1461
template < class _InIt >
[ [ nodiscard ] ] inline _InIt next ( _InIt _First, _Iter_diff_t < _InIt > _Off = 1 ) {
    static_assert ( _Is_ranges_input_iter_v < _InIt >, "next requires input iterator" );

    :: std :: advance ( _First, _Off );
    return _First;
}
#line 1469
template < class _BidIt >
constexpr _BidIt _Prev_iter ( _BidIt _First ) {
    return -- _First;
}
#line 1474
template < class _BidIt >
[ [ nodiscard ] ] inline _BidIt prev ( _BidIt _First, _Iter_diff_t < _BidIt > _Off = 1 ) {
    static_assert ( _Is_ranges_bidi_iter_v < _BidIt >, "prev requires bidirectional iterator" );

    :: std :: advance ( _First, - _Off );
    return _First;
}
#line 1482
template< class _Iter, class _Pointer, bool  = is_pointer_v< _Remove_cvref_t< _Iter> > > constexpr bool 
#line 1483
_Has_nothrow_operator_arrow = _Is_nothrow_convertible_v< _Iter, _Pointer, is_convertible_v< _Iter, _Pointer> , is_void_v< _Pointer> > ; 
#line 1485
template< class _Iter, class _Pointer> constexpr bool 
#line 1486
_Has_nothrow_operator_arrow< _Iter, _Pointer, false>  = noexcept(_Fake_copy_init< _Pointer> (std::declval< _Iter> ().operator->())); 
#line 1489
template < class _BidIt >
class reverse_iterator {
public :
    using iterator_type = _BidIt;







    using iterator_category = _Iter_cat_t < _BidIt >;

    using value_type = _Iter_value_t < _BidIt >;
    using difference_type = _Iter_diff_t < _BidIt >;
    using pointer = typename iterator_traits < _BidIt > :: pointer;
    using reference = _Iter_ref_t < _BidIt >;

    template < class >
    friend class reverse_iterator;

    inline reverse_iterator ( ) = default;

    inline explicit reverse_iterator ( _BidIt _Right ) noexcept (
        is_nothrow_move_constructible_v < _BidIt > )
        : current ( :: std :: move ( _Right ) ) { }


    template < class _Other >



    inline reverse_iterator ( const reverse_iterator < _Other > & _Right ) noexcept (
        is_nothrow_constructible_v < _BidIt, const _Other & > )
        : current ( _Right . current ) { }

    template < class _Other >




    inline reverse_iterator & operator = ( const reverse_iterator < _Other > & _Right ) noexcept (
        is_nothrow_assignable_v < _BidIt &, const _Other & > ) {
        current = _Right . current;
        return * this;
    }


    [ [ nodiscard ] ] inline _BidIt base ( ) const noexcept ( is_nothrow_copy_constructible_v < _BidIt > ) {
        return current;
    }

    [ [ nodiscard ] ] inline reference operator * ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _BidIt > && noexcept ( * -- ( :: std :: declval < _BidIt & > ( ) ) ) ) {
        _BidIt _Tmp = current;
        return * -- _Tmp;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _BidIt > && noexcept ( -- ( :: std :: declval < _BidIt & > ( ) ) )
                 && _Has_nothrow_operator_arrow < _BidIt &, pointer > )



    {
        _BidIt _Tmp = current;
        -- _Tmp;
        if constexpr ( is_pointer_v < _BidIt > ) {
            return _Tmp;
        } else {
            return _Tmp . operator -> ( );
        }
    }

    inline reverse_iterator & operator ++ ( ) noexcept ( noexcept ( -- current ) ) {
        -- current;
        return * this;
    }

    inline reverse_iterator operator ++ ( int ) noexcept (
        is_nothrow_copy_constructible_v < _BidIt > && noexcept ( -- current ) ) {
        reverse_iterator _Tmp = * this;
        -- current;
        return _Tmp;
    }

    inline reverse_iterator & operator -- ( ) noexcept ( noexcept ( ++ current ) ) {
        ++ current;
        return * this;
    }

    inline reverse_iterator operator -- ( int ) noexcept (
        is_nothrow_copy_constructible_v < _BidIt > && noexcept ( ++ current ) ) {
        reverse_iterator _Tmp = * this;
        ++ current;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reverse_iterator operator + ( const difference_type _Off ) const
        noexcept ( noexcept ( reverse_iterator ( current - _Off ) ) ) {
        return reverse_iterator ( current - _Off );
    }

    inline reverse_iterator & operator += ( const difference_type _Off ) noexcept (
        noexcept ( current -= _Off ) ) {
        current -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reverse_iterator operator - ( const difference_type _Off ) const
        noexcept ( noexcept ( reverse_iterator ( current + _Off ) ) ) {
        return reverse_iterator ( current + _Off );
    }

    inline reverse_iterator & operator -= ( const difference_type _Off ) noexcept (
        noexcept ( current += _Off ) ) {
        current += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const
        noexcept ( noexcept ( _Fake_copy_init < reference > ( current [ _Off ] ) ) ) {
        return current [ static_cast < difference_type > ( - _Off - 1 ) ];
    }





















    using _Prevent_inheriting_unwrap = reverse_iterator;

    template < class _BidIt2, enable_if_t < _Range_verifiable_v < _BidIt, _BidIt2 >, int > = 0 >
    friend constexpr void _Verify_range (
        const reverse_iterator & _First, const reverse_iterator < _BidIt2 > & _Last ) noexcept {
        _Verify_range ( _Last . _Get_current ( ), _First . current );
    }

    template < class _BidIt2 = _BidIt, enable_if_t < _Offset_verifiable_v < _BidIt2 >, int > = 0 >
    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        do { if ( _Off != _Min_possible_v < difference_type > ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility", 1644, 0, "%s", "integer overflow" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x74\x65\x67\x65\x72\x20\x6f\x76\x65\x72\x66\x6c\x6f\x77\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x75\x74\x69\x6c\x69" L"\x74\x79", 1644, 0 ); } while ( false ); }; } while ( false );
        current . _Verify_offset ( - _Off );
    }

    template < class _BidIt2 = _BidIt, enable_if_t < _Unwrappable_v < const _BidIt2 & >, int > = 0 >
    [ [ nodiscard ] ] constexpr reverse_iterator < _Unwrapped_t < const _BidIt2 & >> _Unwrapped ( ) const & noexcept (
        noexcept ( static_cast < reverse_iterator < _Unwrapped_t < const _BidIt2 & >> > ( current . _Unwrapped ( ) ) ) ) {
        return static_cast < reverse_iterator < _Unwrapped_t < const _BidIt2 & >> > ( current . _Unwrapped ( ) );
    }
    template < class _BidIt2 = _BidIt, enable_if_t < _Unwrappable_v < _BidIt2 >, int > = 0 >
    [ [ nodiscard ] ] constexpr reverse_iterator < _Unwrapped_t < _BidIt2 >> _Unwrapped ( ) && noexcept (
        noexcept ( static_cast < reverse_iterator < _Unwrapped_t < _BidIt2 >> > ( :: std :: move ( current ) . _Unwrapped ( ) ) ) ) {
        return static_cast < reverse_iterator < _Unwrapped_t < _BidIt2 >> > ( :: std :: move ( current ) . _Unwrapped ( ) );
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < _BidIt >;

    template < class _Src, enable_if_t < _Wrapped_seekable_v < _BidIt, const _Src & >, int > = 0 >
    constexpr void _Seek_to ( const reverse_iterator < _Src > & _It ) noexcept ( noexcept ( current . _Seek_to ( _It . current ) ) ) {
        current . _Seek_to ( _It . current );
    }

    [ [ nodiscard ] ] constexpr const _BidIt & _Get_current ( ) const noexcept {
        return current;
    }

protected :
    _BidIt current { };
};
#line 1674 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator == ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) == _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) == _Right . _Get_current ( );
}
#line 1689
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator != ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) != _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) != _Right . _Get_current ( );
}
#line 1704
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator < ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) > _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) > _Right . _Get_current ( );
}
#line 1719
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator > ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) < _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) < _Right . _Get_current ( );
}
#line 1734
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator <= ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) >= _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) >= _Right . _Get_current ( );
}
#line 1749
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline bool
    operator >= ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . _Get_current ( ) <= _Right . _Get_current ( ) ) ) )







{
    return _Left . _Get_current ( ) <= _Right . _Get_current ( );
}
#line 1773
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline auto
    operator - ( const reverse_iterator < _BidIt1 > & _Left, const reverse_iterator < _BidIt2 > & _Right ) noexcept (
        noexcept ( _Right . _Get_current ( ) - _Left . _Get_current ( ) ) )
    -> decltype ( _Right . _Get_current ( ) - _Left . _Get_current ( ) ) {
    return _Right . _Get_current ( ) - _Left . _Get_current ( );
}
#line 1781
template < class _BidIt >
[ [ nodiscard ] ] inline reverse_iterator < _BidIt > operator + ( typename reverse_iterator < _BidIt > :: difference_type _Off,
    const reverse_iterator < _BidIt > & _Right ) noexcept ( noexcept ( _Right + _Off ) ) {
    return _Right + _Off;
}
#line 1787
template < class _BidIt >
[ [ nodiscard ] ] inline reverse_iterator < _BidIt > make_reverse_iterator ( _BidIt _Iter ) noexcept (
    is_nothrow_move_constructible_v < _BidIt > ) {
    return reverse_iterator < _BidIt > ( :: std :: move ( _Iter ) );
}
#line 1799
template < class _Container >
[ [ nodiscard ] ] inline auto begin ( _Container & _Cont ) noexcept ( noexcept ( _Cont . begin ( ) ) )
    -> decltype ( _Cont . begin ( ) ) {
    return _Cont . begin ( );
}
#line 1805
template < class _Container >
[ [ nodiscard ] ] inline auto begin ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . begin ( ) ) )
    -> decltype ( _Cont . begin ( ) ) {
    return _Cont . begin ( );
}
#line 1811
template < class _Container >
[ [ nodiscard ] ] inline auto end ( _Container & _Cont ) noexcept ( noexcept ( _Cont . end ( ) ) )
    -> decltype ( _Cont . end ( ) ) {
    return _Cont . end ( );
}
#line 1817
template < class _Container >
[ [ nodiscard ] ] inline auto end ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . end ( ) ) )
    -> decltype ( _Cont . end ( ) ) {
    return _Cont . end ( );
}
#line 1823
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * begin ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array;
}
#line 1828
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * end ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array + _Size;
}
#line 1833
template < class _Container >
[ [ nodiscard ] ] constexpr auto cbegin ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: begin ( _Cont ) ) )
    -> decltype ( :: std :: begin ( _Cont ) ) {
    return :: std :: begin ( _Cont );
}
#line 1839
template < class _Container >
[ [ nodiscard ] ] constexpr auto cend ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: end ( _Cont ) ) )
    -> decltype ( :: std :: end ( _Cont ) ) {
    return :: std :: end ( _Cont );
}
#line 1845
template < class _Container >
[ [ nodiscard ] ] inline auto rbegin ( _Container & _Cont ) noexcept ( noexcept ( _Cont . rbegin ( ) ) )
    -> decltype ( _Cont . rbegin ( ) ) {
    return _Cont . rbegin ( );
}
#line 1851
template < class _Container >
[ [ nodiscard ] ] inline auto rbegin ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . rbegin ( ) ) )
    -> decltype ( _Cont . rbegin ( ) ) {
    return _Cont . rbegin ( );
}
#line 1857
template < class _Container >
[ [ nodiscard ] ] inline auto rend ( _Container & _Cont ) noexcept ( noexcept ( _Cont . rend ( ) ) )
    -> decltype ( _Cont . rend ( ) ) {
    return _Cont . rend ( );
}
#line 1863
template < class _Container >
[ [ nodiscard ] ] inline auto rend ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . rend ( ) ) )
    -> decltype ( _Cont . rend ( ) ) {
    return _Cont . rend ( );
}
#line 1869
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] inline reverse_iterator < _Ty * > rbegin ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return reverse_iterator < _Ty * > ( _Array + _Size );
}
#line 1874
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] inline reverse_iterator < _Ty * > rend ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return reverse_iterator < _Ty * > ( _Array );
}
#line 1879
template < class _Elem >
[ [ nodiscard ] ] inline reverse_iterator < const _Elem * > rbegin ( initializer_list < _Elem > _Ilist ) noexcept
 {
    return reverse_iterator < const _Elem * > ( _Ilist . end ( ) );
}
#line 1885
template < class _Elem >
[ [ nodiscard ] ] inline reverse_iterator < const _Elem * > rend ( initializer_list < _Elem > _Ilist ) noexcept
 {
    return reverse_iterator < const _Elem * > ( _Ilist . begin ( ) );
}
#line 1891
template < class _Container >
[ [ nodiscard ] ] inline auto crbegin ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: rbegin ( _Cont ) ) )
    -> decltype ( :: std :: rbegin ( _Cont ) ) {
    return :: std :: rbegin ( _Cont );
}
#line 1897
template < class _Container >
[ [ nodiscard ] ] inline auto crend ( const _Container & _Cont ) noexcept ( noexcept ( :: std :: rend ( _Cont ) ) )
    -> decltype ( :: std :: rend ( _Cont ) ) {
    return :: std :: rend ( _Cont );
}
#line 1903
template < class _Container >
[ [ nodiscard ] ] constexpr auto size ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . size ( ) ) )
    -> decltype ( _Cont . size ( ) ) {
    return _Cont . size ( );
}
#line 1909
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr size_t size ( const _Ty ( & ) [ _Size ] ) noexcept {
    return _Size;
}
#line 1929 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Container >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr auto empty ( const _Container & _Cont ) noexcept (
    noexcept ( _Cont . empty ( ) ) )
    -> decltype ( _Cont . empty ( ) ) {
    return _Cont . empty ( );
}
#line 1936
template < class _Ty, size_t _Size >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr bool empty ( const _Ty ( & ) [ _Size ] ) noexcept {
    return false;
}
#line 1941
template < class _Elem >
[ [ nodiscard ( "This function returns a bool indicating whether the container or container-like object is empty and has no other effects. It is " "not useful to call this function and discard the return value." ) ] ] constexpr bool empty ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . size ( ) == 0;
}
#line 1946
template < class _Container >
[ [ nodiscard ] ] constexpr auto data ( _Container & _Cont ) noexcept ( noexcept ( _Cont . data ( ) ) )
    -> decltype ( _Cont . data ( ) ) {
    return _Cont . data ( );
}
#line 1952
template < class _Container >
[ [ nodiscard ] ] constexpr auto data ( const _Container & _Cont ) noexcept ( noexcept ( _Cont . data ( ) ) )
    -> decltype ( _Cont . data ( ) ) {
    return _Cont . data ( );
}
#line 1958
template < class _Ty, size_t _Size >
[ [ nodiscard ] ] constexpr _Ty * data ( _Ty ( & _Array ) [ _Size ] ) noexcept {
    return _Array;
}
#line 1963
template < class _Elem >
[ [ nodiscard ] ] constexpr const _Elem * data ( initializer_list < _Elem > _Ilist ) noexcept {
    return _Ilist . begin ( );
}
#line 3975
struct _Container_proxy; 
#line 3976
struct _Iterator_base12; 
#line 3978
struct _Default_sentinel { }; 
#line 3996
template< class _Iter> 
#line 3997
struct _Move_iterator_category { 
#line 3998
using iterator_category = _Iter_cat_t< _Iter> ; 
#line 3999
}; 
#line 4002 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Iter >
class move_iterator : public _Move_iterator_category < _Iter > {
public :
    using iterator_type = _Iter;
    using value_type = _Iter_value_t < _Iter >;
    using difference_type = _Iter_diff_t < _Iter >;
    using pointer = _Iter;




















    using reference =
        conditional_t < is_reference_v < _Iter_ref_t < _Iter >>, remove_reference_t < _Iter_ref_t < _Iter >> &&, _Iter_ref_t < _Iter >>;


    inline move_iterator ( ) = default;

    inline explicit move_iterator ( _Iter _Right ) noexcept ( is_nothrow_move_constructible_v < _Iter > )
        : _Current ( :: std :: move ( _Right ) ) { }


    template < class _Other >



    inline move_iterator ( const move_iterator < _Other > & _Right ) noexcept (
        is_nothrow_constructible_v < _Iter, const _Other & > )
        : _Current ( _Right . base ( ) ) { }

    template < class _Other >




    inline move_iterator & operator = ( const move_iterator < _Other > & _Right ) noexcept (
        is_nothrow_assignable_v < _Iter &, const _Other & > ) {
        _Current = _Right . base ( );
        return * this;
    }










    [ [ nodiscard ] ] inline iterator_type base ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _Iter > ) {
        return _Current;
    }


    [ [ nodiscard ] ] inline reference operator * ( ) const





        noexcept ( noexcept ( static_cast < reference > ( * _Current ) ) ) {
        return static_cast < reference > ( * _Current );
    }


     [ [ nodiscard ] ] inline pointer operator -> ( ) const
        noexcept ( is_nothrow_copy_constructible_v < _Iter > ) {
        return _Current;
    }

    inline move_iterator & operator ++ ( ) noexcept ( noexcept ( ++ _Current ) ) {
        ++ _Current;
        return * this;
    }

    inline auto operator ++ ( int ) noexcept (
        is_nothrow_copy_constructible_v < _Iter > && noexcept ( ++ _Current ) ) {



            move_iterator _Tmp = * this;
            ++ _Current;
            return _Tmp;





    }

    inline move_iterator & operator -- ( ) noexcept ( noexcept ( -- _Current ) ) {
        -- _Current;
        return * this;
    }

    inline move_iterator operator -- ( int ) noexcept (
        is_nothrow_copy_constructible_v < _Iter > && noexcept ( -- _Current ) ) {
        move_iterator _Tmp = * this;
        -- _Current;
        return _Tmp;
    }

    template < class _Iter2 = _Iter >
    [ [ nodiscard ] ] auto operator == ( _Default_sentinel _Sentinel ) const noexcept
        -> decltype ( :: std :: declval < const _Iter2 & > ( ) == _Sentinel ) {
        return _Current == _Sentinel;
    }

    template < class _Iter2 = _Iter >
    [ [ nodiscard ] ] auto operator != ( _Default_sentinel _Sentinel ) const noexcept
        -> decltype ( :: std :: declval < const _Iter2 & > ( ) != _Sentinel ) {
        return _Current != _Sentinel;
    }

    [ [ nodiscard ] ] inline move_iterator operator + ( const difference_type _Off ) const
        noexcept ( noexcept ( move_iterator ( _Current + _Off ) ) ) {
        return move_iterator ( _Current + _Off );
    }

    inline move_iterator & operator += ( const difference_type _Off ) noexcept (
        noexcept ( _Current += _Off ) ) {
        _Current += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline move_iterator operator - ( const difference_type _Off ) const
        noexcept ( noexcept ( move_iterator ( _Current - _Off ) ) ) {
        return move_iterator ( _Current - _Off );
    }

    inline move_iterator & operator -= ( const difference_type _Off ) noexcept (
        noexcept ( _Current -= _Off ) ) {
        _Current -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const




        noexcept ( noexcept ( :: std :: move ( _Current [ _Off ] ) ) ) {
        return :: std :: move ( _Current [ _Off ] );

    }

































    template < class _Iter2, enable_if_t < _Range_verifiable_v < _Iter, _Iter2 >, int > = 0 >
    friend constexpr void _Verify_range ( const move_iterator & _First, const move_iterator < _Iter2 > & _Last ) noexcept {
        _Verify_range ( _First . _Current, _Last . _Get_current ( ) );
    }







    using _Prevent_inheriting_unwrap = move_iterator;

    template < class _Iter2 = iterator_type, enable_if_t < _Offset_verifiable_v < _Iter2 >, int > = 0 >
    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        _Current . _Verify_offset ( _Off );
    }

    template < class _Iter2 = iterator_type, enable_if_t < _Unwrappable_v < const _Iter2 & >, int > = 0 >
    [ [ nodiscard ] ] constexpr move_iterator < _Unwrapped_t < const _Iter2 & >> _Unwrapped ( ) const & noexcept (
        noexcept ( static_cast < move_iterator < _Unwrapped_t < const _Iter2 & >> > ( _Current . _Unwrapped ( ) ) ) ) {
        return static_cast < move_iterator < _Unwrapped_t < const _Iter2 & >> > ( _Current . _Unwrapped ( ) );
    }
    template < class _Iter2 = iterator_type, enable_if_t < _Unwrappable_v < _Iter2 >, int > = 0 >
    [ [ nodiscard ] ] constexpr move_iterator < _Unwrapped_t < _Iter2 >> _Unwrapped ( ) && noexcept (
        noexcept ( static_cast < move_iterator < _Unwrapped_t < _Iter2 >> > ( :: std :: move ( _Current ) . _Unwrapped ( ) ) ) ) {
        return static_cast < move_iterator < _Unwrapped_t < _Iter2 >> > ( :: std :: move ( _Current ) . _Unwrapped ( ) );
    }

    static constexpr bool _Unwrap_when_unverified = _Do_unwrap_when_unverified_v < iterator_type >;

    template < class _Src, enable_if_t < _Wrapped_seekable_v < iterator_type, const _Src & >, int > = 0 >
    constexpr void _Seek_to ( const move_iterator < _Src > & _It ) noexcept ( noexcept ( _Current . _Seek_to ( _It . _Get_current ( ) ) ) ) {
        _Current . _Seek_to ( _It . _Get_current ( ) );
    }
    template < class _Src, enable_if_t < _Wrapped_seekable_v < iterator_type, _Src >, int > = 0 >
    constexpr void _Seek_to ( move_iterator < _Src > && _It ) noexcept (
        noexcept ( _Current . _Seek_to ( :: std :: move ( _It ) . _Get_current ( ) ) ) ) {
        _Current . _Seek_to ( :: std :: move ( _It ) . _Get_current ( ) );
    }

    [ [ nodiscard ] ] constexpr const iterator_type & _Get_current ( ) const & noexcept {
        return _Current;
    }
    [ [ nodiscard ] ] constexpr iterator_type && _Get_current ( ) && noexcept {
        return :: std :: move ( _Current );
    }

private :
    iterator_type _Current { };
};
#line 4249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool
    operator == ( const move_iterator < _Iter1 > & _Left, const move_iterator < _Iter2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . base ( ) == _Right . base ( ) ) ) )







{
    return _Left . base ( ) == _Right . base ( );
}
#line 4265
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator != ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left == _Right ) ) {
    return ! ( _Left == _Right );
}
#line 4272 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool
    operator < ( const move_iterator < _Iter1 > & _Left, const move_iterator < _Iter2 > & _Right ) noexcept (
        noexcept ( _Fake_copy_init < bool > ( _Left . base ( ) < _Right . base ( ) ) ) )







{
    return _Left . base ( ) < _Right . base ( );
}
#line 4287
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator > ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Right < _Left ) )



{
    return _Right < _Left;
}
#line 4297
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator <= ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Right < _Left ) )



{
    return ! ( _Right < _Left );
}
#line 4307
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline bool operator >= ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left < _Right ) )



{
    return ! ( _Left < _Right );
}
#line 4325
template < class _Iter1, class _Iter2 >
[ [ nodiscard ] ] inline auto operator - ( const move_iterator < _Iter1 > & _Left,
    const move_iterator < _Iter2 > & _Right ) noexcept ( noexcept ( _Left . base ( ) - _Right . base ( ) ) )
    -> decltype ( _Left . base ( ) - _Right . base ( ) ) {
    return _Left . base ( ) - _Right . base ( );
}
#line 4332
template < class _Iter >
[ [ nodiscard ] ] inline move_iterator < _Iter >
    operator + ( typename move_iterator < _Iter > :: difference_type _Off, const move_iterator < _Iter > & _Right ) noexcept (
        noexcept ( move_iterator < _Iter > ( _Right . base ( ) + _Off ) ) )







{
    return move_iterator < _Iter > ( _Right . base ( ) + _Off );
}
#line 4347
template < class _Iter >
[ [ nodiscard ] ] inline move_iterator < _Iter > make_move_iterator ( _Iter _It ) noexcept (
    is_nothrow_move_constructible_v < _Iter > ) {
    return move_iterator < _Iter > ( :: std :: move ( _It ) );
}
#line 4387
template< class _Iter> constexpr bool 
#line 4388
_Iterator_is_contiguous = is_pointer_v< _Iter> ; 
#line 4390
template < class _Iter >
[ [ nodiscard ] ] constexpr auto _To_address ( const _Iter & _Val ) noexcept {
    ;
    return _Val;
}
#line 4397 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Iter >
[ [ nodiscard ] ] constexpr auto _To_address ( const move_iterator < _Iter > & _Val ) noexcept {
    return _To_address ( _Val . base ( ) );
}
#line 4404
template< class _Iter1, class _Iter2> constexpr bool 
#line 4405
_Iterators_are_contiguous = _Iterator_is_contiguous< _Iter1>  && _Iterator_is_contiguous< _Iter2> ; 
#line 4408
template< class _Iter> constexpr bool 
#line 4409
_Iterator_is_volatile = is_volatile_v< remove_reference_t< _Iter_ref_t< _Iter> > > ; 
#line 4411
template< class _Source, class _Dest> constexpr bool 
#line 4412
_Is_pointer_address_convertible = (is_void_v< _Source>  || is_void_v< _Dest> ) || is_same_v< remove_cv_t< _Source> , remove_cv_t< _Dest> > ; 
#line 4421
template< class _Source, class _Dest, class _SourceRef, class _DestRef> 
#line 4422
struct _Trivial_cat { 
#line 4423
using _USource = _Unwrap_enum_t< _Source> ; 
#line 4424
using _UDest = _Unwrap_enum_t< _Dest> ; 
#line 4426
static constexpr bool _Same_size_and_compatible = (((sizeof(_Source) == sizeof(_Dest)) && (is_same_v< bool, _USource>  >= is_same_v< bool, _UDest> )) && ((is_same_v< _USource, _UDest>  || (is_integral_v< _USource>  && is_integral_v< _UDest> )) || (is_floating_point_v< _USource>  && is_floating_point_v< _UDest> ))); 
#line 4435
static constexpr bool _Bitcopy_constructible = (_Same_size_and_compatible && is_trivially_constructible_v< _Dest, _SourceRef> ); 
#line 4438
static constexpr bool _Bitcopy_assignable = (_Same_size_and_compatible && is_trivially_assignable_v< _DestRef, _SourceRef> ); 
#line 4440
}; 
#line 4442
template< class _Source, class _Dest, class _SourceRef, class _DestRef> 
#line 4443
struct _Trivial_cat< _Source *, _Dest *, _SourceRef, _DestRef>  { 
#line 4444
static constexpr bool _Bitcopy_constructible = (_Is_pointer_address_convertible< _Source, _Dest>  && is_trivially_constructible_v< _Dest *, _SourceRef> ); 
#line 4447
static constexpr bool _Bitcopy_assignable = (_Is_pointer_address_convertible< _Source, _Dest>  && is_trivially_assignable_v< _DestRef, _SourceRef> ); 
#line 4449
}; 
#line 4451
struct _False_trivial_cat { 
#line 4452
static constexpr bool _Bitcopy_constructible = false; 
#line 4453
static constexpr bool _Bitcopy_assignable = false; 
#line 4454
}; 
#line 4456
template< class _SourceIt, class _DestIt, bool 
#line 4457
_Are_contiguous = (_Iterators_are_contiguous< _SourceIt, _DestIt>  && (!_Iterator_is_volatile< _SourceIt> )) && (!_Iterator_is_volatile< _DestIt> )> 
#line 4459
struct _Iter_move_cat : public _Trivial_cat< _Iter_value_t< _SourceIt> , _Iter_value_t< _DestIt> , remove_reference_t< _Iter_ref_t< _SourceIt> >  &&, _Iter_ref_t< _DestIt> >  { 
#line 4460
}; 
#line 4462
template< class _SourceIt, class _DestIt> 
#line 4463
struct _Iter_move_cat< _SourceIt, _DestIt, false>  : public _False_trivial_cat { }; 
#line 4465
template< class _SourceIt, class _DestIt> 
#line 4466
struct _Iter_move_cat< move_iterator< _SourceIt> , _DestIt, false>  : public std::_Iter_move_cat< _SourceIt, _DestIt>  { }; 
#line 4468
template< class _SourceIt, class _DestIt, bool 
#line 4469
_Are_contiguous = (_Iterators_are_contiguous< _SourceIt, _DestIt>  && (!_Iterator_is_volatile< _SourceIt> )) && (!_Iterator_is_volatile< _DestIt> )> 
#line 4471
struct _Iter_copy_cat : public _Trivial_cat< _Iter_value_t< _SourceIt> , _Iter_value_t< _DestIt> , _Iter_ref_t< _SourceIt> , _Iter_ref_t< _DestIt> >  { 
#line 4472
}; 
#line 4474
template< class _SourceIt, class _DestIt> 
#line 4475
struct _Iter_copy_cat< _SourceIt, _DestIt, false>  : public _False_trivial_cat { }; 
#line 4477
template< class _SourceIt, class _DestIt> 
#line 4478
struct _Iter_copy_cat< move_iterator< _SourceIt> , _DestIt, false>  : public _Iter_move_cat< _SourceIt, _DestIt>  { }; 
#line 4480
template < class _Iter1, class _Sent1, class _Iter2 >
inline void _Verify_ranges_do_not_overlap ( const _Iter1 & _First1, const _Sent1 & _Last1, const _Iter2 & _First2 ) {

    if constexpr ( _Iterators_are_contiguous < _Iter1, _Iter2 >



    ) {






        const auto _Offset = _Last1 - _First1;
        const auto _Ptr1Offset = _Offset * sizeof ( * _To_address ( _First1 ) );
        const auto _Ptr2Offset = _Offset * sizeof ( * _To_address ( _First2 ) );


        const auto _PtrFirst1 = reinterpret_cast < const volatile char * > ( _To_address ( _First1 ) );
        const auto _PtrLast1 = _PtrFirst1 + _Ptr1Offset;
        const auto _PtrFirst2 = reinterpret_cast < const volatile char * > ( _To_address ( _First2 ) );
        const auto _PtrLast2 = _PtrFirst2 + _Ptr2Offset;
        do { if ( _PtrLast1 <= _PtrFirst2 || _PtrLast2 <= _PtrFirst1 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility", 4503, 0, "%s", "ranges should not overlap each other" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x72\x61\x6e\x67\x65\x73\x20\x73\x68\x6f\x75\x6c\x64\x20\x6e\x6f\x74\x20\x6f\x76\x65\x72\x6c\x61\x70\x20\x65\x61\x63\x68\x20" L"\x6f\x74\x68\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x75\x74\x69\x6c\x69" L"\x74\x79", 4503, 0 ); } while ( false ); }; } while ( false );
    }





}
#line 4512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _CtgIt, class _OutCtgIt >
_OutCtgIt _Copy_memmove ( _CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest ) {
    auto _FirstPtr = _To_address ( _First );
    auto _LastPtr = _To_address ( _Last );
    auto _DestPtr = _To_address ( _Dest );
    const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _FirstPtr ) );
    const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _LastPtr ) );
    char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < const volatile char * > ( _DestPtr ) );
    const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
    :: memmove ( _Dest_ch, _First_ch, _Count );
    if constexpr ( is_pointer_v < _OutCtgIt > ) {
        return reinterpret_cast < _OutCtgIt > ( _Dest_ch + _Count );
    } else {
        return _Dest + ( _LastPtr - _FirstPtr );
    }
}
#line 4529
template < class _CtgIt, class _OutCtgIt >
_OutCtgIt _Copy_memmove_n ( _CtgIt _First, const size_t _Count, _OutCtgIt _Dest ) {
    const auto _Result = _Copy_memmove ( _First, _First + _Count, _Dest );
    if constexpr ( is_pointer_v < _OutCtgIt > ) {
        return _Result;
    } else {
        return _Dest + static_cast < _Iter_diff_t < _OutCtgIt >> ( _Count );
    }
}
#line 4539
template< class _It, bool _RequiresMutable = false> constexpr bool 
#line 4540
_Is_vb_iterator = false; 
#line 4542
template < class _InIt, class _SizeTy, class _OutIt >
inline _OutIt _Copy_n_unchecked4 ( _InIt _First, _SizeTy _Count, _OutIt _Dest ) {






    if constexpr ( _Iter_copy_cat < _InIt, _OutIt > :: _Bitcopy_assignable ) {



        {
            return _Copy_memmove_n ( _First, static_cast < size_t > ( _Count ), _Dest );
        }
    }

    for (; _Count != 0; ++ _Dest, ( void ) ++ _First, -- _Count ) {
        * _Dest = * _First;
    }

    return _Dest;
}
#line 4566 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template< class _InIt, class _Sent, class _OutIt> using _Sent_copy_cat = conditional_t< is_same_v< _Sent, _InIt> , _Iter_copy_cat< _InIt, _OutIt> , _False_trivial_cat> ; 
#line 4575 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _Sent, class _OutIt >
inline _OutIt _Copy_unchecked ( _InIt _First, _Sent _Last, _OutIt _Dest ) {


    if constexpr ( _Sent_copy_cat < _InIt, _Sent, _OutIt > :: _Bitcopy_assignable ) {



        {



            {
                return _Copy_memmove ( _First, _Last, _Dest );
            }





        }
    }

    for (; _First != _Last; ++ _Dest, ( void ) ++ _First ) {
        * _Dest = * _First;
    }

    return _Dest;
}
#line 4605 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _OutIt >
inline _OutIt copy ( _InIt _First, _InIt _Last, _OutIt _Dest ) {
    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, :: std :: _Copy_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4772 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _Diff, class _OutIt >
inline _OutIt copy_n ( _InIt _First, _Diff _Count_raw, _OutIt _Dest ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( 0 < _Count ) {
        auto _UFirst = _Get_unwrapped_n ( _First, _Count );
        auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
        if constexpr ( _Iter_copy_cat < decltype ( _UFirst ), decltype ( _UDest ) > :: _Bitcopy_assignable ) {



            {
                _UDest = _Copy_memmove_n ( _UFirst, static_cast < size_t > ( _Count ), _UDest );
                _Seek_wrapped ( _Dest, _UDest );
                return _Dest;
            }
        }

        for (;; ) {
            * _UDest = * _UFirst;
            ++ _UDest;
            -- _Count;
            if ( _Count == 0 ) {

                break;
            }

            ++ _UFirst;
        }

        _Seek_wrapped ( _Dest, _UDest );
    }

    return _Dest;
}
#line 4819 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _CtgIt1, class _CtgIt2 >
_CtgIt2 _Copy_backward_memmove ( _CtgIt1 _First, _CtgIt1 _Last, _CtgIt2 _Dest ) {

    auto _FirstPtr = _To_address ( _First );
    auto _LastPtr = _To_address ( _Last );
    auto _DestPtr = _To_address ( _Dest );
    const char * const _First_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _FirstPtr ) );
    const char * const _Last_ch = const_cast < const char * > ( reinterpret_cast < const volatile char * > ( _LastPtr ) );
    char * const _Dest_ch = const_cast < char * > ( reinterpret_cast < const volatile char * > ( _DestPtr ) );
    const auto _Count = static_cast < size_t > ( _Last_ch - _First_ch );
    auto _Result = :: memmove ( _Dest_ch - _Count, _First_ch, _Count );
    if constexpr ( is_pointer_v < _CtgIt2 > ) {
        return static_cast < _CtgIt2 > ( _Result );
    } else {
        return _Dest - ( _LastPtr - _FirstPtr );
    }
}
#line 4837
template < class _BidIt1, class _BidIt2 >
_BidIt2 _Copy_backward_memmove ( move_iterator < _BidIt1 > _First, move_iterator < _BidIt1 > _Last, _BidIt2 _Dest ) {
    return _Copy_backward_memmove ( _First . base ( ), _Last . base ( ), _Dest );
}
#line 4842
template < class _BidIt1, class _BidIt2 >
[ [ nodiscard ] ] inline _BidIt2 _Copy_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    if constexpr ( _Iter_copy_cat < _BidIt1, _BidIt2 > :: _Bitcopy_assignable ) {



        {
            return _Copy_backward_memmove ( _First, _Last, _Dest );
        }
    }

    while ( _First != _Last ) {
        * -- _Dest = * -- _Last;
    }

    return _Dest;
}
#line 4861 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 copy_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Copy_backward_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4872
template < class _InIt, class _OutIt >
inline _OutIt _Move_unchecked ( _InIt _First, _InIt _Last, _OutIt _Dest ) {


    if constexpr ( _Iter_move_cat < _InIt, _OutIt > :: _Bitcopy_assignable ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }

    for (; _First != _Last; ++ _Dest, ( void ) ++ _First ) {
        * _Dest = :: std :: move ( * _First );
    }

    return _Dest;
}
#line 4892 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _OutIt >
inline _OutIt move ( _InIt _First, _InIt _Last, _OutIt _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, :: std :: _Move_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4914 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 _Move_backward_unchecked ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {


    if constexpr ( _Iter_move_cat < _BidIt1, _BidIt2 > :: _Bitcopy_assignable ) {



        {
            return _Copy_backward_memmove ( _First, _Last, _Dest );
        }
    }

    while ( _First != _Last ) {
        * -- _Dest = :: std :: move ( * -- _Last );
    }

    return _Dest;
}
#line 4934 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _BidIt1, class _BidIt2 >
inline _BidIt2 move_backward ( _BidIt1 _First, _BidIt1 _Last, _BidIt2 _Dest ) {

    _Adl_verify_range ( _First, _Last );
    const auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    const auto _UDest = _Get_unwrapped_n ( _Dest, - _Idl_distance < _BidIt1 > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Move_backward_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 4945
template< class _Ty> 
#line 4946
struct _Is_character : public false_type { }; 
#line 4949
template<> struct _Is_character< char>  : public true_type { }; 
#line 4952
template<> struct _Is_character< signed char>  : public true_type { }; 
#line 4955
template<> struct _Is_character< unsigned char>  : public true_type { }; 
#line 4962
template< class _Ty> 
#line 4963
struct _Is_character_or_bool : public _Is_character< _Ty> ::type { }; 
#line 4966
template<> struct _Is_character_or_bool< bool>  : public true_type { }; 
#line 4968
template< class _Ty> 
#line 4969
struct _Is_character_or_byte_or_bool : public _Is_character_or_bool< _Ty> ::type { }; 
#line 4978
template< class _FwdIt, class _Ty, bool  = _Iterator_is_contiguous< _FwdIt> > constexpr bool 
#line 4979
_Fill_memset_is_safe = conjunction_v< is_scalar< _Ty> , _Is_character_or_byte_or_bool< _Unwrap_enum_t< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , is_assignable< _Iter_ref_t< _FwdIt> , const _Ty &> > ; 
#line 4983
template< class _FwdIt, class _Ty> constexpr bool 
#line 4984
_Fill_memset_is_safe< _FwdIt, _Ty, false>  = false; 
#line 4986
template< class _FwdIt, class _Ty, bool  = _Iterator_is_contiguous< _FwdIt> > constexpr bool 
#line 4987
_Fill_zero_memset_is_safe = conjunction_v< is_scalar< _Ty> , is_scalar< _Iter_value_t< _FwdIt> > , negation< is_member_pointer< _Iter_value_t< _FwdIt> > > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _FwdIt> > > > , is_assignable< _Iter_ref_t< _FwdIt> , const _Ty &> > ; 
#line 4991
template< class _FwdIt, class _Ty> constexpr bool 
#line 4992
_Fill_zero_memset_is_safe< _FwdIt, _Ty, false>  = false; 
#line 4994
template < class _CtgIt, class _Ty >
void _Fill_memset ( _CtgIt _Dest, const _Ty _Val, const size_t _Count ) {

    _Iter_value_t < _CtgIt > _Dest_val = _Val;
    :: memset ( _To_address ( _Dest ), static_cast < unsigned char > ( _Dest_val ), _Count );
}
#line 5001
template < class _CtgIt >
void _Fill_zero_memset ( _CtgIt _Dest, const size_t _Count ) {
    :: memset ( _To_address ( _Dest ), 0, _Count * sizeof ( _Iter_value_t < _CtgIt > ) );
}
#line 5006
template < class _Ty >
[ [ nodiscard ] ] bool _Is_all_bits_zero ( const _Ty & _Val ) {

    ;
    if constexpr ( is_same_v < _Ty, nullptr_t > ) {
        return true;
    } else {
        constexpr _Ty _Zero { };
        return :: memcmp ( & _Val, & _Zero, sizeof ( _Ty ) ) == 0;
    }
}
#line 5018
template < class _FwdIt, class _Ty >
inline void fill ( const _FwdIt _First, const _FwdIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _FwdIt, true > ) {
        _Fill_vbool ( _First, _Last, _Val );
    } else {
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );



        {
            if constexpr ( _Fill_memset_is_safe < decltype ( _UFirst ), _Ty > ) {
                _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _ULast - _UFirst ) );
                return;
            } else if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UFirst ), _Ty > ) {
                if ( _Is_all_bits_zero ( _Val ) ) {
                    _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _ULast - _UFirst ) );
                    return;
                }
            }
        }

        for (; _UFirst != _ULast; ++ _UFirst ) {
            * _UFirst = _Val;
        }
    }
}
#line 5058 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _OutIt, class _Diff, class _Ty >
inline _OutIt fill_n ( _OutIt _Dest, const _Diff _Count_raw, const _Ty & _Val ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( 0 < _Count ) {
        if constexpr ( _Is_vb_iterator < _OutIt, true > ) {
            const auto _Last = _Dest + static_cast < typename _OutIt :: difference_type > ( _Count );
            _Fill_vbool ( _Dest, _Last, _Val );
            return _Last;
        } else {
            auto _UDest = _Get_unwrapped_n ( _Dest, _Count );



            {
                if constexpr ( _Fill_memset_is_safe < decltype ( _UDest ), _Ty > ) {
                    _Fill_memset ( _UDest, _Val, static_cast < size_t > ( _Count ) );
                    _Seek_wrapped ( _Dest, _UDest + _Count );
                    return _Dest;
                } else if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UDest ), _Ty > ) {
                    if ( _Is_all_bits_zero ( _Val ) ) {
                        _Fill_zero_memset ( _UDest, static_cast < size_t > ( _Count ) );
                        _Seek_wrapped ( _Dest, _UDest + _Count );
                        return _Dest;
                    }
                }
            }

            for (; 0 < _Count; -- _Count, ( void ) ++ _UDest ) {
                * _UDest = _Val;
            }

            _Seek_wrapped ( _Dest, _UDest );
        }
    }
    return _Dest;
}
#line 5145 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template< class _Ty1, class _Ty2, class  = void> constexpr bool 
#line 5146
_Can_compare_with_operator_equal = false; 
#line 5148
template< class _Ty1, class _Ty2> constexpr bool 
#line 5150
_Can_compare_with_operator_equal< _Ty1, _Ty2, void_t< decltype(std::declval< _Ty1 &> () == std::declval< _Ty2 &> ())> >  = true; 
#line 5153
template< class _Ty1, class _Ty2> constexpr bool 
#line 5154
_Is_pointer_address_comparable = _Can_compare_with_operator_equal< _Ty1 *, _Ty2 *, void>  && (_Is_pointer_address_convertible< _Ty1, _Ty2>  || _Is_pointer_address_convertible< _Ty2, _Ty1> ); 
#line 5165
#pragma warning(push)
#pragma warning(disable : 4806)
template< class _Elem1, class _Elem2, bool 
#line 5168
 = ((sizeof(_Elem1) == sizeof(_Elem2)) && is_integral_v< _Elem1> ) && is_integral_v< _Elem2> > constexpr bool 
#line 5169
_Can_memcmp_elements = (is_same_v< _Elem1, bool>  || is_same_v< _Elem2, bool> ) || ((static_cast< _Elem1>(-1)) == (static_cast< _Elem2>(-1))); 
#line 5171
#pragma warning(pop)
#line 5183
template< class _Ty1, class _Ty2> constexpr bool 
#line 5184
_Can_memcmp_elements< _Ty1 *, _Ty2 *, false>  = _Is_pointer_address_comparable< _Ty1, _Ty2> ; 
#line 5186
template< class _Elem1, class _Elem2> constexpr bool 
#line 5187
_Can_memcmp_elements< _Elem1, _Elem2, false>  = false; 
#line 5192
template< class _Elem1, class _Elem2, class _Pr> constexpr bool 
#line 5193
_Can_memcmp_elements_with_pred = false; 
#line 5197
template< class _Elem1, class _Elem2, class _Elem3> constexpr bool 
#line 5198
_Can_memcmp_elements_with_pred< _Elem1, _Elem2, equal_to< _Elem3> >  = (_Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible) && _Can_memcmp_elements< remove_cv_t< _Elem3> , remove_cv_t< _Elem3> , ((sizeof(remove_cv_t< _Elem3> ) == sizeof(remove_cv_t< _Elem3> )) && is_integral_v< remove_cv_t< _Elem3> > ) && is_integral_v< remove_cv_t< _Elem3> > > ; 
#line 5203
template< class _Elem1, class _Elem2> constexpr bool 
#line 5204
_Can_memcmp_elements_with_pred< _Elem1, _Elem2, equal_to<> >  = _Can_memcmp_elements< _Elem1, _Elem2, ((sizeof(_Elem1) == sizeof(_Elem2)) && is_integral_v< _Elem1> ) && is_integral_v< _Elem2> > ; 
#line 5217
template< class _Iter1, class _Iter2, class _Pr> constexpr bool 
#line 5218
_Equal_memcmp_is_safe_helper = ((_Iterators_are_contiguous< _Iter1, _Iter2>  && (!_Iterator_is_volatile< _Iter1> )) && (!_Iterator_is_volatile< _Iter2> )) && _Can_memcmp_elements_with_pred< _Iter_value_t< _Iter1> , _Iter_value_t< _Iter2> , _Pr> ; 
#line 5222
template< class _Iter1, class _Iter2, class _Pr> constexpr bool 
#line 5223
_Equal_memcmp_is_safe = _Equal_memcmp_is_safe_helper< remove_const_t< _Iter1> , remove_const_t< _Iter2> , _Pr> ; 
#line 5226
template < class _CtgIt1, class _CtgIt2 >
[ [ nodiscard ] ] int _Memcmp_ranges ( _CtgIt1 _First1, _CtgIt1 _Last1, _CtgIt2 _First2 ) {
    ;
    const auto _First1_ch = reinterpret_cast < const char * > ( _To_address ( _First1 ) );
    const auto _Last1_ch = reinterpret_cast < const char * > ( _To_address ( _Last1 ) );
    const auto _First2_ch = reinterpret_cast < const char * > ( _To_address ( _First2 ) );
    return :: memcmp ( _First1_ch, _First2_ch, static_cast < size_t > ( _Last1_ch - _First1_ch ) );
}
#line 5235
template < class _CtgIt1, class _CtgIt2 >
[ [ nodiscard ] ] int _Memcmp_count ( _CtgIt1 _First1, _CtgIt2 _First2, const size_t _Count ) {
    ;
    const auto _First1_ch = reinterpret_cast < const char * > ( _To_address ( _First1 ) );
    const auto _First2_ch = reinterpret_cast < const char * > ( _To_address ( _First2 ) );
    return :: memcmp ( _First1_ch, _First2_ch, _Count * sizeof ( _Iter_value_t < _CtgIt1 > ) );
}
#line 5243
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped_n ( _First2, _Idl_distance < _InIt1 > ( _UFirst1, _ULast1 ) );
    if constexpr ( _Equal_memcmp_is_safe < decltype ( _UFirst1 ), decltype ( _UFirst2 ), _Pr > ) {



        {
            return _Memcmp_ranges ( _UFirst1, _ULast1, _UFirst2 ) == 0;
        }
    }

    for (; _UFirst1 != _ULast1; ++ _UFirst1, ( void ) ++ _UFirst2 ) {
        if ( ! _Pred ( * _UFirst1, * _UFirst2 ) ) {
            return false;
        }
    }

    return true;
}
#line 5274 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool equal ( const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2 ) {

    return :: std :: equal ( _First1, _Last1, _First2, equal_to < > { } );
}
#line 5289 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool equal (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    _Adl_verify_range ( _First2, _Last2 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped ( _First2 );
    const auto _ULast2 = _Get_unwrapped ( _Last2 );
    if constexpr ( _Is_ranges_random_iter_v < _InIt1 > && _Is_ranges_random_iter_v < _InIt2 > ) {
        if ( _ULast1 - _UFirst1 != _ULast2 - _UFirst2 ) {
            return false;
        }

        return :: std :: equal ( _UFirst1, _ULast1, _UFirst2, _Pass_fn ( _Pred ) );
    } else {
        for (;; ) {
            if ( _UFirst1 == _ULast1 ) {
                return _UFirst2 == _ULast2;
            }

            if ( _UFirst2 == _ULast2 ) {
                return false;
            }

            if ( ! _Pred ( * _UFirst1, * _UFirst2 ) ) {
                return false;
            }

            ++ _UFirst1;
            ++ _UFirst2;
        }
    }
}
#line 5331 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool equal (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2 ) {

    return :: std :: equal ( _First1, _Last1, _First2, _Last2, equal_to < > { } );
}
#line 5484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template< class _Elem1, class _Elem2> constexpr bool 
#line 5485
_Lex_compare_memcmp_classify_elements = conjunction_v< _Is_character_or_bool< _Elem1> , _Is_character_or_bool< _Elem2> , is_unsigned< _Elem1> , is_unsigned< _Elem2> > ; 
#line 5493
template< class _Elem1, class _Elem2, class _Pr> 
#line 5494
struct _Lex_compare_memcmp_classify_pred { 
#line 5495
using _Pred = void; 
#line 5496
}; 
#line 5498
template< class _Elem1, class _Elem2, class _Elem3> 
#line 5499
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, less< _Elem3> >  { 
#line 5500
using _Pred = conditional_t< (_Lex_compare_memcmp_classify_elements< _Elem3, _Elem3>  && _Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible) && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible, less< int> , void> ; 
#line 5504
}; 
#line 5506
template< class _Elem1, class _Elem2> 
#line 5507
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, less<> >  { 
#line 5508
using _Pred = conditional_t< _Lex_compare_memcmp_classify_elements< _Elem1, _Elem2> , less< int> , void> ; 
#line 5509
}; 
#line 5511
template< class _Elem1, class _Elem2, class _Elem3> 
#line 5512
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, greater< _Elem3> >  { 
#line 5513
using _Pred = conditional_t< (_Lex_compare_memcmp_classify_elements< _Elem3, _Elem3>  && _Iter_copy_cat< _Elem1 *, _Elem3 *> ::_Bitcopy_constructible) && _Iter_copy_cat< _Elem2 *, _Elem3 *> ::_Bitcopy_constructible, greater< int> , void> ; 
#line 5517
}; 
#line 5519
template< class _Elem1, class _Elem2> 
#line 5520
struct _Lex_compare_memcmp_classify_pred< _Elem1, _Elem2, greater<> >  { 
#line 5521
using _Pred = conditional_t< _Lex_compare_memcmp_classify_elements< _Elem1, _Elem2> , greater< int> , void> ; 
#line 5522
}; 
#line 5536
template< class _It1, class _It2, class _Pr> using _Lex_compare_memcmp_classify = conditional_t< (_Iterators_are_contiguous< _It1, _It2>  && (!_Iterator_is_volatile< _It1> )) && (!_Iterator_is_volatile< _It2> ), typename _Lex_compare_memcmp_classify_pred< _Iter_value_t< _It1> , _Iter_value_t< _It2> , _Pr> ::_Pred, void> ; 
#line 5541
template < class _InIt1, class _InIt2, class _Pr >
[ [ nodiscard ] ] inline bool lexicographical_compare (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2, _Pr _Pred ) {

    _Adl_verify_range ( _First1, _Last1 );
    _Adl_verify_range ( _First2, _Last2 );
    auto _UFirst1 = _Get_unwrapped ( _First1 );
    const auto _ULast1 = _Get_unwrapped ( _Last1 );
    auto _UFirst2 = _Get_unwrapped ( _First2 );
    const auto _ULast2 = _Get_unwrapped ( _Last2 );

    using _Memcmp_pred = _Lex_compare_memcmp_classify < decltype ( _UFirst1 ), decltype ( _UFirst2 ), _Pr >;
    if constexpr ( ! is_void_v < _Memcmp_pred > ) {



        {
            const auto _Num1 = static_cast < size_t > ( _ULast1 - _UFirst1 );
            const auto _Num2 = static_cast < size_t > ( _ULast2 - _UFirst2 );
            const int _Ans = _Memcmp_count ( _UFirst1, _UFirst2, ( :: std :: min ) ( _Num1, _Num2 ) );
            return _Memcmp_pred { } ( _Ans, 0 ) || ( _Ans == 0 && _Num1 < _Num2 );
        }
    }

    for (; _UFirst1 != _ULast1 && _UFirst2 != _ULast2; ++ _UFirst1, ( void ) ++ _UFirst2 ) {
        if ( _Debug_lt_pred ( _Pred, * _UFirst1, * _UFirst2 ) ) {
            return true;
        } else if ( _Pred ( * _UFirst2, * _UFirst1 ) ) {
            return false;
        }
    }

    return _UFirst1 == _ULast1 && _UFirst2 != _ULast2;
}
#line 5576 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt1, class _InIt2 >
[ [ nodiscard ] ] inline bool lexicographical_compare (
    const _InIt1 _First1, const _InIt1 _Last1, const _InIt2 _First2, const _InIt2 _Last2 ) {

    return :: std :: lexicographical_compare ( _First1, _Last1, _First2, _Last2, less < > { } );
}
#line 5694 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template< class _Ty, class _Elem> 
#line 5695
struct _Vector_alg_in_find_is_safe_object_pointers : public false_type { }; 
#line 5696
template< class _Ty1, class _Ty2> 
#line 5697
struct _Vector_alg_in_find_is_safe_object_pointers< _Ty1 *, _Ty2 *>  : public conjunction< disjunction< is_object< _Ty1> , is_void< _Ty1> > , disjunction< is_object< _Ty2> , is_void< _Ty2> > , disjunction< is_same< remove_cv_t< _Ty1> , remove_cv_t< _Ty2> > , is_void< _Ty1> , is_void< _Ty2> > >  { 
#line 5704
}; 
#line 5707
template< class _Iter, class _Ty, class _Elem = _Iter_value_t< _Iter> > constexpr bool 
#line 5708
_Vector_alg_in_find_is_safe = (_Iterator_is_contiguous< _Iter>  && (!_Iterator_is_volatile< _Iter> )) && disjunction_v< conjunction< is_integral< _Ty> , is_integral< _Elem> > , conjunction< is_pointer< _Ty> , is_same< _Ty, _Elem> > , conjunction< is_same< _Ty, std::nullptr_t> , is_pointer< _Elem> > , _Vector_alg_in_find_is_safe_object_pointers< _Ty, _Elem> > ; 
#line 5731
template < class _InIt, class _Ty >
[ [ nodiscard ] ] constexpr bool _Could_compare_equal_to_value_type ( const _Ty & _Val ) {

    ;

    if constexpr ( disjunction_v <



                      is_same < _Ty, bool >, is_pointer < _Ty >, is_same < _Ty, nullptr_t >> ) {
        return true;
    } else {
        using _Elem = _Iter_value_t < _InIt >;
        ;

        if constexpr ( is_same_v < _Elem, bool > ) {
            return _Val == true || _Val == false;
        } else if constexpr ( is_signed_v < _Elem > ) {

            constexpr _Elem _Min = static_cast < _Elem > ( _Elem { 1 } << ( sizeof ( _Elem ) * 8 - 1 ) );
            constexpr _Elem _Max = static_cast < _Elem > ( ~ _Min );

            if constexpr ( is_signed_v < _Ty > ) {

                return _Min <= _Val && _Val <= _Max;
            } else {

                if constexpr ( _Elem { - 1 } == static_cast < _Ty > ( - 1 ) ) {

                    return _Val <= _Max || static_cast < _Ty > ( _Min ) <= _Val;
                } else {

                    return _Val <= _Max;
                }
            }
        } else {
            constexpr _Elem _Max = static_cast < _Elem > ( ~ _Elem { 0 } );

            if constexpr ( is_unsigned_v < _Ty > ) {

                return _Val <= _Max;
            } else {

                if constexpr ( _Ty { - 1 } == static_cast < _Elem > ( - 1 ) ) {

                    return _Val <= _Max;
                } else {

                    return 0 <= _Val && _Val <= _Max;
                }
            }
        }
    }
}
#line 5786
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _InIt _Find_unchecked ( _InIt _First, const _InIt _Last, const _Ty & _Val ) {


    if constexpr ( _Vector_alg_in_find_is_safe < _InIt, _Ty > ) {



        {
            if ( ! :: std :: _Could_compare_equal_to_value_type < _InIt > ( _Val ) ) {
                return _Last;
            }

            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_find_trivial ( _First_ptr, _To_address ( _Last ), _Val );
            if constexpr ( is_pointer_v < _InIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }













        }
    }

    for (; _First != _Last; ++ _First ) {
        if ( * _First == _Val ) {
            break;
        }
    }

    return _First;
}
#line 5831 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _InIt find ( _InIt _First, const _InIt _Last, const _Ty & _Val ) {
    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _InIt > && is_same_v < _Ty, bool > ) {
        return _Find_vbool ( _First, _Last, _Val );
    } else {
        _Seek_wrapped ( _First, :: std :: _Find_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val ) );
        return _First;
    }
}
#line 5966 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _Ty >
[ [ nodiscard ] ] inline _Iter_diff_t < _InIt > count ( const _InIt _First, const _InIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    if constexpr ( _Is_vb_iterator < _InIt > && is_same_v < _Ty, bool > ) {
        return _Count_vbool ( _First, _Last, _Val );
    } else {
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );


        if constexpr ( _Vector_alg_in_find_is_safe < decltype ( _UFirst ), _Ty > ) {



            {
                if ( ! :: std :: _Could_compare_equal_to_value_type < decltype ( _UFirst ) > ( _Val ) ) {
                    return 0;
                }

                return static_cast < _Iter_diff_t < _InIt >> (
                    __std_count_trivial ( _To_address ( _UFirst ), _To_address ( _ULast ), _Val ) );
            }
        }


        _Iter_diff_t < _InIt > _Count = 0;

        for (; _UFirst != _ULast; ++ _UFirst ) {
            if ( * _UFirst == _Val ) {
                ++ _Count;
            }
        }

        return _Count;
    }
}
#line 6010 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _InIt _Find_pr ( _InIt _First, const _InIt _Last, const _Ty & _Val, _Pr _Pred ) {
    for (; _First != _Last; ++ _First ) {
        if ( _Pred ( * _First, _Val ) ) {
            break;
        }
    }

    return _First;
}
#line 6021
template < class _InIt, class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Iter_diff_t < _InIt > _Count_pr ( _InIt _First, const _InIt _Last, const _Ty & _Val, _Pr _Pred ) {
    _Iter_diff_t < _InIt > _Count = 0;

    for (; _First != _Last; ++ _First ) {
        if ( _Pred ( * _First, _Val ) ) {
            ++ _Count;
        }
    }

    return _Count;
}
#line 6034
enum class _TrimResult: unsigned char { _KeepTrimming, _HaveWorkAfterTrimming, _ReturnFalse, _ReturnTrue}; 
#line 6036
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_equal (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {


    ;
    ;
    if ( _Pred ( * _First1, * _First2 ) ) {
        do {
            ++ _First1;
            ++ _First2;
            if ( _First1 == _Back1 ) {

                return _Pred ( * _First1, * _First2 ) ? _TrimResult :: _ReturnTrue : _TrimResult :: _ReturnFalse;
            }
        } while ( _Pred ( * _First1, * _First2 ) );
    } else {
        if ( ! _Pred ( * _Back1, * _Back2 ) ) {

            return _TrimResult :: _HaveWorkAfterTrimming;
        }
        -- _Back1;
        -- _Back2;
    }

    for (;; ) {
        if ( _First1 == _Back1 ) {

            return _TrimResult :: _ReturnFalse;
        }

        if ( ! _Pred ( * _Back1, * _Back2 ) ) {
            return _TrimResult :: _KeepTrimming;
        }
        -- _Back1;
        -- _Back2;
    }
}
#line 6075
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_reversed (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {


    ;
    ;
    if ( _Pred ( * _First1, * _Back2 ) ) {
        do {
            ++ _First1;
            -- _Back2;
            if ( _First1 == _Back1 ) {

                return _Pred ( * _First1, * _First2 ) ? _TrimResult :: _ReturnTrue : _TrimResult :: _ReturnFalse;
            }
        } while ( _Pred ( * _First1, * _Back2 ) );
    } else {
        if ( ! _Pred ( * _Back1, * _First2 ) ) {

            return _TrimResult :: _HaveWorkAfterTrimming;
        }
        -- _Back1;
        ++ _First2;
    }

    for (;; ) {
        if ( _First1 == _Back1 ) {

            return _TrimResult :: _ReturnFalse;
        }

        if ( ! _Pred ( * _Back1, * _First2 ) ) {
            return _TrimResult :: _KeepTrimming;
        }
        -- _Back1;
        ++ _First2;
    }
}
#line 6114
template < class _BidIt1, class _BidIt2, class _Pr >
[ [ nodiscard ] ] inline _TrimResult _Trim_completely (
    _BidIt1 & _First1, _BidIt1 & _Back1, _BidIt2 & _First2, _BidIt2 & _Back2, _Pr _Pred ) {

    _TrimResult _Res = _TrimResult :: _KeepTrimming;

    for ( bool _Check_reversed = true; _Res == _TrimResult :: _KeepTrimming; _Check_reversed = ! _Check_reversed ) {
        if ( _Check_reversed ) {
            _Res = _Trim_reversed ( _First1, _Back1, _First2, _Back2, _Pred );
        } else {
            _Res = _Trim_equal ( _First1, _Back1, _First2, _Back2, _Pred );
        }
    }

    return _Res;
}
#line 6131
template < class _FwdIt1, class _FwdIt2, class _Pr >
[ [ nodiscard ] ] inline bool _Check_match_counts (
    _FwdIt1 _First1, _FwdIt1 _Last1, _FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred ) {

    ;
    ;
    if constexpr ( _Is_ranges_bidi_iter_v < _FwdIt1 > && _Is_ranges_bidi_iter_v < _FwdIt2 > ) {
        do {
            -- _Last1;
            -- _Last2;
        } while ( _Pred ( * _Last1, * _Last2 ) );

        if ( _First1 == _Last1 ) {
            return false;
        }

        const _TrimResult _Res = _Trim_completely ( _First1, _Last1, _First2, _Last2, _Pred );

        if ( _Res != _TrimResult :: _HaveWorkAfterTrimming ) {
            return _Res == _TrimResult :: _ReturnTrue;
        }

        ++ _Last1;
        ++ _Last2;
    }

    for ( _FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++ _Next1 ) {
        if ( _Next1 == _Find_pr ( _First1, _Next1, * _Next1, _Pred ) ) {
            _Iter_diff_t < _FwdIt2 > _Count2 = _Count_pr ( _First2, _Last2, * _Next1, _Pred );
            if ( _Count2 == 0 ) {
                return false;
            }

            _FwdIt1 _Skip1 = _Next_iter ( _Next1 );
            _Iter_diff_t < _FwdIt1 > _Count1 = _Count_pr ( _Skip1, _Last1, * _Next1, _Pred ) + 1;
            if ( _Count2 != _Count1 ) {
                return false;
            }
        }
    }

    return true;
}
#line 6175
template < class _BidIt >
inline void reverse ( const _BidIt _First, const _BidIt _Last ) {
    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    auto _ULast = _Get_unwrapped ( _Last );

    using _Elem = remove_reference_t < _Iter_ref_t < decltype ( _UFirst ) >>;
    constexpr bool _Allow_vectorization = conjunction_v < bool_constant < _Iterator_is_contiguous < decltype ( _UFirst ) >>,
        _Is_trivially_swappable < _Elem >, negation < is_volatile < _Elem >> >;
    constexpr size_t _Nx = sizeof ( _Elem );

    if constexpr ( _Allow_vectorization && _Nx <= 8 && ( _Nx & ( _Nx - 1 ) ) == 0 ) {



        {
            if constexpr ( _Nx == 1 ) {
                __std_reverse_trivially_swappable_1 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else if constexpr ( _Nx == 2 ) {
                __std_reverse_trivially_swappable_2 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else if constexpr ( _Nx == 4 ) {
                __std_reverse_trivially_swappable_4 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            } else {
                __std_reverse_trivially_swappable_8 ( _To_address ( _UFirst ), _To_address ( _ULast ) );
            }

            return;
        }
    }


    for (; _UFirst != _ULast && _UFirst != -- _ULast; ++ _UFirst ) {
        swap ( * _UFirst, * _ULast );
    }
}
#line 6221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _BidIt >
constexpr pair < _BidIt, _BidIt > _Reverse_until_sentinel_unchecked ( _BidIt _First, _BidIt _Sentinel, _BidIt _Last ) {

    while ( _First != _Sentinel && _Last != _Sentinel ) {
        swap ( * _First, * -- _Last );
        ++ _First;
    }

    return pair < _BidIt, _BidIt > ( _First, _Last );
}
#line 6232
template < class _FwdIt >
inline _FwdIt rotate ( _FwdIt _First, _FwdIt _Mid, _FwdIt _Last ) {



    _Adl_verify_range ( _First, _Mid );
    _Adl_verify_range ( _Mid, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    auto _UMid = _Get_unwrapped ( _Mid );
    const auto _ULast = _Get_unwrapped ( _Last );
    if ( _UFirst == _UMid ) {
        return _Last;
    }

    if ( _UMid == _ULast ) {
        return _First;
    }

    if constexpr ( _Is_cpp17_random_iter_v < _FwdIt > ) {
        :: std :: reverse ( _UFirst, _UMid );
        :: std :: reverse ( _UMid, _ULast );
        :: std :: reverse ( _UFirst, _ULast );
        _Seek_wrapped ( _First, _UFirst + ( _ULast - _UMid ) );
    } else if constexpr ( _Is_cpp17_bidi_iter_v < _FwdIt > ) {
        :: std :: reverse ( _UFirst, _UMid );
        :: std :: reverse ( _UMid, _ULast );
        auto _Tmp = _Reverse_until_sentinel_unchecked ( _UFirst, _UMid, _ULast );
        :: std :: reverse ( _Tmp . first, _Tmp . second );
        _Seek_wrapped ( _First, _UMid != _Tmp . first ? _Tmp . first : _Tmp . second );
    } else {
        auto _UNext = _UMid;
        do {
            swap ( * _UFirst, * _UNext );
            ++ _UFirst;
            ++ _UNext;
            if ( _UFirst == _UMid ) {
                _UMid = _UNext;
            }
        } while ( _UNext != _ULast );
        _Seek_wrapped ( _First, _UFirst );
        while ( _UMid != _ULast ) {
            _UNext = _UMid;
            do {
                swap ( * _UFirst, * _UNext );
                ++ _UFirst;
                ++ _UNext;
                if ( _UFirst == _UMid ) {
                    _UMid = _UNext;
                }
            } while ( _UNext != _ULast );
        }
    }

    return _First;
}
#line 6298 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _InIt, class _Pr >
[ [ nodiscard ] ] inline _InIt find_if ( _InIt _First, const _InIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    for (; _UFirst != _ULast; ++ _UFirst ) {
        if ( _Pred ( * _UFirst ) ) {
            break;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 6625
template< class _Iter, class _Pr, class _Elem = _Iter_value_t< _Iter> > constexpr bool 
#line 6626
_Is_min_max_optimization_safe = (_Iterator_is_contiguous< _Iter>  && (!_Iterator_is_volatile< _Iter> )) && conjunction_v< disjunction< is_integral< _Elem> , is_pointer< _Elem> > , disjunction< is_same< _Pr, less<> > , is_same< _Pr, less< _Elem> > > > ; 
#line 6636
template < class _FwdIt, class _Pr >
constexpr _FwdIt _Max_element_unchecked ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {

    if constexpr ( _Is_min_max_optimization_safe < _FwdIt, _Pr > ) {
        if ( ! _Is_constant_evaluated ( ) ) {
            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_max_element ( _First_ptr, _To_address ( _Last ) );
            if constexpr ( is_pointer_v < _FwdIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }
        }
    }


    _FwdIt _Found = _First;
    if ( _First != _Last ) {
        while ( ++ _First != _Last ) {
            if ( _Debug_lt_pred ( _Pred, * _Found, * _First ) ) {
                _Found = _First;
            }
        }
    }

    return _Found;
}
#line 6664 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _FwdIt, class _Pr >
[ [ nodiscard ] ] constexpr _FwdIt max_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    _Seek_wrapped ( _First, :: std :: _Max_element_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pass_fn ( _Pred ) ) );
    return _First;
}
#line 6671
template < class _FwdIt >
[ [ nodiscard ] ] constexpr _FwdIt max_element ( _FwdIt _First, _FwdIt _Last ) {
    return :: std :: max_element ( _First, _Last, less < > { } );
}
#line 6758 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > _Ilist, _Pr _Pred ) {

    const _Ty * _Res = :: std :: _Max_element_unchecked ( _Ilist . begin ( ), _Ilist . end ( ), _Pass_fn ( _Pred ) );
    return * _Res;
}
#line 6765
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( max ) ( initializer_list < _Ty > _Ilist ) {

    return ( :: std :: max ) ( _Ilist, less < > { } );
}
#line 6832
template < class _FwdIt, class _Pr >
constexpr _FwdIt _Min_element_unchecked ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {

    if constexpr ( _Is_min_max_optimization_safe < _FwdIt, _Pr > ) {
        if ( ! _Is_constant_evaluated ( ) ) {
            const auto _First_ptr = _To_address ( _First );
            const auto _Result = __std_min_element ( _First_ptr, _To_address ( _Last ) );
            if constexpr ( is_pointer_v < _FwdIt > ) {
                return _Result;
            } else {
                return _First + ( _Result - _First_ptr );
            }
        }
    }


    _FwdIt _Found = _First;
    if ( _First != _Last ) {
        while ( ++ _First != _Last ) {
            if ( _Debug_lt_pred ( _Pred, * _First, * _Found ) ) {
                _Found = _First;
            }
        }
    }

    return _Found;
}
#line 6860 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _FwdIt, class _Pr >
[ [ nodiscard ] ] constexpr _FwdIt min_element ( _FwdIt _First, _FwdIt _Last, _Pr _Pred ) {
    _Adl_verify_range ( _First, _Last );
    _Seek_wrapped ( _First, :: std :: _Min_element_unchecked ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pass_fn ( _Pred ) ) );
    return _First;
}
#line 6867
template < class _FwdIt >
[ [ nodiscard ] ] constexpr _FwdIt min_element ( _FwdIt _First, _FwdIt _Last ) {
    return :: std :: min_element ( _First, _Last, less < > { } );
}
#line 6954 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
template < class _Ty, class _Pr >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > _Ilist, _Pr _Pred ) {

    const _Ty * _Res = :: std :: _Min_element_unchecked ( _Ilist . begin ( ), _Ilist . end ( ), _Pass_fn ( _Pred ) );
    return * _Res;
}
#line 6961
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty ( min ) ( initializer_list < _Ty > _Ilist ) {

    return ( :: std :: min ) ( _Ilist, less < > { } );
}
#line 7022
template < class _FwdIt, class _Ty, class _Pr >
[ [ nodiscard ] ] inline _FwdIt lower_bound ( _FwdIt _First, const _FwdIt _Last, const _Ty & _Val, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    _Iter_diff_t < _FwdIt > _Count = :: std :: distance ( _UFirst, _Get_unwrapped ( _Last ) );

    while ( 0 < _Count ) {
        const _Iter_diff_t < _FwdIt > _Count2 = _Count / 2;
        const auto _UMid = :: std :: next ( _UFirst, _Count2 );
        if ( _Pred ( * _UMid, _Val ) ) {
            _UFirst = _Next_iter ( _UMid );
            _Count -= _Count2 + 1;
        } else {
            _Count = _Count2;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 7044
template < class _FwdIt, class _Ty >
[ [ nodiscard ] ] inline _FwdIt lower_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val ) {

    return :: std :: lower_bound ( _First, _Last, _Val, less < > { } );
}
#line 7050
template < class _FwdIt, class _Ty, class _Pr >
[ [ nodiscard ] ] inline _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    _Iter_diff_t < _FwdIt > _Count = :: std :: distance ( _UFirst, _Get_unwrapped ( _Last ) );

    while ( 0 < _Count ) {
        _Iter_diff_t < _FwdIt > _Count2 = _Count / 2;
        const auto _UMid = :: std :: next ( _UFirst, _Count2 );
        if ( _Pred ( _Val, * _UMid ) ) {
            _Count = _Count2;
        } else {
            _UFirst = _Next_iter ( _UMid );
            _Count -= _Count2 + 1;
        }
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 7072
template < class _FwdIt, class _Ty >
[ [ nodiscard ] ] inline _FwdIt upper_bound ( _FwdIt _First, _FwdIt _Last, const _Ty & _Val ) {

    return :: std :: upper_bound ( _First, _Last, _Val, less < > { } );
}
#line 7078
template < class _FwdIt1, class _FwdIt2 >
inline _FwdIt2 _Swap_ranges_unchecked ( _FwdIt1 _First1, const _FwdIt1 _Last1, _FwdIt2 _First2 ) {



    using _Elem1 = remove_reference_t < _Iter_ref_t < _FwdIt1 >>;
    using _Elem2 = remove_reference_t < _Iter_ref_t < _FwdIt2 >>;
    if constexpr ( is_same_v < _Elem1, _Elem2 > && _Is_trivially_swappable_v < _Elem1 >
                  && _Iterators_are_contiguous < _FwdIt1, _FwdIt2 > ) {



        {
            __std_swap_ranges_trivially_swappable_noalias (
                _To_address ( _First1 ), _To_address ( _Last1 ), _To_address ( _First2 ) );
            return _First2 + ( _Last1 - _First1 );
        }
    }


    for (; _First1 != _Last1; ++ _First1, ( void ) ++ _First2 ) {
        swap ( * _First1, * _First2 );
    }

    return _First2;
}
#line 7105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
[[noreturn]] void __cdecl _Xbad_alloc(); 
#line 7106
[[noreturn]] void __cdecl _Xinvalid_argument(const char *); 
#line 7107
[[noreturn]] void __cdecl _Xlength_error(const char *); 
#line 7108
[[noreturn]] void __cdecl _Xout_of_range(const char *); 
#line 7109
[[noreturn]] void __cdecl _Xoverflow_error(const char *); 
#line 7110
[[noreturn]] void __cdecl _Xruntime_error(const char *); 
#line 7111
[[noreturn]] void __cdecl _XGetLastError(); 
#line 7113
template< class _Category, class _Ty, class _Diff = ptrdiff_t, class _Pointer = _Ty *, class 
#line 7114
_Reference = _Ty &> 
#line 7115
struct iterator { 
#line 7116
using iterator_category = _Category; 
#line 7117
using value_type = _Ty; 
#line 7118
using difference_type = _Diff; 
#line 7119
using pointer = _Pointer; 
#line 7120
using reference = _Reference; 
#line 7121
}; 
#line 7123
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr auto _Float_abs_bits ( const _Ty & _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    using _Uint_type = typename _Traits :: _Uint_type;
    const auto _Bits = _Bit_cast < _Uint_type > ( _Xx );
    return _Bits & ~ _Traits :: _Shifted_sign_mask;
}
#line 7131
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr _Ty _Float_abs ( const _Ty _Xx ) noexcept {
    return _Bit_cast < _Ty > ( _Float_abs_bits ( _Xx ) );
}
#line 7136
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr _Ty _Float_copysign ( const _Ty _Magnitude, const _Ty _Sign ) {
    using _Traits = _Floating_type_traits < _Ty >;
    using _Uint_type = typename _Traits :: _Uint_type;
    const auto _Signbit = _Bit_cast < _Uint_type > ( _Sign ) & _Traits :: _Shifted_sign_mask;
    return _Bit_cast < _Ty > ( _Float_abs_bits ( _Magnitude ) | _Signbit );
}
#line 7144
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_nan ( const _Ty _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) > _Traits :: _Shifted_exponent_mask;
}
#line 7154
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_signaling_nan ( const _Ty & _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    const auto _Abs_bits = _Float_abs_bits ( _Xx );
    return _Abs_bits > _Traits :: _Shifted_exponent_mask && ( ( _Abs_bits & _Traits :: _Special_nan_mantissa_mask ) == 0 );
}
#line 7161
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_inf ( const _Ty _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) == _Traits :: _Shifted_exponent_mask;
}
#line 7167
template < class _Ty, enable_if_t < is_floating_point_v < _Ty >, int > = 0 >
[ [ nodiscard ] ] constexpr bool _Is_finite ( const _Ty _Xx ) noexcept {
    using _Traits = _Floating_type_traits < _Ty >;
    return _Float_abs_bits ( _Xx ) < _Traits :: _Shifted_exponent_mask;
}
#line 7249 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xutility"
}
#line 7257
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
template < class _Container >
class back_insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;


    inline explicit back_insert_iterator ( _Container & _Cont ) noexcept
        : container ( :: std :: addressof ( _Cont ) ) { }

    inline back_insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {
        container -> push_back ( _Val );
        return * this;
    }

    inline back_insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        container -> push_back ( :: std :: move ( _Val ) );
        return * this;
    }

    [ [ nodiscard ] ] inline back_insert_iterator & operator * ( ) noexcept {
        return * this;
    }

    inline back_insert_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    inline back_insert_iterator operator ++ ( int ) noexcept {
        return * this;
    }

protected :
    _Container * container;
};
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline back_insert_iterator < _Container > back_inserter ( _Container & _Cont ) noexcept {

    return back_insert_iterator < _Container > ( _Cont );
}
#line 72
template < class _Container >
class front_insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;


    inline explicit front_insert_iterator ( _Container & _Cont ) : container ( :: std :: addressof ( _Cont ) ) { }

    inline front_insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {

        container -> push_front ( _Val );
        return * this;
    }

    inline front_insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        container -> push_front ( :: std :: move ( _Val ) );
        return * this;
    }

    [ [ nodiscard ] ] inline front_insert_iterator & operator * ( ) {
        return * this;
    }

    inline front_insert_iterator & operator ++ ( ) {
        return * this;
    }

    inline front_insert_iterator operator ++ ( int ) {
        return * this;
    }

protected :
    _Container * container;
};
#line 117 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline front_insert_iterator < _Container > front_inserter ( _Container & _Cont ) {
    return front_insert_iterator < _Container > ( _Cont );
}
#line 122
template < class _Container >
class insert_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using pointer = void;
    using reference = void;

    using container_type = _Container;




    using difference_type = void;
    using _Wrapped_iter = typename _Container :: iterator;


    inline insert_iterator ( _Container & _Cont, _Wrapped_iter _Where )
        : container ( :: std :: addressof ( _Cont ) ), iter ( :: std :: move ( _Where ) ) { }

    inline insert_iterator & operator = ( const typename _Container :: value_type & _Val ) {

        iter = container -> insert ( iter, _Val );
        ++ iter;
        return * this;
    }

    inline insert_iterator & operator = ( typename _Container :: value_type && _Val ) {
        iter = container -> insert ( iter, :: std :: move ( _Val ) );
        ++ iter;
        return * this;
    }

    [ [ nodiscard ] ] inline insert_iterator & operator * ( ) {
        return * this;
    }

    inline insert_iterator & operator ++ ( ) {
        return * this;
    }

    inline insert_iterator & operator ++ ( int ) {
        return * this;
    }

protected :
    _Container * container;
    _Wrapped_iter iter;
};
#line 173 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Container >
[ [ nodiscard ] ] inline insert_iterator < _Container > inserter ( _Container & _Cont, typename _Container :: iterator _Where ) {
    return insert_iterator < _Container > ( _Cont, _Where );
}
#line 235 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Ty, class _Elem = char, class _Traits = char_traits < _Elem >, class _Diff = ptrdiff_t >
class istream_iterator {
public :
    using iterator_category = input_iterator_tag;
    using value_type = _Ty;
    using difference_type = _Diff;
    using pointer = const _Ty *;
    using reference = const _Ty &;
    using char_type = _Elem;
    using traits_type = _Traits;
    using istream_type = basic_istream < _Elem, _Traits >;

    static_assert ( conjunction_v < is_default_constructible < _Ty >, is_copy_constructible < _Ty >, is_copy_assignable < _Ty >>,
        "istream_iterator<T> requires T to be default constructible, copy constructible, and copy assignable. (N4950 [istream.iterator]/2" ")"
                                      );

    constexpr istream_iterator ( ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) { }






    istream_iterator ( istream_type & _Istr ) : _Myistr ( :: std :: addressof ( _Istr ) ) {
        _Getval ( );
    }

    [ [ nodiscard ] ] const _Ty & operator * ( ) const noexcept {
        do { if ( _Myistr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 263, 0, "%s", "The stored stream pointer in_stream must be non-null" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x54\x68\x65\x20\x73\x74\x6f\x72\x65\x64\x20\x73\x74\x72\x65\x61\x6d\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x69\x6e\x5f\x73\x74" L"\x72\x65\x61\x6d\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x6e\x6f\x6e\x2d\x6e\x75\x6c\x6c\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 263, 0 ); } while ( false ); }; } while ( false );
        return _Myval;
    }

    [ [ nodiscard ] ] const _Ty * operator -> ( ) const noexcept {
        do { if ( _Myistr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 268, 0, "%s", "The stored stream pointer in_stream must be non-null" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x54\x68\x65\x20\x73\x74\x6f\x72\x65\x64\x20\x73\x74\x72\x65\x61\x6d\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x69\x6e\x5f\x73\x74" L"\x72\x65\x61\x6d\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x6e\x6f\x6e\x2d\x6e\x75\x6c\x6c\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 268, 0 ); } while ( false ); }; } while ( false );
        return :: std :: addressof ( _Myval );
    }

    istream_iterator & operator ++ ( ) {
        _Getval ( );
        return * this;
    }

    istream_iterator operator ++ ( int ) {
        istream_iterator _Tmp = * this;
        _Getval ( );
        return _Tmp;
    }

    [ [ nodiscard ] ] bool _Equal ( const istream_iterator & _Right ) const noexcept {
        return _Myistr == _Right . _Myistr;
    }







private :
    void _Getval ( ) {
        do { if ( _Myistr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 295, 0, "%s", "The stored stream pointer in_stream must be non-null" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x54\x68\x65\x20\x73\x74\x6f\x72\x65\x64\x20\x73\x74\x72\x65\x61\x6d\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x69\x6e\x5f\x73\x74" L"\x72\x65\x61\x6d\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x6e\x6f\x6e\x2d\x6e\x75\x6c\x6c\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 295, 0 ); } while ( false ); }; } while ( false );
        if ( ! ( * _Myistr >> _Myval ) ) {
            _Myistr = nullptr;
        }
    }

    istream_type * _Myistr { nullptr };
    _Ty _Myval { };
};
#line 305
template < class _Ty, class _Elem, class _Traits, class _Diff >
[ [ nodiscard ] ] bool operator == ( const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
    const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right ) noexcept {
    return _Left . _Equal ( _Right );
}
#line 312
template < class _Ty, class _Elem, class _Traits, class _Diff >
[ [ nodiscard ] ] bool operator != ( const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Left,
    const istream_iterator < _Ty, _Elem, _Traits, _Diff > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 319 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Ty, class _Elem = char, class _Traits = char_traits < _Elem > >
class ostream_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;
    using char_type = _Elem;
    using traits_type = _Traits;
    using ostream_type = basic_ostream < _Elem, _Traits >;

    ostream_iterator ( ostream_type & _Ostr, const _Elem * const _Delim = nullptr ) noexcept
        : _Mydelim ( _Delim ), _Myostr ( :: std :: addressof ( _Ostr ) ) { }

    ostream_iterator & operator = ( const _Ty & _Val ) {
        * _Myostr << _Val;
        if ( _Mydelim ) {
            * _Myostr << _Mydelim;
        }

        return * this;
    }

    [ [ nodiscard ] ] ostream_iterator & operator * ( ) noexcept {
        return * this;
    }

    ostream_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    ostream_iterator & operator ++ ( int ) noexcept {
        return * this;
    }

private :
    const _Elem * _Mydelim;
    ostream_type * _Myostr;
};
#line 364 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Elem, class _Traits >
class istreambuf_iterator {
public :
    using iterator_category = input_iterator_tag;
    using value_type = _Elem;
    using difference_type = typename _Traits :: off_type;
    using pointer = const _Elem *;
    using reference = _Elem;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename traits_type :: int_type;
    using streambuf_type = basic_streambuf < _Elem, _Traits >;
    using istream_type = basic_istream < _Elem, _Traits >;

    constexpr istreambuf_iterator ( ) noexcept : _Strbuf ( nullptr ), _Got ( true ), _Val ( ) { }




    istreambuf_iterator ( istream_type & _Istr ) noexcept : _Strbuf ( _Istr . rdbuf ( ) ), _Got ( ! _Strbuf ), _Val ( ) { }

    istreambuf_iterator ( streambuf_type * _Sb ) noexcept : _Strbuf ( _Sb ), _Got ( ! _Sb ), _Val ( ) { }

private :
    class _Istreambuf_proxy {
    public :
        [ [ nodiscard ] ] _Elem operator * ( ) const noexcept ( is_nothrow_copy_constructible_v < _Elem > ) {
            return _Keep;
        }

    private :
        friend istreambuf_iterator;
        _Istreambuf_proxy ( streambuf_type * _Strbuf_, _Elem _Keep_ ) noexcept (
            is_nothrow_copy_constructible_v < _Elem > )
            : _Strbuf ( _Strbuf_ ), _Keep ( _Keep_ ) { }

        streambuf_type * _Strbuf;
        _Elem _Keep;
    };

public :
    istreambuf_iterator ( const _Istreambuf_proxy & _Px ) noexcept : _Strbuf ( _Px . _Strbuf ), _Got ( ! _Strbuf ), _Val ( ) { }

    [ [ nodiscard ] ] _Elem operator * ( ) const {
        if ( ! _Got ) {
            _Peek ( );
        }


        do { if ( _Strbuf ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 413, 0, "%s", "istreambuf_iterator is not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x73\x74\x72\x65\x61\x6d\x62\x75\x66\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x73\x20\x6e\x6f\x74\x20\x64\x65\x72\x65" L"\x66\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 413, 0 ); } while ( false ); }; } while ( false );


        return _Val;
    }

    istreambuf_iterator & operator ++ ( ) {

        do { if ( _Strbuf ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 421, 0, "%s", "istreambuf_iterator is not incrementable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x73\x74\x72\x65\x61\x6d\x62\x75\x66\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x73\x20\x6e\x6f\x74\x20\x69\x6e\x63\x72" L"\x65\x6d\x65\x6e\x74\x61\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 421, 0 ); } while ( false ); }; } while ( false );


        _Inc ( );
        return * this;
    }

    _Istreambuf_proxy operator ++ ( int ) {
        if ( ! _Got ) {
            _Peek ( );
        }

        _Istreambuf_proxy _Tmp { _Strbuf, _Val };
        ++ * this;
        return _Tmp;
    }

    [ [ nodiscard ] ] bool equal ( const istreambuf_iterator & _Right ) const {
        if ( ! _Got ) {
            _Peek ( );
        }

        if ( ! _Right . _Got ) {
            _Right . _Peek ( );
        }

        return ( ! _Strbuf && ! _Right . _Strbuf ) || ( _Strbuf && _Right . _Strbuf );
    }











private :
    void _Inc ( ) {
        if ( ! _Strbuf || traits_type :: eq_int_type ( traits_type :: eof ( ), _Strbuf -> sbumpc ( ) ) ) {
            _Strbuf = nullptr;
            _Got = true;
        } else {
            _Got = false;
        }
    }

    _Elem _Peek ( ) const {
        int_type _Meta;
        if ( ! _Strbuf || traits_type :: eq_int_type ( traits_type :: eof ( ), _Meta = _Strbuf -> sgetc ( ) ) ) {
            _Strbuf = nullptr;
        } else {
            _Val = traits_type :: to_char_type ( _Meta );
        }

        _Got = true;
        return _Val;
    }

    mutable streambuf_type * _Strbuf;
    mutable bool _Got;
    mutable _Elem _Val;
};
#line 487 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Elem, class _Traits >
[ [ nodiscard ] ] bool operator == (
    const istreambuf_iterator < _Elem, _Traits > & _Left, const istreambuf_iterator < _Elem, _Traits > & _Right ) {
    return _Left . equal ( _Right );
}
#line 494
template < class _Elem, class _Traits >
[ [ nodiscard ] ] bool operator != (
    const istreambuf_iterator < _Elem, _Traits > & _Left, const istreambuf_iterator < _Elem, _Traits > & _Right ) {
    return ! ( _Left == _Right );
}
#line 501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
template < class _Elem, class _Traits >
class ostreambuf_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;
    using char_type = _Elem;
    using traits_type = _Traits;
    using streambuf_type = basic_streambuf < _Elem, _Traits >;
    using ostream_type = basic_ostream < _Elem, _Traits >;

    ostreambuf_iterator ( streambuf_type * _Sb ) noexcept : _Strbuf ( _Sb ) { }

    ostreambuf_iterator ( ostream_type & _Ostr ) noexcept : _Strbuf ( _Ostr . rdbuf ( ) ) { }

    ostreambuf_iterator & operator = ( _Elem _Right ) {
        if ( ! _Strbuf || traits_type :: eq_int_type ( _Traits :: eof ( ), _Strbuf -> sputc ( _Right ) ) ) {
            _Failed = true;
        }

        return * this;
    }

    [ [ nodiscard ] ] ostreambuf_iterator & operator * ( ) noexcept {
        return * this;
    }

    ostreambuf_iterator & operator ++ ( ) noexcept {
        return * this;
    }

    ostreambuf_iterator & operator ++ ( int ) noexcept {
        return * this;
    }

    [ [ nodiscard ] ] bool failed ( ) const noexcept {
        return _Failed;
    }

private :
    bool _Failed = false;
    streambuf_type * _Strbuf;
};
#line 1466 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
}
#line 1468
namespace stdext { 
#line 1469
template < class _Ptr >
class checked_array_iterator {
private :
    using _Pointee_type = :: std :: remove_pointer_t < _Ptr >;
    static_assert ( :: std :: is_pointer_v < _Ptr > && :: std :: is_object_v < _Pointee_type >,
        "checked_array_iterator requires pointers to objects" );

public :
    using iterator_category = :: std :: random_access_iterator_tag;
    using value_type = :: std :: remove_cv_t < _Pointee_type >;
    using difference_type = :: std :: ptrdiff_t;
    using pointer = _Ptr;
    using reference = _Pointee_type &;




    constexpr checked_array_iterator ( ) = default;

    constexpr checked_array_iterator ( const _Ptr _Array, const size_t _Size, const size_t _Index = 0 ) noexcept
        : _Myarray ( _Array ), _Mysize ( _Size ), _Myindex ( _Index ) {
        do { if ( _Index <= _Size ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1490, 0, "%s", "checked_array_iterator construction index out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x63\x6f\x6e\x73\x74\x72\x75\x63" L"\x74\x69\x6f\x6e\x20\x69\x6e\x64\x65\x78\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1490, 0 ); } while ( false ); }; } while ( false );
    }

    __pragma(warning(push))                            __pragma(warning(disable : 4996))
    template < class _Ty = _Pointee_type, :: std :: enable_if_t < ! :: std :: is_const_v < _Ty >, int > = 0 >
    constexpr operator checked_array_iterator < const _Ty * > ( ) const noexcept {
        return checked_array_iterator < const _Ty * > { _Myarray, _Mysize, _Myindex };
    }
    __pragma(warning(pop))

    [ [ nodiscard ] ] constexpr _Ptr base ( ) const noexcept {
        return _Myarray + _Myindex;
    }

    [ [ nodiscard ] ] constexpr reference operator * ( ) const noexcept {
        return * operator -> ( );
    }

    [ [ nodiscard ] ] constexpr pointer operator -> ( ) const noexcept {
        do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1509, 0, "%s", "cannot dereference value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61" L"\x6c\x69\x7a\x65\x64\x20\x6f\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72" L"\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1509, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Myindex < _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1510, 0, "%s", "cannot dereference end checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x65\x6e\x64\x20\x63\x68\x65\x63\x6b\x65\x64\x5f" L"\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1510, 0 ); } while ( false ); }; } while ( false );
        return _Myarray + _Myindex;
    }

    constexpr checked_array_iterator & operator ++ ( ) noexcept {
        do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1515, 0, "%s", "cannot increment value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x6f\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1515, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Myindex < _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1516, 0, "%s", "cannot increment checked_array_iterator past end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f" L"\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x70\x61\x73\x74\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1516, 0 ); } while ( false ); }; } while ( false );
        ++ _Myindex;
        return * this;
    }

    constexpr checked_array_iterator operator ++ ( int ) noexcept {
        checked_array_iterator _Tmp = * this;
        ++ * this;
        return _Tmp;
    }

    constexpr checked_array_iterator & operator -- ( ) noexcept {
        do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1528, 0, "%s", "cannot decrement value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x6f\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1528, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Myindex != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1529, 0, "%s", "cannot decrement checked_array_iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f" L"\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1529, 0 ); } while ( false ); }; } while ( false );
        -- _Myindex;
        return * this;
    }

    constexpr checked_array_iterator operator -- ( int ) noexcept {
        checked_array_iterator _Tmp = * this;
        -- * this;
        return _Tmp;
    }

    constexpr checked_array_iterator & operator += ( const difference_type _Off ) noexcept {
        if ( _Off != 0 ) {
            do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1542, 0, "%s", "cannot seek value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x6f" L"\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1542, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off < 0 ) {
            do { if ( _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1547, 0, "%s", "cannot seek checked_array_iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1547, 0 ); } while ( false ); }; } while ( false );

        }

        if ( _Off > 0 ) {
            do { if ( _Mysize - _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1552, 0, "%s", "cannot seek checked_array_iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x61\x66\x74\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1552, 0 ); } while ( false ); }; } while ( false );

        }

        _Myindex += _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr checked_array_iterator operator + ( const difference_type _Off ) const noexcept {
        checked_array_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend constexpr checked_array_iterator operator + (
        const difference_type _Off, const checked_array_iterator < _Ptr > & _Next ) noexcept {
        return _Next + _Off;
    }

    constexpr checked_array_iterator & operator -= ( const difference_type _Off ) noexcept {
        if ( _Off != 0 ) {
            do { if ( _Myarray ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1572, 0, "%s", "cannot seek value-initialized or null checked_array_iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x6f" L"\x72\x20\x6e\x75\x6c\x6c\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1572, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off > 0 ) {
            do { if ( _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1576, 0, "%s", "cannot seek checked_array_iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1576, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off < 0 ) {
            do { if ( _Mysize - _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1581, 0, "%s", "cannot seek checked_array_iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x61\x66\x74\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1581, 0 ); } while ( false ); }; } while ( false );

        }

        _Myindex -= _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr checked_array_iterator operator - ( const difference_type _Off ) const noexcept {
        checked_array_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] constexpr difference_type operator - ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1596, 0, "%s", "cannot subtract incompatible checked_array_iterators" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x75\x62\x74\x72\x61\x63\x74\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x63\x68" L"\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1596, 0 ); } while ( false ); }; } while ( false );

        return static_cast < difference_type > ( _Myindex - _Right . _Myindex );
    }

    [ [ nodiscard ] ] constexpr reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] constexpr bool operator == ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1606, 0, "%s", "cannot compare incompatible checked_array_iterators for equality" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x63\x6f\x6d\x70\x61\x72\x65\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x63\x68\x65" L"\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x66\x6f\x72\x20\x65\x71\x75\x61\x6c\x69\x74" L"\x79\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1606, 0 ); } while ( false ); }; } while ( false );

        return _Myindex == _Right . _Myindex;
    }








    [ [ nodiscard ] ] constexpr bool operator != ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] constexpr bool operator < ( const checked_array_iterator & _Right ) const noexcept {
        do { if ( _Myarray == _Right . _Myarray && _Mysize == _Right . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1623, 0, "%s", "cannot compare incompatible checked_array_iterators" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x63\x6f\x6d\x70\x61\x72\x65\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x63\x68\x65" L"\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1623, 0 ); } while ( false ); }; } while ( false );

        return _Myindex < _Right . _Myindex;
    }

    [ [ nodiscard ] ] constexpr bool operator > ( const checked_array_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] constexpr bool operator <= ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] constexpr bool operator >= ( const checked_array_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    friend constexpr void _Verify_range (
        const checked_array_iterator & _First, const checked_array_iterator & _Last ) noexcept {
        do { if ( _First . _Myarray == _Last . _Myarray && _First . _Mysize == _Last . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1643, 0, "%s", "mismatching checked_array_iterators" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6d\x69\x73\x6d\x61\x74\x63\x68\x69\x6e\x67\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x73\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1643, 0 ); } while ( false ); }; } while ( false );

        do { if ( _First . _Myindex <= _Last . _Myindex ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1644, 0, "%s", "transposed checked_array_iterator range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x74\x72\x61\x6e\x73\x70\x6f\x73\x65\x64\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1644, 0 ); } while ( false ); }; } while ( false );
    }

    constexpr void _Verify_offset ( const difference_type _Off ) const noexcept {
        if ( _Off < 0 ) {
            do { if ( _Myindex >= size_t { 0 } - static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1650, 0, "%s", "cannot seek checked_array_iterator iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1650, 0 ); } while ( false ); }; } while ( false );

        }

        if ( _Off > 0 ) {
            do { if ( _Mysize - _Myindex >= static_cast < size_t > ( _Off ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator", 1655, 0, "%s", "cannot seek checked_array_iterator iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x63\x68\x65\x63\x6b\x65\x64\x5f\x61\x72\x72\x61\x79\x5f\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x61\x66\x74\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x69\x74\x65\x72\x61\x74" L"\x6f\x72", 1655, 0 ); } while ( false ); }; } while ( false );

        }
    }

    using _Prevent_inheriting_unwrap = checked_array_iterator;

    [ [ nodiscard ] ] constexpr _Ptr _Unwrapped ( ) const noexcept {
        return _Myarray + _Myindex;
    }

    constexpr void _Seek_to ( _Ptr _It ) noexcept {
        _Myindex = static_cast < size_t > ( _It - _Myarray );
    }

private :
    _Ptr _Myarray = nullptr;
    size_t _Mysize = 0;
    size_t _Myindex = 0;
};
#line 1675 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1676
template < class _Ptr >
 [ [ nodiscard ] ] constexpr checked_array_iterator < _Ptr > make_checked_array_iterator (
    const _Ptr _Array, const size_t _Size, const size_t _Index = 0 ) noexcept {
    return checked_array_iterator < _Ptr > ( _Array, _Size, _Index );
}
#line 1681
__pragma( warning(pop)) 
#line 1683
template < class _Ptr >
class unchecked_array_iterator {
private :
    using _Pointee_type = :: std :: remove_pointer_t < _Ptr >;
    static_assert ( :: std :: is_pointer_v < _Ptr > && :: std :: is_object_v < _Pointee_type >,
        "unchecked_array_iterator requires pointers to objects" );

public :
    using iterator_category = :: std :: random_access_iterator_tag;
    using value_type = :: std :: remove_cv_t < _Pointee_type >;
    using difference_type = :: std :: ptrdiff_t;
    using pointer = _Ptr;
    using reference = _Pointee_type &;




    constexpr unchecked_array_iterator ( ) = default;

    constexpr explicit unchecked_array_iterator ( const _Ptr _Src ) noexcept : _Myptr ( _Src ) { }

    __pragma(warning(push))                            __pragma(warning(disable : 4996))
    template < class _Ty = _Pointee_type, :: std :: enable_if_t < ! :: std :: is_const_v < _Ty >, int > = 0 >
    constexpr operator unchecked_array_iterator < const _Ty * > ( ) const noexcept {
        return unchecked_array_iterator < const _Ty * > { _Myptr };
    }
    __pragma(warning(pop))

    [ [ nodiscard ] ] constexpr _Ptr base ( ) const noexcept {
        return _Myptr;
    }

    [ [ nodiscard ] ] constexpr reference operator * ( ) const noexcept {
        return * _Myptr;
    }

    [ [ nodiscard ] ] constexpr pointer operator -> ( ) const noexcept {
        return _Myptr;
    }

    constexpr unchecked_array_iterator & operator ++ ( ) noexcept {
        ++ _Myptr;
        return * this;
    }

    constexpr unchecked_array_iterator operator ++ ( int ) noexcept {
        unchecked_array_iterator _Tmp = * this;
        ++ _Myptr;
        return _Tmp;
    }

    constexpr unchecked_array_iterator & operator -- ( ) noexcept {
        -- _Myptr;
        return * this;
    }

    constexpr unchecked_array_iterator operator -- ( int ) noexcept {
        unchecked_array_iterator _Tmp = * this;
        -- _Myptr;
        return _Tmp;
    }

    constexpr unchecked_array_iterator & operator += ( const difference_type _Off ) noexcept {
        _Myptr += _Off;
        return * this;
    }

    [ [ nodiscard ] ] constexpr unchecked_array_iterator operator + ( const difference_type _Off ) const noexcept {
        unchecked_array_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend constexpr unchecked_array_iterator operator + (
        const difference_type _Off, const unchecked_array_iterator & _Next ) noexcept {
        return _Next + _Off;
    }

    constexpr unchecked_array_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] constexpr unchecked_array_iterator operator - ( const difference_type _Off ) const noexcept {
        unchecked_array_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] constexpr difference_type operator - ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr - _Right . _Myptr;
    }

    [ [ nodiscard ] ] constexpr reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] constexpr bool operator == ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr == _Right . _Myptr;
    }






    [ [ nodiscard ] ] constexpr bool operator != ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] constexpr bool operator < ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Myptr < _Right . _Myptr;
    }

    [ [ nodiscard ] ] constexpr bool operator > ( const unchecked_array_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] constexpr bool operator <= ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] constexpr bool operator >= ( const unchecked_array_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }



    friend constexpr void _Verify_range (
        const unchecked_array_iterator _First, const unchecked_array_iterator _Last ) noexcept {
        :: std :: _Verify_range ( _First . _Myptr, _Last . _Myptr );
    }


    using _Prevent_inheriting_unwrap = unchecked_array_iterator;

    static constexpr bool _Unwrap_when_unverified = true;

    [ [ nodiscard ] ] constexpr _Ptr _Unwrapped ( ) const noexcept {
        return _Myptr;
    }

    constexpr void _Seek_to ( _Ptr _It ) noexcept {
        _Myptr = _It;
    }

private :
    _Ptr _Myptr = nullptr;
};
#line 1832 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1833
template < class _Ptr >
 [ [ nodiscard ] ] unchecked_array_iterator < _Ptr > make_unchecked_array_iterator (
    const _Ptr _It ) noexcept {
    return unchecked_array_iterator < _Ptr > ( _It );
}
#line 1838
__pragma( warning(pop)) 
#line 1839
}
#line 1860 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iterator"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_system_error_abi.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 25 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_system_error_abi.hpp"
extern "C" {
#line 26
[[nodiscard]] size_t __stdcall __std_get_string_size_without_trailing_whitespace(const char * _Str, size_t _Size) noexcept; 
#line 29
[[nodiscard]] size_t __stdcall __std_system_error_allocate_message(unsigned long _Message_id, char ** _Ptr_str) noexcept; 
#line 31
void __stdcall __std_system_error_deallocate_message(char * _Str) noexcept; 
#line 32
}
#line 36
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 24
[[nodiscard]] bool __cdecl 
#line 25
uncaught_exception() noexcept; 
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
[[nodiscard]] int __cdecl uncaught_exceptions() noexcept; 
#line 29
}
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
typedef 
#line 42
struct _heapinfo { 
#line 44
int *_pentry; 
#line 45
size_t _size; 
#line 46
int _useflag; 
#line 47
} _HEAPINFO; 
#line 55
void *__cdecl _alloca(size_t _Size); 
#line 61
__declspec(dllimport) intptr_t __cdecl _get_heap_handle(); 
#line 64
__declspec(dllimport) int __cdecl _heapmin(); 
#line 67
__declspec(dllimport) int __cdecl _heapwalk(_HEAPINFO * _EntryInfo); 
#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _heapchk(); 
#line 74 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
__declspec(dllimport) int __cdecl _resetstkoflw(); 
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
static_assert((sizeof(unsigned) <= (16)), "sizeof(unsigned int) <= _ALLOCA_S_MARKER_SIZE");
#line 89
#pragma warning(push)
#pragma warning(disable: 6540)
#line 93
__inline void *_MarkAllocaS(void *_Ptr, unsigned _Marker) 
#line 94
{ 
#line 95
if (_Ptr) 
#line 96
{ 
#line 97
(*((unsigned *)_Ptr)) = _Marker; 
#line 98
_Ptr = (((char *)_Ptr) + 16); 
#line 99
}  
#line 100
return _Ptr; 
#line 101
} 
#line 103
__inline size_t _MallocaComputeSize(size_t _Size) 
#line 104
{ 
#line 105
size_t _MarkedSize = _Size + (16); 
#line 106
return (_MarkedSize > _Size) ? _MarkedSize : (0); 
#line 107
} 
#line 109
#pragma warning(pop)
#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
#pragma warning(push)
#pragma warning(disable: 6014)
__inline void __cdecl _freea(void *_Memory) 
#line 151
{ 
#line 152
unsigned _Marker; 
#line 153
if (_Memory) 
#line 154
{ 
#line 155
_Memory = (((char *)_Memory) - 16); 
#line 156
_Marker = (*((unsigned *)_Memory)); 
#line 157
if (_Marker == (56797)) 
#line 158
{ 
#line 159
free(_Memory); 
#line 160
} else { 
#line 162
if (_Marker != (52428)) 
#line 163
{ 
#line 164
(void)(((!(!(("Corrupted pointer passed to _freea") && (0)))) || (1 != _CrtDbgReportW(2, L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x20\x28\x78\x38\x36\x29\x5c\x57\x69\x6e\x64\x6f\x77\x73\x20\x4b" L"\x69\x74\x73\x5c\x31\x30\x5c\x49\x6e\x63\x6c\x75\x64\x65\x5c\x31\x30\x2e\x30\x2e\x32\x32\x36\x32\x31\x2e\x30\x5c\x75\x63\x72\x74" L"\x5c\x6d\x61\x6c\x6c\x6f\x63\x2e\x68", 164, 0, L"\x25\x6c\x73", L"\x28\x22\x43\x6f\x72\x72\x75\x70\x74\x65\x64\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x70\x61\x73\x73\x65\x64\x20\x74\x6f\x20\x5f\x66" L"\x72\x65\x65\x61\x22\x20\x26\x26\x20\x30\x29"))) || (__debugbreak(), 0)); 
#line 165
}  }  
#line 167 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
}  
#line 168
} 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
}
#line 169 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
#pragma warning(pop)
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\malloc.h"
__pragma( pack ( pop )) 
#line 183
#pragma warning(pop)
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_terminate.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 22
typedef void (__cdecl *terminate_handler)(void); 
#line 23
typedef void (__cdecl *terminate_function)(void); 
#line 32
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(); 
#line 33
__declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw(); 
#line 37
__declspec(dllimport) terminate_handler __cdecl set_terminate(terminate_handler _NewTerminateHandler) throw(); 
#line 41
__declspec(dllimport) terminate_handler __cdecl _get_terminate(); 
#line 47 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_terminate.h"
}__pragma( pack ( pop )) 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\corecrt_terminate.h"
#pragma warning(pop)
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\eh.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 24
typedef void (__cdecl *unexpected_handler)(void); 
#line 25
typedef void (__cdecl *unexpected_function)(void); 
#line 33
__declspec(noreturn) void __cdecl unexpected() noexcept(false); 
#line 36
unexpected_handler __cdecl set_unexpected(unexpected_handler _NewUnexpectedHandler) noexcept; 
#line 39
unexpected_handler __cdecl _get_unexpected() noexcept; 
#line 44 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\eh.h"
struct _EXCEPTION_POINTERS; 
#line 48
typedef void (__cdecl *_se_translator_function)(unsigned, _EXCEPTION_POINTERS *); 
#line 50
_se_translator_function __cdecl _set_se_translator(_se_translator_function _NewSETranslator); 
#line 55 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\eh.h"
extern "C++" {
#line 56
class type_info; 
#line 57
}
#line 59
int __cdecl _is_exception_typeof(const type_info & _Type, _EXCEPTION_POINTERS * _ExceptionPtr); 
#line 64
bool __cdecl __uncaught_exception(); 
#line 65
int __cdecl __uncaught_exceptions(); 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\eh.h"
}__pragma( pack ( pop )) 
#line 70
#pragma warning(pop)
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_exception.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 21
#pragma pack ( push, 8 )
#line 23
__pragma( pack ( push, 8 )) extern "C" {
#line 25
struct __std_exception_data { 
#line 27
const char *_What; 
#line 28
bool _DoFree; 
#line 29
}; 
#line 31
void __cdecl __std_exception_copy(const __std_exception_data * _From, __std_exception_data * _To); 
#line 36
void __cdecl __std_exception_destroy(__std_exception_data * _Data); 
#line 40
}__pragma( pack ( pop )) 
#line 44
namespace std { 
#line 46
#pragma warning(push)
#pragma warning(disable: 4577)
class exception { 
#line 52
public: exception() noexcept : _Data() 
#line 54
{ 
#line 55
} 
#line 57
explicit exception(const char *const _Message) noexcept : _Data() 
#line 59
{ 
#line 60
__std_exception_data _InitData = {_Message, true}; 
#line 61
__std_exception_copy(&_InitData, &(_Data)); 
#line 62
} 
#line 64
exception(const char *const _Message, int) noexcept : _Data() 
#line 66
{ 
#line 67
((_Data)._What) = _Message; 
#line 68
} 
#line 70
exception(const exception &_Other) noexcept : _Data() 
#line 72
{ 
#line 73
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 74
} 
#line 76
exception &operator=(const exception &_Other) noexcept 
#line 77
{ 
#line 78
if (this == (&_Other)) 
#line 79
{ 
#line 80
return *this; 
#line 81
}  
#line 83
__std_exception_destroy(&(_Data)); 
#line 84
__std_exception_copy(&(_Other._Data), &(_Data)); 
#line 85
return *this; 
#line 86
} 
#line 88
virtual ~exception() noexcept 
#line 89
{ 
#line 90
__std_exception_destroy(&(_Data)); 
#line 91
} 
#line 93
[[nodiscard]] virtual const char *what() const 
#line 94
{ 
#line 95
return ((_Data)._What) ? (_Data)._What : ("Unknown exception"); 
#line 96
} 
#line 100
private: __std_exception_data _Data; 
#line 101
}; 
#line 103
class bad_exception : public exception { 
#line 108
public: bad_exception() noexcept : exception("bad exception", 1) 
#line 110
{ 
#line 111
} 
#line 112
}; 
#line 114
class bad_alloc : public exception { 
#line 119
public: bad_alloc() noexcept : exception("bad allocation", 1) 
#line 121
{ 
#line 122
} 
#line 126
friend class bad_array_new_length; 
#line 128
private: bad_alloc(const char *const _Message) noexcept : exception(_Message, 1) 
#line 130
{ 
#line 131
} 
#line 132
}; 
#line 134
class bad_array_new_length : public bad_alloc { 
#line 139
public: bad_array_new_length() noexcept : bad_alloc("bad array new length") 
#line 141
{ 
#line 142
} 
#line 143
}; 
#line 145
#pragma warning(pop)
#line 147
}
#line 149
#pragma pack ( pop )
#line 151
#pragma warning(pop)
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
namespace std { 
#line 38
class exception; 
#line 39
class bad_exception; 
#line 41
using ::terminate;
#line 44
using ::set_terminate;
#line 45
using ::terminate_handler;
#line 47
[[nodiscard]] inline terminate_handler __cdecl get_terminate() noexcept { 
#line 49
return _get_terminate(); 
#line 50
} 
#line 54 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
using ::unexpected;
#line 57
using ::set_unexpected;
#line 58
using ::unexpected_handler;
#line 60
[[nodiscard]] inline unexpected_handler __cdecl get_unexpected() noexcept { 
#line 62
return _get_unexpected(); 
#line 63
} 
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
}
#line 208 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
void __cdecl __ExceptionPtrCreate(void *) noexcept; 
#line 209
void __cdecl __ExceptionPtrDestroy(void *) noexcept; 
#line 210
void __cdecl __ExceptionPtrCopy(void *, const void *) noexcept; 
#line 211
void __cdecl __ExceptionPtrAssign(void *, const void *) noexcept; 
#line 212
bool __cdecl __ExceptionPtrCompare(const void *, const void *) noexcept; 
#line 214
bool __cdecl __ExceptionPtrToBool(const void *) noexcept; 
#line 215
void __cdecl __ExceptionPtrSwap(void *, void *) noexcept; 
#line 216
void __cdecl __ExceptionPtrCurrentException(void *) noexcept; 
#line 217
[[noreturn]] void __cdecl __ExceptionPtrRethrow(const void *); 
#line 218
void __cdecl __ExceptionPtrCopyException(void *, const void *, const void *) noexcept; 
#line 221
namespace std { 
#line 223
class exception_ptr { 
#line 225
public: exception_ptr() noexcept { 
#line 226
__ExceptionPtrCreate(this); 
#line 227
} 
#line 229
exception_ptr(nullptr_t) noexcept { 
#line 230
__ExceptionPtrCreate(this); 
#line 231
} 
#line 233
~exception_ptr() noexcept { 
#line 234
__ExceptionPtrDestroy(this); 
#line 235
} 
#line 237
exception_ptr(const exception_ptr &_Rhs) noexcept { 
#line 238
__ExceptionPtrCopy(this, &_Rhs); 
#line 239
} 
#line 241
exception_ptr &operator=(const exception_ptr &_Rhs) noexcept { 
#line 242
__ExceptionPtrAssign(this, &_Rhs); 
#line 243
return *this; 
#line 244
} 
#line 246
exception_ptr &operator=(nullptr_t) noexcept { 
#line 247
exception_ptr _Ptr; 
#line 248
__ExceptionPtrAssign(this, &_Ptr); 
#line 249
return *this; 
#line 250
} 
#line 252
explicit operator bool() const noexcept { 
#line 253
return __ExceptionPtrToBool(this); 
#line 254
} 
#line 256
static exception_ptr _Current_exception() noexcept { 
#line 257
exception_ptr _Retval; 
#line 258
__ExceptionPtrCurrentException(&_Retval); 
#line 259
return _Retval; 
#line 260
} 
#line 262
static exception_ptr _Copy_exception(void *_Except, const void *_Ptr) { 
#line 263
exception_ptr _Retval; 
#line 264
if (!_Ptr) { 
#line 266
return _Retval; 
#line 267
}  
#line 268
__ExceptionPtrCopyException(&_Retval, _Except, _Ptr); 
#line 269
return _Retval; 
#line 270
} 
#line 272
friend inline void swap(exception_ptr &_Lhs, exception_ptr &_Rhs) noexcept { 
#line 273
__ExceptionPtrSwap(&_Lhs, &_Rhs); 
#line 274
} 
#line 276
friend inline bool operator==(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept { 
#line 277
return __ExceptionPtrCompare(&_Lhs, &_Rhs); 
#line 278
} 
#line 280
friend inline bool operator==(const exception_ptr &_Lhs, std::nullptr_t) noexcept { 
#line 281
return !_Lhs; 
#line 282
} 
#line 285
friend inline bool operator==(std::nullptr_t, const exception_ptr &_Rhs) noexcept { 
#line 286
return !_Rhs; 
#line 287
} 
#line 289
friend inline bool operator!=(const exception_ptr &_Lhs, const exception_ptr &_Rhs) noexcept { 
#line 290
return !(_Lhs == _Rhs); 
#line 291
} 
#line 293
friend inline bool operator!=(const exception_ptr &_Lhs, std::nullptr_t _Rhs) noexcept { 
#line 294
return !(_Lhs == _Rhs); 
#line 295
} 
#line 297
friend inline bool operator!=(std::nullptr_t _Lhs, const exception_ptr &_Rhs) noexcept { 
#line 298
return !(_Lhs == _Rhs); 
#line 299
} 
#line 307 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
private: void *_Data1{((void *)0i64)}; 
#line 308
void *_Data2{((void *)0i64)}; 
#line 312
}; 
#line 314
[[nodiscard]] inline exception_ptr current_exception() noexcept { 
#line 315
return exception_ptr::_Current_exception(); 
#line 316
} 
#line 318
[[noreturn]] inline void rethrow_exception(exception_ptr _Ptr) { 
#line 319
__ExceptionPtrRethrow(&_Ptr); 
#line 320
} 
#line 322
template< class _Ex> void *__GetExceptionInfo(_Ex); 
#line 325
template < class _Ex >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] exception_ptr make_exception_ptr ( _Ex _Except ) noexcept {
    return exception_ptr :: _Copy_exception ( :: std :: addressof ( _Except ), __GetExceptionInfo ( _Except ) );
}
#line 330
[[noreturn]] inline void _Throw_bad_array_new_length() { 
#line 331
throw bad_array_new_length{}; 
#line 332
} 
#line 334
class nested_exception { 
#line 336
public: nested_exception() noexcept : _Exc(::std::current_exception()) { } 
#line 338
nested_exception(const nested_exception &) noexcept = default;
#line 339
nested_exception &operator=(const nested_exception &) noexcept = default;
#line 340
virtual ~nested_exception() noexcept { } 
#line 342
[[noreturn]] void rethrow_nested() const { 
#line 343
if ((_Exc)) { 
#line 344
::std::rethrow_exception(_Exc); 
#line 345
} else { 
#line 346
::std::terminate(); 
#line 347
}  
#line 348
} 
#line 350
[[nodiscard]] exception_ptr nested_ptr() const noexcept { 
#line 351
return _Exc; 
#line 352
} 
#line 355
private: exception_ptr _Exc; 
#line 356
}; 
#line 358
template < class _Ty, class _Uty >
struct _With_nested : _Uty, nested_exception {
    explicit _With_nested ( _Ty && _Arg )
        : _Uty ( :: std :: forward < _Ty > ( _Arg ) ), nested_exception ( ) { }
};
#line 364
template < class _Ty >
[ [ noreturn ] ] void throw_with_nested ( _Ty && _Arg ) {

    using _Uty = decay_t < _Ty >;

    if constexpr ( is_class_v < _Uty > && ! is_base_of_v < nested_exception, _Uty > && ! is_final_v < _Uty > ) {

        using _Glued = _With_nested < _Ty, _Uty >;
        throw _Glued ( :: std :: forward < _Ty > ( _Arg ) );
    } else {

        throw :: std :: forward < _Ty > ( _Arg );
    }
}
#line 380
template < class _Ty >
void rethrow_if_nested ( const _Ty & _Arg ) {

    constexpr bool _Can_use_dynamic_cast =
        is_polymorphic_v < _Ty > && ( ! is_base_of_v < nested_exception, _Ty > || is_convertible_v < _Ty *, nested_exception * > );

    if constexpr ( _Can_use_dynamic_cast ) {
        const auto _Nested = dynamic_cast < const nested_exception * > ( :: std :: addressof ( _Arg ) );

        if ( _Nested ) {
            _Nested -> rethrow_nested ( );
        }
    }
}
#line 399 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
class bad_variant_access : public exception { 
#line 402
public: bad_variant_access() noexcept = default;
#line 404
[[nodiscard]] virtual const char *what() const noexcept override { 
#line 405
return "bad variant access"; 
#line 406
} 
#line 414 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\exception"
}; 
#line 416
[[noreturn]] inline void _Throw_bad_variant_access() { 
#line 417
throw bad_variant_access{}; 
#line 418
} 
#line 420
}
#line 424
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 58 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma detect_mismatch("annotate_string", "0")
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma detect_mismatch("annotate_vector", "0")
#line 76 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_sanitizer_annotate_container.hpp"
extern "C" {
#line 84
}
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_sanitizer_annotate_container.hpp"
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\float.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 19
__pragma( pack ( push, 8 )) extern "C" {
#line 231 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\float.h"
__declspec(dllimport) unsigned __cdecl _clearfp(); 
#line 233
#pragma warning(push)
#pragma warning(disable: 4141)
#line 237
__declspec(dllimport) unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); 
#line 242
#pragma warning(pop)
#line 245
__declspec(dllimport) void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); 
#line 251
__declspec(dllimport) errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); 
#line 258
__declspec(dllimport) unsigned __cdecl _statusfp(); 
#line 261
__declspec(dllimport) void __cdecl _fpreset(); 
#line 277
__declspec(dllimport) unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); 
#line 294
__declspec(dllimport) int *__cdecl __fpecode(); 
#line 299
__declspec(dllimport) int __cdecl __fpe_flt_rounds(); 
#line 312
__declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); 
#line 313
__declspec(dllimport) double __cdecl _chgsign(double _X); 
#line 314
__declspec(dllimport) double __cdecl _scalb(double _X, long _Y); 
#line 315
__declspec(dllimport) double __cdecl _logb(double _X); 
#line 316
__declspec(dllimport) double __cdecl _nextafter(double _X, double _Y); 
#line 317
__declspec(dllimport) int __cdecl _finite(double _X); 
#line 318
__declspec(dllimport) int __cdecl _isnan(double _X); 
#line 319
__declspec(dllimport) int __cdecl _fpclass(double _X); 
#line 322
__declspec(dllimport) float __cdecl _scalbf(float _X, long _Y); 
#line 339 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\float.h"
__declspec(dllimport) void __cdecl fpreset(); 
#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\float.h"
}__pragma( pack ( pop )) 
#line 408
#pragma warning(pop)
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\intrin0.inl.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 25
#pragma warning(disable: 28251)
#line 28
extern "C" {
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\intrin0.inl.h"
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask); 
#line 128
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 130
unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask); 
#line 131
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask); 
#line 133
unsigned char _bittest(const long *, long); 
#line 138
long _InterlockedAnd(volatile long * _Value, long _Mask); 
#line 139
short _InterlockedAnd16(volatile short * _Value, short _Mask); 
#line 143
__int64 _InterlockedAnd64(volatile __int64 * _Value, __int64 _Mask); 
#line 144
__int64 _interlockedand64(volatile __int64 * _Value, __int64 _Mask); 
#line 148
char _InterlockedAnd8(volatile char * _Value, char _Mask); 
#line 155
long _InterlockedCompareExchange(volatile long * _Destination, long _Exchange, long _Comparand); 
#line 157
short _InterlockedCompareExchange16(volatile short * _Destination, short _Exchange, short _Comparand); 
#line 161
__int64 _InterlockedCompareExchange64(volatile __int64 * _Destination, __int64 _Exchange, __int64 _Comparand); 
#line 165
char _InterlockedCompareExchange8(volatile char * _Destination, char _Exchange, char _Comparand); 
#line 172
unsigned char _InterlockedCompareExchange128(volatile __int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult); 
#line 176
long _InterlockedDecrement(volatile long * _Addend); 
#line 178
short _InterlockedDecrement16(volatile short * _Addend); 
#line 179
__int64 _InterlockedDecrement64(volatile __int64 * _Addend); 
#line 180
__int64 _interlockeddecrement64(volatile __int64 * _Addend); 
#line 181
long _InterlockedExchange(volatile long * _Target, long _Value); 
#line 183
short _InterlockedExchange16(volatile short * _Target, short _Value); 
#line 187
__int64 _InterlockedExchange64(volatile __int64 * _Target, __int64 _Value); 
#line 188
__int64 _interlockedexchange64(volatile __int64 * _Target, __int64 _Value); 
#line 192
char _InterlockedExchange8(volatile char * _Target, char _Value); 
#line 196
long _InterlockedExchangeAdd(volatile long * _Addend, long _Value); 
#line 197
short _InterlockedExchangeAdd16(volatile short * _Addend, short _Value); 
#line 201
__int64 _InterlockedExchangeAdd64(volatile __int64 * _Addend, __int64 _Value); 
#line 202
__int64 _interlockedexchangeadd64(volatile __int64 * _Addend, __int64 _Value); 
#line 206
char _InterlockedExchangeAdd8(volatile char * _Addend, char _Value); 
#line 216
long _InterlockedIncrement(volatile long * _Addend); 
#line 218
short _InterlockedIncrement16(volatile short * _Addend); 
#line 219
__int64 _InterlockedIncrement64(volatile __int64 * _Addend); 
#line 220
__int64 _interlockedincrement64(volatile __int64 * _Addend); 
#line 222
long _InterlockedOr(volatile long * _Value, long _Mask); 
#line 223
short _InterlockedOr16(volatile short * _Value, short _Mask); 
#line 227
__int64 _InterlockedOr64(volatile __int64 * _Value, __int64 _Mask); 
#line 228
__int64 _interlockedor64(volatile __int64 * _Value, __int64 _Mask); 
#line 232
char _InterlockedOr8(volatile char * _Value, char _Mask); 
#line 239
long _InterlockedXor(volatile long * _Value, long _Mask); 
#line 240
short _InterlockedXor16(volatile short * _Value, short _Mask); 
#line 244
__int64 _InterlockedXor64(volatile __int64 * _Value, __int64 _Mask); 
#line 245
__int64 _interlockedxor64(volatile __int64 * _Value, __int64 _Mask); 
#line 249
char _InterlockedXor8(volatile char * _Value, char _Mask); 
#line 256
void _ReadWriteBarrier(); 
#line 257
short __iso_volatile_load16(const volatile short *); 
#line 258
int __iso_volatile_load32(const volatile int *); 
#line 259
__int64 __iso_volatile_load64(const volatile __int64 *); 
#line 260
char __iso_volatile_load8(const volatile char *); 
#line 261
void __iso_volatile_store16(volatile short *, short); 
#line 262
void __iso_volatile_store32(volatile int *, int); 
#line 263
void __iso_volatile_store64(volatile __int64 *, __int64); 
#line 264
void __iso_volatile_store8(volatile char *, char); 
#line 267
void _mm_pause(); 
#line 268
unsigned __lzcnt(unsigned); 
#line 269
unsigned short __lzcnt16(unsigned short); 
#line 270
unsigned __int64 __lzcnt64(unsigned __int64); 
#line 271
unsigned __popcnt(unsigned); 
#line 272
unsigned short __popcnt16(unsigned short); 
#line 273
unsigned __int64 __popcnt64(unsigned __int64); 
#line 274
unsigned __cdecl _rotl(unsigned _Value, int _Shift); 
#line 275
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift); 
#line 276
unsigned __int64 __cdecl _rotl64(unsigned __int64 _Value, int _Shift); 
#line 277
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift); 
#line 278
unsigned __cdecl _rotr(unsigned _Value, int _Shift); 
#line 279
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift); 
#line 280
unsigned __int64 __cdecl _rotr64(unsigned __int64 _Value, int _Shift); 
#line 281
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift); 
#line 282
unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 283
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift); 
#line 285
unsigned _tzcnt_u32(unsigned); 
#line 286
unsigned __int64 _tzcnt_u64(unsigned __int64); 
#line 288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\intrin0.inl.h"
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct); 
#line 290
unsigned __int64 __cdecl _udiv128(unsigned __int64 _HighDividend, unsigned __int64 _LowDividend, unsigned __int64 _Divisor, unsigned __int64 * _Remainder); 
#line 291
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 292
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *); 
#line 293
double __ceil(double); 
#line 294
float __ceilf(float); 
#line 295
double __floor(double); 
#line 296
float __floorf(float); 
#line 297
double __round(double); 
#line 298
float __roundf(float); 
#line 299
double __trunc(double); 
#line 300
float __truncf(float); 
#line 301
double __copysign(double, double); 
#line 302
float __copysignf(float, float); 
#line 303
unsigned __signbitvalue(double); 
#line 304
unsigned __signbitvaluef(float); 
#line 326 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\intrin0.inl.h"
void *__cdecl __builtin_assume_aligned(const void *, size_t, ...) noexcept; 
#line 337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\intrin0.inl.h"
}
#line 339 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\intrin0.inl.h"
#pragma warning(pop)
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\limits"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 24
namespace std { 
#line 26
enum float_denorm_style { 
#line 27
denorm_indeterminate = (-1), 
#line 28
denorm_absent = 0, 
#line 29
denorm_present
#line 30
}; 
#line 32
enum float_round_style { 
#line 33
round_indeterminate = (-1), 
#line 34
round_toward_zero = 0, 
#line 35
round_to_nearest, 
#line 36
round_toward_infinity, 
#line 37
round_toward_neg_infinity
#line 38
}; 
#line 40
struct _Num_base { 
#line 41
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 42
static constexpr float_denorm_style has_denorm = denorm_absent; 
#line 43
static constexpr bool has_denorm_loss = false; 
#line 44
__pragma( warning(pop)) 
#line 46
static constexpr bool has_infinity = false; 
#line 47
static constexpr bool has_quiet_NaN = false; 
#line 48
static constexpr bool has_signaling_NaN = false; 
#line 49
static constexpr bool is_bounded = false; 
#line 50
static constexpr bool is_exact = false; 
#line 51
static constexpr bool is_iec559 = false; 
#line 52
static constexpr bool is_integer = false; 
#line 53
static constexpr bool is_modulo = false; 
#line 54
static constexpr bool is_signed = false; 
#line 55
static constexpr bool is_specialized = false; 
#line 56
static constexpr bool tinyness_before = false; 
#line 57
static constexpr bool traps = false; 
#line 58
static constexpr float_round_style round_style = round_toward_zero; 
#line 59
static constexpr int digits = 0; 
#line 60
static constexpr int digits10 = 0; 
#line 61
static constexpr int max_digits10 = 0; 
#line 62
static constexpr int max_exponent = 0; 
#line 63
static constexpr int max_exponent10 = 0; 
#line 64
static constexpr int min_exponent = 0; 
#line 65
static constexpr int min_exponent10 = 0; 
#line 66
static constexpr int radix = 0; 
#line 67
}; 
#line 69
template < class _Ty >
class numeric_limits : public _Num_base {
public :
    [ [ nodiscard ] ] static constexpr _Ty ( min ) ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty ( max ) ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty lowest ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty epsilon ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty round_error ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty denorm_min ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty infinity ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty quiet_NaN ( ) noexcept {
        return _Ty ( );
    }

    [ [ nodiscard ] ] static constexpr _Ty signaling_NaN ( ) noexcept {
        return _Ty ( );
    }
};
#line 109
template< class _Ty> 
#line 110
class numeric_limits< const _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 112
template< class _Ty> 
#line 113
class numeric_limits< volatile _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 115
template< class _Ty> 
#line 116
class numeric_limits< const volatile _Ty>  : public std::numeric_limits< _Ty>  { }; 
#line 118
struct _Num_int_base : public _Num_base { 
#line 119
static constexpr bool is_bounded = true; 
#line 120
static constexpr bool is_exact = true; 
#line 121
static constexpr bool is_integer = true; 
#line 122
static constexpr bool is_specialized = true; 
#line 123
static constexpr int radix = 2; 
#line 124
}; 
#line 126
struct _Num_float_base : public _Num_base { 
#line 127
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 128
static constexpr float_denorm_style has_denorm = denorm_present; 
#line 129
__pragma( warning(pop)) 
#line 131
static constexpr bool has_infinity = true; 
#line 132
static constexpr bool has_quiet_NaN = true; 
#line 133
static constexpr bool has_signaling_NaN = true; 
#line 134
static constexpr bool is_bounded = true; 
#line 135
static constexpr bool is_iec559 = true; 
#line 136
static constexpr bool is_signed = true; 
#line 137
static constexpr bool is_specialized = true; 
#line 138
static constexpr float_round_style round_style = round_to_nearest; 
#line 139
static constexpr int radix = 2; 
#line 140
}; 
#line 143
template<> class numeric_limits< bool>  : public _Num_int_base { 
#line 145
public: [[nodiscard]] static constexpr bool min() noexcept { 
#line 146
return false; 
#line 147
} 
#line 149
[[nodiscard]] static constexpr bool max() noexcept { 
#line 150
return true; 
#line 151
} 
#line 153
[[nodiscard]] static constexpr bool lowest() noexcept { 
#line 154
return min(); 
#line 155
} 
#line 157
[[nodiscard]] static constexpr bool epsilon() noexcept { 
#line 158
return 0; 
#line 159
} 
#line 161
[[nodiscard]] static constexpr bool round_error() noexcept { 
#line 162
return 0; 
#line 163
} 
#line 165
[[nodiscard]] static constexpr bool denorm_min() noexcept { 
#line 166
return 0; 
#line 167
} 
#line 169
[[nodiscard]] static constexpr bool infinity() noexcept { 
#line 170
return 0; 
#line 171
} 
#line 173
[[nodiscard]] static constexpr bool quiet_NaN() noexcept { 
#line 174
return 0; 
#line 175
} 
#line 177
[[nodiscard]] static constexpr bool signaling_NaN() noexcept { 
#line 178
return 0; 
#line 179
} 
#line 181
static constexpr int digits = 1; 
#line 182
}; 
#line 185
template<> class numeric_limits< char>  : public _Num_int_base { 
#line 187
public: [[nodiscard]] static constexpr char min() noexcept { 
#line 188
return (-128); 
#line 189
} 
#line 191
[[nodiscard]] static constexpr char max() noexcept { 
#line 192
return 127; 
#line 193
} 
#line 195
[[nodiscard]] static constexpr char lowest() noexcept { 
#line 196
return min(); 
#line 197
} 
#line 199
[[nodiscard]] static constexpr char epsilon() noexcept { 
#line 200
return 0; 
#line 201
} 
#line 203
[[nodiscard]] static constexpr char round_error() noexcept { 
#line 204
return 0; 
#line 205
} 
#line 207
[[nodiscard]] static constexpr char denorm_min() noexcept { 
#line 208
return 0; 
#line 209
} 
#line 211
[[nodiscard]] static constexpr char infinity() noexcept { 
#line 212
return 0; 
#line 213
} 
#line 215
[[nodiscard]] static constexpr char quiet_NaN() noexcept { 
#line 216
return 0; 
#line 217
} 
#line 219
[[nodiscard]] static constexpr char signaling_NaN() noexcept { 
#line 220
return 0; 
#line 221
} 
#line 223
static constexpr bool is_signed = ((-128) != 0); 
#line 224
static constexpr bool is_modulo = ((-128) == 0); 
#line 225
static constexpr int digits = (8 - ((-128) != 0)); 
#line 226
static constexpr int digits10 = 2; 
#line 227
}; 
#line 230
template<> class numeric_limits< signed char>  : public _Num_int_base { 
#line 232
public: [[nodiscard]] static constexpr signed char min() noexcept { 
#line 233
return (-128); 
#line 234
} 
#line 236
[[nodiscard]] static constexpr signed char max() noexcept { 
#line 237
return 127; 
#line 238
} 
#line 240
[[nodiscard]] static constexpr signed char lowest() noexcept { 
#line 241
return min(); 
#line 242
} 
#line 244
[[nodiscard]] static constexpr signed char epsilon() noexcept { 
#line 245
return 0; 
#line 246
} 
#line 248
[[nodiscard]] static constexpr signed char round_error() noexcept { 
#line 249
return 0; 
#line 250
} 
#line 252
[[nodiscard]] static constexpr signed char denorm_min() noexcept { 
#line 253
return 0; 
#line 254
} 
#line 256
[[nodiscard]] static constexpr signed char infinity() noexcept { 
#line 257
return 0; 
#line 258
} 
#line 260
[[nodiscard]] static constexpr signed char quiet_NaN() noexcept { 
#line 261
return 0; 
#line 262
} 
#line 264
[[nodiscard]] static constexpr signed char signaling_NaN() noexcept { 
#line 265
return 0; 
#line 266
} 
#line 268
static constexpr bool is_signed = true; 
#line 269
static constexpr int digits = 7; 
#line 270
static constexpr int digits10 = 2; 
#line 271
}; 
#line 274
template<> class numeric_limits< unsigned char>  : public _Num_int_base { 
#line 276
public: [[nodiscard]] static constexpr unsigned char min() noexcept { 
#line 277
return 0; 
#line 278
} 
#line 280
[[nodiscard]] static constexpr unsigned char max() noexcept { 
#line 281
return 255; 
#line 282
} 
#line 284
[[nodiscard]] static constexpr unsigned char lowest() noexcept { 
#line 285
return min(); 
#line 286
} 
#line 288
[[nodiscard]] static constexpr unsigned char epsilon() noexcept { 
#line 289
return 0; 
#line 290
} 
#line 292
[[nodiscard]] static constexpr unsigned char round_error() noexcept { 
#line 293
return 0; 
#line 294
} 
#line 296
[[nodiscard]] static constexpr unsigned char denorm_min() noexcept { 
#line 297
return 0; 
#line 298
} 
#line 300
[[nodiscard]] static constexpr unsigned char infinity() noexcept { 
#line 301
return 0; 
#line 302
} 
#line 304
[[nodiscard]] static constexpr unsigned char quiet_NaN() noexcept { 
#line 305
return 0; 
#line 306
} 
#line 308
[[nodiscard]] static constexpr unsigned char signaling_NaN() noexcept { 
#line 309
return 0; 
#line 310
} 
#line 312
static constexpr bool is_modulo = true; 
#line 313
static constexpr int digits = 8; 
#line 314
static constexpr int digits10 = 2; 
#line 315
}; 
#line 364
template<> class numeric_limits< char16_t>  : public _Num_int_base { 
#line 366
public: [[nodiscard]] static constexpr char16_t min() noexcept { 
#line 367
return 0; 
#line 368
} 
#line 370
[[nodiscard]] static constexpr char16_t max() noexcept { 
#line 371
return 65535; 
#line 372
} 
#line 374
[[nodiscard]] static constexpr char16_t lowest() noexcept { 
#line 375
return min(); 
#line 376
} 
#line 378
[[nodiscard]] static constexpr char16_t epsilon() noexcept { 
#line 379
return 0; 
#line 380
} 
#line 382
[[nodiscard]] static constexpr char16_t round_error() noexcept { 
#line 383
return 0; 
#line 384
} 
#line 386
[[nodiscard]] static constexpr char16_t denorm_min() noexcept { 
#line 387
return 0; 
#line 388
} 
#line 390
[[nodiscard]] static constexpr char16_t infinity() noexcept { 
#line 391
return 0; 
#line 392
} 
#line 394
[[nodiscard]] static constexpr char16_t quiet_NaN() noexcept { 
#line 395
return 0; 
#line 396
} 
#line 398
[[nodiscard]] static constexpr char16_t signaling_NaN() noexcept { 
#line 399
return 0; 
#line 400
} 
#line 402
static constexpr bool is_modulo = true; 
#line 403
static constexpr int digits = 16; 
#line 404
static constexpr int digits10 = 4; 
#line 405
}; 
#line 408
template<> class numeric_limits< char32_t>  : public _Num_int_base { 
#line 410
public: [[nodiscard]] static constexpr char32_t min() noexcept { 
#line 411
return 0; 
#line 412
} 
#line 414
[[nodiscard]] static constexpr char32_t max() noexcept { 
#line 415
return 4294967295U; 
#line 416
} 
#line 418
[[nodiscard]] static constexpr char32_t lowest() noexcept { 
#line 419
return min(); 
#line 420
} 
#line 422
[[nodiscard]] static constexpr char32_t epsilon() noexcept { 
#line 423
return 0; 
#line 424
} 
#line 426
[[nodiscard]] static constexpr char32_t round_error() noexcept { 
#line 427
return 0; 
#line 428
} 
#line 430
[[nodiscard]] static constexpr char32_t denorm_min() noexcept { 
#line 431
return 0; 
#line 432
} 
#line 434
[[nodiscard]] static constexpr char32_t infinity() noexcept { 
#line 435
return 0; 
#line 436
} 
#line 438
[[nodiscard]] static constexpr char32_t quiet_NaN() noexcept { 
#line 439
return 0; 
#line 440
} 
#line 442
[[nodiscard]] static constexpr char32_t signaling_NaN() noexcept { 
#line 443
return 0; 
#line 444
} 
#line 446
static constexpr bool is_modulo = true; 
#line 447
static constexpr int digits = 32; 
#line 448
static constexpr int digits10 = 9; 
#line 449
}; 
#line 452
template<> class numeric_limits< __wchar_t>  : public _Num_int_base { 
#line 454
public: [[nodiscard]] static constexpr __wchar_t min() noexcept { 
#line 455
return 0; 
#line 456
} 
#line 458
[[nodiscard]] static constexpr __wchar_t max() noexcept { 
#line 459
return 65535; 
#line 460
} 
#line 462
[[nodiscard]] static constexpr __wchar_t lowest() noexcept { 
#line 463
return min(); 
#line 464
} 
#line 466
[[nodiscard]] static constexpr __wchar_t epsilon() noexcept { 
#line 467
return 0; 
#line 468
} 
#line 470
[[nodiscard]] static constexpr __wchar_t round_error() noexcept { 
#line 471
return 0; 
#line 472
} 
#line 474
[[nodiscard]] static constexpr __wchar_t denorm_min() noexcept { 
#line 475
return 0; 
#line 476
} 
#line 478
[[nodiscard]] static constexpr __wchar_t infinity() noexcept { 
#line 479
return 0; 
#line 480
} 
#line 482
[[nodiscard]] static constexpr __wchar_t quiet_NaN() noexcept { 
#line 483
return 0; 
#line 484
} 
#line 486
[[nodiscard]] static constexpr __wchar_t signaling_NaN() noexcept { 
#line 487
return 0; 
#line 488
} 
#line 490
static constexpr bool is_modulo = true; 
#line 491
static constexpr int digits = 16; 
#line 492
static constexpr int digits10 = 4; 
#line 493
}; 
#line 496
template<> class numeric_limits< short>  : public _Num_int_base { 
#line 498
public: [[nodiscard]] static constexpr short min() noexcept { 
#line 499
return (-32768); 
#line 500
} 
#line 502
[[nodiscard]] static constexpr short max() noexcept { 
#line 503
return 32767; 
#line 504
} 
#line 506
[[nodiscard]] static constexpr short lowest() noexcept { 
#line 507
return min(); 
#line 508
} 
#line 510
[[nodiscard]] static constexpr short epsilon() noexcept { 
#line 511
return 0; 
#line 512
} 
#line 514
[[nodiscard]] static constexpr short round_error() noexcept { 
#line 515
return 0; 
#line 516
} 
#line 518
[[nodiscard]] static constexpr short denorm_min() noexcept { 
#line 519
return 0; 
#line 520
} 
#line 522
[[nodiscard]] static constexpr short infinity() noexcept { 
#line 523
return 0; 
#line 524
} 
#line 526
[[nodiscard]] static constexpr short quiet_NaN() noexcept { 
#line 527
return 0; 
#line 528
} 
#line 530
[[nodiscard]] static constexpr short signaling_NaN() noexcept { 
#line 531
return 0; 
#line 532
} 
#line 534
static constexpr bool is_signed = true; 
#line 535
static constexpr int digits = 15; 
#line 536
static constexpr int digits10 = 4; 
#line 537
}; 
#line 540
template<> class numeric_limits< int>  : public _Num_int_base { 
#line 542
public: [[nodiscard]] static constexpr int min() noexcept { 
#line 543
return ((-2147483647) - 1); 
#line 544
} 
#line 546
[[nodiscard]] static constexpr int max() noexcept { 
#line 547
return 2147483647; 
#line 548
} 
#line 550
[[nodiscard]] static constexpr int lowest() noexcept { 
#line 551
return min(); 
#line 552
} 
#line 554
[[nodiscard]] static constexpr int epsilon() noexcept { 
#line 555
return 0; 
#line 556
} 
#line 558
[[nodiscard]] static constexpr int round_error() noexcept { 
#line 559
return 0; 
#line 560
} 
#line 562
[[nodiscard]] static constexpr int denorm_min() noexcept { 
#line 563
return 0; 
#line 564
} 
#line 566
[[nodiscard]] static constexpr int infinity() noexcept { 
#line 567
return 0; 
#line 568
} 
#line 570
[[nodiscard]] static constexpr int quiet_NaN() noexcept { 
#line 571
return 0; 
#line 572
} 
#line 574
[[nodiscard]] static constexpr int signaling_NaN() noexcept { 
#line 575
return 0; 
#line 576
} 
#line 578
static constexpr bool is_signed = true; 
#line 579
static constexpr int digits = 31; 
#line 580
static constexpr int digits10 = 9; 
#line 581
}; 
#line 584
template<> class numeric_limits< long>  : public _Num_int_base { 
#line 586
public: [[nodiscard]] static constexpr long min() noexcept { 
#line 587
return ((-2147483647L) - (1)); 
#line 588
} 
#line 590
[[nodiscard]] static constexpr long max() noexcept { 
#line 591
return 2147483647L; 
#line 592
} 
#line 594
[[nodiscard]] static constexpr long lowest() noexcept { 
#line 595
return min(); 
#line 596
} 
#line 598
[[nodiscard]] static constexpr long epsilon() noexcept { 
#line 599
return 0; 
#line 600
} 
#line 602
[[nodiscard]] static constexpr long round_error() noexcept { 
#line 603
return 0; 
#line 604
} 
#line 606
[[nodiscard]] static constexpr long denorm_min() noexcept { 
#line 607
return 0; 
#line 608
} 
#line 610
[[nodiscard]] static constexpr long infinity() noexcept { 
#line 611
return 0; 
#line 612
} 
#line 614
[[nodiscard]] static constexpr long quiet_NaN() noexcept { 
#line 615
return 0; 
#line 616
} 
#line 618
[[nodiscard]] static constexpr long signaling_NaN() noexcept { 
#line 619
return 0; 
#line 620
} 
#line 622
static_assert((sizeof(int) == sizeof(long)), "LLP64 assumption");
#line 623
static constexpr bool is_signed = true; 
#line 624
static constexpr int digits = 31; 
#line 625
static constexpr int digits10 = 9; 
#line 626
}; 
#line 629
template<> class numeric_limits< __int64>  : public _Num_int_base { 
#line 631
public: [[nodiscard]] static constexpr __int64 min() noexcept { 
#line 632
return ((-9223372036854775807i64) - (1)); 
#line 633
} 
#line 635
[[nodiscard]] static constexpr __int64 max() noexcept { 
#line 636
return 9223372036854775807i64; 
#line 637
} 
#line 639
[[nodiscard]] static constexpr __int64 lowest() noexcept { 
#line 640
return min(); 
#line 641
} 
#line 643
[[nodiscard]] static constexpr __int64 epsilon() noexcept { 
#line 644
return 0; 
#line 645
} 
#line 647
[[nodiscard]] static constexpr __int64 round_error() noexcept { 
#line 648
return 0; 
#line 649
} 
#line 651
[[nodiscard]] static constexpr __int64 denorm_min() noexcept { 
#line 652
return 0; 
#line 653
} 
#line 655
[[nodiscard]] static constexpr __int64 infinity() noexcept { 
#line 656
return 0; 
#line 657
} 
#line 659
[[nodiscard]] static constexpr __int64 quiet_NaN() noexcept { 
#line 660
return 0; 
#line 661
} 
#line 663
[[nodiscard]] static constexpr __int64 signaling_NaN() noexcept { 
#line 664
return 0; 
#line 665
} 
#line 667
static constexpr bool is_signed = true; 
#line 668
static constexpr int digits = 63; 
#line 669
static constexpr int digits10 = 18; 
#line 670
}; 
#line 674
template<> class numeric_limits< unsigned short>  : public _Num_int_base { 
#line 676
public: [[nodiscard]] static constexpr unsigned short min() noexcept { 
#line 677
return 0; 
#line 678
} 
#line 680
[[nodiscard]] static constexpr unsigned short max() noexcept { 
#line 681
return 65535; 
#line 682
} 
#line 684
[[nodiscard]] static constexpr unsigned short lowest() noexcept { 
#line 685
return min(); 
#line 686
} 
#line 688
[[nodiscard]] static constexpr unsigned short epsilon() noexcept { 
#line 689
return 0; 
#line 690
} 
#line 692
[[nodiscard]] static constexpr unsigned short round_error() noexcept { 
#line 693
return 0; 
#line 694
} 
#line 696
[[nodiscard]] static constexpr unsigned short denorm_min() noexcept { 
#line 697
return 0; 
#line 698
} 
#line 700
[[nodiscard]] static constexpr unsigned short infinity() noexcept { 
#line 701
return 0; 
#line 702
} 
#line 704
[[nodiscard]] static constexpr unsigned short quiet_NaN() noexcept { 
#line 705
return 0; 
#line 706
} 
#line 708
[[nodiscard]] static constexpr unsigned short signaling_NaN() noexcept { 
#line 709
return 0; 
#line 710
} 
#line 712
static constexpr bool is_modulo = true; 
#line 713
static constexpr int digits = 16; 
#line 714
static constexpr int digits10 = 4; 
#line 715
}; 
#line 719 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\limits"
template<> class numeric_limits< unsigned>  : public _Num_int_base { 
#line 721
public: [[nodiscard]] static constexpr unsigned min() noexcept { 
#line 722
return 0; 
#line 723
} 
#line 725
[[nodiscard]] static constexpr unsigned max() noexcept { 
#line 726
return 4294967295U; 
#line 727
} 
#line 729
[[nodiscard]] static constexpr unsigned lowest() noexcept { 
#line 730
return min(); 
#line 731
} 
#line 733
[[nodiscard]] static constexpr unsigned epsilon() noexcept { 
#line 734
return 0; 
#line 735
} 
#line 737
[[nodiscard]] static constexpr unsigned round_error() noexcept { 
#line 738
return 0; 
#line 739
} 
#line 741
[[nodiscard]] static constexpr unsigned denorm_min() noexcept { 
#line 742
return 0; 
#line 743
} 
#line 745
[[nodiscard]] static constexpr unsigned infinity() noexcept { 
#line 746
return 0; 
#line 747
} 
#line 749
[[nodiscard]] static constexpr unsigned quiet_NaN() noexcept { 
#line 750
return 0; 
#line 751
} 
#line 753
[[nodiscard]] static constexpr unsigned signaling_NaN() noexcept { 
#line 754
return 0; 
#line 755
} 
#line 757
static constexpr bool is_modulo = true; 
#line 758
static constexpr int digits = 32; 
#line 759
static constexpr int digits10 = 9; 
#line 760
}; 
#line 763
template<> class numeric_limits< unsigned long>  : public _Num_int_base { 
#line 765
public: [[nodiscard]] static constexpr unsigned long min() noexcept { 
#line 766
return 0; 
#line 767
} 
#line 769
[[nodiscard]] static constexpr unsigned long max() noexcept { 
#line 770
return 4294967295UL; 
#line 771
} 
#line 773
[[nodiscard]] static constexpr unsigned long lowest() noexcept { 
#line 774
return min(); 
#line 775
} 
#line 777
[[nodiscard]] static constexpr unsigned long epsilon() noexcept { 
#line 778
return 0; 
#line 779
} 
#line 781
[[nodiscard]] static constexpr unsigned long round_error() noexcept { 
#line 782
return 0; 
#line 783
} 
#line 785
[[nodiscard]] static constexpr unsigned long denorm_min() noexcept { 
#line 786
return 0; 
#line 787
} 
#line 789
[[nodiscard]] static constexpr unsigned long infinity() noexcept { 
#line 790
return 0; 
#line 791
} 
#line 793
[[nodiscard]] static constexpr unsigned long quiet_NaN() noexcept { 
#line 794
return 0; 
#line 795
} 
#line 797
[[nodiscard]] static constexpr unsigned long signaling_NaN() noexcept { 
#line 798
return 0; 
#line 799
} 
#line 801
static_assert((sizeof(unsigned) == sizeof(unsigned long)), "LLP64 assumption");
#line 802
static constexpr bool is_modulo = true; 
#line 803
static constexpr int digits = 32; 
#line 804
static constexpr int digits10 = 9; 
#line 805
}; 
#line 808
template<> class numeric_limits< unsigned __int64>  : public _Num_int_base { 
#line 810
public: [[nodiscard]] static constexpr unsigned __int64 min() noexcept { 
#line 811
return 0; 
#line 812
} 
#line 814
[[nodiscard]] static constexpr unsigned __int64 max() noexcept { 
#line 815
return 18446744073709551615Ui64; 
#line 816
} 
#line 818
[[nodiscard]] static constexpr unsigned __int64 lowest() noexcept { 
#line 819
return min(); 
#line 820
} 
#line 822
[[nodiscard]] static constexpr unsigned __int64 epsilon() noexcept { 
#line 823
return 0; 
#line 824
} 
#line 826
[[nodiscard]] static constexpr unsigned __int64 round_error() noexcept { 
#line 827
return 0; 
#line 828
} 
#line 830
[[nodiscard]] static constexpr unsigned __int64 denorm_min() noexcept { 
#line 831
return 0; 
#line 832
} 
#line 834
[[nodiscard]] static constexpr unsigned __int64 infinity() noexcept { 
#line 835
return 0; 
#line 836
} 
#line 838
[[nodiscard]] static constexpr unsigned __int64 quiet_NaN() noexcept { 
#line 839
return 0; 
#line 840
} 
#line 842
[[nodiscard]] static constexpr unsigned __int64 signaling_NaN() noexcept { 
#line 843
return 0; 
#line 844
} 
#line 846
static constexpr bool is_modulo = true; 
#line 847
static constexpr int digits = 64; 
#line 848
static constexpr int digits10 = 19; 
#line 849
}; 
#line 852
template<> class numeric_limits< float>  : public _Num_float_base { 
#line 854
public: [[nodiscard]] static constexpr float min() noexcept { 
#line 855
return (1.175494351e-38F); 
#line 856
} 
#line 858
[[nodiscard]] static constexpr float max() noexcept { 
#line 859
return (3.402823466e+38F); 
#line 860
} 
#line 862
[[nodiscard]] static constexpr float lowest() noexcept { 
#line 863
return -max(); 
#line 864
} 
#line 866
[[nodiscard]] static constexpr float epsilon() noexcept { 
#line 867
return (1.192092896e-07F); 
#line 868
} 
#line 870
[[nodiscard]] static constexpr float round_error() noexcept { 
#line 871
return (0.5F); 
#line 872
} 
#line 874
[[nodiscard]] static constexpr float denorm_min() noexcept { 
#line 875
return (1.401298464e-45F); 
#line 876
} 
#line 878
[[nodiscard]] static constexpr float infinity() noexcept { 
#line 879
return __builtin_huge_valf(); 
#line 880
} 
#line 882
[[nodiscard]] static constexpr float quiet_NaN() noexcept { 
#line 883
return __builtin_nanf("0"); 
#line 884
} 
#line 886
[[nodiscard]] static constexpr float signaling_NaN() noexcept { 
#line 887
return __builtin_nansf("1"); 
#line 888
} 
#line 890
static constexpr int digits = 24; 
#line 891
static constexpr int digits10 = 6; 
#line 892
static constexpr int max_digits10 = 9; 
#line 893
static constexpr int max_exponent = 128; 
#line 894
static constexpr int max_exponent10 = 38; 
#line 895
static constexpr int min_exponent = (-125); 
#line 896
static constexpr int min_exponent10 = (-37); 
#line 897
}; 
#line 900
template<> class numeric_limits< double>  : public _Num_float_base { 
#line 902
public: [[nodiscard]] static constexpr double min() noexcept { 
#line 903
return (2.225073858507201383e-308); 
#line 904
} 
#line 906
[[nodiscard]] static constexpr double max() noexcept { 
#line 907
return (1.797693134862315708e+308); 
#line 908
} 
#line 910
[[nodiscard]] static constexpr double lowest() noexcept { 
#line 911
return -max(); 
#line 912
} 
#line 914
[[nodiscard]] static constexpr double epsilon() noexcept { 
#line 915
return (2.220446049250313081e-16); 
#line 916
} 
#line 918
[[nodiscard]] static constexpr double round_error() noexcept { 
#line 919
return (0.5); 
#line 920
} 
#line 922
[[nodiscard]] static constexpr double denorm_min() noexcept { 
#line 923
return (4.940656458412465442e-324); 
#line 924
} 
#line 926
[[nodiscard]] static constexpr double infinity() noexcept { 
#line 927
return __builtin_huge_val(); 
#line 928
} 
#line 930
[[nodiscard]] static constexpr double quiet_NaN() noexcept { 
#line 931
return __builtin_nan("0"); 
#line 932
} 
#line 934
[[nodiscard]] static constexpr double signaling_NaN() noexcept { 
#line 935
return __builtin_nans("1"); 
#line 936
} 
#line 938
static constexpr int digits = 53; 
#line 939
static constexpr int digits10 = 15; 
#line 940
static constexpr int max_digits10 = 17; 
#line 941
static constexpr int max_exponent = 1024; 
#line 942
static constexpr int max_exponent10 = 308; 
#line 943
static constexpr int min_exponent = (-1021); 
#line 944
static constexpr int min_exponent10 = (-307); 
#line 945
}; 
#line 948
template<> class numeric_limits< long double>  : public _Num_float_base { 
#line 950
public: [[nodiscard]] static constexpr long double min() noexcept { 
#line 951
return (2.225073858507201383e-308); 
#line 952
} 
#line 954
[[nodiscard]] static constexpr long double max() noexcept { 
#line 955
return (1.797693134862315708e+308); 
#line 956
} 
#line 958
[[nodiscard]] static constexpr long double lowest() noexcept { 
#line 959
return -max(); 
#line 960
} 
#line 962
[[nodiscard]] static constexpr long double epsilon() noexcept { 
#line 963
return (2.220446049250313081e-16); 
#line 964
} 
#line 966
[[nodiscard]] static constexpr long double round_error() noexcept { 
#line 967
return (0.5L); 
#line 968
} 
#line 970
[[nodiscard]] static constexpr long double denorm_min() noexcept { 
#line 971
return (4.940656458412465442e-324); 
#line 972
} 
#line 974
[[nodiscard]] static constexpr long double infinity() noexcept { 
#line 975
return __builtin_huge_val(); 
#line 976
} 
#line 978
[[nodiscard]] static constexpr long double quiet_NaN() noexcept { 
#line 979
return __builtin_nan("0"); 
#line 980
} 
#line 982
[[nodiscard]] static constexpr long double signaling_NaN() noexcept { 
#line 983
return __builtin_nans("1"); 
#line 984
} 
#line 986
static constexpr int digits = 53; 
#line 987
static constexpr int digits10 = 15; 
#line 988
static constexpr int max_digits10 = ((2) + (((53) * 301L) / (1000))); 
#line 989
static constexpr int max_exponent = 1024; 
#line 990
static constexpr int max_exponent10 = 308; 
#line 991
static constexpr int min_exponent = (-1021); 
#line 992
static constexpr int min_exponent10 = (-307); 
#line 993
}; 
#line 995
}
#line 998
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\new"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 77
namespace std { 
#line 79
class bad_alloc; 
#line 80
class bad_array_new_length; 
#line 109 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\new"
using new_handler = void (__cdecl *)(void); 
#line 111
new_handler __cdecl set_new_handler(new_handler) noexcept; 
#line 112
[[nodiscard]] new_handler __cdecl get_new_handler() noexcept; 
#line 113
}
#line 117
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xatomic.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 67 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xatomic.h"
namespace std { 
#line 93 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xatomic.h"
enum memory_order { 
#line 94
memory_order_relaxed, 
#line 95
memory_order_consume, 
#line 96
memory_order_acquire, 
#line 97
memory_order_release, 
#line 98
memory_order_acq_rel, 
#line 99
memory_order_seq_cst
#line 100
}; 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xatomic.h"
using _Atomic_counter_t = unsigned long; 
#line 105
template < class _Integral, class _Ty >
[ [ nodiscard ] ] volatile _Integral * _Atomic_address_as ( _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    return & reinterpret_cast < volatile _Integral & > ( _Source );
}
#line 112
template < class _Integral, class _Ty >
[ [ nodiscard ] ] const volatile _Integral * _Atomic_address_as ( const _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    return & reinterpret_cast < const volatile _Integral & > ( _Source );
}
#line 119
}
#line 123
#pragma warning(pop)
#pragma pack ( pop )
#line 21 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 28
namespace std { 
#line 29
template < class _Ptrty >
[ [ nodiscard ] ] constexpr auto _Unfancy ( _Ptrty _Ptr ) noexcept {
    return :: std :: addressof ( * _Ptr );
}
#line 34
template < class _Ty >
[ [ nodiscard ] ] constexpr _Ty * _Unfancy ( _Ty * _Ptr ) noexcept {
    return _Ptr;
}
#line 39
template < class _Ty >
struct [ [ nodiscard ] ] _Tidy_guard {
    _Ty * _Target;
    inline ~ _Tidy_guard ( ) {
        if ( _Target ) {
            _Target -> _Tidy ( );
        }
    }
};
#line 49
template < class _Ty >
struct [ [ nodiscard ] ] _Tidy_deallocate_guard {
    _Ty * _Target;
    inline ~ _Tidy_deallocate_guard ( ) {
        if ( _Target ) {
            _Target -> _Tidy_deallocate ( );
        }
    }
};
#line 59
template< class _Keycmp, class _Lhs, class _Rhs> constexpr bool 
#line 60
_Nothrow_compare = noexcept((static_cast< bool>(std::declval< const _Keycmp &> ()(std::declval< const _Lhs &> (), std::declval< const _Rhs &> ())))); 
#line 63
template < size_t _Ty_size >
[ [ nodiscard ] ] constexpr size_t _Get_size_of_n ( const size_t _Count ) {
    constexpr bool _Overflow_is_possible = _Ty_size > 1;

    if constexpr ( _Overflow_is_possible ) {
        constexpr size_t _Max_possible = static_cast < size_t > ( - 1 ) / _Ty_size;
        if ( _Count > _Max_possible ) {
            _Throw_bad_array_new_length ( );
        }
    }

    return _Count * _Ty_size;
}
#line 77
template< class _Ty> constexpr size_t 
#line 78
_New_alignof = (::std::max)(__alignof(_Ty), 16Ui64); 
#line 80
struct _Default_allocate_traits { 
#line 81
__declspec(allocator) static void *
#line 85
_Allocate(const size_t _Bytes) { 
#line 86
return ::operator new(_Bytes); 
#line 87
} 
#line 107
}; 
#line 109
constexpr bool _Is_pow_2(const size_t _Value) noexcept { 
#line 110
return (_Value != (0)) && ((_Value & (_Value - (1))) == (0)); 
#line 111
} 
#line 114
constexpr size_t _Big_allocation_threshold = (4096); 
#line 115
constexpr size_t _Big_allocation_alignment = (32); 
#line 124
constexpr size_t _Non_user_size = ((((2) * sizeof(void *)) + _Big_allocation_alignment) - (1)); 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
constexpr size_t _Big_allocation_sentinel = 18085043209519168250Ui64; 
#line 135 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Traits >
__declspec ( allocator ) void * _Allocate_manually_vector_aligned ( const size_t _Bytes ) {

    const size_t _Block_size = _Non_user_size + _Bytes;
    if ( _Block_size <= _Bytes ) {
        _Throw_bad_array_new_length ( );
    }

    const uintptr_t _Ptr_container = reinterpret_cast < uintptr_t > ( _Traits :: _Allocate ( _Block_size ) );
    do { if ( _Ptr_container != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory", 144, 0, "%s", "invalid argument" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6d\x65\x6d\x6f\x72" L"\x79", 144, 0 ); } while ( false ); }; } while ( false );
    void * const _Ptr = reinterpret_cast < void * > ( ( _Ptr_container + _Non_user_size ) & ~ ( _Big_allocation_alignment - 1 ) );
    static_cast < uintptr_t * > ( _Ptr ) [ - 1 ] = _Ptr_container;


    static_cast < uintptr_t * > ( _Ptr ) [ - 2 ] = _Big_allocation_sentinel;

    return _Ptr;
}
#line 154 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
inline void _Adjust_manually_vector_aligned(void *&_Ptr, size_t &_Bytes) { 
#line 156
_Bytes += _Non_user_size; 
#line 158
const uintptr_t *const _Ptr_user = static_cast< uintptr_t *>(_Ptr); 
#line 159
const uintptr_t _Ptr_container = _Ptr_user[-1]; 
#line 163
do { if ((_Ptr_user[-2]) == _Big_allocation_sentinel) { } else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory", 163, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6d\x65\x6d\x6f\x72" L"\x79", 163, 0); } while (false); }  ; } while (false); 
#line 168
constexpr uintptr_t _Min_back_shift = ((2) * sizeof(void *)); 
#line 172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
const uintptr_t _Back_shift = (reinterpret_cast< uintptr_t>(_Ptr)) - _Ptr_container; 
#line 173
do { if ((_Back_shift >= _Min_back_shift) && (_Back_shift <= _Non_user_size)) { } else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory", 173, 0, "%s", "invalid argument")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6d\x65\x6d\x6f\x72" L"\x79", 173, 0); } while (false); }  ; } while (false); 
#line 174
_Ptr = (reinterpret_cast< void *>(_Ptr_container)); 
#line 175
} 
#line 228 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < size_t _Align, class _Traits = _Default_allocate_traits,
    enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 >
__declspec ( allocator ) inline void * _Allocate ( const size_t _Bytes ) {





    {
        if ( _Bytes >= _Big_allocation_threshold ) {
            return _Allocate_manually_vector_aligned < _Traits > ( _Bytes );
        }
    }


    if ( _Bytes != 0 ) {
        return _Traits :: _Allocate ( _Bytes );
    }

    return nullptr;
}
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < size_t _Align, enable_if_t < ( ! 0 || _Align <= 16Ui64 ), int > = 0 >
inline void _Deallocate ( void * _Ptr, size_t _Bytes ) noexcept {






    {

        if ( _Bytes >= _Big_allocation_threshold ) {
            _Adjust_manually_vector_aligned ( _Ptr, _Bytes );
        }

        :: operator delete ( _Ptr, _Bytes );
    }
}
#line 270 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Ty, class ... _Types >
_Ty * _Global_new ( _Types && ... _Args ) {
    struct [ [ nodiscard ] ] _Guard_type {
        void * _Result;
        ~ _Guard_type ( ) {
            if ( _Result ) {
                _Deallocate < _New_alignof < _Ty >> ( _Result, sizeof ( _Ty ) );
            }
        }
    };

    _Guard_type _Guard { _Allocate < _New_alignof < _Ty >> ( sizeof ( _Ty ) ) };
    :: new ( _Guard . _Result ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );
    return static_cast < _Ty * > ( :: std :: exchange ( _Guard . _Result, nullptr ) );
}
#line 286
template< class _Ptr, class _Ty> using _Rebind_pointer_t = typename pointer_traits< _Ptr> ::template rebind< _Ty> ; 
#line 289
template < class _Pointer, enable_if_t < ! is_pointer_v < _Pointer >, int > = 0 >
inline _Pointer _Refancy ( typename pointer_traits < _Pointer > :: element_type * _Ptr ) noexcept {
    return pointer_traits < _Pointer > :: pointer_to ( * _Ptr );
}
#line 294
template < class _Pointer, enable_if_t < is_pointer_v < _Pointer >, int > = 0 >
inline _Pointer _Refancy ( _Pointer _Ptr ) noexcept {
    return _Ptr;
}
#line 299
template < class _NoThrowFwdIt, class _NoThrowSentinel >
inline void _Destroy_range ( _NoThrowFwdIt _First, _NoThrowSentinel _Last ) noexcept;
#line 302
template < class _Ty >
inline void _Destroy_in_place ( _Ty & _Obj ) noexcept {
    if constexpr ( is_array_v < _Ty > ) {
        _Destroy_range ( _Obj, _Obj + extent_v < _Ty > );
    } else {
        _Obj . ~ _Ty ( );
    }
}
#line 325 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Ptrty >
auto _Const_cast ( _Ptrty _Ptr ) noexcept {
    using _Elem = typename pointer_traits < _Ptrty > :: element_type;
    using _Modifiable = remove_const_t < _Elem >;
    using _Dest = typename pointer_traits < _Ptrty > :: template rebind < _Modifiable >;

    return pointer_traits < _Dest > :: pointer_to ( const_cast < _Modifiable & > ( * _Ptr ) );
}
#line 334
template < class _Ty >
auto _Const_cast ( _Ty * _Ptr ) noexcept {
    return const_cast < remove_const_t < _Ty > * > ( _Ptr );
}
#line 339
template< class _Ty, class  = void> 
#line 340
struct _Get_pointer_type { 
#line 341
using type = typename _Ty::value_type *; 
#line 342
}; 
#line 344
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 345
template< class _Ty> 
#line 346
struct _Get_pointer_type< _Ty, void_t< typename _Ty::pointer> >  { 
#line 347
using type = typename _Ty::pointer; 
#line 348
}; 
#line 349
__pragma( warning(pop)) 
#line 351
template< class _Ty, class  = void> 
#line 352
struct _Get_const_pointer_type { 
#line 353
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 354
using _Valty = typename _Ty::value_type; 
#line 355
using type = typename pointer_traits< _Ptrty> ::template rebind< const _Valty> ; 
#line 356
}; 
#line 358
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 359
template< class _Ty> 
#line 360
struct _Get_const_pointer_type< _Ty, void_t< typename _Ty::const_pointer> >  { 
#line 361
using type = typename _Ty::const_pointer; 
#line 362
}; 
#line 363
__pragma( warning(pop)) 
#line 365
template< class _Ty, class  = void> 
#line 366
struct _Get_void_pointer_type { 
#line 367
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 368
using type = typename pointer_traits< _Ptrty> ::template rebind< void> ; 
#line 369
}; 
#line 371
template< class _Ty> 
#line 372
struct _Get_void_pointer_type< _Ty, void_t< typename _Ty::void_pointer> >  { 
#line 373
using type = typename _Ty::void_pointer; 
#line 374
}; 
#line 376
template< class _Ty, class  = void> 
#line 377
struct _Get_const_void_pointer_type { 
#line 378
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 379
using type = typename pointer_traits< _Ptrty> ::template rebind< const void> ; 
#line 380
}; 
#line 382
template< class _Ty> 
#line 383
struct _Get_const_void_pointer_type< _Ty, void_t< typename _Ty::const_void_pointer> >  { 
#line 384
using type = typename _Ty::const_void_pointer; 
#line 385
}; 
#line 387
template< class _Ty, class  = void> 
#line 388
struct _Get_difference_type { 
#line 389
using _Ptrty = typename _Get_pointer_type< _Ty> ::type; 
#line 390
using type = typename pointer_traits< _Ptrty> ::difference_type; 
#line 391
}; 
#line 393
template< class _Ty> 
#line 394
struct _Get_difference_type< _Ty, void_t< typename _Ty::difference_type> >  { 
#line 395
using type = typename _Ty::difference_type; 
#line 396
}; 
#line 398
template< class _Ty, class  = void> 
#line 399
struct _Get_size_type { 
#line 400
using type = make_unsigned_t< typename _Get_difference_type< _Ty> ::type> ; 
#line 401
}; 
#line 403
template< class _Ty> 
#line 404
struct _Get_size_type< _Ty, void_t< typename _Ty::size_type> >  { 
#line 405
using type = typename _Ty::size_type; 
#line 406
}; 
#line 408
template< class _Ty, class  = void> 
#line 409
struct _Get_propagate_on_container_copy { 
#line 410
using type = false_type; 
#line 411
}; 
#line 413
template< class _Ty> 
#line 414
struct _Get_propagate_on_container_copy< _Ty, void_t< typename _Ty::propagate_on_container_copy_assignment> >  { 
#line 415
using type = typename _Ty::propagate_on_container_copy_assignment; 
#line 416
}; 
#line 418
template< class _Ty, class  = void> 
#line 419
struct _Get_propagate_on_container_move { 
#line 420
using type = false_type; 
#line 421
}; 
#line 423
template< class _Ty> 
#line 424
struct _Get_propagate_on_container_move< _Ty, void_t< typename _Ty::propagate_on_container_move_assignment> >  { 
#line 425
using type = typename _Ty::propagate_on_container_move_assignment; 
#line 426
}; 
#line 428
template< class _Ty, class  = void> 
#line 429
struct _Get_propagate_on_container_swap { 
#line 430
using type = false_type; 
#line 431
}; 
#line 433
template< class _Ty> 
#line 434
struct _Get_propagate_on_container_swap< _Ty, void_t< typename _Ty::propagate_on_container_swap> >  { 
#line 435
using type = typename _Ty::propagate_on_container_swap; 
#line 436
}; 
#line 438
template< class _Ty, class  = void> 
#line 439
struct _Get_is_always_equal { 
#line 440
using type = bool_constant< is_empty_v< _Ty> > ; 
#line 441
}; 
#line 443
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 444
template< class _Ty> 
#line 445
struct _Get_is_always_equal< _Ty, void_t< typename _Ty::is_always_equal> >  { 
#line 446
using type = typename _Ty::is_always_equal; 
#line 447
}; 
#line 448
__pragma( warning(pop)) 
#line 450
template< class _Ty, class _Other, class  = void> 
#line 451
struct _Get_rebind_type { 
#line 452
using type = typename _Replace_first_parameter< _Other, _Ty> ::type; 
#line 453
}; 
#line 455
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 456
template< class _Ty, class _Other> 
#line 457
struct _Get_rebind_type< _Ty, _Other, void_t< typename _Ty::template rebind< _Other> ::other> >  { 
#line 458
using type = typename _Ty::template rebind< _Other> ::other; 
#line 459
}; 
#line 460
__pragma( warning(pop)) 
#line 462
template< class _Ty> class allocator; 
#line 465
template< class _Alloc, class  = void> 
#line 466
struct _Is_default_allocator : public false_type { }; 
#line 468
template< class _Ty> 
#line 469
struct _Is_default_allocator< allocator< _Ty> , void_t< typename allocator< _Ty> ::_From_primary> >  : public is_same< typename allocator< _Ty> ::_From_primary, allocator< _Ty> > ::type { 
#line 470
}; 
#line 486 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template< class _Void, class ..._Types> 
#line 487
struct _Has_no_allocator_construct : public true_type { }; 
#line 489
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 490
template< class _Alloc, class _Ptr, class ..._Args> 
#line 491
struct _Has_no_allocator_construct< void_t< decltype(std::declval< _Alloc &> ().construct(std::declval< _Ptr> (), std::declval< _Args> ()...))> , _Alloc, _Ptr, _Args...>  : public false_type { 
#line 493
}; 
#line 494
__pragma( warning(pop)) 
#line 496
template< class _Alloc, class _Ptr, class ..._Args> using _Uses_default_construct = disjunction< _Is_default_allocator< _Alloc> , _Has_no_allocator_construct< void, _Alloc, _Ptr, _Args...> > ; 
#line 500
template< class _Alloc, class _Ptr, class  = void> 
#line 501
struct _Has_no_alloc_destroy : public true_type { }; 
#line 503
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 504
template< class _Alloc, class _Ptr> 
#line 505
struct _Has_no_alloc_destroy< _Alloc, _Ptr, void_t< decltype(std::declval< _Alloc &> ().destroy(std::declval< _Ptr> ()))> >  : public false_type { 
#line 506
}; 
#line 507
__pragma( warning(pop)) 
#line 509
template< class _Alloc, class _Ptr> using _Uses_default_destroy = disjunction< _Is_default_allocator< _Alloc> , _Has_no_alloc_destroy< _Alloc, _Ptr> > ; 
#line 512
template< class _Alloc, class _Size_type, class _Const_void_pointer, class  = void> 
#line 513
struct _Has_allocate_hint : public false_type { }; 
#line 515
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 516
template< class _Alloc, class _Size_type, class _Const_void_pointer> 
#line 517
struct _Has_allocate_hint< _Alloc, _Size_type, _Const_void_pointer, void_t< decltype(std::declval< _Alloc &> ().allocate(std::declval< const _Size_type &> (), std::declval< const _Const_void_pointer &> ()))> >  : public true_type { 
#line 519
}; 
#line 520
__pragma( warning(pop)) 
#line 522
template< class _Alloc, class  = void> 
#line 523
struct _Has_max_size : public false_type { }; 
#line 525
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 526
template< class _Alloc> 
#line 527
struct _Has_max_size< _Alloc, void_t< decltype(std::declval< const _Alloc &> ().max_size())> >  : public true_type { }; 
#line 528
__pragma( warning(pop)) 
#line 530
template< class _Alloc, class  = void> 
#line 531
struct _Has_select_on_container_copy_construction : public false_type { }; 
#line 533
template< class _Alloc> 
#line 534
struct _Has_select_on_container_copy_construction< _Alloc, void_t< decltype(std::declval< const _Alloc &> ().select_on_container_copy_construction())> >  : public true_type { 
#line 535
}; 
#line 545 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template< class _Alloc> struct allocator_traits; 
#line 548
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 549
template < class _Alloc >
struct _Normal_allocator_traits {
    using allocator_type = _Alloc;
    using value_type = typename _Alloc :: value_type;

    using pointer = typename _Get_pointer_type < _Alloc > :: type;
    using const_pointer = typename _Get_const_pointer_type < _Alloc > :: type;
    using void_pointer = typename _Get_void_pointer_type < _Alloc > :: type;
    using const_void_pointer = typename _Get_const_void_pointer_type < _Alloc > :: type;

    using size_type = typename _Get_size_type < _Alloc > :: type;
    using difference_type = typename _Get_difference_type < _Alloc > :: type;

    using propagate_on_container_copy_assignment = typename _Get_propagate_on_container_copy < _Alloc > :: type;
    using propagate_on_container_move_assignment = typename _Get_propagate_on_container_move < _Alloc > :: type;
    using propagate_on_container_swap = typename _Get_propagate_on_container_swap < _Alloc > :: type;
    using is_always_equal = typename _Get_is_always_equal < _Alloc > :: type;

    template < class _Other >
    using rebind_alloc = typename _Get_rebind_type < _Alloc, _Other > :: type;

    template < class _Other >
    using rebind_traits = allocator_traits < rebind_alloc < _Other >>;

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count ) {
        return _Al . allocate ( _Count );
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count, const const_void_pointer _Hint ) {
        if constexpr ( _Has_allocate_hint < _Alloc, size_type, const_void_pointer > :: value ) {
            return _Al . allocate ( _Count, _Hint );
        } else {
            return _Al . allocate ( _Count );
        }
    }












    static inline void deallocate ( _Alloc & _Al, pointer _Ptr, size_type _Count ) {
        _Al . deallocate ( _Ptr, _Count );
    }

    template < class _Ty, class ... _Types >
    static inline void construct ( _Alloc & _Al, _Ty * _Ptr, _Types && ... _Args ) {
        if constexpr ( _Uses_default_construct < _Alloc, _Ty *, _Types ... > :: value ) {



            :: new ( static_cast < void * > ( _Ptr ) ) _Ty ( :: std :: forward < _Types > ( _Args ) ... );

        } else {
            _Al . construct ( _Ptr, :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    template < class _Ty >
    static inline void destroy ( _Alloc & _Al, _Ty * _Ptr ) {
        if constexpr ( _Uses_default_destroy < _Alloc, _Ty * > :: value ) {



            _Ptr -> ~ _Ty ( );

        } else {
            _Al . destroy ( _Ptr );
        }
    }

    [ [ nodiscard ] ] static inline size_type max_size ( const _Alloc & _Al ) noexcept {
        if constexpr ( _Has_max_size < _Alloc > :: value ) {
            return _Al . max_size ( );
        } else {
            return ( numeric_limits < size_type > :: max ) ( ) / sizeof ( value_type );
        }
    }

    [ [ nodiscard ] ] static inline _Alloc select_on_container_copy_construction ( const _Alloc & _Al ) {
        if constexpr ( _Has_select_on_container_copy_construction < _Alloc > :: value ) {
            return _Al . select_on_container_copy_construction ( );
        } else {
            return _Al;
        }
    }
};
#line 644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
__pragma( warning(pop)) 
#line 646
template < class _Alloc >
struct _Default_allocator_traits {
    using allocator_type = _Alloc;
    using value_type = typename _Alloc :: value_type;

    using pointer = value_type *;
    using const_pointer = const value_type *;
    using void_pointer = void *;
    using const_void_pointer = const void *;

    using size_type = size_t;
    using difference_type = ptrdiff_t;

    using propagate_on_container_copy_assignment = false_type;
    using propagate_on_container_move_assignment = true_type;
    using propagate_on_container_swap = false_type;
    using is_always_equal = true_type;

    template < class _Other >
    using rebind_alloc = allocator < _Other >;

    template < class _Other >
    using rebind_traits = allocator_traits < allocator < _Other >>;

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count ) {





        {
            ( void ) _Al;
            return static_cast < pointer > (
                _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) );
        }
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] static inline __declspec ( allocator ) pointer
        allocate ( _Alloc & _Al, const size_type _Count, const_void_pointer ) {





        {
            ( void ) _Al;
            return static_cast < pointer > (
                _Allocate < _New_alignof < value_type >> ( _Get_size_of_n < sizeof ( value_type ) > ( _Count ) ) );
        }
    }








    static inline void deallocate ( _Alloc & _Al, const pointer _Ptr, const size_type _Count ) {






        {
            ( void ) _Al;
            _Deallocate < _New_alignof < value_type >> ( _Ptr, sizeof ( value_type ) * _Count );
        }
    }

    template < class _Objty, class ... _Types >
    static inline void construct ( _Alloc &, _Objty * const _Ptr, _Types && ... _Args ) {



        :: new ( const_cast < void * > ( static_cast < const volatile void * > ( _Ptr ) ) ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );

    }

    template < class _Uty >
    static inline void destroy ( _Alloc &, _Uty * const _Ptr ) {



        _Ptr -> ~ _Uty ( );

    }

    [ [ nodiscard ] ] static inline size_type max_size ( const _Alloc & ) noexcept {
        return static_cast < size_t > ( - 1 ) / sizeof ( value_type );
    }

    [ [ nodiscard ] ] static inline _Alloc select_on_container_copy_construction ( const _Alloc & _Al ) {
        return _Al;
    }
};
#line 745 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template< class _Alloc> 
#line 746
struct allocator_traits : public conditional_t< _Is_default_allocator< _Alloc> ::value, _Default_allocator_traits< _Alloc> , _Normal_allocator_traits< _Alloc> >  { 
#line 747
}; 
#line 751
template< class _Alloc> constexpr bool 
#line 752
_Choose_pocca_v = (allocator_traits< _Alloc> ::propagate_on_container_copy_assignment::value && (!allocator_traits< _Alloc> ::is_always_equal::value)); 
#line 755
enum class _Pocma_values { 
#line 756
_Equal_allocators, 
#line 757
_Propagate_allocators, 
#line 758
_No_propagate_allocators
#line 759
}; 
#line 761
template< class _Alloc> constexpr _Pocma_values 
#line 762
_Choose_pocma_v = ((allocator_traits< _Alloc> ::is_always_equal::value) ? _Pocma_values::_Equal_allocators : ((allocator_traits< _Alloc> ::propagate_on_container_move_assignment::value) ? _Pocma_values::_Propagate_allocators : _Pocma_values::_No_propagate_allocators)); 
#line 769
template< class _Alloc, class _Value_type> using _Rebind_alloc_t = typename allocator_traits< _Alloc> ::template rebind_alloc< _Value_type> ; 
#line 774
template< class _Alloc, class _Value_type> using _Maybe_rebind_alloc_t = typename _Select< is_same_v< typename _Alloc::value_type, _Value_type> > ::template _Apply< _Alloc &, _Rebind_alloc_t< _Alloc, _Value_type> > ; 
#line 779
template< class _Alloc> constexpr bool 
#line 780
_Is_simple_alloc_v = ((is_same_v< typename allocator_traits< _Alloc> ::size_type, unsigned __int64>  && is_same_v< typename allocator_traits< _Alloc> ::difference_type, __int64> ) && is_same_v< typename allocator_traits< _Alloc> ::pointer, typename _Alloc::value_type *> ) && is_same_v< typename allocator_traits< _Alloc> ::const_pointer, const typename _Alloc::value_type *> ; 
#line 786
template< class _Value_type> 
#line 787
struct _Simple_types { 
#line 789
using value_type = _Value_type; 
#line 790
using size_type = size_t; 
#line 791
using difference_type = ptrdiff_t; 
#line 792
using pointer = value_type *; 
#line 793
using const_pointer = const value_type *; 
#line 794
}; 
#line 797
constexpr size_t _Asan_granularity = (8); 
#line 798
constexpr size_t _Asan_granularity_mask = (_Asan_granularity - (1)); 
#line 800
struct _Asan_aligned_pointers { 
#line 801
const void *_First; 
#line 802
const void *_End; 
#line 804
[[nodiscard]] constexpr const void *_Clamp_to_end(const void *_Mid) const noexcept { 
#line 805
; 
#line 806
if (_Mid > (_End)) { 
#line 807
return _End; 
#line 808
} else { 
#line 809
return _Mid; 
#line 810
}  
#line 811
} 
#line 812
}; 
#line 894
[[nodiscard]] inline _Asan_aligned_pointers _Get_asan_aligned_first_end(const void *const 
#line 895
_First, const void *const _End) noexcept { 
#line 896
return {reinterpret_cast< const void *>((reinterpret_cast< uintptr_t>(_First)) & (~_Asan_granularity_mask)), reinterpret_cast< const void *>((reinterpret_cast< uintptr_t>(_End)) & (~_Asan_granularity_mask))}; 
#line 900
} 
#line 905
[[nodiscard]] inline const void *_Get_asan_aligned_after(const void *const _End) noexcept { 
#line 906
return reinterpret_cast< const void *>(((reinterpret_cast< uintptr_t>(_End)) + _Asan_granularity_mask) & (~_Asan_granularity_mask)); 
#line 908
} 
#line 910
template< class _Container, class  = void> constexpr size_t 
#line 911
_Container_allocation_minimum_asan_alignment = __alignof(typename _Container::value_type); 
#line 913
template< class _Container> constexpr size_t 
#line 914
_Container_allocation_minimum_asan_alignment< _Container, void_t< decltype(_Container::allocator_type::_Minimum_asan_allocation_alignment)> >  = (std::max)(__alignof(typename _Container::value_type), _Container::allocator_type::_Minimum_asan_allocation_alignment); 
#line 919
template < class _Ty >
class allocator {
public :
    static_assert ( ! is_const_v < _Ty >, "The C++ Standard forbids containers of const elements because allocator<const T> is ill-formed."
                                                                               );
    static_assert ( ! is_function_v < _Ty >, "The C++ Standard forbids allocators for function elements because of [allocator.requirements]."
                                                                             );
    static_assert ( ! is_reference_v < _Ty >, "The C++ Standard forbids allocators for reference elements because of [allocator.requirements]."
                                                                              );

    using _From_primary = allocator;

    using value_type = _Ty;


    using pointer = _Ty *;
    using const_pointer = const _Ty *;

    using reference = _Ty &;
    using const_reference = const _Ty &;


    using size_type = size_t;
    using difference_type = ptrdiff_t;

    using propagate_on_container_move_assignment = true_type;
    using is_always_equal = true_type;


    template < class _Other >
    struct rebind {
        using other = allocator < _Other >;
    };

     [ [ nodiscard ] ] _Ty * address ( _Ty & _Val ) const noexcept {
        return :: std :: addressof ( _Val );
    }

     [ [ nodiscard ] ] const _Ty * address ( const _Ty & _Val ) const noexcept {
        return :: std :: addressof ( _Val );
    }


    constexpr allocator ( ) noexcept { }

    constexpr allocator ( const allocator & ) noexcept = default;
    template < class _Other >
    constexpr allocator ( const allocator < _Other > & ) noexcept { }
    inline ~ allocator ( ) = default;
    inline allocator & operator = ( const allocator & ) = default;

    inline void deallocate ( _Ty * const _Ptr, const size_t _Count ) {
        do { if ( _Ptr != nullptr || _Count == 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory", 971, 0, "%s", "null pointer cannot point to a block of non-zero size" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x6e\x75\x6c\x6c\x20\x70\x6f\x69\x6e\x74\x65\x72\x20\x63\x61\x6e\x6e\x6f\x74\x20\x70\x6f\x69\x6e\x74\x20\x74\x6f\x20\x61\x20" L"\x62\x6c\x6f\x63\x6b\x20\x6f\x66\x20\x6e\x6f\x6e\x2d\x7a\x65\x72\x6f\x20\x73\x69\x7a\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6d\x65\x6d\x6f\x72" L"\x79", 971, 0 ); } while ( false ); }; } while ( false );

        _Deallocate < _New_alignof < _Ty >> ( _Ptr, sizeof ( _Ty ) * _Count );
    }

    [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] inline __declspec ( allocator ) _Ty * allocate ( const size_t _Count ) {
        static_assert ( sizeof ( value_type ) > 0, "value_type must be complete before calling allocate." );
        return static_cast < _Ty * > ( _Allocate < _New_alignof < _Ty >> ( _Get_size_of_n < sizeof ( _Ty ) > ( _Count ) ) );
    }









     [ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] __declspec ( allocator ) _Ty * allocate (
         const size_t _Count, const void * ) {
        return allocate ( _Count );
    }

    template < class _Objty, class ... _Types >
     void construct ( _Objty * const _Ptr, _Types && ... _Args ) {
        :: new ( const_cast < void * > ( static_cast < const volatile void * > ( _Ptr ) ) ) _Objty ( :: std :: forward < _Types > ( _Args ) ... );
    }

    template < class _Uty >
     void destroy ( _Uty * const _Ptr ) {
        _Ptr -> ~ _Uty ( );
    }

     [ [ nodiscard ] ] size_t max_size ( ) const noexcept {
        return static_cast < size_t > ( - 1 ) / sizeof ( _Ty );
    }


    static constexpr size_t _Minimum_asan_allocation_alignment = _Asan_granularity;
};
#line 1014 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
#pragma pack(8)
template<> 
#line 1014
class allocator< void>  { 
#line 1016
public: using value_type = void; 
#line 1018
using pointer = void *; 
#line 1019
using const_pointer = const void *; 
#line 1021
template< class _Other> 
#line 1022
struct rebind { 
#line 1023
using other = std::allocator< _Other> ; 
#line 1024
}; 
#line 1034 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
}; 
#pragma pack()
#line 1037 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Ty, class _Other >
[ [ nodiscard ] ] inline bool operator == ( const allocator < _Ty > &, const allocator < _Other > & ) noexcept {
    return true;
}
#line 1043
template < class _Ty, class _Other >
[ [ nodiscard ] ] bool operator != ( const allocator < _Ty > &, const allocator < _Other > & ) noexcept {
    return false;
}
#line 1056 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template< class _Alloc> using _Alloc_ptr_t = typename allocator_traits< _Alloc> ::pointer; 
#line 1059
template< class _Alloc> using _Alloc_size_t = typename allocator_traits< _Alloc> ::size_type; 
#line 1062
template < class _Alloc >
inline void _Pocca ( _Alloc & _Left, const _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_copy_assignment :: value ) {
        _Left = _Right;
    }
}
#line 1069
template < class _Alloc >
inline void _Pocma ( _Alloc & _Left, _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_move_assignment :: value ) {
        _Left = :: std :: move ( _Right );
    }
}
#line 1076
template < class _Alloc >
inline void _Pocs ( _Alloc & _Left, _Alloc & _Right ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: propagate_on_container_swap :: value ) {
        swap ( _Left, _Right );
    } else {
        do { if ( _Left == _Right ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory", 1081, 0, "%s", "containers incompatible for swap" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x66\x6f\x72\x20\x73\x77\x61" L"\x70\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6d\x65\x6d\x6f\x72" L"\x79", 1081, 0 ); } while ( false ); }; } while ( false );
    }
}
#line 1085
template < class _Alloc >
inline void _Destroy_range ( _Alloc_ptr_t < _Alloc > _First, const _Alloc_ptr_t < _Alloc > _Last, _Alloc & _Al ) noexcept {

    using _Ty = typename _Alloc :: value_type;
    if constexpr ( ! conjunction_v < is_trivially_destructible < _Ty >, _Uses_default_destroy < _Alloc, _Ty * >> ) {
        for (; _First != _Last; ++ _First ) {
            allocator_traits < _Alloc > :: destroy ( _Al, _Unfancy ( _First ) );
        }
    }
}
#line 1096
template < class _NoThrowFwdIt, class _NoThrowSentinel >
inline void _Destroy_range ( _NoThrowFwdIt _First, const _NoThrowSentinel _Last ) noexcept {

    if constexpr ( ! is_trivially_destructible_v < _Iter_value_t < _NoThrowFwdIt >> ) {
        for (; _First != _Last; ++ _First ) {
            _Destroy_in_place ( * _First );
        }
    }
}
#line 1106
template < class _Size_type, class _Unsigned_type >
[ [ nodiscard ] ] constexpr _Size_type _Convert_size ( const _Unsigned_type _Len ) noexcept (
    sizeof ( _Unsigned_type ) <= sizeof ( _Size_type ) ) {

    ;
    ;

    if constexpr ( sizeof ( _Unsigned_type ) > sizeof ( _Size_type ) ) {
        if ( _Len > ( numeric_limits < _Size_type > :: max ) ( ) ) {
            _Xlength_error ( "size is too long for _Size_type" );
        }
    }

    return static_cast < _Size_type > ( _Len );
}
#line 1122
template < class _Alloc >
inline void _Deallocate_plain ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr ) noexcept {

    using _Alloc_traits = allocator_traits < _Alloc >;
    if constexpr ( is_same_v < _Alloc_ptr_t < _Alloc >, typename _Alloc :: value_type * > ) {
        _Alloc_traits :: deallocate ( _Al, _Ptr, 1 );
    } else {
        using _Ptr_traits = pointer_traits < _Alloc_ptr_t < _Alloc >>;
        _Alloc_traits :: deallocate ( _Al, _Ptr_traits :: pointer_to ( * _Ptr ), 1 );
    }
}
#line 1134
template < class _Alloc >
inline void _Delete_plain_internal ( _Alloc & _Al, typename _Alloc :: value_type * const _Ptr ) noexcept {

    using _Ty = typename _Alloc :: value_type;
    _Ptr -> ~ _Ty ( );
    _Deallocate_plain ( _Al, _Ptr );
}
#line 1142
template < class _Alloc >
struct _Alloc_construct_ptr {
    using pointer = _Alloc_ptr_t < _Alloc >;
    _Alloc & _Al;
    pointer _Ptr;

    inline explicit _Alloc_construct_ptr ( _Alloc & _Al_ ) : _Al ( _Al_ ), _Ptr ( nullptr ) { }

    [ [ nodiscard ] ] inline pointer _Release ( ) noexcept {
        return :: std :: exchange ( _Ptr, nullptr );
    }

    inline void _Allocate ( ) {
        _Ptr = nullptr;
        _Ptr = _Al . allocate ( 1 );
    }

    inline ~ _Alloc_construct_ptr ( ) {
        if ( _Ptr ) {
            _Al . deallocate ( _Ptr, 1 );
        }
    }

    _Alloc_construct_ptr ( const _Alloc_construct_ptr & ) = delete;
    _Alloc_construct_ptr & operator = ( const _Alloc_construct_ptr & ) = delete;
};
#line 1169
struct _Fake_allocator { }; 
#line 1171
struct _Container_base0 { 
#line 1172
void _Orphan_all() noexcept { } 
#line 1173
void _Swap_proxy_and_iterators(_Container_base0 &) noexcept { } 
#line 1174
void _Alloc_proxy(const _Fake_allocator &) noexcept { } 
#line 1175
void _Reload_proxy(const _Fake_allocator &, const _Fake_allocator &) noexcept { } 
#line 1176
}; 
#line 1178
struct _Iterator_base0 { 
#line 1179
void _Adopt(const void *) noexcept { } 
#line 1180
const _Container_base0 *_Getcont() const noexcept { 
#line 1181
return nullptr; 
#line 1182
} 
#line 1184
static constexpr bool _Unwrap_when_unverified = true; 
#line 1185
}; 
#line 1187
struct _Container_base12; 
#line 1188
struct _Container_proxy { 
#line 1189
_Container_proxy() noexcept = default;
#line 1190
_Container_proxy(_Container_base12 *_Mycont_) noexcept : _Mycont(_Mycont_) { } 
#line 1192
const _Container_base12 *_Mycont = (nullptr); 
#line 1193
mutable _Iterator_base12 *_Myfirstiter = (nullptr); 
#line 1194
}; 
#line 1196
struct _Container_base12 { 
#line 1198
_Container_base12() noexcept = default;
#line 1200
_Container_base12(const _Container_base12 &) = delete;
#line 1201
_Container_base12 &operator=(const _Container_base12 &) = delete;
#line 1203
inline void _Orphan_all() noexcept; 
#line 1204
inline void _Swap_proxy_and_iterators(_Container_base12 &) noexcept; 
#line 1206
template < class _Alloc >
    inline void _Alloc_proxy ( _Alloc && _Al ) {
        _Container_proxy * const _New_proxy = _Unfancy ( _Al . allocate ( 1 ) );
        _Construct_in_place ( * _New_proxy, this );
        _Myproxy = _New_proxy;
        _New_proxy -> _Mycont = this;
    }
#line 1214
template < class _Alloc >
    inline void _Reload_proxy ( _Alloc && _Old_alloc, _Alloc && _New_alloc ) {

        _Container_proxy * const _New_proxy = _Unfancy ( _New_alloc . allocate ( 1 ) );
        _Construct_in_place ( * _New_proxy, this );
        _New_proxy -> _Mycont = this;
        _Delete_plain_internal ( _Old_alloc, :: std :: exchange ( _Myproxy, _New_proxy ) );
    }
#line 1223
_Container_proxy *_Myproxy = (nullptr); 
#line 1226
private: inline void _Orphan_all_unlocked_v3() noexcept; 
#line 1227
inline void _Swap_proxy_and_iterators_unlocked(_Container_base12 &) noexcept; 
#line 1229
void _Orphan_all_locked_v3() noexcept { 
#line 1230
_Lockit _Lock(3); 
#line 1231
this->_Orphan_all_unlocked_v3(); 
#line 1232
} 
#line 1234
void _Swap_proxy_and_iterators_locked(_Container_base12 &_Right) noexcept { 
#line 1235
_Lockit _Lock(3); 
#line 1236
this->_Swap_proxy_and_iterators_unlocked(_Right); 
#line 1237
} 
#line 1238
}; 
#line 1240
struct _Iterator_base12 { 
#line 1242
_Iterator_base12() noexcept = default;
#line 1244
_Iterator_base12(const _Iterator_base12 &_Right) noexcept { 
#line 1245
((*this) = _Right); 
#line 1246
} 
#line 1248
_Iterator_base12 &operator=(const _Iterator_base12 &_Right) noexcept { 
#line 1255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
{ 
#line 1256
this->_Assign_locked(_Right); 
#line 1257
} 
#line 1261 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
return *this; 
#line 1262
} 
#line 1265
~_Iterator_base12() noexcept { 
#line 1271 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
{ 
#line 1272
this->_Orphan_me_locked_v3(); 
#line 1273
} 
#line 1274
} 
#line 1276
void _Adopt(const _Container_base12 *_Parent) noexcept { 
#line 1282 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
{ 
#line 1283
this->_Adopt_locked(_Parent); 
#line 1284
} 
#line 1285
} 
#line 1296 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
const _Container_base12 *_Getcont() const noexcept { 
#line 1297
return (_Myproxy) ? (_Myproxy)->_Mycont : (nullptr); 
#line 1298
} 
#line 1300
static constexpr bool _Unwrap_when_unverified = (2 == 0); 
#line 1302
mutable _Container_proxy *_Myproxy = (nullptr); 
#line 1303
mutable _Iterator_base12 *_Mynextiter = (nullptr); 
#line 1307
private: void _Assign_unlocked(const _Iterator_base12 &_Right) noexcept { 
#line 1308
if ((_Myproxy) == (_Right._Myproxy)) { 
#line 1309
return; 
#line 1310
}  
#line 1312
if (_Right._Myproxy) { 
#line 1313
this->_Adopt_unlocked((_Right._Myproxy)->_Mycont); 
#line 1314
} else { 
#line 1315
this->_Orphan_me_unlocked_v3(); 
#line 1316
}  
#line 1317
} 
#line 1319
void _Assign_locked(const _Iterator_base12 &_Right) noexcept { 
#line 1320
_Lockit _Lock(3); 
#line 1321
this->_Assign_unlocked(_Right); 
#line 1322
} 
#line 1324
void _Adopt_unlocked(const _Container_base12 *_Parent) noexcept { 
#line 1325
if (!_Parent) { 
#line 1326
this->_Orphan_me_unlocked_v3(); 
#line 1327
return; 
#line 1328
}  
#line 1330
_Container_proxy *_Parent_proxy = _Parent->_Myproxy; 
#line 1331
if ((_Myproxy) != _Parent_proxy) { 
#line 1332
if (_Myproxy) { 
#line 1333
this->_Orphan_me_unlocked_v3(); 
#line 1334
}  
#line 1335
(_Mynextiter) = (_Parent_proxy->_Myfirstiter); 
#line 1336
(_Parent_proxy->_Myfirstiter) = this; 
#line 1337
(_Myproxy) = _Parent_proxy; 
#line 1338
}  
#line 1339
} 
#line 1341
void _Adopt_locked(const _Container_base12 *_Parent) noexcept { 
#line 1342
_Lockit _Lock(3); 
#line 1343
this->_Adopt_unlocked(_Parent); 
#line 1344
} 
#line 1346
void _Orphan_me_unlocked_v3() noexcept { 
#line 1347
if (!(_Myproxy)) { 
#line 1348
return; 
#line 1349
}  
#line 1352
_Iterator_base12 **_Pnext = &((_Myproxy)->_Myfirstiter); 
#line 1353
while ((*_Pnext) && ((*_Pnext) != this)) { 
#line 1354
_Pnext = (&((*_Pnext)->_Mynextiter)); 
#line 1355
}  
#line 1357
do { if (*_Pnext) { } else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory", 1357, 0, "%s", "ITERATOR LIST CORRUPTED!")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x54\x45\x52\x41\x54\x4f\x52\x20\x4c\x49\x53\x54\x20\x43\x4f\x52\x52\x55\x50\x54\x45\x44\x21\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6d\x65\x6d\x6f\x72" L"\x79", 1357, 0); } while (false); }  ; } while (false); 
#line 1358
(*_Pnext) = (_Mynextiter); 
#line 1359
(_Myproxy) = (nullptr); 
#line 1360
} 
#line 1362
void _Orphan_me_locked_v3() noexcept { 
#line 1363
_Lockit _Lock(3); 
#line 1364
this->_Orphan_me_unlocked_v3(); 
#line 1365
} 
#line 1367 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
}; 
#line 1369
inline void _Container_base12::_Orphan_all_unlocked_v3() noexcept { 
#line 1370
if (!(_Myproxy)) { 
#line 1371
return; 
#line 1372
}  
#line 1375
for (auto _Pnext = ::std::exchange((_Myproxy)->_Myfirstiter, nullptr); _Pnext; _Pnext = (_Pnext->_Mynextiter)) { 
#line 1376
(_Pnext->_Myproxy) = (nullptr); 
#line 1377
}  
#line 1378
} 
#line 1380
inline void _Container_base12::_Orphan_all() noexcept { 
#line 1387 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
{ 
#line 1388
this->_Orphan_all_locked_v3(); 
#line 1389
} 
#line 1391 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
} 
#line 1393
inline void _Container_base12::_Swap_proxy_and_iterators_unlocked(_Container_base12 &_Right) noexcept { 
#line 1394
_Container_proxy *_Temp = _Myproxy; 
#line 1395
(_Myproxy) = (_Right._Myproxy); 
#line 1396
(_Right._Myproxy) = _Temp; 
#line 1398
if (_Myproxy) { 
#line 1399
((_Myproxy)->_Mycont) = this; 
#line 1400
}  
#line 1402
if (_Right._Myproxy) { 
#line 1403
((_Right._Myproxy)->_Mycont) = (&_Right); 
#line 1404
}  
#line 1405
} 
#line 1407
inline void _Container_base12::_Swap_proxy_and_iterators(_Container_base12 &_Right) noexcept { 
#line 1414 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
{ 
#line 1415
this->_Swap_proxy_and_iterators_locked(_Right); 
#line 1416
} 
#line 1420 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
} 
#line 1426 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
using _Container_base = _Container_base12; 
#line 1427
using _Iterator_base = _Iterator_base12; 
#line 1430 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
struct _Leave_proxy_unbound { 
#line 1431
explicit _Leave_proxy_unbound() = default;
#line 1432
}; 
#line 1434
struct _Fake_proxy_ptr_impl { 
#line 1435
_Fake_proxy_ptr_impl(const _Fake_proxy_ptr_impl &) = delete;
#line 1436
_Fake_proxy_ptr_impl &operator=(const _Fake_proxy_ptr_impl &) = delete;
#line 1437
_Fake_proxy_ptr_impl(const _Fake_allocator &, _Leave_proxy_unbound) noexcept { } 
#line 1438
_Fake_proxy_ptr_impl(const _Fake_allocator &, const _Container_base0 &) noexcept { } 
#line 1440
void _Bind(const _Fake_allocator &, _Container_base0 *) noexcept { } 
#line 1441
void _Release() noexcept { } 
#line 1442
}; 
#line 1444
struct _Basic_container_proxy_ptr12 { 
#line 1446
_Container_proxy *_Ptr = (nullptr); 
#line 1448
constexpr void _Release() noexcept { 
#line 1449
(_Ptr) = (nullptr); 
#line 1450
} 
#line 1453
protected: _Basic_container_proxy_ptr12() = default;
#line 1454
_Basic_container_proxy_ptr12(const _Basic_container_proxy_ptr12 &) = delete;
#line 1455
_Basic_container_proxy_ptr12(_Basic_container_proxy_ptr12 &&) = delete;
#line 1456
}; 
#line 1458
template < class _Alloc >
struct _Container_proxy_ptr12 : _Basic_container_proxy_ptr12 {

    _Alloc & _Al;

    inline _Container_proxy_ptr12 ( _Alloc & _Al_, _Leave_proxy_unbound ) : _Al ( _Al_ ) {

        _Ptr = _Unfancy ( _Al_ . allocate ( 1 ) );
        _Construct_in_place ( * _Ptr );
    }

    inline _Container_proxy_ptr12 ( _Alloc & _Al_, _Container_base12 & _Mycont ) : _Al ( _Al_ ) {

        _Ptr = _Unfancy ( _Al_ . allocate ( 1 ) );
        _Construct_in_place ( * _Ptr, :: std :: addressof ( _Mycont ) );
        _Mycont . _Myproxy = _Ptr;
    }

    inline void _Bind ( _Alloc & _Old_alloc, _Container_base12 * _Mycont ) noexcept {


        _Ptr -> _Mycont = _Mycont;
        _Delete_plain_internal ( _Old_alloc, :: std :: exchange ( _Mycont -> _Myproxy, :: std :: exchange ( _Ptr, nullptr ) ) );
    }

    inline ~ _Container_proxy_ptr12 ( ) {
        if ( _Ptr ) {
            _Delete_plain_internal ( _Al, _Ptr );
        }
    }
};
#line 1497 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template< class _Alloc> using _Container_proxy_ptr = _Container_proxy_ptr12< _Rebind_alloc_t< _Alloc, _Container_proxy> > ; 
#line 1501 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
struct _Zero_then_variadic_args_t { 
#line 1502
explicit _Zero_then_variadic_args_t() = default;
#line 1503
}; 
#line 1505
struct _One_then_variadic_args_t { 
#line 1506
explicit _One_then_variadic_args_t() = default;
#line 1507
}; 
#line 1509
template < class _Ty1, class _Ty2, bool = is_empty_v < _Ty1 > && ! is_final_v < _Ty1 > >
class _Compressed_pair final : private _Ty1 {
public :
    _Ty2 _Myval2;

    using _Mybase = _Ty1;

    template < class ... _Other2 >
    constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_default_constructible < _Ty1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Ty1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    template < class _Other1, class ... _Other2 >
    constexpr _Compressed_pair ( _One_then_variadic_args_t, _Other1 && _Val1, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_constructible < _Ty1, _Other1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Ty1 ( :: std :: forward < _Other1 > ( _Val1 ) ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    constexpr _Ty1 & _Get_first ( ) noexcept {
        return * this;
    }

    constexpr const _Ty1 & _Get_first ( ) const noexcept {
        return * this;
    }
};
#line 1535
template < class _Ty1, class _Ty2 >
class _Compressed_pair < _Ty1, _Ty2, false > final {
public :
    _Ty1 _Myval1;
    _Ty2 _Myval2;

    template < class ... _Other2 >
    constexpr explicit _Compressed_pair ( _Zero_then_variadic_args_t, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_default_constructible < _Ty1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Myval1 ( ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    template < class _Other1, class ... _Other2 >
    constexpr _Compressed_pair ( _One_then_variadic_args_t, _Other1 && _Val1, _Other2 && ... _Val2 ) noexcept (
        conjunction_v < is_nothrow_constructible < _Ty1, _Other1 >, is_nothrow_constructible < _Ty2, _Other2 ... >> )
        : _Myval1 ( :: std :: forward < _Other1 > ( _Val1 ) ), _Myval2 ( :: std :: forward < _Other2 > ( _Val2 ) ... ) { }

    constexpr _Ty1 & _Get_first ( ) noexcept {
        return _Myval1;
    }

    constexpr const _Ty1 & _Get_first ( ) const noexcept {
        return _Myval1;
    }
};
#line 1560
struct _Move_allocator_tag { 
#line 1561
explicit _Move_allocator_tag() = default;
#line 1562
}; 
#line 1564
template < class _Ty >
pair < _Ty *, ptrdiff_t > _Get_temporary_buffer ( ptrdiff_t _Count ) noexcept {
    if ( static_cast < size_t > ( _Count ) <= static_cast < size_t > ( - 1 ) / sizeof ( _Ty ) ) {
        for (; 0 < _Count; _Count /= 2 ) {
            const auto _Size = static_cast < size_t > ( _Count ) * sizeof ( _Ty );
            void * _Pbuf;





            {
                _Pbuf = :: operator new ( _Size, nothrow );
            }

            if ( _Pbuf ) {
                return { static_cast < _Ty * > ( _Pbuf ), _Count };
            }
        }
    }

    return { nullptr, 0 };
}
#line 1588
template < class _Ty >
void _Return_temporary_buffer ( _Ty * const _Pbuf ) noexcept {





    {
        :: operator delete ( _Pbuf );
    }
}
#line 1600
template < class _NoThrowFwdIt >
struct [ [ nodiscard ] ] _Uninitialized_backout {

    _NoThrowFwdIt _First;
    _NoThrowFwdIt _Last;

    constexpr explicit _Uninitialized_backout ( _NoThrowFwdIt _Dest ) : _First ( _Dest ), _Last ( _Dest ) { }

    constexpr _Uninitialized_backout ( _NoThrowFwdIt _First_, _NoThrowFwdIt _Last_ ) : _First ( _First_ ), _Last ( _Last_ ) { }

    _Uninitialized_backout ( const _Uninitialized_backout & ) = delete;
    _Uninitialized_backout & operator = ( const _Uninitialized_backout & ) = delete;

    inline ~ _Uninitialized_backout ( ) {
        _Destroy_range ( _First, _Last );
    }

    template < class ... _Types >
    inline void _Emplace_back ( _Types && ... _Vals ) {

        _Construct_in_place ( * _Last, :: std :: forward < _Types > ( _Vals ) ... );
        ++ _Last;
    }

    constexpr _NoThrowFwdIt _Release ( ) {
        _First = _Last;
        return _Last;
    }
};
#line 1630
template < class _InIt, class _NoThrowFwdIt >
inline _NoThrowFwdIt _Uninitialized_move_unchecked ( _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    if constexpr ( _Iter_move_cat < _InIt, _NoThrowFwdIt > :: _Bitcopy_constructible ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }
    _Uninitialized_backout < _NoThrowFwdIt > _Backout { _Dest };
    for (; _First != _Last; ++ _First ) {
        _Backout . _Emplace_back ( :: std :: move ( * _First ) );
    }

    return _Backout . _Release ( );
}
#line 1783 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Alloc >
class [ [ nodiscard ] ] _Uninitialized_backout_al {

private :
    using pointer = _Alloc_ptr_t < _Alloc >;

public :
    inline _Uninitialized_backout_al ( pointer _Dest, _Alloc & _Al_ ) : _First ( _Dest ), _Last ( _Dest ), _Al ( _Al_ ) { }

    _Uninitialized_backout_al ( const _Uninitialized_backout_al & ) = delete;
    _Uninitialized_backout_al & operator = ( const _Uninitialized_backout_al & ) = delete;

    inline ~ _Uninitialized_backout_al ( ) {
        _Destroy_range ( _First, _Last, _Al );
    }

    template < class ... _Types >
    inline void _Emplace_back ( _Types && ... _Vals ) {
        allocator_traits < _Alloc > :: construct ( _Al, _Unfancy ( _Last ), :: std :: forward < _Types > ( _Vals ) ... );
        ++ _Last;
    }

    constexpr pointer _Release ( ) {
        _First = _Last;
        return _Last;
    }

private :
    pointer _First;
    pointer _Last;
    _Alloc & _Al;
};
#line 1816
template < class _InIt, class _Se, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_copy (
    _InIt _First, _Se _Last, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;







    auto _UFirst = _Get_unwrapped ( :: std :: move ( _First ) );
    auto _ULast = _Get_unwrapped ( :: std :: move ( _Last ) );


    constexpr bool _Can_memmove = _Sent_copy_cat < decltype ( _UFirst ), decltype ( _ULast ), _Ptrval > :: _Bitcopy_constructible
                               && _Uses_default_construct < _Alloc, _Ptrval, decltype ( * _UFirst ) > :: value;

    if constexpr ( _Can_memmove ) {



        {
            if constexpr ( is_same_v < decltype ( _UFirst ), decltype ( _ULast ) > ) {
                _Copy_memmove ( _To_address ( _UFirst ), _To_address ( _ULast ), _Unfancy ( _Dest ) );
                _Dest += _ULast - _UFirst;
            } else {
                const auto _Count = static_cast < size_t > ( _ULast - _UFirst );
                _Copy_memmove_n ( _To_address ( _UFirst ), _Count, _Unfancy ( _Dest ) );
                _Dest += _Count;
            }
            return _Dest;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _UFirst != _ULast; ++ _UFirst ) {
        _Backout . _Emplace_back ( * _UFirst );
    }

    return _Backout . _Release ( );
}
#line 1861 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _InIt, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_copy_n (
    _InIt _First, size_t _Count, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;

    auto _UFirst = _Get_unwrapped ( :: std :: move ( _First ) );

    constexpr bool _Can_memmove =
        conjunction_v < bool_constant < _Iter_copy_cat < decltype ( _UFirst ), _Ptrval > :: _Bitcopy_constructible >,
            _Uses_default_construct < _Alloc, _Ptrval, decltype ( * _UFirst ) >>;

    if constexpr ( _Can_memmove ) {



        {
            _Copy_memmove_n ( _UFirst, _Count, _Unfancy ( _Dest ) );
            _Dest += _Count;
            return _Dest;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _Count != 0; ++ _UFirst, ( void ) -- _Count ) {
        _Backout . _Emplace_back ( * _UFirst );
    }

    return _Backout . _Release ( );
}
#line 1893 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _InIt, class _NoThrowFwdIt >
inline _NoThrowFwdIt _Uninitialized_copy_unchecked ( _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    if constexpr ( _Iter_copy_cat < _InIt, _NoThrowFwdIt > :: _Bitcopy_constructible ) {



        {
            return _Copy_memmove ( _First, _Last, _Dest );
        }
    }

    _Uninitialized_backout < _NoThrowFwdIt > _Backout { _Dest };
    for (; _First != _Last; ++ _First ) {
        _Backout . _Emplace_back ( * _First );
    }

    return _Backout . _Release ( );
}
#line 1913 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _InIt, class _NoThrowFwdIt >
_NoThrowFwdIt uninitialized_copy ( const _InIt _First, const _InIt _Last, _NoThrowFwdIt _Dest ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    auto _UDest = _Get_unwrapped_n ( _Dest, _Idl_distance < _InIt > ( _UFirst, _ULast ) );
    _Seek_wrapped ( _Dest, _Uninitialized_copy_unchecked ( _UFirst, _ULast, _UDest ) );
    return _Dest;
}
#line 1924
template < class _InIt, class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_move (
    const _InIt _First, const _InIt _Last, _Alloc_ptr_t < _Alloc > _Dest, _Alloc & _Al ) {


    using _Ptrval = typename _Alloc :: value_type *;
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    if constexpr ( conjunction_v < bool_constant < _Iter_move_cat < decltype ( _UFirst ), _Ptrval > :: _Bitcopy_constructible >,
                      _Uses_default_construct < _Alloc, _Ptrval, decltype ( :: std :: move ( * _UFirst ) ) >> ) {



        {
            _Copy_memmove ( _UFirst, _ULast, _Unfancy ( _Dest ) );
            return _Dest + ( _ULast - _UFirst );
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _Dest, _Al };
    for (; _UFirst != _ULast; ++ _UFirst ) {
        _Backout . _Emplace_back ( :: std :: move ( * _UFirst ) );
    }

    return _Backout . _Release ( );
}
#line 1951 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_fill_n (
    _Alloc_ptr_t < _Alloc > _First, _Alloc_size_t < _Alloc > _Count, const typename _Alloc :: value_type & _Val, _Alloc & _Al ) {

    using _Ty = typename _Alloc :: value_type;
    if constexpr ( _Fill_memset_is_safe < _Ty *, _Ty > && _Uses_default_construct < _Alloc, _Ty *, _Ty > :: value ) {



        {
            _Fill_memset ( _Unfancy ( _First ), _Val, static_cast < size_t > ( _Count ) );
            return _First + _Count;
        }
    } else if constexpr ( _Fill_zero_memset_is_safe < _Ty *, _Ty > && _Uses_default_construct < _Alloc, _Ty *, _Ty > :: value ) {



        {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _Unfancy ( _First ), static_cast < size_t > ( _Count ) );
                return _First + _Count;
            }
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _First, _Al };
    for (; 0 < _Count; -- _Count ) {
        _Backout . _Emplace_back ( _Val );
    }

    return _Backout . _Release ( );
}
#line 1984 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _NoThrowFwdIt, class _Tval >
void uninitialized_fill ( const _NoThrowFwdIt _First, const _NoThrowFwdIt _Last, const _Tval & _Val ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    if constexpr ( _Fill_memset_is_safe < _Unwrapped_t < const _NoThrowFwdIt & >, _Tval > ) {
        _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _ULast - _UFirst ) );
    } else {
        if constexpr ( _Fill_zero_memset_is_safe < _Unwrapped_t < const _NoThrowFwdIt & >, _Tval > ) {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _ULast - _UFirst ) );
                return;
            }
        }

        _Uninitialized_backout < _Unwrapped_t < const _NoThrowFwdIt & >> _Backout { _UFirst };
        while ( _Backout . _Last != _ULast ) {
            _Backout . _Emplace_back ( _Val );
        }

        _Backout . _Release ( );
    }
}
#line 2009
template< class _NoThrowFwdIt> constexpr bool 
#line 2010
_Use_memset_value_construct_v = conjunction_v< bool_constant< _Iterator_is_contiguous< _NoThrowFwdIt> > , is_scalar< _Iter_value_t< _NoThrowFwdIt> > , negation< is_volatile< remove_reference_t< _Iter_ref_t< _NoThrowFwdIt> > > > , negation< is_member_pointer< _Iter_value_t< _NoThrowFwdIt> > > > ; 
#line 2015
template < class _Ptr >
_Ptr _Zero_range ( const _Ptr _First, const _Ptr _Last ) {
    char * const _First_ch = reinterpret_cast < char * > ( _To_address ( _First ) );
    char * const _Last_ch = reinterpret_cast < char * > ( _To_address ( _Last ) );
    :: memset ( _First_ch, 0, static_cast < size_t > ( _Last_ch - _First_ch ) );
    return _Last;
}
#line 2023
template < class _Alloc >
inline _Alloc_ptr_t < _Alloc > _Uninitialized_value_construct_n (
    _Alloc_ptr_t < _Alloc > _First, _Alloc_size_t < _Alloc > _Count, _Alloc & _Al ) {

    using _Ptrty = typename _Alloc :: value_type *;
    if constexpr ( _Use_memset_value_construct_v < _Ptrty > && _Uses_default_construct < _Alloc, _Ptrty > :: value ) {



        {
            auto _PFirst = _Unfancy ( _First );
            _Zero_range ( _PFirst, _PFirst + _Count );
            return _First + _Count;
        }
    }

    _Uninitialized_backout_al < _Alloc > _Backout { _First, _Al };
    for (; 0 < _Count; -- _Count ) {
        _Backout . _Emplace_back ( );
    }

    return _Backout . _Release ( );
}
#line 2047 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _NoThrowFwdIt, class _Diff >
_NoThrowFwdIt _Uninitialized_value_construct_n_unchecked1 ( _NoThrowFwdIt _UFirst, _Diff _Count ) {

    ;
    if constexpr ( _Use_memset_value_construct_v < _NoThrowFwdIt > ) {
        return _Zero_range ( _UFirst, _UFirst + _Count );
    } else {
        _Uninitialized_backout < _NoThrowFwdIt > _Backout { _UFirst };
        for (; 0 < _Count; -- _Count ) {
            _Backout . _Emplace_back ( );
        }

        return _Backout . _Release ( );
    }
}
#line 2064
template < class _Ty >
 [ [ nodiscard ] ] pair < _Ty *, ptrdiff_t > get_temporary_buffer ( ptrdiff_t _Count ) noexcept {
    return _Get_temporary_buffer < _Ty > ( _Count );
}
#line 2069
template < class _Ty >
 void return_temporary_buffer ( _Ty * _Pbuf ) {
    _Return_temporary_buffer ( _Pbuf );
}
#line 2076 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template< class _Key, class ..._Args> 
#line 2077
struct _In_place_key_extract_set { 
#line 2079
static constexpr bool _Extractable = false; 
#line 2080
}; 
#line 2082
template < class _Key >
struct _In_place_key_extract_set < _Key, _Key > {

    static constexpr bool _Extractable = true;
    static const _Key & _Extract ( const _Key & _Val ) noexcept {
        return _Val;
    }
};
#line 2092
template< class _Key, class ..._Args> 
#line 2093
struct _In_place_key_extract_map { 
#line 2095
static constexpr bool _Extractable = false; 
#line 2096
}; 
#line 2098
template < class _Key, class _Second >
struct _In_place_key_extract_map < _Key, _Key, _Second > {

    static constexpr bool _Extractable = true;
    static const _Key & _Extract ( const _Key & _Val, const _Second & ) noexcept {
        return _Val;
    }
};
#line 2107
template < class _Key, class _First, class _Second >
struct _In_place_key_extract_map < _Key, pair < _First, _Second > > {

    static constexpr bool _Extractable = is_same_v < _Key, _Remove_cvref_t < _First >>;
    static const _Key & _Extract ( const pair < _First, _Second > & _Val ) {
        return _Val . first;
    }
};
#line 2116
#pragma warning(push)
#pragma warning(disable : 4624)
template< class _Ty> 
#line 2119
struct _Wrap { 
#line 2120
_Ty _Value; 
#line 2121
}; 
#pragma warning(pop)
#line 2124
template < class _Alloc >
struct _Alloc_temporary2 {
    using value_type = typename _Alloc :: value_type;
    using _Traits = allocator_traits < _Alloc >;

    _Alloc & _Al;














    union {
        value_type _Value;
    };

    [ [ nodiscard ] ] inline value_type & _Get_value ( ) noexcept {
        return _Value;
    }

    [ [ nodiscard ] ] inline const value_type & _Get_value ( ) const noexcept {
        return _Value;
    }


    template < class ... _Args >
    inline explicit _Alloc_temporary2 ( _Alloc & _Al_, _Args && ... _Vals ) noexcept (
        noexcept ( _Traits :: construct ( _Al_, :: std :: addressof ( _Get_value ( ) ), :: std :: forward < _Args > ( _Vals ) ... ) ) )
        : _Al ( _Al_ ) {
        _Traits :: construct ( _Al, :: std :: addressof ( _Get_value ( ) ), :: std :: forward < _Args > ( _Vals ) ... );
    }

    _Alloc_temporary2 ( const _Alloc_temporary2 & ) = delete;
    _Alloc_temporary2 & operator = ( const _Alloc_temporary2 & ) = delete;

    inline ~ _Alloc_temporary2 ( ) {
        _Traits :: destroy ( _Al, :: std :: addressof ( _Get_value ( ) ) );
    }
};
#line 2172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Alloc >
[ [ nodiscard ] ] constexpr bool _Allocators_equal ( const _Alloc & _Lhs, const _Alloc & _Rhs ) noexcept {
    if constexpr ( allocator_traits < _Alloc > :: is_always_equal :: value ) {
        return true;
    } else {
        return _Lhs == _Rhs;
    }
}
#line 2196 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Alloc >
[ [ nodiscard ( "This function allocates memory and returns a raw pointer. Discarding the return value will cause a memory leak." ) ] ] inline typename allocator_traits < _Alloc > :: pointer _Allocate_at_least_helper (
    _Alloc & _Al, typename allocator_traits < _Alloc > :: size_type & _Count ) {







    {
        return _Al . allocate ( _Count );
    }
}
#line 2211 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _FwdIt, class _Ty >
[ [ nodiscard ( "The \'remove\' and \'remove_if\' algorithms return the iterator past the last element that should be kept. You need to call cont" "ainer.erase(result, container.end()) afterwards. In C++20, \'std::erase\' and \'std::erase_if\' are simpler replacements for the" "se two steps." ) ] ] inline _FwdIt remove ( _FwdIt _First, const _FwdIt _Last, const _Ty & _Val ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    _UFirst = :: std :: _Find_unchecked ( _UFirst, _ULast, _Val );
    auto _UNext = _UFirst;
    if ( _UFirst != _ULast ) {
        while ( ++ _UFirst != _ULast ) {
            if ( ! ( * _UFirst == _Val ) ) {
                * _UNext = :: std :: move ( * _UFirst );
                ++ _UNext;
            }
        }
    }

    _Seek_wrapped ( _First, _UNext );
    return _First;
}
#line 2232
template < class _FwdIt, class _Pr >
[ [ nodiscard ( "The \'remove\' and \'remove_if\' algorithms return the iterator past the last element that should be kept. You need to call cont" "ainer.erase(result, container.end()) afterwards. In C++20, \'std::erase\' and \'std::erase_if\' are simpler replacements for the" "se two steps." ) ] ] inline _FwdIt remove_if ( _FwdIt _First, const _FwdIt _Last, _Pr _Pred ) {

    _Adl_verify_range ( _First, _Last );
    auto _UFirst = _Get_unwrapped ( _First );
    const auto _ULast = _Get_unwrapped ( _Last );
    _UFirst = :: std :: find_if ( _UFirst, _ULast, _Pass_fn ( _Pred ) );
    auto _UNext = _UFirst;
    if ( _UFirst != _ULast ) {
        while ( ++ _UFirst != _ULast ) {
            if ( ! _Pred ( * _UFirst ) ) {
                * _UNext = :: std :: move ( * _UFirst );
                ++ _UNext;
            }
        }
    }

    _Seek_wrapped ( _First, _UNext );
    return _First;
}
#line 2253
template < class _Container, class _Uty >
inline typename _Container :: size_type _Erase_remove ( _Container & _Cont, const _Uty & _Val ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    _Seek_wrapped ( _First, :: std :: remove ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Val ) );
    _Cont . erase ( _First, _Last );
    return _Old_size - _Cont . size ( );
}
#line 2264
template < class _Container, class _Pr >
inline typename _Container :: size_type _Erase_remove_if ( _Container & _Cont, _Pr _Pred ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    _Seek_wrapped ( _First, :: std :: remove_if ( _Get_unwrapped ( _First ), _Get_unwrapped ( _Last ), _Pred ) );
    _Cont . erase ( _First, _Last );
    return _Old_size - _Cont . size ( );
}
#line 2275
template < class _Container, class _Pr >
typename _Container :: size_type _Erase_nodes_if ( _Container & _Cont, _Pr _Pred ) {

    auto _First = _Cont . begin ( );
    const auto _Last = _Cont . end ( );
    const auto _Old_size = _Cont . size ( );
    while ( _First != _Last ) {
        if ( _Pred ( * _First ) ) {
            _First = _Cont . erase ( _First );
        } else {
            ++ _First;
        }
    }
    return _Old_size - _Cont . size ( );
}
#line 2291
template< class _Ty1, class _Ty2> void _Deduce_as_pair(const pair< _Ty1, _Ty2>  &); 
#line 2294
template< class _Ty, class  = void> constexpr bool 
#line 2295
_Is_deducible_as_pair = false; 
#line 2297
template< class _Ty> constexpr bool 
#line 2298
_Is_deducible_as_pair< _Ty, decltype(std::_Deduce_as_pair(std::declval< _Ty> ()))>  = true; 
#line 2300
template< class _Ty> constexpr bool 
#line 2301
_Is_cv_pair = _Is_specialization_v< remove_cv_t< _Ty> , pair> ; 
#line 2303
template< class _Ty> const _Ty &_Normally_bind(_Identity_t< const _Ty &> ); 
#line 2306
template< class _Ty> _Ty &&_Normally_bind(_Identity_t< _Ty &&> ); 
#line 2309
template< class _Ty, class _Uty> using _Normally_bound_ref = decltype(std::_Normally_bind< _Ty> (std::declval< _Uty> ())); 
#line 2312
template< class _Ty, class _Uty, class  = void> constexpr bool 
#line 2313
_Is_normally_bindable = false; 
#line 2315
template< class _Ty, class _Uty> constexpr bool 
#line 2316
_Is_normally_bindable< _Ty, _Uty, void_t< _Normally_bound_ref< _Ty, _Uty> > >  = true; 
#line 2544 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xmemory"
template < class _Ty,
    bool = is_empty_v < _Ty > && ! is_final_v < _Ty > >
class _Ebco_base : private _Ty {
private :
    using _Mybase = _Ty;

protected :
    template < class _Other, enable_if_t < ! is_same_v < _Remove_cvref_t < _Other >, _Ebco_base >, int > = 0 >
    constexpr explicit _Ebco_base ( _Other && _Val ) noexcept ( is_nothrow_constructible_v < _Ty, _Other > )
        : _Ty ( :: std :: forward < _Other > ( _Val ) ) { }

    constexpr _Ty & _Get_val ( ) noexcept {
        return * this;
    }

    constexpr const _Ty & _Get_val ( ) const noexcept {
        return * this;
    }
};
#line 2564
template < class _Ty >
class _Ebco_base < _Ty, false > {
private :
    _Ty _Myval;

protected :
    template < class _Other, enable_if_t < ! is_same_v < _Remove_cvref_t < _Other >, _Ebco_base >, int > = 0 >
    constexpr explicit _Ebco_base ( _Other && _Val ) noexcept ( is_nothrow_constructible_v < _Ty, _Other > )
        : _Myval ( :: std :: forward < _Other > ( _Val ) ) { }

    constexpr _Ty & _Get_val ( ) noexcept {
        return _Myval;
    }

    constexpr const _Ty & _Get_val ( ) const noexcept {
        return _Myval;
    }
};
#line 2583
inline void *align(size_t _Bound, size_t _Size, void *&_Ptr, size_t &_Space) noexcept { 
#line 2585
size_t _Off = static_cast< size_t>((reinterpret_cast< uintptr_t>(_Ptr)) & (_Bound - (1))); 
#line 2586
if (_Off != (0)) { 
#line 2587
_Off = (_Bound - _Off); 
#line 2588
}  
#line 2590
if ((_Space < _Off) || ((_Space - _Off) < _Size)) { 
#line 2591
return nullptr; 
#line 2592
}  
#line 2595
_Ptr = ((static_cast< char *>(_Ptr)) + _Off); 
#line 2596
_Space -= _Off; 
#line 2597
return _Ptr; 
#line 2598
} 
#line 2600
template< class _Ty, class  = void> constexpr bool 
#line 2601
_Is_transparent_v = false; 
#line 2603
template< class _Ty> constexpr bool 
#line 2604
_Is_transparent_v< _Ty, void_t< typename _Ty::is_transparent> >  = true; 
#line 2606
template< class _Ty> 
#line 2607
struct _Is_transparent : public bool_constant< _Is_transparent_v< _Ty, void> >  { }; 
#line 2613
}
#line 2617
#pragma warning(pop)
#pragma pack ( pop )
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
namespace std { 
#line 34
template < class _Elem, class _Int_type >
struct _Char_traits {
    using char_type = _Elem;
    using int_type = _Int_type;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = _Mbstatet;






    static inline _Elem * copy ( _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {















        :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) );


        return _First1;
    }

      static inline _Elem * _Copy_s (
                                                                                 _Elem * const _First1,
        const size_t _Dest_size, const _Elem * const _First2, const size_t _Count ) noexcept {

        do { if ( _Count <= _Dest_size ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 74, 0, "%s", "invalid argument" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 74, 0 ); } while ( false ); }; } while ( false );
        return copy ( _First1, _First2, _Count );
    }

    static inline _Elem * move ( _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {





































        :: memmove ( _First1, _First2, _Count * sizeof ( _Elem ) );


        return _First1;
    }




    [ [ nodiscard ] ] static inline int compare ( const _Elem * _First1,
          const _Elem * _First2, size_t _Count ) noexcept {

        for (; 0 < _Count; -- _Count, ++ _First1, ++ _First2 ) {
            if ( * _First1 != * _First2 ) {
                return * _First1 < * _First2 ? - 1 : + 1;
            }
        }

        return 0;
    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * _First ) noexcept {

        size_t _Count = 0;
        while ( * _First != _Elem ( ) ) {
            ++ _Count;
            ++ _First;
        }

        return _Count;
    }

    [ [ nodiscard ] ] static inline const _Elem * find (
          const _Elem * _First, size_t _Count, const _Elem & _Ch ) noexcept {

        for (; 0 < _Count; -- _Count, ++ _First ) {
            if ( * _First == _Ch ) {
                return _First;
            }
        }

        return nullptr;
    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {








        {
            for ( _Elem * _Next = _First; _Count > 0; -- _Count, ++ _Next ) {
                * _Next = _Ch;
            }
        }

        return _First;
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        {
            _Left = _Right;
        }
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left < _Right;
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type _Meta ) noexcept {
        return static_cast < _Elem > ( _Meta );
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem _Ch ) noexcept {
        return static_cast < int_type > ( _Ch );
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type _Left, const int_type _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : ! eof ( );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return static_cast < int_type > ( ( - 1 ) );
    }
};
#line 220 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Elem >
struct _WChar_traits : private _Char_traits < _Elem, unsigned short > {

private :
    using _Primary_char_traits = _Char_traits < _Elem, unsigned short >;

public :
    using char_type = _Elem;
    using int_type = unsigned short;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = mbstate_t;




    using _Primary_char_traits :: _Copy_s;
    using _Primary_char_traits :: copy;
    using _Primary_char_traits :: move;

    [ [ nodiscard ] ] static inline int compare ( const _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {








        return :: wmemcmp (
            reinterpret_cast < const wchar_t * > ( _First1 ), reinterpret_cast < const wchar_t * > ( _First2 ), _Count );

    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * _First ) noexcept {








        return :: wcslen ( reinterpret_cast < const wchar_t * > ( _First ) );

    }

    [ [ nodiscard ] ] static inline const _Elem * find (
          const _Elem * _First, const size_t _Count, const _Elem & _Ch ) noexcept {








        return reinterpret_cast < const _Elem * > ( :: wmemchr ( reinterpret_cast < const wchar_t * > ( _First ), _Ch, _Count ) );

    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {







        return reinterpret_cast < _Elem * > ( :: wmemset ( reinterpret_cast < wchar_t * > ( _First ), _Ch, _Count ) );
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        _Left = _Right;
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left < _Right;
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type _Meta ) noexcept {
        return _Meta;
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem _Ch ) noexcept {
        return _Ch;
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type _Left, const int_type _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : static_cast < int_type > ( ! eof ( ) );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return ( ( wint_t ) ( 65535 ) );
    }
};
#line 332 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template< class _Elem> 
#line 333
struct char_traits : public _Char_traits< _Elem, long>  { }; 
#line 336
template<> struct char_traits< char16_t>  : public _WChar_traits< char16_t>  { }; 
#line 339
template<> struct char_traits< char32_t>  : public _Char_traits< char32_t, unsigned>  { }; 
#line 342
template<> struct char_traits< __wchar_t>  : public _WChar_traits< __wchar_t>  { }; 
#line 355 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Elem, class _Int_type >
struct _Narrow_char_traits : private _Char_traits < _Elem, _Int_type > {

private :
    using _Primary_char_traits = _Char_traits < _Elem, _Int_type >;

public :
    using char_type = _Elem;
    using int_type = _Int_type;
    using pos_type = streampos;
    using off_type = streamoff;
    using state_type = mbstate_t;




    using _Primary_char_traits :: _Copy_s;
    using _Primary_char_traits :: copy;
    using _Primary_char_traits :: move;

    [ [ nodiscard ] ] static inline int compare ( const _Elem * const _First1,
          const _Elem * const _First2, const size_t _Count ) noexcept {




        return :: memcmp ( _First1, _First2, _Count );

    }

    [ [ nodiscard ] ] static inline size_t length ( const _Elem * const _First ) noexcept {















        return :: strlen ( reinterpret_cast < const char * > ( _First ) );

    }

    [ [ nodiscard ] ] static inline const _Elem * find ( const _Elem * const _First, const size_t _Count,
        const _Elem & _Ch ) noexcept {















        return static_cast < const _Elem * > ( :: memchr ( _First, _Ch, _Count ) );

    }

    static inline _Elem * assign (
          _Elem * const _First, size_t _Count, const _Elem _Ch ) noexcept {







        return static_cast < _Elem * > ( :: memset ( _First, _Ch, _Count ) );
    }

    static inline void assign ( _Elem & _Left, const _Elem & _Right ) noexcept {





        _Left = _Right;
    }

    [ [ nodiscard ] ] static constexpr bool eq ( const _Elem _Left, const _Elem _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr bool lt ( const _Elem _Left, const _Elem _Right ) noexcept {
        return static_cast < unsigned char > ( _Left ) < static_cast < unsigned char > ( _Right );
    }

    [ [ nodiscard ] ] static constexpr _Elem to_char_type ( const int_type _Meta ) noexcept {
        return static_cast < _Elem > ( _Meta );
    }

    [ [ nodiscard ] ] static constexpr int_type to_int_type ( const _Elem _Ch ) noexcept {
        return static_cast < unsigned char > ( _Ch );
    }

    [ [ nodiscard ] ] static constexpr bool eq_int_type ( const int_type _Left, const int_type _Right ) noexcept {
        return _Left == _Right;
    }

    [ [ nodiscard ] ] static constexpr int_type not_eof ( const int_type _Meta ) noexcept {
        return _Meta != eof ( ) ? _Meta : ! eof ( );
    }

    [ [ nodiscard ] ] static constexpr int_type eof ( ) noexcept {
        return static_cast < int_type > ( ( - 1 ) );
    }
};
#line 480 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template<> struct char_traits< char>  : public _Narrow_char_traits< char, int>  { }; 
#line 487
template < class _Elem, class _Traits, class _SizeT >
basic_ostream < _Elem, _Traits > & _Insert_string (
    basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * const _Data, const _SizeT _Size ) {

    using _Ostr_t = basic_ostream < _Elem, _Traits >;
    typename _Ostr_t :: iostate _State = _Ostr_t :: goodbit;

    _SizeT _Pad;
    if ( _Ostr . width ( ) <= 0 || static_cast < _SizeT > ( _Ostr . width ( ) ) <= _Size ) {
        _Pad = 0;
    } else {
        _Pad = static_cast < _SizeT > ( _Ostr . width ( ) ) - _Size;
    }

    const typename _Ostr_t :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= _Ostr_t :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & _Ostr_t :: adjustfield ) != _Ostr_t :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= _Ostr_t :: badbit;
                    break;
                }
            }
        }

        if ( _State == _Ostr_t :: goodbit
            && _Ostr . rdbuf ( ) -> sputn ( _Data, static_cast < streamsize > ( _Size ) ) != static_cast < streamsize > ( _Size ) ) {
            _State |= _Ostr_t :: badbit;
        } else {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= _Ostr_t :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( _Ostr_t :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 536
template< class _Traits> using _Traits_ch_t = typename _Traits::char_type; 
#line 539
template< class _Traits> using _Traits_ptr_t = const typename _Traits::char_type *; 
#line 542
template < class _Traits >
constexpr bool _Traits_equal ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
      const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept {

    return _Left_size == _Right_size && _Traits :: compare ( _Left, _Right, _Left_size ) == 0;
}
#line 549
template < class _Traits >
constexpr int _Traits_compare ( const _Traits_ptr_t < _Traits > _Left, const size_t _Left_size,
      const _Traits_ptr_t < _Traits > _Right, const size_t _Right_size ) noexcept {

    const int _Ans = _Traits :: compare ( _Left, _Right, ( :: std :: min ) ( _Left_size, _Right_size ) );

    if ( _Ans != 0 ) {
        return _Ans;
    }

    if ( _Left_size < _Right_size ) {
        return - 1;
    }

    if ( _Left_size > _Right_size ) {
        return 1;
    }

    return 0;
}
#line 570
template < class _Traits >
constexpr size_t _Traits_find ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size ) {








        return static_cast < size_t > ( - 1 );
    }

    if ( _Needle_size == 0 ) {
        return _Start_at;
    }

    const auto _Possible_matches_end = _Haystack + ( _Hay_size - _Needle_size ) + 1;
    for ( auto _Match_try = _Haystack + _Start_at;; ++ _Match_try ) {
        _Match_try = _Traits :: find ( _Match_try, static_cast < size_t > ( _Possible_matches_end - _Match_try ), * _Needle );
        if ( ! _Match_try ) {
            return static_cast < size_t > ( - 1 );
        }

        if ( _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 ) {
            return static_cast < size_t > ( _Match_try - _Haystack );
        }
    }
}
#line 604
template < class _Traits >
constexpr size_t _Traits_find_ch ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Start_at < _Hay_size ) {
        const auto _Found_at = _Traits :: find ( _Haystack + _Start_at, _Hay_size - _Start_at, _Ch );
        if ( _Found_at ) {
            return static_cast < size_t > ( _Found_at - _Haystack );
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 618
template < class _Traits >
constexpr size_t _Traits_rfind ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size == 0 ) {
        return ( :: std :: min ) ( _Start_at, _Hay_size );
    }

    if ( _Needle_size <= _Hay_size ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - _Needle_size );; -- _Match_try ) {
            if ( _Traits :: eq ( * _Match_try, * _Needle ) && _Traits :: compare ( _Match_try, _Needle, _Needle_size ) == 0 ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 642
template < class _Traits >
constexpr size_t _Traits_rfind_ch ( const _Traits_ptr_t < _Traits > _Haystack, const size_t _Hay_size,
    const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Hay_size != 0 ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
            if ( _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 661
template < class _Elem, bool = _Is_character < _Elem > :: value >
class _String_bitmap {
public :
    constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last ) noexcept {


        for (; _First != _Last; ++ _First ) {
            _Matches [ static_cast < unsigned char > ( * _First ) ] = true;
        }

        return true;
    }

    constexpr bool _Match ( const _Elem _Ch ) const noexcept {
        return _Matches [ static_cast < unsigned char > ( _Ch ) ];
    }

private :
    bool _Matches [ 256 ] = { };
};
#line 682
template < class _Elem >
class _String_bitmap < _Elem, false > {
public :
    static_assert ( is_unsigned_v < _Elem >,
        "Standard char_traits is only provided for char, wchar_t, char16_t, and char32_t. See N4950 [char.traits]. Visual C++ accepts oth" "er unsigned integral types as an extension."
                                                                           );

    constexpr bool _Mark ( const _Elem * _First, const _Elem * const _Last ) noexcept {


        for (; _First != _Last; ++ _First ) {
            const auto _Ch = * _First;
            if ( _Ch >= 256U ) {
                return false;
            }

            _Matches [ static_cast < unsigned char > ( _Ch ) ] = true;
        }

        return true;
    }

    constexpr bool _Match ( const _Elem _Ch ) const noexcept {
        return _Ch < 256U && _Matches [ _Ch ];
    }

private :
    bool _Matches [ 256 ] = { };
};
#line 712
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_first_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size != 0 && _Start_at < _Hay_size ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_first_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        } else {
            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 744
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_last_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Needle_size != 0 && _Hay_size != 0 ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_last_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        } else {
            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 782
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_first_not_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Start_at < _Hay_size ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_first_not_of < _Traits, false > (
                    _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( ! _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        } else {
            const auto _End = _Haystack + _Hay_size;
            for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
                if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 815
template < class _Traits >
constexpr size_t _Traits_find_not_ch ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Start_at < _Hay_size ) {
        const auto _End = _Haystack + _Hay_size;
        for ( auto _Match_try = _Haystack + _Start_at; _Match_try < _End; ++ _Match_try ) {
            if ( ! _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 831
template < class _Traits, bool _Special = _Is_specialization_v < _Traits, char_traits > >
constexpr size_t _Traits_find_last_not_of ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ptr_t < _Traits > _Needle,
    const size_t _Needle_size ) noexcept {

    if ( _Hay_size != 0 ) {
        if constexpr ( _Special ) {
            _String_bitmap < typename _Traits :: char_type > _Matches;
            if ( ! _Matches . _Mark ( _Needle, _Needle + _Needle_size ) ) {

                return _Traits_find_last_not_of < _Traits, false > ( _Haystack, _Hay_size, _Start_at, _Needle, _Needle_size );
            }

            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( ! _Matches . _Match ( * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        } else {
            for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
                if ( ! _Traits :: find ( _Needle, _Needle_size, * _Match_try ) ) {
                    return static_cast < size_t > ( _Match_try - _Haystack );
                }

                if ( _Match_try == _Haystack ) {
                    break;
                }
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 869
template < class _Traits >
constexpr size_t _Traits_rfind_not_ch ( const _Traits_ptr_t < _Traits > _Haystack,
    const size_t _Hay_size, const size_t _Start_at, const _Traits_ch_t < _Traits > _Ch ) noexcept {

    if ( _Hay_size != 0 ) {
        for ( auto _Match_try = _Haystack + ( :: std :: min ) ( _Start_at, _Hay_size - 1 );; -- _Match_try ) {
            if ( ! _Traits :: eq ( * _Match_try, _Ch ) ) {
                return static_cast < size_t > ( _Match_try - _Haystack );
            }

            if ( _Match_try == _Haystack ) {
                break;
            }
        }
    }

    return static_cast < size_t > ( - 1 );
}
#line 888
template< class _Ty> constexpr bool 
#line 889
_Is_EcharT = _Is_any_of_v< _Ty, char, __wchar_t, char16_t, char32_t> ; 
#line 1837 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Mystr >
class _String_const_iterator : public _Iterator_base {
public :



    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Mystr :: value_type;
    using difference_type = typename _Mystr :: difference_type;
    using pointer = typename _Mystr :: const_pointer;
    using reference = const value_type &;

    inline _String_const_iterator ( ) noexcept : _Ptr ( ) { }

    inline _String_const_iterator ( pointer _Parg, const _Container_base * _Pstring ) noexcept : _Ptr ( _Parg ) {
        this -> _Adopt ( _Pstring );
    }

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1857, 0, "%s", "cannot dereference value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61" L"\x6c\x69\x7a\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1857, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1860, 0, "%s", "cannot dereference string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed" ")" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20" L"\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f" L"\x63\x63\x75\x72\x72\x65\x64\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72" L"\x6f\x79\x65\x64\x29\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1860, 0 ); } while ( false ); }; } while ( false );

        const auto _Contptr = _Mycont -> _Myptr ( );
        const auto _Rawptr = _Unfancy ( _Ptr );
        do { if ( _Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont -> _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1864, 0, "%s", "cannot dereference string iterator because it is out of range (e.g. an end iterator)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61" L"\x74\x6f\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x69\x74\x20\x69\x73\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x20\x28" L"\x65\x2e\x67\x2e\x20\x61\x6e\x20\x65\x6e\x64\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x29\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1864, 0 ); } while ( false ); }; } while ( false );



        ;
        return * _Ptr;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return pointer_traits < pointer > :: pointer_to ( * * this );
    }

    inline _String_const_iterator & operator ++ ( ) noexcept {

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1877, 0, "%s", "cannot increment value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1877, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1880, 0, "%s", "cannot increment string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20\x69\x6e" L"\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f\x63\x63" L"\x75\x72\x72\x65\x64\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72\x6f\x79" L"\x65\x64\x29\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1880, 0 ); } while ( false ); }; } while ( false );

        do { if ( _Unfancy ( _Ptr ) < _Mycont -> _Myptr ( ) + _Mycont -> _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1881, 0, "%s", "cannot increment string iterator past end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x70\x61\x73\x74\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1881, 0 ); } while ( false ); }; } while ( false );


        ++ _Ptr;
        return * this;
    }

    inline _String_const_iterator operator ++ ( int ) noexcept {
        _String_const_iterator _Tmp = * this;
        ++ * this;
        return _Tmp;
    }

    inline _String_const_iterator & operator -- ( ) noexcept {

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1896, 0, "%s", "cannot decrement value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1896, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1899, 0, "%s", "cannot decrement string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x62\x65\x63\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20\x69\x6e" L"\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f\x63\x63" L"\x75\x72\x72\x65\x64\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72\x6f\x79" L"\x65\x64\x29\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1899, 0 ); } while ( false ); }; } while ( false );

        do { if ( _Mycont -> _Myptr ( ) < _Unfancy ( _Ptr ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1900, 0, "%s", "cannot decrement string iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f" L"\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1900, 0 ); } while ( false ); }; } while ( false );


        -- _Ptr;
        return * this;
    }

    inline _String_const_iterator operator -- ( int ) noexcept {
        _String_const_iterator _Tmp = * this;
        -- * this;
        return _Tmp;
    }

    inline void _Verify_offset ( const difference_type _Off ) const noexcept {

        if ( _Off == 0 ) {
            return;
        }

        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1919, 0, "%s", "cannot seek value-initialized string iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x73" L"\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1919, 0 ); } while ( false ); }; } while ( false );
        const auto _Mycont = static_cast < const _Mystr * > ( this -> _Getcont ( ) );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1922, 0, "%s", "cannot seek string iterator because the iterator was invalidated (e.g. reallocation occurred, or the string was destroyed)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x63" L"\x61\x75\x73\x65\x20\x74\x68\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x77\x61\x73\x22\x20\x22\x20\x69\x6e\x76\x61\x6c\x69\x64" L"\x61\x74\x65\x64\x20\x28\x65\x2e\x67\x2e\x20\x72\x65\x61\x6c\x6c\x6f\x63\x61\x74\x69\x6f\x6e\x20\x6f\x63\x63\x75\x72\x72\x65\x64" L"\x2c\x20\x6f\x72\x20\x74\x68\x65\x20\x73\x74\x72\x69\x6e\x67\x20\x77\x61\x73\x20\x64\x65\x73\x74\x72\x6f\x79\x65\x64\x29\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1922, 0 ); } while ( false ); }; } while ( false );

        const auto _Contptr = _Mycont -> _Myptr ( );
        const auto _Rawptr = _Unfancy ( _Ptr );

        if ( _Off < 0 ) {
            do { if ( _Contptr - _Rawptr <= _Off ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1927, 0, "%s", "cannot seek string iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x66" L"\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1927, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off > 0 ) {
            using _Size_type = typename _Mystr :: size_type;
            const auto _Left = _Mycont -> _Mysize - static_cast < _Size_type > ( _Rawptr - _Contptr );
            do { if ( static_cast < _Size_type > ( _Off ) <= _Left ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 1933, 0, "%s", "cannot seek string iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x61\x66\x74" L"\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 1933, 0 ); } while ( false ); }; } while ( false );
        }



    }

    inline _String_const_iterator & operator += ( const difference_type _Off ) noexcept {

        _Verify_offset ( _Off );

        _Ptr += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline _String_const_iterator operator + ( const difference_type _Off ) const noexcept {
        _String_const_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _String_const_iterator operator + (
        const difference_type _Off, _String_const_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _String_const_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] inline _String_const_iterator operator - ( const difference_type _Off ) const noexcept {
        _String_const_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline difference_type operator - ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr - _Right . _Ptr;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] inline bool operator == ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr == _Right . _Ptr;
    }







    [ [ nodiscard ] ] bool operator != ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] bool operator < ( const _String_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr < _Right . _Ptr;
    }

    [ [ nodiscard ] ] bool operator > ( const _String_const_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] bool operator <= ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] bool operator >= ( const _String_const_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    inline void _Compat ( const _String_const_iterator & _Right ) const noexcept {


        do { if ( this -> _Getcont ( ) == _Right . _Getcont ( ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 2016, 0, "%s", "string iterators incompatible (e.g. point to different string instances)" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x20\x28" L"\x65\x2e\x67\x2e\x22\x20\x22\x20\x70\x6f\x69\x6e\x74\x20\x74\x6f\x20\x64\x69\x66\x66\x65\x72\x65\x6e\x74\x20\x73\x74\x72\x69\x6e" L"\x67\x20\x69\x6e\x73\x74\x61\x6e\x63\x65\x73\x29\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 2016, 0 ); } while ( false ); }; } while ( false );




    }


    friend inline void _Verify_range (
        const _String_const_iterator & _First, const _String_const_iterator & _Last ) noexcept {
        do { if ( _First . _Getcont ( ) == _Last . _Getcont ( ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 2025, 0, "%s", "string iterators in range are from different containers" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x20\x72\x61\x6e\x67\x65\x20\x61\x72\x65\x20\x66" L"\x72\x6f\x6d\x20\x64\x69\x66\x66\x65\x72\x65\x6e\x74\x20\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x73\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 2025, 0 ); } while ( false ); }; } while ( false );
        do { if ( _First . _Ptr <= _Last . _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 2026, 0, "%s", "string iterator range transposed" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x72\x61\x6e\x67\x65\x20\x74\x72\x61\x6e\x73\x70\x6f\x73\x65" L"\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 2026, 0 ); } while ( false ); }; } while ( false );
    }


    using _Prevent_inheriting_unwrap = _String_const_iterator;

    [ [ nodiscard ] ] inline const value_type * _Unwrapped ( ) const noexcept {
        return _Unfancy ( _Ptr );
    }

    inline void _Seek_to ( const value_type * _It ) noexcept {
        _Ptr = _Refancy < pointer > ( const_cast < value_type * > ( _It ) );
    }

    pointer _Ptr;
};
#line 2074 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Mystr >
class _String_iterator : public _String_const_iterator < _Mystr > {
public :
    using _Mybase = _String_const_iterator < _Mystr >;




    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Mystr :: value_type;
    using difference_type = typename _Mystr :: difference_type;
    using pointer = typename _Mystr :: pointer;
    using reference = value_type &;

    using _Mybase :: _Mybase;

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator * ( ) );
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return pointer_traits < pointer > :: pointer_to ( * * this );
    }

    inline _String_iterator & operator ++ ( ) noexcept {
        _Mybase :: operator ++ ( );
        return * this;
    }

    inline _String_iterator operator ++ ( int ) noexcept {
        _String_iterator _Tmp = * this;
        _Mybase :: operator ++ ( );
        return _Tmp;
    }

    inline _String_iterator & operator -- ( ) noexcept {
        _Mybase :: operator -- ( );
        return * this;
    }

    inline _String_iterator operator -- ( int ) noexcept {
        _String_iterator _Tmp = * this;
        _Mybase :: operator -- ( );
        return _Tmp;
    }

    inline _String_iterator & operator += ( const difference_type _Off ) noexcept {
        _Mybase :: operator += ( _Off );
        return * this;
    }

    [ [ nodiscard ] ] inline _String_iterator operator + ( const difference_type _Off ) const noexcept {
        _String_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _String_iterator operator + (
        const difference_type _Off, _String_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _String_iterator & operator -= ( const difference_type _Off ) noexcept {
        _Mybase :: operator -= ( _Off );
        return * this;
    }

    using _Mybase :: operator -;

    [ [ nodiscard ] ] inline _String_iterator operator - ( const difference_type _Off ) const noexcept {
        _String_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator [ ] ( _Off ) );
    }

    using _Prevent_inheriting_unwrap = _String_iterator;

    [ [ nodiscard ] ] inline value_type * _Unwrapped ( ) const noexcept {
        return const_cast < value_type * > ( _Unfancy ( this -> _Ptr ) );
    }
};
#line 2192 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template< class _Value_type, class _Size_type, class _Difference_type, class _Pointer, class _Const_pointer> 
#line 2193
struct _String_iter_types { 
#line 2194
using value_type = _Value_type; 
#line 2195
using size_type = _Size_type; 
#line 2196
using difference_type = _Difference_type; 
#line 2197
using pointer = _Pointer; 
#line 2198
using const_pointer = _Const_pointer; 
#line 2199
}; 
#line 2201
template < class _Val_types >
class _String_val : public _Container_base {
public :
    using value_type = typename _Val_types :: value_type;
    using size_type = typename _Val_types :: size_type;
    using difference_type = typename _Val_types :: difference_type;
    using pointer = typename _Val_types :: pointer;
    using const_pointer = typename _Val_types :: const_pointer;
    using reference = value_type &;
    using const_reference = const value_type &;

    inline _String_val ( ) noexcept : _Bx ( ) { }


    static constexpr size_type _BUF_SIZE = 16 / sizeof ( value_type ) < 1 ? 1 : 16 / sizeof ( value_type );

    static constexpr size_type _Alloc_mask = sizeof ( value_type ) <= 1 ? 15
                                           : sizeof ( value_type ) <= 2 ? 7
                                           : sizeof ( value_type ) <= 4 ? 3
                                           : sizeof ( value_type ) <= 8 ? 1
                                                                     : 0;

    static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;

    [ [ nodiscard ] ] inline value_type * _Myptr ( ) noexcept {
        value_type * _Result = _Bx . _Buf;
        if ( _Large_mode_engaged ( ) ) {
            _Result = _Unfancy ( _Bx . _Ptr );
        }

        return _Result;
    }

    [ [ nodiscard ] ] inline const value_type * _Myptr ( ) const noexcept {
        const value_type * _Result = _Bx . _Buf;
        if ( _Large_mode_engaged ( ) ) {
            _Result = _Unfancy ( _Bx . _Ptr );
        }

        return _Result;
    }

    [ [ nodiscard ] ] inline bool _Large_mode_engaged ( ) const noexcept {
        return _Myres > _Small_string_capacity;
    }

    inline void _Activate_SSO_buffer ( ) noexcept {








    }

    inline void _Check_offset ( const size_type _Off ) const {

        if ( _Mysize < _Off ) {
            _Xran ( );
        }
    }

    inline void _Check_offset_exclusive ( const size_type _Off ) const {

        if ( _Mysize <= _Off ) {
            _Xran ( );
        }
    }

    [ [ noreturn ] ] static void _Xran ( ) {
        _Xout_of_range ( "invalid string position" );
    }

    [ [ nodiscard ] ] inline size_type _Clamp_suffix_size ( const size_type _Off, const size_type _Size ) const noexcept {

        return ( :: std :: min ) ( _Size, _Mysize - _Off );
    }

    union _Bxty {


        inline _Bxty ( ) noexcept : _Buf ( ) { }
        inline ~ _Bxty ( ) noexcept { }

        value_type _Buf [ _BUF_SIZE ];
        pointer _Ptr;
        char _Alias [ _BUF_SIZE ];
    };
    _Bxty _Bx;



    size_type _Mysize = 0;
    size_type _Myres = 0;
};
#line 2300 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template< class _Ty> constexpr size_t 
#line 2301
_Size_after_ebco_v = (is_empty_v< _Ty> ) ? 0 : sizeof(_Ty); 
#line 2303
struct _String_constructor_concat_tag { 
#line 2305
explicit _String_constructor_concat_tag() = default;
#line 2306
}; 
#line 2308
struct _String_constructor_rvalue_allocator_tag { 
#line 2310
explicit _String_constructor_rvalue_allocator_tag() = default;
#line 2311
}; 
#line 2313
[[noreturn]] inline void _Xlen_string() { 
#line 2314
_Xlength_error("string too long"); 
#line 2315
} 
#line 2323 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Elem, class _Traits = char_traits < _Elem >, class _Alloc = allocator < _Elem > >
class basic_string {
private :
    friend _Tidy_deallocate_guard < basic_string >;
    friend basic_stringbuf < _Elem, _Traits, _Alloc >;

    using _Alty = _Rebind_alloc_t < _Alloc, _Elem >;
    using _Alty_traits = allocator_traits < _Alty >;

    using _Scary_val = _String_val < conditional_t < _Is_simple_alloc_v < _Alty >, _Simple_types < _Elem >,
        _String_iter_types < _Elem, typename _Alty_traits :: size_type, typename _Alty_traits :: difference_type,
            typename _Alty_traits :: pointer, typename _Alty_traits :: const_pointer >> >;

    static_assert ( ! 0 || is_same_v < _Elem, typename _Alloc :: value_type >,
        "basic_string<T, Traits, Allocator> requires that Allocator\'s value_type match T (See N4950 [container.alloc.reqmts]/5) Either f" "ix the allocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this error." );

    static_assert ( is_same_v < _Elem, typename _Traits :: char_type >,
        "N4950 [string.require]/3 requires that the supplied char_traits character type match the string\'s character type."
                                                                       );

    static_assert ( ! is_array_v < _Elem > && is_trivial_v < _Elem > && is_standard_layout_v < _Elem >,
        "The character type of basic_string must be a non-array trivial standard-layout type. See N4950 [strings.general]/1."
                              );

public :
    using traits_type = _Traits;
    using allocator_type = _Alloc;

    using value_type = _Elem;
    using size_type = typename _Alty_traits :: size_type;
    using difference_type = typename _Alty_traits :: difference_type;
    using pointer = typename _Alty_traits :: pointer;
    using const_pointer = typename _Alty_traits :: const_pointer;
    using reference = value_type &;
    using const_reference = const value_type &;

    using iterator = _String_iterator < _Scary_val >;
    using const_iterator = _String_const_iterator < _Scary_val >;

    using reverse_iterator = :: std :: reverse_iterator < iterator >;
    using const_reverse_iterator = :: std :: reverse_iterator < const_iterator >;

private :
    static constexpr size_type _BUF_SIZE = _Scary_val :: _BUF_SIZE;
    static constexpr size_type _Alloc_mask = _Scary_val :: _Alloc_mask;
    static constexpr size_type _Small_string_capacity = _Scary_val :: _Small_string_capacity;


    static constexpr size_type _Least_allocation_size = _Small_string_capacity + 1 + 1;











    static constexpr bool _Can_memcpy_val = _Is_specialization_v < _Traits, char_traits > && is_trivial_v < pointer >;

    static constexpr size_t _Memcpy_val_offset = _Size_after_ebco_v < _Container_base >;
    static constexpr size_t _Memcpy_val_size = sizeof ( _Scary_val ) - _Memcpy_val_offset;

    template < class _Iter >


    using _Is_elem_cptr = bool_constant < _Is_any_of_v < _Iter, const _Elem * const, _Elem * const, const _Elem *, _Elem * >>;




























































































public :
    inline
    basic_string ( ) noexcept ( is_nothrow_default_constructible_v < _Alty > ) : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Tidy_init ( );
    }

    inline explicit basic_string ( const _Alloc & _Al ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Tidy_init ( );
    }

    inline basic_string ( const basic_string & _Right )
        : _Mypair ( _One_then_variadic_args_t { }, _Alty_traits :: select_on_container_copy_construction ( _Right . _Getal ( ) ) ) {
        _Construct < _Construct_strategy :: _From_string > ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string ( const basic_string & _Right, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_string > ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string ( const basic_string & _Right, const size_type _Roff, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Construct < _Construct_strategy :: _From_ptr > (
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, npos ) );
    }

    inline basic_string (
        const basic_string & _Right, const size_type _Roff, const size_type _Count, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Construct < _Construct_strategy :: _From_ptr > (
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count ) );
    }














    inline basic_string ( const _Elem * const _Ptr, const size_type _Count )
        : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Count );
    }

    inline basic_string (
          const _Elem * const _Ptr, const size_type _Count, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Count );
    }

    inline basic_string ( const _Elem * const _Ptr ) : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }




    inline basic_string ( const _Elem * const _Ptr, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_ptr > ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }





    inline basic_string ( const size_type _Count, const _Elem _Ch )
        : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Construct < _Construct_strategy :: _From_char > ( _Ch, _Count );
    }




    inline basic_string ( const size_type _Count, const _Elem _Ch, const _Alloc & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct < _Construct_strategy :: _From_char > ( _Ch, _Count );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        auto _ULast = _Get_unwrapped ( _Last );
        if ( _UFirst == _ULast ) {
            _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
            _Tidy_init ( );
        } else {
            if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
                _Construct < _Construct_strategy :: _From_ptr > (
                    _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
            } else if constexpr ( _Is_cpp17_fwd_iter_v < decltype ( _UFirst ) > ) {
                const auto _Length = static_cast < size_t > ( :: std :: distance ( _UFirst, _ULast ) );
                const auto _Count = _Convert_size < size_type > ( _Length );
                _Construct_from_iter ( :: std :: move ( _UFirst ), :: std :: move ( _ULast ), _Count );
            } else {
                _Construct_from_iter ( :: std :: move ( _UFirst ), :: std :: move ( _ULast ) );
            }
        }
    }

private :
    enum class _Allocation_policy { _At_least, _Exactly };

    template < _Allocation_policy _Policy = _Allocation_policy :: _At_least >
    [ [ nodiscard ] ] static inline pointer _Allocate_for_capacity ( _Alty & _Al, size_type & _Capacity ) {
        ;
        ++ _Capacity;

        pointer _Fancy_ptr;
        if constexpr ( _Policy == _Allocation_policy :: _At_least ) {
            _Fancy_ptr = _Allocate_at_least_helper ( _Al, _Capacity );
        } else {
            ;
            _Fancy_ptr = _Al . allocate ( _Capacity );
        }











        -- _Capacity;
        return _Fancy_ptr;
    }

    static inline void _Deallocate_for_capacity (
        _Alty & _Al, const pointer _Old_ptr, const size_type _Capacity ) noexcept {
        ;
        _Al . deallocate ( _Old_ptr, _Capacity + 1 );
    }

    enum class _Construct_strategy : uint8_t { _From_char, _From_ptr, _From_string };

    template < _Construct_strategy _Strat, class _Char_or_ptr >
    inline void _Construct ( const _Char_or_ptr _Arg, const size_type _Count ) {
        auto & _My_data = _Mypair . _Myval2;
        ;

        if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
            ;
        } else {
            ;
        }

        if ( _Count > max_size ( ) ) {
            _Xlen_string ( );
        }

        auto & _Al = _Getal ( );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        if ( _Count <= _Small_string_capacity ) {
            _My_data . _Mysize = _Count;
            _My_data . _Myres = _Small_string_capacity;

            if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
                _Traits :: assign ( _My_data . _Bx . _Buf, _Count, _Arg );
                _Traits :: assign ( _My_data . _Bx . _Buf [ _Count ], _Elem ( ) );
            } else if constexpr ( _Strat == _Construct_strategy :: _From_ptr ) {
                _Traits :: copy ( _My_data . _Bx . _Buf, _Arg, _Count );
                _Traits :: assign ( _My_data . _Bx . _Buf [ _Count ], _Elem ( ) );
            } else {



                _Traits :: copy ( _My_data . _Bx . _Buf, _Arg, _BUF_SIZE );

            }

            _Proxy . _Release ( );
            return;
        }

        _My_data . _Myres = _Small_string_capacity;
        size_type _New_capacity = _Calculate_growth ( _Count );
        const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );
        _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );

        _My_data . _Mysize = _Count;
        _My_data . _Myres = _New_capacity;
        if constexpr ( _Strat == _Construct_strategy :: _From_char ) {
            _Traits :: assign ( _Unfancy ( _New_ptr ), _Count, _Arg );
            _Traits :: assign ( _Unfancy ( _New_ptr ) [ _Count ], _Elem ( ) );
        } else if constexpr ( _Strat == _Construct_strategy :: _From_ptr ) {
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Arg, _Count );
            _Traits :: assign ( _Unfancy ( _New_ptr ) [ _Count ], _Elem ( ) );
        } else {
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Arg, _Count + 1 );
        }

        ;
        _Proxy . _Release ( );
    }

    template < class _Iter, class _Sent, class _Size = nullptr_t >
    inline void _Construct_from_iter ( _Iter _First, const _Sent _Last, _Size _Count = { } ) {





        auto & _My_data = _Mypair . _Myval2;
        auto & _Al = _Getal ( );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        _My_data . _Mysize = 0;
        _My_data . _Myres = _Small_string_capacity;

        if constexpr ( is_same_v < _Size, size_type > ) {
            if ( _Count > max_size ( ) ) {
                _Xlen_string ( );
            }

            if ( _Count > _Small_string_capacity ) {
                size_type _New_capacity = _Calculate_growth ( _Count );
                const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );
                _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
                _My_data . _Myres = _New_capacity;
            }
        }

        _Tidy_deallocate_guard < basic_string > _Guard { this };
        for (; _First != _Last; ++ _First ) {
            if constexpr ( ! is_same_v < _Size, size_type > ) {
                if ( _My_data . _Mysize == _My_data . _Myres ) {
                    if ( _My_data . _Mysize == max_size ( ) ) {
                        _Xlen_string ( );
                    }

                    _Elem * const _Old_ptr = _My_data . _Myptr ( );
                    size_type _New_capacity = _Calculate_growth ( _My_data . _Mysize );
                    const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );

                    _Traits :: copy ( _Unfancy ( _New_ptr ), _Old_ptr, _My_data . _Mysize );
                    if ( _My_data . _Large_mode_engaged ( ) ) {
                        _Deallocate_for_capacity ( _Al, _My_data . _Bx . _Ptr, _My_data . _Myres );
                        _My_data . _Bx . _Ptr = _New_ptr;
                    } else {
                        _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
                    }
                    _My_data . _Myres = _New_capacity;
                }
            }

            _Elem * const _Ptr = _My_data . _Myptr ( );
            _Traits :: assign ( _Ptr [ _My_data . _Mysize ], * _First );
            ++ _My_data . _Mysize;
        }

        _Elem * const _Ptr = _My_data . _Myptr ( );
        _Traits :: assign ( _Ptr [ _My_data . _Mysize ], _Elem ( ) );
        ;
        _Guard . _Target = nullptr;
        _Proxy . _Release ( );
    }

public :


















    inline basic_string ( basic_string && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Right . _Getal ( ) ) ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Take_contents ( _Right );
    }

    inline basic_string ( basic_string && _Right, const _Alloc & _Al ) noexcept (
        _Alty_traits :: is_always_equal :: value )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        if constexpr ( ! _Alty_traits :: is_always_equal :: value ) {
            if ( _Getal ( ) != _Right . _Getal ( ) ) {
                _Construct < _Construct_strategy :: _From_string > (
                    _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
                return;
            }
        }

        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Take_contents ( _Right );
    }

    inline basic_string ( _String_constructor_concat_tag, const basic_string & _Source_of_al,
        const _Elem * const _Left_ptr, const size_type _Left_size, const _Elem * const _Right_ptr,
        const size_type _Right_size )
        : _Mypair (
            _One_then_variadic_args_t { }, _Alty_traits :: select_on_container_copy_construction ( _Source_of_al . _Getal ( ) ) ) {
        ;
        ;
        ;
        const auto _New_size = static_cast < size_type > ( _Left_size + _Right_size );
        size_type _New_capacity = _Small_string_capacity;
        auto & _My_data = _Mypair . _Myval2;
        _Elem * _Ptr = _My_data . _Bx . _Buf;
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        if ( _New_capacity < _New_size ) {
            _New_capacity = _Calculate_growth ( _New_size, _Small_string_capacity, max_size ( ) );
            const pointer _Fancyptr = _Allocate_for_capacity ( _Getal ( ), _New_capacity );
            _Ptr = _Unfancy ( _Fancyptr );
            _Construct_in_place ( _My_data . _Bx . _Ptr, _Fancyptr );
        }

        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        _Traits :: copy ( _Ptr, _Left_ptr, _Left_size );
        _Traits :: copy ( _Ptr + static_cast < ptrdiff_t > ( _Left_size ), _Right_ptr, _Right_size );
        _Traits :: assign ( _Ptr [ _New_size ], _Elem ( ) );
        ;
        _Proxy . _Release ( );
    }

    inline basic_string ( _String_constructor_concat_tag, basic_string & _Left, basic_string & _Right )
        : _Mypair ( _One_then_variadic_args_t { }, _Left . _Getal ( ) ) {
        auto & _My_data = _Mypair . _Myval2;
        auto & _Left_data = _Left . _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;
        _Left_data . _Orphan_all ( );
        _Right_data . _Orphan_all ( );
        const auto _Left_size = _Left_data . _Mysize;
        const auto _Right_size = _Right_data . _Mysize;

        const auto _Left_capacity = _Left_data . _Myres;
        const auto _Right_capacity = _Right_data . _Myres;

        const auto _New_size = static_cast < size_type > ( _Left_size + _Right_size );
        const bool _Fits_in_left = _Right_size <= _Left_capacity - _Left_size;
        if ( _Fits_in_left && _Right_capacity <= _Left_capacity ) {

            _My_data . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
            _Take_contents ( _Left );
            const auto _Ptr = _My_data . _Myptr ( );
            ;
            _Traits :: copy ( _Ptr + _Left_size, _Right_data . _Myptr ( ), _Right_size + 1 );
            _My_data . _Mysize = _New_size;
            return;
        }

        const bool _Fits_in_right = _Left_size <= _Right_capacity - _Right_size;
        if ( _Allocators_equal ( _Getal ( ), _Right . _Getal ( ) ) && _Fits_in_right ) {









            ;
            _My_data . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
            _Take_contents ( _Right );
            const auto _Ptr = _Unfancy ( _My_data . _Bx . _Ptr );
            ;
            _Traits :: move ( _Ptr + _Left_size, _Ptr, _Right_size + 1 );
            _Traits :: copy ( _Ptr, _Left_data . _Myptr ( ), _Left_size );
            _My_data . _Mysize = _New_size;
            return;
        }


        const auto _Max = max_size ( );
        if ( _Max - _Left_size < _Right_size ) {
            _Xlen_string ( );
        }

        size_type _New_capacity = _Calculate_growth ( _New_size, _Small_string_capacity, _Max );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );
        const pointer _Fancyptr = _Allocate_for_capacity ( _Getal ( ), _New_capacity );

        _Construct_in_place ( _My_data . _Bx . _Ptr, _Fancyptr );
        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        const auto _Ptr = _Unfancy ( _Fancyptr );
        _Traits :: copy ( _Ptr, _Left_data . _Myptr ( ), _Left_size );
        _Traits :: copy ( _Ptr + _Left_size, _Right_data . _Myptr ( ), _Right_size + 1 );
        ;
        _Proxy . _Release ( );
    }
















































































    inline basic_string & operator = ( basic_string && _Right ) noexcept (
        _Choose_pocma_v < _Alty > != _Pocma_values :: _No_propagate_allocators ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        auto & _Al = _Getal ( );
        auto & _Right_al = _Right . _Getal ( );
        constexpr auto _Pocma_val = _Choose_pocma_v < _Alty >;
        if constexpr ( _Pocma_val == _Pocma_values :: _Propagate_allocators ) {
            if ( _Al != _Right_al ) {

                _Mypair . _Myval2 . _Orphan_all ( );
                _Mypair . _Myval2 . _Reload_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al ), static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Right_al ) );
            }
        } else if constexpr ( _Pocma_val == _Pocma_values :: _No_propagate_allocators ) {
            if ( _Al != _Right_al ) {
                assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
                return * this;
            }
        }

        _Tidy_deallocate ( );
        _Pocma ( _Al, _Right_al );
        _Take_contents ( _Right );
        return * this;
    }

    inline basic_string & assign ( basic_string && _Right ) noexcept ( noexcept ( * this = :: std :: move ( _Right ) ) ) {
        * this = :: std :: move ( _Right );
        return * this;
    }

private :
    void _Memcpy_val_from ( const basic_string & _Right ) noexcept {
        ;
        const auto _My_data_mem =
            reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Mypair . _Myval2 ) ) + _Memcpy_val_offset;
        const auto _Right_data_mem =
            reinterpret_cast < const unsigned char * > ( :: std :: addressof ( _Right . _Mypair . _Myval2 ) ) + _Memcpy_val_offset;
        :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_val_size );
    }

    inline void _Take_contents ( basic_string & _Right ) noexcept {





        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;


        if constexpr ( _Can_memcpy_val ) {



            {

                if ( _Right_data . _Large_mode_engaged ( ) ) {

                    _Swap_proxy_and_iterators ( _Right );
                } else {
                    _Right_data . _Orphan_all ( );
                }


                _Memcpy_val_from ( _Right );
                _Right . _Tidy_init ( );
                return;
            }
        }


        if ( _Right_data . _Large_mode_engaged ( ) ) {
            _Construct_in_place ( _My_data . _Bx . _Ptr, _Right_data . _Bx . _Ptr );
            _Right_data . _Bx . _Ptr = nullptr;
            _Swap_proxy_and_iterators ( _Right );
        } else {
            _My_data . _Activate_SSO_buffer ( );
            _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
            _Right_data . _Orphan_all ( );
        }

        _My_data . _Myres = _Right_data . _Myres;
        _My_data . _Mysize = _Right_data . _Mysize;

        _Right . _Tidy_init ( );
    }























public :
    inline basic_string ( initializer_list < _Elem > _Ilist, const _Alloc & _Al = allocator_type ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _Mypair . _Myval2 );
        _Tidy_init ( );
        assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
        _Proxy . _Release ( );
    }

    inline basic_string & operator = ( initializer_list < _Elem > _Ilist ) {
        return assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & operator += ( initializer_list < _Elem > _Ilist ) {
        return append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & assign ( initializer_list < _Elem > _Ilist ) {
        return assign ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline basic_string & append ( initializer_list < _Elem > _Ilist ) {
        return append ( _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline iterator insert ( const const_iterator _Where, const initializer_list < _Elem > _Ilist ) {

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3119, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3119, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const initializer_list < _Elem > _Ilist ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3131, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3131, 0 ); } while ( false ); }; } while ( false );

        const auto _Offset = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        const auto _Length = static_cast < size_type > ( _Last . _Ptr - _First . _Ptr );
        return replace ( _Offset, _Length, _Ilist . begin ( ), _Convert_size < size_type > ( _Ilist . size ( ) ) );
    }

    inline ~ basic_string ( ) noexcept {
        _Tidy_deallocate ( );

        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        const auto _To_delete = _Mypair . _Myval2 . _Myproxy;
        _Mypair . _Myval2 . _Myproxy = nullptr;
        _Delete_plain_internal ( _Alproxy, _To_delete );

    }

    static constexpr auto npos { static_cast < size_type > ( - 1 ) };

    inline basic_string & operator = ( const basic_string & _Right ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        auto & _Al = _Getal ( );
        const auto & _Right_al = _Right . _Getal ( );
        if constexpr ( _Choose_pocca_v < _Alty > ) {
            if ( _Al != _Right_al ) {
                auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
                auto && _Right_alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Right_al );
                _Container_proxy_ptr < _Alty > _New_proxy ( _Right_alproxy, _Leave_proxy_unbound { } );

                const size_type _Right_size = _Right . _Mypair . _Myval2 . _Mysize;
                const _Elem * const _Right_ptr = _Right . _Mypair . _Myval2 . _Myptr ( );
                if ( _Right_size > _Small_string_capacity ) {
                    size_type _New_capacity = _Calculate_growth ( _Right_size, _Small_string_capacity, _Right . max_size ( ) );
                    auto _Right_al_non_const = _Right_al;
                    const pointer _New_ptr = _Allocate_for_capacity ( _Right_al_non_const, _New_capacity );

                    _Traits :: copy ( _Unfancy ( _New_ptr ), _Right_ptr, _Right_size + 1 );
                    _Tidy_deallocate ( );
                    _Mypair . _Myval2 . _Bx . _Ptr = _New_ptr;
                    _Mypair . _Myval2 . _Mysize = _Right_size;
                    _Mypair . _Myval2 . _Myres = _New_capacity;
                } else {
                    _Tidy_deallocate ( );
                    _Traits :: copy ( _Mypair . _Myval2 . _Bx . _Buf, _Right_ptr, _Right_size + 1 );
                    _Mypair . _Myval2 . _Mysize = _Right_size;
                    _Mypair . _Myval2 . _Myres = _Small_string_capacity;
                }

                _Pocca ( _Al, _Right_al );
                _New_proxy . _Bind ( _Alproxy, :: std :: addressof ( _Mypair . _Myval2 ) );
                return * this;
            }
        }

        _Pocca ( _Al, _Right_al );
        assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        return * this;
    }








    inline basic_string & operator = ( const _Elem * const _Ptr ) {
        return assign ( _Ptr );
    }





    inline basic_string & operator = ( const _Elem _Ch ) {
        ;
        _Mypair . _Myval2 . _Mysize = 1;
        _Elem * const _Ptr = _Mypair . _Myval2 . _Myptr ( );
        _Traits :: assign ( _Ptr [ 0 ], _Ch );
        _Traits :: assign ( _Ptr [ 1 ], _Elem ( ) );
        return * this;
    }

    inline basic_string & operator += ( const basic_string & _Right ) {
        return append ( _Right );
    }








    inline basic_string & operator += ( const _Elem * const _Ptr ) {
        return append ( _Ptr );
    }

    inline basic_string & operator += ( _Elem _Ch ) {
        push_back ( _Ch );
        return * this;
    }

    inline basic_string & append ( const basic_string & _Right ) {
        return append ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & append ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return append ( _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }

















    inline basic_string & append (
          const _Elem * const _Ptr, const size_type _Count ) {

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: move ( _Old_ptr + _Old_size, _Ptr, _Count );
            _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const _Elem * const _Ptr,
                const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: copy ( _New_ptr + _Old_size, _Ptr, _Count );
                _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
            },
            _Ptr, _Count );
    }

    inline basic_string & append ( const _Elem * const _Ptr ) {
        return append ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & append ( const size_type _Count, const _Elem _Ch ) {

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: assign ( _Old_ptr + _Old_size, _Count, _Ch );
            _Traits :: assign ( _Old_ptr [ _Old_size + _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Count,
                const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: assign ( _New_ptr + _Old_size, _Count, _Ch );
                _Traits :: assign ( _New_ptr [ _Old_size + _Count ], _Elem ( ) );
            },
            _Count, _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & append ( const _Iter _First, const _Iter _Last ) {

        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            return append ( _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            const basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            return append ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }
    }














    inline basic_string & assign ( const basic_string & _Right ) {
        * this = _Right;
        return * this;
    }

    inline basic_string & assign ( const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return assign ( _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }

















    inline basic_string & assign (
          const _Elem * const _Ptr, const size_type _Count ) {

        if ( _Count <= _Mypair . _Myval2 . _Myres ) {
            ;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Mypair . _Myval2 . _Mysize = _Count;
            _Traits :: move ( _Old_ptr, _Ptr, _Count );
            _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
            ;
            return * this;
        }

        return _Reallocate_for (
            _Count,
            [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem * const _Ptr ) {
                _Traits :: copy ( _New_ptr, _Ptr, _Count );
                _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
            },
            _Ptr );
    }

    inline basic_string & assign ( const _Elem * const _Ptr ) {
        return assign ( _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & assign ( const size_type _Count, const _Elem _Ch ) {

        if ( _Count <= _Mypair . _Myval2 . _Myres ) {
            ;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Mypair . _Myval2 . _Mysize = _Count;
            _Traits :: assign ( _Old_ptr, _Count, _Ch );
            _Traits :: assign ( _Old_ptr [ _Count ], _Elem ( ) );
            return * this;
        }

        return _Reallocate_for (
            _Count,
            [ ] ( _Elem * const _New_ptr, const size_type _Count, const _Elem _Ch ) {
                _Traits :: assign ( _New_ptr, _Count, _Ch );
                _Traits :: assign ( _New_ptr [ _Count ], _Elem ( ) );
            },
            _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & assign ( const _Iter _First, const _Iter _Last ) {
        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            return assign ( _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            if ( _Mypair . _Myval2 . _Myres < _Right . _Mypair . _Myval2 . _Myres ) {
                _Mypair . _Myval2 . _Orphan_all ( );
                _Swap_data ( _Right );
                return * this;
            } else {
                return assign ( _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
            }
        }
    }




















    inline basic_string & insert ( const size_type _Off, const basic_string & _Right ) {

        return insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & insert (
        const size_type _Off, const basic_string & _Right, const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }


















    inline basic_string & insert (
        const size_type _Off, const _Elem * const _Ptr, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;






        const bool _Check_overlap = _Count <= _Mypair . _Myval2 . _Myres - _Old_size;


        if ( _Check_overlap ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;


            size_type _Ptr_shifted_after;
            if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size ) {

                _Ptr_shifted_after = _Count;
            } else if ( _Insert_at <= _Ptr ) {
                _Ptr_shifted_after = 0;
            } else {
                _Ptr_shifted_after = static_cast < size_type > ( _Insert_at - _Ptr );
            }

            _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
            _Traits :: copy ( _Insert_at, _Ptr, _Ptr_shifted_after );
            _Traits :: copy (
                _Insert_at + _Ptr_shifted_after, _Ptr + _Count + _Ptr_shifted_after, _Count - _Ptr_shifted_after );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const _Elem * const _Ptr, const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
            },
            _Off, _Ptr, _Count );
    }

    inline basic_string & insert ( const size_type _Off, const _Elem * const _Ptr ) {

        return insert ( _Off, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & insert (
        const size_type _Off, const size_type _Count, const _Elem _Ch ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count <= _Mypair . _Myval2 . _Myres - _Old_size ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + _Count;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at + _Count, _Insert_at, _Old_size - _Off + 1 );
            _Traits :: assign ( _Insert_at, _Count, _Ch );
            return * this;
        }

        return _Reallocate_grow_by (
            _Count,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Count, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1 );
            },
            _Off, _Count, _Ch );
    }

    inline iterator insert ( const const_iterator _Where, const _Elem _Ch ) {

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3566, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3566, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, 1, _Ch );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline iterator insert (
        const const_iterator _Where, const size_type _Count, const _Elem _Ch ) {


        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3577, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3577, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        insert ( _Off, _Count, _Ch );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline iterator insert ( const const_iterator _Where, const _Iter _First, const _Iter _Last ) {


        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3588, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3588, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Adl_verify_range ( _First, _Last );
        const auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst ) > :: value ) {
            insert ( _Off, _UFirst, _Convert_size < size_type > ( static_cast < size_t > ( _ULast - _UFirst ) ) );
        } else {
            const basic_string _Right ( _UFirst, _ULast, get_allocator ( ) );
            insert ( _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }

        return begin ( ) + static_cast < difference_type > ( _Off );
    }





















    inline basic_string & erase ( const size_type _Off = 0 ) {
        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Eos ( _Off );
        return * this;
    }

private :
    inline basic_string & _Erase_noexcept ( const size_type _Off, size_type _Count ) noexcept {
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        _Elem * const _My_ptr = _Mypair . _Myval2 . _Myptr ( );
        _Elem * const _Erase_at = _My_ptr + _Off;
        const size_type _New_size = _Old_size - _Count;
        _Traits :: move ( _Erase_at, _Erase_at + _Count, _New_size - _Off + 1 );
        ;
        _Mypair . _Myval2 . _Mysize = _New_size;
        return * this;
    }

public :
    inline basic_string & erase ( const size_type _Off, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Erase_noexcept ( _Off, _Count );
    }

    inline iterator erase ( const const_iterator _Where ) noexcept {

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3652, 0, "%s", "string iterator incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3652, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _Where . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Erase_noexcept ( _Off, 1 );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline iterator erase ( const const_iterator _First, const const_iterator _Last ) noexcept
     {
        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3663, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3663, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        _Erase_noexcept ( _Off, static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ) );
        return begin ( ) + static_cast < difference_type > ( _Off );
    }

    inline void clear ( ) noexcept {
        _Eos ( 0 );
    }

    inline basic_string & replace ( const size_type _Off, const size_type _Nx, const basic_string & _Right ) {

        return replace ( _Off, _Nx, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline basic_string & replace ( const size_type _Off, size_type _Nx, const basic_string & _Right,
        const size_type _Roff, size_type _Count = npos ) {

        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        _Count = _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count );
        return replace ( _Off, _Nx, _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Count );
    }


















    inline basic_string & replace (
        const size_type _Off, size_type _Nx, const _Elem * const _Ptr, const size_type _Count ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Nx = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx );
        if ( _Nx == _Count ) {
            _Traits :: move ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Ptr, _Count );
            return * this;
        }

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        const size_type _Suffix_size = _Old_size - _Nx - _Off + 1;
        if ( _Count < _Nx ) {
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at, _Ptr, _Count );
            _Traits :: move ( _Insert_at + _Count, _Insert_at + _Nx, _Suffix_size );

            const auto _New_size = _Old_size - ( _Nx - _Count );
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
            return * this;
        }

        const size_type _Growth = static_cast < size_type > ( _Count - _Nx );






        {
            if ( _Growth <= _Mypair . _Myval2 . _Myres - _Old_size ) {
                ;
                _Mypair . _Myval2 . _Mysize = _Old_size + _Growth;
                _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
                _Elem * const _Insert_at = _Old_ptr + _Off;
                _Elem * const _Suffix_at = _Insert_at + _Nx;

                size_type _Ptr_shifted_after;
                if ( _Ptr + _Count <= _Insert_at || _Ptr > _Old_ptr + _Old_size ) {
                    _Ptr_shifted_after = _Count;
                } else if ( _Suffix_at <= _Ptr ) {
                    _Ptr_shifted_after = 0;
                } else {
                    _Ptr_shifted_after = static_cast < size_type > ( _Suffix_at - _Ptr );
                }

                _Traits :: move ( _Suffix_at + _Growth, _Suffix_at, _Suffix_size );



                _Traits :: move ( _Insert_at, _Ptr, _Ptr_shifted_after );


                _Traits :: copy (
                    _Insert_at + _Ptr_shifted_after, _Ptr + _Growth + _Ptr_shifted_after, _Count - _Ptr_shifted_after );
                return * this;
            }
        }

        return _Reallocate_grow_by (
            _Growth,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Nx, const _Elem * const _Ptr, const size_type _Count ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: copy ( _New_ptr + _Off, _Ptr, _Count );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _Nx, _Old_size - _Nx - _Off + 1 );
            },
            _Off, _Nx, _Ptr, _Count );
    }

    inline basic_string & replace ( const size_type _Off, const size_type _Nx, const _Elem * const _Ptr ) {

        return replace ( _Off, _Nx, _Ptr, _Convert_size < size_type > ( _Traits :: length ( _Ptr ) ) );
    }

    inline basic_string & replace ( const size_type _Off, size_type _Nx, const size_type _Count, const _Elem _Ch ) {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Nx = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx );
        if ( _Count == _Nx ) {
            _Traits :: assign ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count, _Ch );
            return * this;
        }

        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Count < _Nx || _Count - _Nx <= _Mypair . _Myval2 . _Myres - _Old_size ) {


            const auto _New_size = _Old_size + _Count - _Nx;
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
            _Elem * const _Old_ptr = _Mypair . _Myval2 . _Myptr ( );
            _Elem * const _Insert_at = _Old_ptr + _Off;
            _Traits :: move ( _Insert_at + _Count, _Insert_at + _Nx, _Old_size - _Nx - _Off + 1 );
            _Traits :: assign ( _Insert_at, _Count, _Ch );
            ;
            return * this;
        }

        return _Reallocate_grow_by (
            _Count - _Nx,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const size_type _Off,
                const size_type _Nx, const size_type _Count, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Off );
                _Traits :: assign ( _New_ptr + _Off, _Count, _Ch );
                _Traits :: copy ( _New_ptr + _Off + _Count, _Old_ptr + _Off + _Nx, _Old_size - _Nx - _Off + 1 );
            },
            _Off, _Nx, _Count, _Ch );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const basic_string & _Right ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3821, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3821, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Right );
    }















    inline basic_string & replace ( const const_iterator _First, const const_iterator _Last,
          const _Elem * const _Ptr, const size_type _Count ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3846, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3846, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Ptr, _Count );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const _Elem * const _Ptr ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3857, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3857, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Ptr );
    }

    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const size_type _Count, const _Elem _Ch ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3868, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3868, 0 ); } while ( false ); }; } while ( false );

        return replace ( static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) ),
            static_cast < size_type > ( _Last . _Ptr - _First . _Ptr ), _Count, _Ch );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline basic_string & replace (
        const const_iterator _First, const const_iterator _Last, const _Iter _First2, const _Iter _Last2 ) {

        _Adl_verify_range ( _First, _Last );

        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _Mypair . _Myval2 ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 3880, 0, "%s", "string iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 3880, 0 ); } while ( false ); }; } while ( false );

        const auto _Off = static_cast < size_type > ( _Unfancy ( _First . _Ptr ) - _Mypair . _Myval2 . _Myptr ( ) );
        const auto _Length = static_cast < size_type > ( _Last . _Ptr - _First . _Ptr );
        _Adl_verify_range ( _First2, _Last2 );
        const auto _UFirst2 = _Get_unwrapped ( _First2 );
        const auto _ULast2 = _Get_unwrapped ( _Last2 );
        if constexpr ( _Is_elem_cptr < decltype ( _UFirst2 ) > :: value ) {
            return replace ( _Off, _Length, _UFirst2, _Convert_size < size_type > ( static_cast < size_t > ( _ULast2 - _UFirst2 ) ) );
        } else {
            const basic_string _Right ( _UFirst2, _ULast2, get_allocator ( ) );
            return replace ( _Off, _Length, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
        }
    }





















    [ [ nodiscard ] ] inline iterator begin ( ) noexcept {
        return iterator ( _Refancy < pointer > ( _Mypair . _Myval2 . _Myptr ( ) ), :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline const_iterator begin ( ) const noexcept {
        return const_iterator ( _Refancy < const_pointer > ( _Mypair . _Myval2 . _Myptr ( ) ), :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline iterator end ( ) noexcept {
        return iterator (
            _Refancy < pointer > ( _Mypair . _Myval2 . _Myptr ( ) ) + static_cast < difference_type > ( _Mypair . _Myval2 . _Mysize ),
            :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline const_iterator end ( ) const noexcept {
        return const_iterator (
            _Refancy < const_pointer > ( _Mypair . _Myval2 . _Myptr ( ) ) + static_cast < difference_type > ( _Mypair . _Myval2 . _Mysize ),
            :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline _Elem * _Unchecked_begin ( ) noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline const _Elem * _Unchecked_begin ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline _Elem * _Unchecked_end ( ) noexcept {
        return _Mypair . _Myval2 . _Myptr ( ) + _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline const _Elem * _Unchecked_end ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( ) + _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline reverse_iterator rbegin ( ) noexcept {
        return reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rbegin ( ) const noexcept {
        return const_reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline reverse_iterator rend ( ) noexcept {
        return reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rend ( ) const noexcept {
        return const_reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_iterator cbegin ( ) const noexcept {
        return begin ( );
    }

    [ [ nodiscard ] ] inline const_iterator cend ( ) const noexcept {
        return end ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crbegin ( ) const noexcept {
        return rbegin ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crend ( ) const noexcept {
        return rend ( );
    }

    inline void shrink_to_fit ( ) {
        auto & _My_data = _Mypair . _Myval2;

        if ( ! _My_data . _Large_mode_engaged ( ) ) {
            return;
        }

        if ( _My_data . _Mysize <= _Small_string_capacity ) {
            _Become_small ( );
            return;
        }

        size_type _Target_capacity = ( :: std :: min ) ( _My_data . _Mysize | _Alloc_mask, max_size ( ) );
        if ( _Target_capacity < _My_data . _Myres ) {
            auto & _Al = _Getal ( );
            const pointer _New_ptr =
                _Allocate_for_capacity < _Allocation_policy :: _Exactly > ( _Al, _Target_capacity );
            ;

            _My_data . _Orphan_all ( );
            _Traits :: copy ( _Unfancy ( _New_ptr ), _Unfancy ( _My_data . _Bx . _Ptr ), _My_data . _Mysize + 1 );
            _Deallocate_for_capacity ( _Al, _My_data . _Bx . _Ptr, _My_data . _Myres );
            _My_data . _Bx . _Ptr = _New_ptr;
            _My_data . _Myres = _Target_capacity;
            ;
        }
    }

    [ [ nodiscard ] ] inline reference at ( const size_type _Off ) {
        _Mypair . _Myval2 . _Check_offset_exclusive ( _Off );
        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline const_reference at ( const size_type _Off ) const {
        _Mypair . _Myval2 . _Check_offset_exclusive ( _Off );
        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const size_type _Off ) noexcept {

        do { if ( _Off <= _Mypair . _Myval2 . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4023, 0, "%s", "string subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4023, 0 ); } while ( false ); }; } while ( false );

        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }

    [ [ nodiscard ] ] inline const_reference operator [ ] ( const size_type _Off ) const noexcept
     {

        do { if ( _Off <= _Mypair . _Myval2 . _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4031, 0, "%s", "string subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x73\x74\x72\x69\x6e\x67\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4031, 0 ); } while ( false ); }; } while ( false );

        return _Mypair . _Myval2 . _Myptr ( ) [ _Off ];
    }








    inline void push_back ( const _Elem _Ch ) {
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
        if ( _Old_size < _Mypair . _Myval2 . _Myres ) {
            ;
            _Mypair . _Myval2 . _Mysize = _Old_size + 1;
            _Elem * const _Ptr = _Mypair . _Myval2 . _Myptr ( );
            _Traits :: assign ( _Ptr [ _Old_size ], _Ch );
            _Traits :: assign ( _Ptr [ _Old_size + 1 ], _Elem ( ) );
            return;
        }

        _Reallocate_grow_by (
            1,
            [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size, const _Elem _Ch ) {
                _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size );
                _Traits :: assign ( _New_ptr [ _Old_size ], _Ch );
                _Traits :: assign ( _New_ptr [ _Old_size + 1 ], _Elem ( ) );
            },
            _Ch );
    }

    inline void pop_back ( ) noexcept {
        const size_type _Old_size = _Mypair . _Myval2 . _Mysize;

        do { if ( _Old_size != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4067, 0, "%s", "invalid to pop_back empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x69\x6e\x76\x61\x6c\x69\x64\x20\x74\x6f\x20\x70\x6f\x70\x5f\x62\x61\x63\x6b\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e" L"\x67\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4067, 0 ); } while ( false ); }; } while ( false );

        _Eos ( _Old_size - 1 );
    }

    [ [ nodiscard ] ] inline reference front ( ) noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4074, 0, "%s", "front() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22" L"", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4074, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ 0 ];
    }

    [ [ nodiscard ] ] inline const_reference front ( ) const noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4082, 0, "%s", "front() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22" L"", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4082, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ 0 ];
    }

    [ [ nodiscard ] ] inline reference back ( ) noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4090, 0, "%s", "back() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4090, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize - 1 ];
    }

    [ [ nodiscard ] ] inline const_reference back ( ) const noexcept {

        do { if ( _Mypair . _Myval2 . _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4098, 0, "%s", "back() called on empty string" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x73\x74\x72\x69\x6e\x67\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4098, 0 ); } while ( false ); }; } while ( false );


        return _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize - 1 ];
    }

    [ [ nodiscard ] ] inline const _Elem * c_str ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }

    [ [ nodiscard ] ] inline const _Elem * data ( ) const noexcept {
        return _Mypair . _Myval2 . _Myptr ( );
    }







    [ [ nodiscard ] ] inline size_type length ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline size_type size ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize;
    }

    [ [ nodiscard ] ] inline size_type max_size ( ) const noexcept {
        const size_type _Alloc_max = _Alty_traits :: max_size ( _Getal ( ) );
        const size_type _Storage_max =
            ( :: std :: max ) ( _Alloc_max, static_cast < size_type > ( _BUF_SIZE ) );
        return ( :: std :: min ) ( static_cast < size_type > ( ( numeric_limits < difference_type > :: max ) ( ) ),
            _Storage_max - 1
        );
    }

    inline void resize ( const size_type _New_size, const _Elem _Ch = _Elem ( ) ) {

        const size_type _Old_size = size ( );
        if ( _New_size <= _Old_size ) {
            _Eos ( _New_size );
        } else {
            append ( _New_size - _Old_size, _Ch );
        }
    }

    template < class _Operation >
    constexpr void



        _Resize_and_overwrite

        ( const size_type _New_size, _Operation _Op ) {
        if ( _Mypair . _Myval2 . _Myres < _New_size ) {
            _Reallocate_grow_by ( _New_size - _Mypair . _Myval2 . _Mysize,
                [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size ) {
                    _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size + 1 );
                } );
        } else {
            ;
            _Mypair . _Myval2 . _Mysize = _New_size;
        }

        auto _Arg_ptr = _Mypair . _Myval2 . _Myptr ( );
        auto _Arg_size = _New_size;
        const auto _Result_size = :: std :: move ( _Op ) ( _Arg_ptr, _Arg_size );
        const auto _Result_as_size_type = static_cast < size_type > ( _Result_size );

        do { if ( _Result_size >= 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4168, 0, "%s", "the returned size can\'t be smaller than 0" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x74\x68\x65\x20\x72\x65\x74\x75\x72\x6e\x65\x64\x20\x73\x69\x7a\x65\x20\x63\x61\x6e\x27\x74\x20\x62\x65\x20\x73\x6d\x61\x6c" L"\x6c\x65\x72\x20\x74\x68\x61\x6e\x20\x30\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4168, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Result_as_size_type <= _New_size ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4169, 0, "%s", "the returned size can\'t be greater than the passed size" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x74\x68\x65\x20\x72\x65\x74\x75\x72\x6e\x65\x64\x20\x73\x69\x7a\x65\x20\x63\x61\x6e\x27\x74\x20\x62\x65\x20\x67\x72\x65\x61" L"\x74\x65\x72\x20\x74\x68\x61\x6e\x20\x74\x68\x65\x20\x70\x61\x73\x73\x65\x64\x20\x73\x69\x7a\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4169, 0 ); } while ( false ); }; } while ( false );

        _Eos ( _Result_as_size_type );
    }








    [ [ nodiscard ] ] inline size_type capacity ( ) const noexcept {
        return _Mypair . _Myval2 . _Myres;
    }























    void reserve ( const size_type _Newcap = 0 ) {
        if ( _Mypair . _Myval2 . _Mysize > _Newcap ) {
            return;
        }

        if ( _Mypair . _Myval2 . _Myres == _Newcap ) {
            return;
        }

        if ( _Mypair . _Myval2 . _Myres < _Newcap ) {
            const size_type _Old_size = _Mypair . _Myval2 . _Mysize;
            _Reallocate_grow_by (
                _Newcap - _Old_size, [ ] ( _Elem * const _New_ptr, const _Elem * const _Old_ptr, const size_type _Old_size ) {
                    _Traits :: copy ( _New_ptr, _Old_ptr, _Old_size + 1 );
                } );

            _Mypair . _Myval2 . _Mysize = _Old_size;
            return;
        }

        if ( _Newcap <= _Small_string_capacity && _Mypair . _Myval2 . _Large_mode_engaged ( ) ) {

            _Become_small ( );
            return;
        }


    }


    [ [ nodiscard ( "This member function returns a bool indicating whether the container is empty and has no other effects. It is not useful to call" " this member function and discard the return value. Use the \'clear()\' member function if you want to erase all elements." ) ] ] inline bool empty ( ) const noexcept {
        return _Mypair . _Myval2 . _Mysize == 0;
    }

    inline size_type copy (
          _Elem * const _Ptr, size_type _Count, const size_type _Off = 0 ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        _Traits :: copy ( _Ptr, _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count );
        return _Count;
    }

    inline size_type
        _Copy_s ( _Elem * const _Dest, const size_type _Dest_size, size_type _Count,
            const size_type _Off = 0 ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Count = _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Count );
        _Traits :: _Copy_s ( _Dest, _Dest_size, _Mypair . _Myval2 . _Myptr ( ) + _Off, _Count );
        return _Count;
    }

    static inline void _Swap_bx_large_with_small ( _Scary_val & _Starts_large, _Scary_val & _Starts_small ) noexcept {

        const pointer _Ptr = _Starts_large . _Bx . _Ptr;
        _Destroy_in_place ( _Starts_large . _Bx . _Ptr );

        _Starts_large . _Activate_SSO_buffer ( );
        _Traits :: copy ( _Starts_large . _Bx . _Buf, _Starts_small . _Bx . _Buf, _BUF_SIZE );

        _Construct_in_place ( _Starts_small . _Bx . _Ptr, _Ptr );
    }

    inline void _Swap_data ( basic_string & _Right ) noexcept {
        using :: std :: swap;

        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;

        const bool _My_large = _My_data . _Large_mode_engaged ( );
        const bool _Right_large = _Right_data . _Large_mode_engaged ( );


        if constexpr ( _Can_memcpy_val ) {



            {
                const auto _My_data_mem =
                    reinterpret_cast < unsigned char * > ( :: std :: addressof ( _My_data ) ) + _Memcpy_val_offset;
                const auto _Right_data_mem =
                    reinterpret_cast < unsigned char * > ( :: std :: addressof ( _Right_data ) ) + _Memcpy_val_offset;
                unsigned char _Temp_mem [ _Memcpy_val_size ];
                :: memcpy ( _Temp_mem, _My_data_mem, _Memcpy_val_size );
                :: memcpy ( _My_data_mem, _Right_data_mem, _Memcpy_val_size );
                :: memcpy ( _Right_data_mem, _Temp_mem, _Memcpy_val_size );

                return;
            }
        }


        if ( _My_large && _Right_large ) {
            swap ( _My_data . _Bx . _Ptr, _Right_data . _Bx . _Ptr );
        } else if ( _My_large ) {
            _Swap_bx_large_with_small ( _My_data, _Right_data );
        } else if ( _Right_large ) {
            _Swap_bx_large_with_small ( _Right_data, _My_data );
        } else {
            _Elem _Temp_buf [ _BUF_SIZE ];
            _Traits :: copy ( _Temp_buf, _My_data . _Bx . _Buf, _My_data . _Mysize + 1 );
            _Traits :: copy ( _My_data . _Bx . _Buf, _Right_data . _Bx . _Buf, _Right_data . _Mysize + 1 );
            _Traits :: copy ( _Right_data . _Bx . _Buf, _Temp_buf, _My_data . _Mysize + 1 );
        }

        :: std :: swap ( _My_data . _Mysize, _Right_data . _Mysize );
        :: std :: swap ( _My_data . _Myres, _Right_data . _Myres );
    }

    inline void swap ( basic_string & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Pocs ( _Getal ( ), _Right . _Getal ( ) );


            auto & _My_data = _Mypair . _Myval2;
            auto & _Right_data = _Right . _Mypair . _Myval2;

            if ( ! _My_data . _Large_mode_engaged ( ) ) {
                _My_data . _Orphan_all ( );
            }

            if ( ! _Right_data . _Large_mode_engaged ( ) ) {
                _Right_data . _Orphan_all ( );
            }

            _My_data . _Swap_proxy_and_iterators ( _Right_data );


            _Swap_data ( _Right );
        }
    }












    [ [ nodiscard ] ] inline size_type find ( const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem * const _Ptr, const size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type rfind ( const basic_string & _Right, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_rfind < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept
     {

        return static_cast < size_type > ( _Traits_rfind < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type rfind ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_first_of (
        const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find_first_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_first_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of (
          const _Elem * const _Ptr, const size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find_first_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_last_of ( const basic_string & _Right, size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_last_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of (
          const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_first_not_of (
        const basic_string & _Right, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > ( _Traits_find_first_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ),
            _Mypair . _Myval2 . _Mysize, _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of ( const _Elem * const _Ptr,
        const size_type _Off, const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_first_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of (
          const _Elem * const _Ptr, size_type _Off = 0 ) const noexcept
     {

        return static_cast < size_type > ( _Traits_find_first_not_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_first_not_of ( const _Elem _Ch, const size_type _Off = 0 ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_not_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }












    [ [ nodiscard ] ] inline size_type find_last_not_of (
        const basic_string & _Right, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ),
            _Mypair . _Myval2 . _Mysize, _Off, _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of ( const _Elem * const _Ptr, const size_type _Off,
        const size_type _Count ) const noexcept {

        return static_cast < size_type > (
            _Traits_find_last_not_of < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Count ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of (
          const _Elem * const _Ptr, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > ( _Traits_find_last_not_of < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ptr, _Traits :: length ( _Ptr ) ) );
    }

    [ [ nodiscard ] ] inline size_type find_last_not_of ( const _Elem _Ch, const size_type _Off = npos ) const noexcept {

        return static_cast < size_type > (
            _Traits_rfind_not_ch < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Off, _Ch ) );
    }








    [ [ nodiscard ] ] inline basic_string substr ( const size_type _Off = 0, const size_type _Count = npos )



        const

    {

        return basic_string { * this, _Off, _Count };
    }








    inline bool _Equal ( const basic_string & _Right ) const noexcept {

        return _Traits_equal < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    inline bool _Equal ( const _Elem * const _Ptr ) const noexcept {

        return _Traits_equal < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Ptr, _Traits :: length ( _Ptr ) );
    }
































    [ [ nodiscard ] ] inline int compare ( const basic_string & _Right ) const noexcept {

        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize,
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    [ [ nodiscard ] ] inline int compare ( size_type _Off, size_type _Nx, const basic_string & _Right ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Right . _Mypair . _Myval2 . _Myptr ( ), _Right . _Mypair . _Myval2 . _Mysize );
    }

    [ [ nodiscard ] ] inline int compare ( const size_type _Off, const size_type _Nx, const basic_string & _Right,
        const size_type _Roff, const size_type _Count = npos ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        _Right . _Mypair . _Myval2 . _Check_offset ( _Roff );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Right . _Mypair . _Myval2 . _Myptr ( ) + _Roff, _Right . _Mypair . _Myval2 . _Clamp_suffix_size ( _Roff, _Count ) );
    }

    [ [ nodiscard ] ] inline int compare ( const _Elem * const _Ptr ) const noexcept {

        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ), _Mypair . _Myval2 . _Mysize, _Ptr, _Traits :: length ( _Ptr ) );
    }

    [ [ nodiscard ] ] inline int compare (
        const size_type _Off, const size_type _Nx, const _Elem * const _Ptr ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > ( _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ),
            _Ptr, _Traits :: length ( _Ptr ) );
    }

    [ [ nodiscard ] ] inline int compare ( const size_type _Off, const size_type _Nx,
          const _Elem * const _Ptr, const size_type _Count ) const {

        _Mypair . _Myval2 . _Check_offset ( _Off );
        return _Traits_compare < _Traits > (
            _Mypair . _Myval2 . _Myptr ( ) + _Off, _Mypair . _Myval2 . _Clamp_suffix_size ( _Off, _Nx ), _Ptr, _Count );
    }









































    [ [ nodiscard ] ] inline allocator_type get_allocator ( ) const noexcept {
        return static_cast < allocator_type > ( _Getal ( ) );
    }

private :
    [ [ nodiscard ] ] static inline size_type _Calculate_growth (
        const size_type _Requested, const size_type _Old, const size_type _Max ) noexcept {
        const size_type _Masked = _Requested | _Alloc_mask;
        if ( _Masked > _Max ) {
            return _Max;
        }

        if ( _Old > _Max - _Old / 2 ) {
            return _Max;
        }

        return ( :: std :: max ) ( _Masked, _Old + _Old / 2 );
    }

    [ [ nodiscard ] ] inline size_type _Calculate_growth ( const size_type _Requested ) const noexcept {
        return _Calculate_growth ( _Requested, _Mypair . _Myval2 . _Myres, max_size ( ) );
    }

    template < class _Fty, class ... _ArgTys >
    inline basic_string & _Reallocate_for ( const size_type _New_size, _Fty _Fn, _ArgTys ... _Args ) {


        if ( _New_size > max_size ( ) ) {
            _Xlen_string ( );
        }

        const size_type _Old_capacity = _Mypair . _Myval2 . _Myres;
        size_type _New_capacity = _Calculate_growth ( _New_size );
        auto & _Al = _Getal ( );
        const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );

        _Mypair . _Myval2 . _Orphan_all ( );
        ;
        _Mypair . _Myval2 . _Mysize = _New_size;
        _Mypair . _Myval2 . _Myres = _New_capacity;
        _Fn ( _Unfancy ( _New_ptr ), _New_size, _Args ... );
        if ( _Old_capacity > _Small_string_capacity ) {
            _Deallocate_for_capacity ( _Al, _Mypair . _Myval2 . _Bx . _Ptr, _Old_capacity );
            _Mypair . _Myval2 . _Bx . _Ptr = _New_ptr;
        } else {
            _Construct_in_place ( _Mypair . _Myval2 . _Bx . _Ptr, _New_ptr );
        }

        ;
        return * this;
    }

    template < class _Fty, class ... _ArgTys >
    inline basic_string & _Reallocate_grow_by ( const size_type _Size_increase, _Fty _Fn, _ArgTys ... _Args ) {


        auto & _My_data = _Mypair . _Myval2;
        const size_type _Old_size = _My_data . _Mysize;
        if ( max_size ( ) - _Old_size < _Size_increase ) {
            _Xlen_string ( );
        }

        const size_type _New_size = _Old_size + _Size_increase;
        const size_type _Old_capacity = _My_data . _Myres;
        size_type _New_capacity = _Calculate_growth ( _New_size );
        auto & _Al = _Getal ( );
        const pointer _New_ptr = _Allocate_for_capacity ( _Al, _New_capacity );

        _My_data . _Orphan_all ( );
        ;
        _My_data . _Mysize = _New_size;
        _My_data . _Myres = _New_capacity;
        _Elem * const _Raw_new = _Unfancy ( _New_ptr );
        if ( _Old_capacity > _Small_string_capacity ) {
            const pointer _Old_ptr = _My_data . _Bx . _Ptr;
            _Fn ( _Raw_new, _Unfancy ( _Old_ptr ), _Old_size, _Args ... );
            _Deallocate_for_capacity ( _Al, _Old_ptr, _Old_capacity );
            _My_data . _Bx . _Ptr = _New_ptr;
        } else {
            _Fn ( _Raw_new, _My_data . _Bx . _Buf, _Old_size, _Args ... );
            _Construct_in_place ( _My_data . _Bx . _Ptr, _New_ptr );
        }

        ;
        return * this;
    }

    inline void _Become_small ( ) {

        auto & _My_data = _Mypair . _Myval2;
        ;
        ;

        _My_data . _Orphan_all ( );
        ;
        const pointer _Ptr = _My_data . _Bx . _Ptr;
        auto & _Al = _Getal ( );
        _Destroy_in_place ( _My_data . _Bx . _Ptr );
        _My_data . _Activate_SSO_buffer ( );
        _Traits :: copy ( _My_data . _Bx . _Buf, _Unfancy ( _Ptr ), _My_data . _Mysize + 1 );
        _Deallocate_for_capacity ( _Al, _Ptr, _My_data . _Myres );
        _My_data . _Myres = _Small_string_capacity;
    }

    inline void _Eos ( const size_type _New_size ) noexcept {
        ;
        _Traits :: assign ( _Mypair . _Myval2 . _Myptr ( ) [ _Mypair . _Myval2 . _Mysize = _New_size ], _Elem ( ) );
    }

    inline void _Tidy_init ( ) noexcept {

        auto & _My_data = _Mypair . _Myval2;
        _My_data . _Mysize = 0;
        _My_data . _Myres = _Small_string_capacity;
        _My_data . _Activate_SSO_buffer ( );


        _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
    }

    inline void _Tidy_deallocate ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;
        _My_data . _Orphan_all ( );
        if ( _My_data . _Large_mode_engaged ( ) ) {
            ;
            const pointer _Ptr = _My_data . _Bx . _Ptr;
            auto & _Al = _Getal ( );
            _Destroy_in_place ( _My_data . _Bx . _Ptr );
            _My_data . _Activate_SSO_buffer ( );
            _Deallocate_for_capacity ( _Al, _Ptr, _My_data . _Myres );
        }

        _My_data . _Mysize = 0;
        _My_data . _Myres = _Small_string_capacity;

        _Traits :: assign ( _My_data . _Bx . _Buf [ 0 ], _Elem ( ) );
    }

public :
    inline void _Orphan_all ( ) noexcept {
        _Mypair . _Myval2 . _Orphan_all ( );
    }

private :
    inline void _Swap_proxy_and_iterators ( basic_string & _Right ) noexcept {
        _Mypair . _Myval2 . _Swap_proxy_and_iterators ( _Right . _Mypair . _Myval2 );
    }

    inline _Alty & _Getal ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    inline const _Alty & _Getal ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    _Compressed_pair < _Alty, _Scary_val > _Mypair;
};
#line 4900 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
inline void swap ( basic_string < _Elem, _Traits, _Alloc > & _Left,
    basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 4906
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    const auto _Left_size = _Left . size ( );
    const auto _Right_size = _Right . size ( );
    if ( _Left . max_size ( ) - _Left_size < _Right_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, _Right . c_str ( ), _Right_size };
}
#line 4918
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
      const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    using _Size_type = typename basic_string < _Elem, _Traits, _Alloc > :: size_type;
    const auto _Left_size = _Convert_size < _Size_type > ( _Traits :: length ( _Left ) );
    const auto _Right_size = _Right . size ( );
    if ( _Right . max_size ( ) - _Right_size < _Left_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Right, _Left, _Left_size, _Right . c_str ( ), _Right_size };
}
#line 4931
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    const auto _Right_size = _Right . size ( );
    if ( _Right_size == _Right . max_size ( ) ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Right, :: std :: addressof ( _Left ), 1, _Right . c_str ( ), _Right_size };
}
#line 4942
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    using _Size_type = typename basic_string < _Elem, _Traits, _Alloc > :: size_type;
    const auto _Left_size = _Left . size ( );
    const auto _Right_size = _Convert_size < _Size_type > ( _Traits :: length ( _Right ) );
    if ( _Left . max_size ( ) - _Left_size < _Right_size ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, _Right, _Right_size };
}
#line 4955
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem _Right ) {
    const auto _Left_size = _Left . size ( );
    if ( _Left_size == _Left . max_size ( ) ) {
        _Xlen_string ( );
    }

    return { _String_constructor_concat_tag { }, _Left, _Left . c_str ( ), _Left_size, :: std :: addressof ( _Right ), 1 };
}
#line 4966
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, _Left ) );
}
#line 4972
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return :: std :: move ( _Left . append ( _Right ) );
}
#line 4978
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {

    do { if ( :: std :: addressof ( _Left ) != :: std :: addressof ( _Right ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring", 4986, 0, "%s", "You cannot concatenate the same moved string to itself. See N4950 [res.on.arguments]/1.3: If a function argument is bound to an " "rvalue reference parameter, the implementation may assume that this parameter is a unique reference to this argument, except tha" "t the argument passed to a move-assignment operator may be a reference to *this ([lib.types.movedfrom])." ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x59\x6f\x75\x20\x63\x61\x6e\x6e\x6f\x74\x20\x63\x6f\x6e\x63\x61\x74\x65\x6e\x61\x74\x65\x20\x74\x68\x65\x20\x73\x61\x6d\x65" L"\x20\x6d\x6f\x76\x65\x64\x20\x73\x74\x72\x69\x6e\x67\x20\x74\x6f\x20\x69\x74\x73\x65\x6c\x66\x2e\x20\x53\x65\x65\x20\x4e\x34\x39" L"\x35\x30\x20\x5b\x72\x65\x73\x2e\x6f\x6e\x2e\x61\x72\x67\x75\x6d\x65\x6e\x74\x73\x5d\x2f\x31\x2e\x33\x3a\x20\x22\x20\x22\x49\x66" L"\x20\x61\x20\x66\x75\x6e\x63\x74\x69\x6f\x6e\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x20\x69\x73\x20\x62\x6f\x75\x6e\x64\x20\x74\x6f" L"\x20\x61\x6e\x20\x72\x76\x61\x6c\x75\x65\x20\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x70\x61\x72\x61\x6d\x65\x74\x65\x72\x2c\x20" L"\x74\x68\x65\x20\x69\x6d\x70\x6c\x65\x6d\x65\x6e\x74\x61\x74\x69\x6f\x6e\x20\x6d\x61\x79\x20\x61\x73\x73\x75\x6d\x65\x20\x74\x68" L"\x61\x74\x20\x22\x20\x22\x74\x68\x69\x73\x20\x70\x61\x72\x61\x6d\x65\x74\x65\x72\x20\x69\x73\x20\x61\x20\x75\x6e\x69\x71\x75\x65" L"\x20\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x74\x6f\x20\x74\x68\x69\x73\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x2c\x20\x65\x78\x63" L"\x65\x70\x74\x20\x74\x68\x61\x74\x20\x74\x68\x65\x20\x61\x72\x67\x75\x6d\x65\x6e\x74\x20\x70\x61\x73\x73\x65\x64\x20\x74\x6f\x20" L"\x22\x20\x22\x61\x20\x6d\x6f\x76\x65\x2d\x61\x73\x73\x69\x67\x6e\x6d\x65\x6e\x74\x20\x6f\x70\x65\x72\x61\x74\x6f\x72\x20\x6d\x61" L"\x79\x20\x62\x65\x20\x61\x20\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x74\x6f\x20\x2a\x74\x68\x69\x73\x20\x28\x5b\x6c\x69\x62\x2e" L"\x74\x79\x70\x65\x73\x2e\x6d\x6f\x76\x65\x64\x66\x72\x6f\x6d\x5d\x29\x2e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x73\x74\x72\x69\x6e" L"\x67", 4986, 0 ); } while ( false ); }; } while ( false );


    return { _String_constructor_concat_tag { }, _Left, _Right };
}
#line 4991 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
      const _Elem * const _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, _Left ) );
}
#line 4997
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    const _Elem _Left, basic_string < _Elem, _Traits, _Alloc > && _Right ) {
    return :: std :: move ( _Right . insert ( 0, 1, _Left ) );
}
#line 5003
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const _Elem * const _Right ) {
    return :: std :: move ( _Left . append ( _Right ) );
}
#line 5009
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline basic_string < _Elem, _Traits, _Alloc > operator + (
    basic_string < _Elem, _Traits, _Alloc > && _Left, const _Elem _Right ) {
    _Left . push_back ( _Right );
    return :: std :: move ( _Left );
}
#line 5016
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline bool operator == (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Left . _Equal ( _Right );
}
#line 5022
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] inline bool operator == (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return _Left . _Equal ( _Right );
}
#line 5041 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator == ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return _Right . _Equal ( _Left );
}
#line 5046
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 5052
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return ! ( _Left == _Right );
}
#line 5057
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator != ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return ! ( _Left == _Right );
}
#line 5062
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Left . compare ( _Right ) < 0;
}
#line 5068
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return _Right . compare ( _Left ) > 0;
}
#line 5073
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator < ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return _Left . compare ( _Right ) < 0;
}
#line 5078
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return _Right < _Left;
}
#line 5084
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return _Right < _Left;
}
#line 5089
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator > ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return _Right < _Left;
}
#line 5094
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Right < _Left );
}
#line 5100
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return ! ( _Right < _Left );
}
#line 5105
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator <= ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return ! ( _Right < _Left );
}
#line 5110
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= (
    const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) noexcept {
    return ! ( _Left < _Right );
}
#line 5116
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= ( const _Elem * const _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) {
    return ! ( _Left < _Right );
}
#line 5121
template < class _Elem, class _Traits, class _Alloc >
[ [ nodiscard ] ] bool operator >= ( const basic_string < _Elem, _Traits, _Alloc > & _Left, const _Elem * const _Right ) {
    return ! ( _Left < _Right );
}
#line 5127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
using string = basic_string< char> ; 
#line 5128
using wstring = basic_string< __wchar_t> ; 
#line 5132
using u16string = basic_string< char16_t, char_traits< char16_t> , allocator< char16_t> > ; 
#line 5133
using u32string = basic_string< char32_t, char_traits< char32_t> , allocator< char32_t> > ; 
#line 5135
template < class _Elem, class _Alloc >
struct hash < basic_string < _Elem, char_traits < _Elem >, _Alloc > >
    : _Conditionally_enabled_hash < basic_string < _Elem, char_traits < _Elem >, _Alloc >, _Is_EcharT < _Elem > > {
    [ [ nodiscard ] ] static size_t _Do_hash ( const basic_string < _Elem, char_traits < _Elem >, _Alloc > & _Keyval ) noexcept {
        return _Hash_array_representation ( _Keyval . c_str ( ), _Keyval . size ( ) );
    }
};
#line 5143
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & operator >> (
    basic_istream < _Elem, _Traits > & _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str ) {
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Ctype = typename _Myis :: _Ctype;
    using _Mystr = basic_string < _Elem, _Traits, _Alloc >;
    using _Mysizt = typename _Mystr :: size_type;

    typename _Myis :: iostate _State = _Myis :: goodbit;
    bool _Changed = false;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( _Istr . getloc ( ) );
        _Str . erase ( );

        try {
        _Mysizt _Size;
        if ( 0 < _Istr . width ( ) && static_cast < _Mysizt > ( _Istr . width ( ) ) < _Str . max_size ( ) ) {
            _Size = static_cast < _Mysizt > ( _Istr . width ( ) );
        } else {
            _Size = _Str . max_size ( );
        }

        typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

        for (; 0 < _Size; -- _Size, _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= _Myis :: eofbit;
                break;
            } else if ( _Ctype_fac . is ( _Ctype :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                break;
            } else {
                _Str . push_back ( _Traits :: to_char_type ( _Meta ) );
                _Changed = true;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( _Myis :: badbit, true ); }
    }

    _Istr . width ( 0 );
    if ( ! _Changed ) {
        _State |= _Myis :: failbit;
    }

    _Istr . setstate ( _State );
    return _Istr;
}
#line 5192
template < class _Elem, class _Traits, class _Alloc >
basic_ostream < _Elem, _Traits > & operator << (
    basic_ostream < _Elem, _Traits > & _Ostr, const basic_string < _Elem, _Traits, _Alloc > & _Str ) {
    return _Insert_string ( _Ostr, _Str . data ( ), _Str . size ( ) );
}
#line 5198
inline namespace literals { 
#line 5199
inline namespace string_literals { 
#line 5200
[[nodiscard]] inline string operator ""s(const char *_Str, size_t _Len) { 
#line 5201
return string{_Str, _Len}; 
#line 5202
} 
#line 5204
[[nodiscard]] inline wstring operator ""s(const __wchar_t *_Str, size_t _Len) { 
#line 5205
return wstring{_Str, _Len}; 
#line 5206
} 
#line 5214
[[nodiscard]] inline u16string operator ""s(const char16_t *_Str, size_t _Len) { 
#line 5215
return u16string{_Str, _Len}; 
#line 5216
} 
#line 5218
[[nodiscard]] inline u32string operator ""s(const char32_t *_Str, size_t _Len) { 
#line 5219
return u32string{_Str, _Len}; 
#line 5220
} 
#line 5221
}
#line 5222
}
#line 5252 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xstring"
}
#line 5261
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
class logic_error : public exception { 
#line 22
public: using _Mybase = exception; 
#line 24
explicit logic_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 26
explicit logic_error(const char *_Message) : _Mybase(_Message) { } 
#line 34 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 36
class domain_error : public logic_error { 
#line 38
public: using _Mybase = logic_error; 
#line 40
explicit domain_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 42
explicit domain_error(const char *_Message) : _Mybase(_Message) { } 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 52
class invalid_argument : public logic_error { 
#line 54
public: using _Mybase = logic_error; 
#line 56
explicit invalid_argument(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 58
explicit invalid_argument(const char *_Message) : _Mybase(_Message) { } 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 68
class length_error : public logic_error { 
#line 70
public: using _Mybase = logic_error; 
#line 72
explicit length_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 74
explicit length_error(const char *_Message) : _Mybase(_Message) { } 
#line 82 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 84
class out_of_range : public logic_error { 
#line 86
public: using _Mybase = logic_error; 
#line 88
explicit out_of_range(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 90
explicit out_of_range(const char *_Message) : _Mybase(_Message) { } 
#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 100
class runtime_error : public exception { 
#line 102
public: using _Mybase = exception; 
#line 104
explicit runtime_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 106
explicit runtime_error(const char *_Message) : _Mybase(_Message) { } 
#line 114 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 116
class overflow_error : public runtime_error { 
#line 118
public: using _Mybase = runtime_error; 
#line 120
explicit overflow_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 122
explicit overflow_error(const char *_Message) : _Mybase(_Message) { } 
#line 130 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 132
class underflow_error : public runtime_error { 
#line 134
public: using _Mybase = runtime_error; 
#line 136
explicit underflow_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 138
explicit underflow_error(const char *_Message) : _Mybase(_Message) { } 
#line 146 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 148
class range_error : public runtime_error { 
#line 150
public: using _Mybase = runtime_error; 
#line 152
explicit range_error(const string &_Message) : _Mybase(_Message.c_str()) { } 
#line 154
explicit range_error(const char *_Message) : _Mybase(_Message) { } 
#line 162 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\stdexcept"
}; 
#line 164
[[noreturn]] inline void _Throw_range_error(const char *const _Message) { 
#line 165
throw range_error{_Message}; 
#line 166
} 
#line 167
}
#line 170
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xcall_once.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
struct once_flag { 
#line 23
constexpr once_flag() noexcept : _Opaque((nullptr)) { } 
#line 25
once_flag(const once_flag &) = delete;
#line 26
once_flag &operator=(const once_flag &) = delete;
#line 28
void *_Opaque; 
#line 29
}; 
#line 40
template < class _Ty >
union _Immortalizer_impl {
    constexpr _Immortalizer_impl ( ) noexcept : _Storage { } { }
    _Immortalizer_impl ( const _Immortalizer_impl & ) = delete;
    _Immortalizer_impl & operator = ( const _Immortalizer_impl & ) = delete;
    ~ _Immortalizer_impl ( ) {

    }

    _Ty _Storage;
};
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xcall_once.h"
extern "C" [[nodiscard]] __declspec(dllimport) int __stdcall __std_init_once_begin_initialize(void ** _LpInitOnce, unsigned long _DwFlags, int * _FPending, void ** _LpContext) noexcept; 
#line 81
extern "C" [[nodiscard]] __declspec(dllimport) int __stdcall __std_init_once_complete(void ** _LpInitOnce, unsigned long _DwFlags, void * _LpContext) noexcept; 
#line 84
extern "C" [[noreturn]] void __stdcall __std_init_once_link_alternate_names_and_abort() noexcept; 
#line 88
constexpr unsigned long _Init_once_init_failed = 4UL; 
#line 90
struct _Init_once_completer { 
#line 91
once_flag &_Once; 
#line 92
unsigned long _DwFlags; 
#line 93
~_Init_once_completer() { 
#line 94
if (!(__std_init_once_complete(&((_Once)._Opaque), _DwFlags, nullptr))) { 
#line 95
__std_init_once_link_alternate_names_and_abort(); 
#line 96
}  
#line 97
} 
#line 98
}; 
#line 100
template < class _Fn, class ... _Args >
void ( call_once ) ( once_flag & _Once, _Fn && _Fx, _Args && ... _Ax ) noexcept (
    noexcept ( :: std :: invoke ( :: std :: forward < _Fn > ( _Fx ), :: std :: forward < _Args > ( _Ax ) ... ) ) ) {


    int _Pending;
    if ( ! __std_init_once_begin_initialize ( & _Once . _Opaque, 0, & _Pending, nullptr ) ) {
        :: abort ( );
    }

    if ( _Pending != 0 ) {
        _Init_once_completer _Op { _Once, _Init_once_init_failed };
        :: std :: invoke ( :: std :: forward < _Fn > ( _Fx ), :: std :: forward < _Args > ( _Ax ) ... );
        _Op . _DwFlags = 0;
    }
}
#line 119
}
#line 123
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xerrc.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 18
namespace std { 
#line 19
enum class errc { 
#line 20
address_family_not_supported = 102, 
#line 21
address_in_use = 100, 
#line 22
address_not_available, 
#line 23
already_connected = 113, 
#line 24
argument_list_too_long = 7, 
#line 25
argument_out_of_domain = 33, 
#line 26
bad_address = 14, 
#line 27
bad_file_descriptor = 9, 
#line 28
bad_message = 104, 
#line 29
broken_pipe = 32, 
#line 30
connection_aborted = 106, 
#line 31
connection_already_in_progress = 103, 
#line 32
connection_refused = 107, 
#line 33
connection_reset, 
#line 34
cross_device_link = 18, 
#line 35
destination_address_required = 109, 
#line 36
device_or_resource_busy = 16, 
#line 37
directory_not_empty = 41, 
#line 38
executable_format_error = 8, 
#line 39
file_exists = 17, 
#line 40
file_too_large = 27, 
#line 41
filename_too_long = 38, 
#line 42
function_not_supported = 40, 
#line 43
host_unreachable = 110, 
#line 44
identifier_removed, 
#line 45
illegal_byte_sequence = 42, 
#line 46
inappropriate_io_control_operation = 25, 
#line 47
interrupted = 4, 
#line 48
invalid_argument = 22, 
#line 49
invalid_seek = 29, 
#line 50
io_error = 5, 
#line 51
is_a_directory = 21, 
#line 52
message_size = 115, 
#line 53
network_down, 
#line 54
network_reset, 
#line 55
network_unreachable, 
#line 56
no_buffer_space, 
#line 57
no_child_process = 10, 
#line 58
no_link = 121, 
#line 59
no_lock_available = 39, 
#line 60
no_message_available = 120, 
#line 61
no_message = 122, 
#line 62
no_protocol_option, 
#line 63
no_space_on_device = 28, 
#line 64
no_stream_resources = 124, 
#line 65
no_such_device_or_address = 6, 
#line 66
no_such_device = 19, 
#line 67
no_such_file_or_directory = 2, 
#line 68
no_such_process, 
#line 69
not_a_directory = 20, 
#line 70
not_a_socket = 128, 
#line 71
not_a_stream = 125, 
#line 72
not_connected, 
#line 73
not_enough_memory = 12, 
#line 74
not_supported = 129, 
#line 75
operation_canceled = 105, 
#line 76
operation_in_progress = 112, 
#line 77
operation_not_permitted = 1, 
#line 78
operation_not_supported = 130, 
#line 79
operation_would_block = 140, 
#line 80
owner_dead = 133, 
#line 81
permission_denied = 13, 
#line 82
protocol_error = 134, 
#line 83
protocol_not_supported, 
#line 84
read_only_file_system = 30, 
#line 85
resource_deadlock_would_occur = 36, 
#line 86
resource_unavailable_try_again = 11, 
#line 87
result_out_of_range = 34, 
#line 88
state_not_recoverable = 127, 
#line 89
stream_timeout = 137, 
#line 90
text_file_busy = 139, 
#line 91
timed_out = 138, 
#line 92
too_many_files_open_in_system = 23, 
#line 93
too_many_files_open, 
#line 94
too_many_links = 31, 
#line 95
too_many_symbolic_link_levels = 114, 
#line 96
value_too_large = 132, 
#line 97
wrong_protocol_type = 136
#line 98
}; 
#line 100
}
#line 104
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ctime"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
using ::clock_t;
#line 23
using ::time_t;
#line 25
using ::asctime;
#line 26
using ::clock;
#line 27
using ::strftime;
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ctime"
using ::ctime;
#line 80
using ::difftime;
#line 81
using ::gmtime;
#line 82
using ::localtime;
#line 83
using ::mktime;
#line 84
using ::time;
#line 90 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ctime"
}
#line 94
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xtimec.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
extern "C" {
#line 26
__int64 __cdecl _Xtime_get_ticks(); 
#line 33
__int64 __cdecl _Query_perf_counter(); 
#line 34
__int64 __cdecl _Query_perf_frequency(); 
#line 36
}
#line 40
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xthreads.h"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
extern "C" {
#line 22
using _Thrd_id_t = unsigned; 
#line 23
struct _Thrd_t { 
#line 24
void *_Hnd; 
#line 25
_Thrd_id_t _Id; 
#line 26
}; 
#line 28
using _Smtx_t = void *; 
#line 30
struct _Stl_critical_section { 
#line 31
void *_Unused = (nullptr); 
#line 32
_Smtx_t _M_srw_lock = (nullptr); 
#line 33
}; 
#line 35
struct _Mtx_internal_imp_t { 
#line 44
static constexpr size_t _Critical_section_size = (64); 
#line 50 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xthreads.h"
static constexpr size_t _Critical_section_align = __alignof(void *); 
#line 52
int _Type{0}; 
#line 53
union { 
#line 54
_Stl_critical_section _Critical_section{}; 
#line 55
std::_Aligned_storage_t< _Critical_section_size, _Critical_section_align>  _Cs_storage; 
#line 56
}; 
#line 57
long _Thread_id{0L}; 
#line 58
int _Count{0}; 
#line 59
}; 
#line 65 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xthreads.h"
constexpr size_t _Cnd_internal_imp_size = (72); 
#line 70 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xthreads.h"
constexpr size_t _Cnd_internal_imp_alignment = __alignof(void *); 
#line 72
using _Mtx_t = _Mtx_internal_imp_t *; 
#line 77
struct _Cnd_internal_imp_t; 
#line 78
using _Cnd_t = _Cnd_internal_imp_t *; 
#line 81 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xthreads.h"
enum class _Thrd_result: int { _Success, _Nomem, _Timedout, _Busy, _Error}; 
#line 84
_Thrd_result __cdecl _Thrd_detach(_Thrd_t); 
#line 85
_Thrd_result __cdecl _Thrd_join(_Thrd_t, int *); 
#line 86
void __cdecl _Thrd_sleep(const _timespec64 *); 
#line 87
void __cdecl _Thrd_yield(); 
#line 88
unsigned __cdecl _Thrd_hardware_concurrency(); 
#line 89
_Thrd_id_t __cdecl _Thrd_id(); 
#line 92
enum { 
#line 93
_Mtx_plain = 1, 
#line 94
_Mtx_try, 
#line 95
_Mtx_timed = 4, 
#line 96
_Mtx_recursive = 256
#line 97
}; 
#line 103
void __cdecl _Mtx_init_in_situ(_Mtx_t, int); 
#line 104
void __cdecl _Mtx_destroy_in_situ(_Mtx_t); 
#line 105
int __cdecl _Mtx_current_owns(_Mtx_t); 
#line 106
_Thrd_result __cdecl _Mtx_lock(_Mtx_t); 
#line 107
_Thrd_result __cdecl _Mtx_trylock(_Mtx_t); 
#line 108
_Thrd_result __cdecl _Mtx_unlock(_Mtx_t); 
#line 117
void __cdecl _Smtx_lock_exclusive(_Smtx_t *); 
#line 118
void __cdecl _Smtx_lock_shared(_Smtx_t *); 
#line 119
int __cdecl _Smtx_try_lock_exclusive(_Smtx_t *); 
#line 120
int __cdecl _Smtx_try_lock_shared(_Smtx_t *); 
#line 121
void __cdecl _Smtx_unlock_exclusive(_Smtx_t *); 
#line 122
void __cdecl _Smtx_unlock_shared(_Smtx_t *); 
#line 129
void __cdecl _Cnd_init_in_situ(_Cnd_t); 
#line 130
void __cdecl _Cnd_destroy_in_situ(_Cnd_t); 
#line 131
_Thrd_result __cdecl _Cnd_wait(_Cnd_t, _Mtx_t); 
#line 132
_Thrd_result __cdecl _Cnd_timedwait(_Cnd_t, _Mtx_t, const _timespec64 *); 
#line 133
_Thrd_result __cdecl _Cnd_broadcast(_Cnd_t); 
#line 134
_Thrd_result __cdecl _Cnd_signal(_Cnd_t); 
#line 135
void __cdecl _Cnd_register_at_thread_exit(_Cnd_t, _Mtx_t, int *); 
#line 136
void __cdecl _Cnd_unregister_at_thread_exit(_Mtx_t); 
#line 137
void __cdecl _Cnd_do_broadcast_at_thread_exit(); 
#line 138
}
#line 140
namespace std { 
#line 141
enum { 
#line 142
_DEVICE_OR_RESOURCE_BUSY, 
#line 143
_INVALID_ARGUMENT, 
#line 144
_NO_SUCH_PROCESS, 
#line 145
_NOT_ENOUGH_MEMORY, 
#line 146
_OPERATION_NOT_PERMITTED, 
#line 147
_RESOURCE_DEADLOCK_WOULD_OCCUR, 
#line 148
_RESOURCE_UNAVAILABLE_TRY_AGAIN
#line 149
}; 
#line 151
[[noreturn]] void __cdecl _Throw_Cpp_error(int _Code); 
#line 152
}
#line 155
#pragma warning(pop)
#pragma pack ( pop )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 40 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
extern "C" [[nodiscard]] unsigned char __stdcall __std_atomic_compare_exchange_128(__int64 * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult) noexcept; 
#line 43
extern "C" [[nodiscard]] char __stdcall __std_atomic_has_cmpxchg16b() noexcept; 
#line 86 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
enum { 
#line 87
_Atomic_memory_order_relaxed, 
#line 88
_Atomic_memory_order_consume, 
#line 89
_Atomic_memory_order_acquire, 
#line 90
_Atomic_memory_order_release, 
#line 91
_Atomic_memory_order_acq_rel, 
#line 92
_Atomic_memory_order_seq_cst
#line 93
}; 
#line 103 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
extern "C" inline void _Check_memory_order(const unsigned _Order) noexcept { 
#line 104
if (_Order > (_Atomic_memory_order_seq_cst)) { 
#line 105
do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 105, 0, "%s", "Invalid memory order")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 105, 0); } while (false); 
#line 106
}  
#line 107
} 
#line 255 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
#pragma warning(push)
#pragma warning(disable : 6001)
#pragma warning(disable : 28113)
#line 259
extern "C" inline void _Atomic_thread_fence(const unsigned _Order) noexcept { 
#line 260
if (_Order == (_Atomic_memory_order_relaxed)) { 
#line 261
return; 
#line 262
}  
#line 265
__pragma( warning(push)) __pragma( warning(disable : 4996)) _ReadWriteBarrier(); __pragma( warning(pop)) 
#line 266
if (_Order == (_Atomic_memory_order_seq_cst)) { 
#line 267
volatile long _Guard; 
#line 272
(void)_InterlockedIncrement(&_Guard); 
#line 273
__pragma( warning(push)) __pragma( warning(disable : 4996)) _ReadWriteBarrier(); __pragma( warning(pop)) 
#line 274
}  
#line 280 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
} 
#pragma warning(pop)
#line 285
extern "C" {
#line 286
_Smtx_t *__stdcall __std_atomic_get_mutex(const void * _Key) noexcept; 
#line 287
}
#line 297 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
namespace std { 
#line 303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Storage_for {

    alignas ( _Ty ) unsigned char _Storage [ sizeof ( _Ty ) ];

    _Storage_for ( ) = default;
    _Storage_for ( const _Storage_for & ) = delete;
    _Storage_for & operator = ( const _Storage_for & ) = delete;








    [ [ nodiscard ] ] _Ty & _Ref ( ) noexcept {
        return reinterpret_cast < _Ty & > ( _Storage );
    }

    [ [ nodiscard ] ] _Ty * _Ptr ( ) noexcept {
        return reinterpret_cast < _Ty * > ( & _Storage );
    }
};
#line 334 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
extern "C" inline void atomic_thread_fence(const memory_order _Order) noexcept { 
#line 335
::_Atomic_thread_fence(static_cast< unsigned>(_Order)); 
#line 336
} 
#line 338
extern "C" inline void atomic_signal_fence(const memory_order _Order) noexcept { 
#line 339
if (_Order != (memory_order_relaxed)) { 
#line 340
__pragma( warning(push)) __pragma( warning(disable : 4996)) _ReadWriteBarrier(); __pragma( warning(pop)) 
#line 341
}  
#line 342
} 
#line 344
template < class _Ty >
_Ty kill_dependency ( _Ty _Arg ) noexcept {
    return _Arg;
}
#line 349
inline void _Check_store_memory_order(const memory_order _Order) noexcept { 
#line 350
switch (_Order) { 
#line 351
case memory_order_relaxed:  
#line 352
case memory_order_release:  
#line 353
case memory_order_seq_cst:  
#line 355
break; 
#line 356
case memory_order_consume:  
#line 357
case memory_order_acquire:  
#line 358
case memory_order_acq_rel:  
#line 359
default:  
#line 360
do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 360, 0, "%s", "Invalid memory order")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 360, 0); } while (false); 
#line 361
break; 
#line 362
}  
#line 363
} 
#line 365
inline void _Check_load_memory_order(const memory_order _Order) noexcept { 
#line 366
switch (_Order) { 
#line 367
case memory_order_relaxed:  
#line 368
case memory_order_consume:  
#line 369
case memory_order_acquire:  
#line 370
case memory_order_seq_cst:  
#line 372
break; 
#line 373
case memory_order_release:  
#line 374
case memory_order_acq_rel:  
#line 375
default:  
#line 376
do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 376, 0, "%s", "Invalid memory order")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 376, 0); } while (false); 
#line 377
break; 
#line 378
}  
#line 379
} 
#line 381
[[nodiscard]] inline memory_order _Combine_cas_memory_orders(const memory_order 
#line 382
_Success, const memory_order _Failure) noexcept { 
#line 394
static constexpr memory_order _Combined_memory_orders[6][6] = {{memory_order_relaxed, memory_order_consume, memory_order_acquire, memory_order_release, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_consume, memory_order_consume, memory_order_acquire, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_acquire, memory_order_acquire, memory_order_acquire, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_release, memory_order_acq_rel, memory_order_acq_rel, memory_order_release, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst}, {memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst}}; 
#line 408
_Check_memory_order(static_cast< unsigned>(_Success)); 
#line 409
_Check_load_memory_order(_Failure); 
#line 410
return (_Combined_memory_orders[static_cast< int>(_Success)])[static_cast< int>(_Failure)]; 
#line 411
} 
#line 413
template < class _Integral, class _Ty >
[ [ nodiscard ] ] _Integral _Atomic_reinterpret_as ( const _Ty & _Source ) noexcept {

    static_assert ( is_integral_v < _Integral >, "Tried to reinterpret memory as non-integral" );
    if constexpr ( is_integral_v < _Ty > && sizeof ( _Integral ) == sizeof ( _Ty ) ) {
        return static_cast < _Integral > ( _Source );
    } else if constexpr ( is_pointer_v < _Ty > && sizeof ( _Integral ) == sizeof ( _Ty ) ) {
        return reinterpret_cast < _Integral > ( _Source );
    } else {
        _Integral _Result { };
        :: memcpy ( & _Result, :: std :: addressof ( _Source ), sizeof ( _Source ) );
        return _Result;
    }
}
#line 429
template< class _Ty> 
#line 430
struct _Atomic_padded { 
#line 431
alignas(sizeof(_Ty)) mutable _Ty _Value; 
#line 432
}; 
#line 474 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template< class _Ty> 
#line 475
struct _Atomic_storage_types { 
#line 476
using _TStorage = _Atomic_padded< _Ty> ; 
#line 477
using _Spinlock = long; 
#line 478
}; 
#line 480
template< class _Ty> 
#line 481
struct _Atomic_storage_types< _Ty &>  { 
#line 482
using _TStorage = _Ty &; 
#line 483
using _Spinlock = _Smtx_t *; 
#line 484
}; 
#line 487
template < class _Ty, size_t = sizeof ( remove_reference_t < _Ty > ) >



struct _Atomic_storage;
#line 523 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
inline void _Atomic_lock_acquire(long &_Spinlock) noexcept { 
#line 528
int _Current_backoff = 1; 
#line 529
constexpr int _Max_backoff = 64; 
#line 530
while (_InterlockedExchange(&_Spinlock, 1) != (0)) { 
#line 531
while (__iso_volatile_load32(&(reinterpret_cast< int &>(_Spinlock))) != 0) { 
#line 532
for (int _Count_down = _Current_backoff; _Count_down != 0; --_Count_down) { 
#line 533
_mm_pause(); 
#line 534
}  
#line 535
_Current_backoff = ((_Current_backoff < _Max_backoff) ? _Current_backoff << 1 : _Max_backoff); 
#line 536
}  
#line 537
}  
#line 547 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
} 
#line 549
inline void _Atomic_lock_release(long &_Spinlock) noexcept { 
#line 551
_InterlockedExchange(&_Spinlock, 0); 
#line 559 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
} 
#line 561
inline void _Atomic_lock_acquire(_Smtx_t *_Spinlock) noexcept { 
#line 562
_Smtx_lock_exclusive(_Spinlock); 
#line 563
} 
#line 565
inline void _Atomic_lock_release(_Smtx_t *_Spinlock) noexcept { 
#line 566
_Smtx_unlock_exclusive(_Spinlock); 
#line 567
} 
#line 569
template < class _Spinlock_t >
class [ [ nodiscard ] ] _Atomic_lock_guard {
public :
    explicit _Atomic_lock_guard ( _Spinlock_t & _Spinlock_ ) noexcept : _Spinlock ( _Spinlock_ ) {
        _Atomic_lock_acquire ( _Spinlock );
    }

    ~ _Atomic_lock_guard ( ) {
        _Atomic_lock_release ( _Spinlock );
    }

    _Atomic_lock_guard ( const _Atomic_lock_guard & ) = delete;
    _Atomic_lock_guard & operator = ( const _Atomic_lock_guard & ) = delete;

private :
    _Spinlock_t & _Spinlock;
};
#line 613 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty, size_t >
struct _Atomic_storage {



    using _TVal = remove_reference_t < _Ty >;
    using _Guard = _Atomic_lock_guard < typename _Atomic_storage_types < _Ty > :: _Spinlock >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage ( _Value ) {

    }

    void store ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        _Check_store_memory_order ( _Order );
        _Guard _Lock { _Spinlock };
        _Storage = _Value;
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order = memory_order_seq_cst ) const noexcept {

        _Check_load_memory_order ( _Order );
        _Guard _Lock { _Spinlock };
        _TVal _Local ( _Storage );
        return _Local;
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        _Check_memory_order ( static_cast < unsigned int > ( _Order ) );
        _Guard _Lock { _Spinlock };
        _TVal _Result ( _Storage );
        _Storage = _Value;
        return _Result;
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) );
        const auto _Storage_ptr = :: std :: addressof ( _Storage );
        const auto _Expected_ptr = :: std :: addressof ( _Expected );
        bool _Result;



        _Guard _Lock { _Spinlock };











        _Result = :: memcmp ( _Storage_ptr, _Expected_ptr, sizeof ( _TVal ) ) == 0;

        if ( _Result ) {
            :: memcpy ( _Storage_ptr, :: std :: addressof ( _Desired ), sizeof ( _TVal ) );
        } else {
            :: memcpy ( _Expected_ptr, _Storage_ptr, sizeof ( _TVal ) );
        }

        return _Result;
    }
















































protected :
    void _Init_spinlock_for_ref ( ) noexcept {
        _Spinlock = __std_atomic_get_mutex ( :: std :: addressof ( _Storage ) );
    }

private :

    mutable typename _Atomic_storage_types < _Ty > :: _Spinlock _Spinlock { };

public :
    _Ty _Storage { };





};
#line 749 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 1 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        const char _As_bytes = _Atomic_reinterpret_as < char > ( _Value );
        ( void ) _InterlockedExchange8 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        const char _As_bytes = _Atomic_reinterpret_as < char > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store8 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                      __pragma(warning(push))                                                                                                                                                              __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                    __pragma(warning(pop)); __iso_volatile_store8 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 771, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 771, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        char _As_bytes = __iso_volatile_load8 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < char > ( _Storage );
        char _As_bytes;



        _As_bytes = __iso_volatile_load8 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 792, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 792, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        char _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange8 ( _Atomic_address_as < char > ( _Storage ), _Atomic_reinterpret_as < char > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Expected_bytes = _Atomic_reinterpret_as < char > ( _Expected );
        char _Prev_bytes;





















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange8 ( _Atomic_address_as < char > ( _Storage ), _Atomic_reinterpret_as < char > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        reinterpret_cast < char & > ( _Expected ) = _Prev_bytes;
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 2 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        const short _As_bytes = _Atomic_reinterpret_as < short > ( _Value );
        ( void ) _InterlockedExchange16 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        const short _As_bytes = _Atomic_reinterpret_as < short > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store16 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store16 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 879, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 879, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        short _As_bytes = __iso_volatile_load16 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < short > ( _Storage );
        short _As_bytes;



        _As_bytes = __iso_volatile_load16 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 900, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 900, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        short _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange16 ( _Atomic_address_as < short > ( _Storage ), _Atomic_reinterpret_as < short > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Expected_bytes = _Atomic_reinterpret_as < short > ( _Expected );
        short _Prev_bytes;




















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange16 ( _Atomic_address_as < short > ( _Storage ), _Atomic_reinterpret_as < short > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _Ty ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 964 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 4 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        const int _As_bytes = _Atomic_reinterpret_as < int > ( _Value );
        ( void ) _InterlockedExchange ( reinterpret_cast < volatile long * > ( ( _Mem ) ), static_cast < long > ( ( _As_bytes ) ) );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        const int _As_bytes = _Atomic_reinterpret_as < int > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store32 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store32 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 986, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 986, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        int _As_bytes = __iso_volatile_load32 ( _Mem );
        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < int > ( _Storage );
        int _As_bytes;



        _As_bytes = __iso_volatile_load32 ( _Mem );
        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 1007, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 1007, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        long _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange ( _Atomic_address_as < long > ( _Storage ), _Atomic_reinterpret_as < long > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Expected_bytes = _Atomic_reinterpret_as < long > ( _Expected );
        long _Prev_bytes;




















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange ( _Atomic_address_as < long > ( _Storage ), _Atomic_reinterpret_as < long > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _TVal ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 1071 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty, 8 > {

    using _TVal = remove_reference_t < _Ty >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty >, _Ty, const _TVal > _Value ) noexcept
        : _Storage { _Value } {

    }

    void store ( const _TVal _Value ) noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        const long long _As_bytes = _Atomic_reinterpret_as < long long > ( _Value );
        ( void ) _InterlockedExchange64 ( ( ( _Mem ) ), ( ( _As_bytes ) ) );;
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        const long long _As_bytes = _Atomic_reinterpret_as < long long > ( _Value );
        switch ( static_cast < unsigned int > ( _Order ) ) {
            case _Atomic_memory_order_relaxed : __iso_volatile_store64 ( ( _Mem ), ( _As_bytes ) ); return; case _Atomic_memory_order_release :                                                                                                                                       __pragma(warning(push))                                                                                                                                                               __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                     __pragma(warning(pop)); __iso_volatile_store64 ( ( _Mem ), ( _As_bytes ) ); return; default : case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_acq_rel : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 1093, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 1093, 0 ); } while ( false );;
        case _Atomic_memory_order_seq_cst :
            store ( _Value );
            return;
        }
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );



        long long _As_bytes = __iso_volatile_load64 ( _Mem );

        __pragma(warning(push))                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                      __pragma(warning(pop));
        return reinterpret_cast < _TVal & > ( _As_bytes );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {
        const auto _Mem = _Atomic_address_as < long long > ( _Storage );
        long long _As_bytes;







        _As_bytes = __iso_volatile_load64 ( _Mem );


        switch ( static_cast < unsigned int > ( _Order ) ) { case _Atomic_memory_order_relaxed : break; case _Atomic_memory_order_consume : case _Atomic_memory_order_acquire : case _Atomic_memory_order_seq_cst :                                                                                                                                                                                                        __pragma(warning(push))                                                                                                                                                                                                                                __pragma(warning(disable : 4996)) _ReadWriteBarrier ( )                                                                                                                                                                                                                                                                                      __pragma(warning(pop)); break; case _Atomic_memory_order_release : case _Atomic_memory_order_acq_rel : default : do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic", 1124, 0, "%s", "Invalid memory order" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x49\x6e\x76\x61\x6c\x69\x64\x20\x6d\x65\x6d\x6f\x72\x79\x20\x6f\x72\x64\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x61\x74\x6f\x6d\x69\x63" L"", 1124, 0 ); } while ( false ); break; }

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }











    _TVal exchange ( const _TVal _Value, const memory_order _Order = memory_order_seq_cst ) noexcept {

        long long _As_bytes;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _As_bytes = _InterlockedExchange64 ( _Atomic_address_as < long long > ( _Storage ), _Atomic_reinterpret_as < long long > ( _Value ) );

        return reinterpret_cast < _TVal & > ( _As_bytes );
    }


    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Expected_bytes = _Atomic_reinterpret_as < long long > ( _Expected );
        long long _Prev_bytes;






















        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Prev_bytes = _InterlockedCompareExchange64 ( _Atomic_address_as < long long > ( _Storage ), _Atomic_reinterpret_as < long long > ( _Desired ), _Expected_bytes );

        if ( _Prev_bytes == _Expected_bytes ) {
            return true;
        }

        :: memcpy ( :: std :: addressof ( _Expected ), & _Prev_bytes, sizeof ( _TVal ) );
        return false;
    }















    typename _Atomic_storage_types < _Ty > :: _TStorage _Storage;
};
#line 1202 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_storage < _Ty &, 16 > {

    using _TVal = remove_reference_t < _Ty & >;

    _Atomic_storage ( ) = default;

     constexpr _Atomic_storage ( conditional_t < is_reference_v < _Ty & >, _Ty &, const _TVal > _Value ) noexcept
        : _Storage { _Value } { }

    void store ( const _TVal _Value ) noexcept {
        ( void ) exchange ( _Value );
    }

    void store ( const _TVal _Value, const memory_order _Order ) noexcept {
        _Check_store_memory_order ( _Order );
        ( void ) exchange ( _Value, _Order );
    }

    [ [ nodiscard ] ] _TVal load ( ) const noexcept {
        long long * const _Storage_ptr = const_cast < long long * > ( _Atomic_address_as < const long long > ( _Storage ) );
        _Int128 _Result { };
        ( void ) __std_atomic_compare_exchange_128 ( _Storage_ptr, 0, 0, & _Result . _Low );
        return reinterpret_cast < _TVal & > ( _Result );
    }

    [ [ nodiscard ] ] _TVal load ( const memory_order _Order ) const noexcept {























        _Check_load_memory_order ( _Order );
        return load ( );

    }

    _TVal exchange ( const _TVal _Value ) noexcept {
        _TVal _Result { _Value };
        while ( ! compare_exchange_strong ( _Result, _Value ) ) {
        }

        return _Result;
    }

    _TVal exchange ( const _TVal _Value, const memory_order _Order ) noexcept {
        _TVal _Result { _Value };
        while ( ! compare_exchange_strong ( _Result, _Value, _Order ) ) {
        }

        return _Result;
    }

    bool compare_exchange_strong ( _TVal & _Expected, const _TVal _Desired,
        const memory_order _Order = memory_order_seq_cst ) noexcept {
        _Int128 _Desired_bytes { };
        :: memcpy ( & _Desired_bytes, :: std :: addressof ( _Desired ), sizeof ( _TVal ) );
        _Int128 _Expected_temp { };
        :: memcpy ( & _Expected_temp, :: std :: addressof ( _Expected ), sizeof ( _TVal ) );
        unsigned char _Result;







































        ( void ) _Order;
        _Result = __std_atomic_compare_exchange_128 (
            & reinterpret_cast < long long & > ( _Storage ), _Desired_bytes . _High, _Desired_bytes . _Low, & _Expected_temp . _Low );

        if ( _Result == 0 ) {
            :: memcpy ( :: std :: addressof ( _Expected ), & _Expected_temp, sizeof ( _TVal ) );
        }

        return _Result != 0;
    }









































    struct _Int128 {
        alignas ( 16 ) long long _Low;
        long long _High;
    };

    typename _Atomic_storage_types < _Ty & > :: _TStorage _Storage;
};
#line 1379 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template< class _Ty, size_t  = sizeof(_Ty)> struct _Atomic_integral; 
#line 1382
template < class _Ty >
struct _Atomic_integral < _Ty, 1 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        char _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor8 ( _Atomic_address_as < char > ( this -> _Storage ), static_cast < char > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        return static_cast < _TVal > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), 1 ) );
    }

    _TVal operator ++ ( ) noexcept {
        unsigned char _Before =
            static_cast < unsigned char > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), 1 ) );
        ++ _Before;
        return static_cast < _TVal > ( _Before );
    }

    _TVal operator -- ( int ) noexcept {
        return static_cast < _TVal > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), - 1 ) );
    }

    _TVal operator -- ( ) noexcept {
        unsigned char _Before =
            static_cast < unsigned char > ( _InterlockedExchangeAdd8 ( _Atomic_address_as < char > ( this -> _Storage ), - 1 ) );
        -- _Before;
        return static_cast < _TVal > ( _Before );
    }
};
#line 1440 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 2 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        short _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor16 ( _Atomic_address_as < short > ( this -> _Storage ), static_cast < short > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned short _After =
            static_cast < unsigned short > ( _InterlockedIncrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned short _After =
            static_cast < unsigned short > ( _InterlockedDecrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement16 ( _Atomic_address_as < short > ( this -> _Storage ) ) );
    }
};
#line 1498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 4 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;

    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor ( _Atomic_address_as < long > ( this -> _Storage ), static_cast < long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned long _After =
            static_cast < unsigned long > ( _InterlockedIncrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned long _After =
            static_cast < unsigned long > ( _InterlockedDecrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement ( _Atomic_address_as < long > ( this -> _Storage ) ) );
    }
};
#line 1556 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_integral < _Ty, 8 > : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using typename _Base :: _TVal;

    using _Base :: _Base;























































    _TVal fetch_add ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_and ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedAnd64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_or ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedOr64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal fetch_xor ( const _TVal _Operand, const memory_order _Order = memory_order_seq_cst ) noexcept {
        long long _Result;
        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedXor64 ( _Atomic_address_as < long long > ( this -> _Storage ), static_cast < long long > ( _Operand ) );

        return static_cast < _TVal > ( _Result );
    }

    _TVal operator ++ ( int ) noexcept {
        unsigned long long _After =
            static_cast < unsigned long long > ( _InterlockedIncrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
        -- _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator ++ ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedIncrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
    }

    _TVal operator -- ( int ) noexcept {
        unsigned long long _After =
            static_cast < unsigned long long > ( _InterlockedDecrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
        ++ _After;
        return static_cast < _TVal > ( _After );
    }

    _TVal operator -- ( ) noexcept {
        return static_cast < _TVal > ( _InterlockedDecrement64 ( _Atomic_address_as < long long > ( this -> _Storage ) ) );
    }

};
#line 1670 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template< size_t _TypeSize> constexpr bool 
#line 1671
_Is_always_lock_free = ((_TypeSize <= (8)) && ((_TypeSize & (_TypeSize - (1))) == (0))); 
#line 1682 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template< class _Ty, bool _Is_lock_free = _Is_always_lock_free< sizeof(_Ty)> > constexpr bool 
#line 1683
_Deprecate_non_lock_free_volatile = true; 
#line 1685
template< class _Ty> constexpr bool 
#line 1686
_Deprecate_non_lock_free_volatile< _Ty, false>  = true; 
#line 1688
template < class _Ty >
struct _Atomic_integral_facade : _Atomic_integral < _Ty > {

    using _Base = _Atomic_integral < _Ty >;
    using difference_type = _Ty;

    using _Base :: _Base;






    using _Base :: fetch_add;
    _Ty fetch_add ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand );
    }

    _Ty fetch_add ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand, _Order );
    }

    [ [ nodiscard ] ] static _Ty _Negate ( const _Ty _Value ) noexcept {
        return static_cast < _Ty > ( 0U - static_cast < make_unsigned_t < _Ty >> ( _Value ) );
    }

    _Ty fetch_sub ( const _Ty _Operand ) noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand ) volatile noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    using _Base :: fetch_and;
    _Ty fetch_and ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand, _Order );
    }

    using _Base :: fetch_or;
    _Ty fetch_or ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand );
    }

    _Ty fetch_or ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand, _Order );
    }

    using _Base :: fetch_xor;
    _Ty fetch_xor ( const _Ty _Operand ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand );
    }

    _Ty fetch_xor ( const _Ty _Operand, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand, _Order );
    }

    using _Base :: operator ++;
    _Ty operator ++ ( int ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( 0 );
    }

    _Ty operator ++ ( ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( );
    }

    using _Base :: operator --;
    _Ty operator -- ( int ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( 0 );
    }

    _Ty operator -- ( ) volatile noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( );
    }

    _Ty operator += ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator += ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( fetch_sub ( _Operand ) - _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> fetch_sub ( _Operand ) - _Operand );
    }

    _Ty operator &= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator &= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) noexcept {
        return static_cast < _Ty > ( this -> _Base :: fetch_xor ( _Operand ) ^ _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) volatile noexcept {
        return static_cast < _Ty > ( const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand ) ^ _Operand );
    }
};
#line 1816
template < class _Ty >
struct _Atomic_integral_facade < _Ty & > : _Atomic_integral < _Ty & > {

    using _Base = _Atomic_integral < _Ty & >;
    using difference_type = _Ty;

    using _Base :: _Base;

    [ [ nodiscard ] ] static _Ty _Negate ( const _Ty _Value ) noexcept {
        return static_cast < _Ty > ( 0U - static_cast < make_unsigned_t < _Ty >> ( _Value ) );
    }

    _Ty fetch_add ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand );
    }

    _Ty fetch_add ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_add ( _Operand, _Order );
    }

    _Ty fetch_sub ( const _Ty _Operand ) const noexcept {
        return fetch_add ( _Negate ( _Operand ) );
    }

    _Ty fetch_sub ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return fetch_add ( _Negate ( _Operand ), _Order );
    }

    _Ty operator ++ ( int ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( 0 );
    }

    _Ty operator ++ ( ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator ++ ( );
    }

    _Ty operator -- ( int ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( 0 );
    }

    _Ty operator -- ( ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: operator -- ( );
    }

    _Ty operator += ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_add ( _Operand ) + _Operand );
    }

    _Ty operator -= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_sub ( _Operand ) - _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand );
    }

    _Ty fetch_and ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_and ( _Operand, _Order );
    }

    _Ty fetch_or ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand );
    }

    _Ty fetch_or ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_or ( _Operand, _Order );
    }

    _Ty fetch_xor ( const _Ty _Operand ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand );
    }

    _Ty fetch_xor ( const _Ty _Operand, const memory_order _Order ) const noexcept {
        return const_cast < _Atomic_integral_facade * > ( this ) -> _Base :: fetch_xor ( _Operand, _Order );
    }

    _Ty operator &= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_and ( _Operand ) & _Operand );
    }

    _Ty operator |= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_or ( _Operand ) | _Operand );
    }

    _Ty operator ^= ( const _Ty _Operand ) const noexcept {
        return static_cast < _Ty > ( fetch_xor ( _Operand ) ^ _Operand );
    }
};
#line 1996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_pointer : _Atomic_storage < _Ty > {
    using _Base = _Atomic_storage < _Ty >;
    using difference_type = ptrdiff_t;

    using _Base :: _Base;

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order = memory_order_seq_cst ) noexcept {
        const ptrdiff_t _Shift_bytes =
            static_cast < ptrdiff_t > ( static_cast < size_t > ( _Diff ) * sizeof ( remove_pointer_t < _Ty > ) );
        ptrdiff_t _Result;




        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), _Shift_bytes );


        return reinterpret_cast < _Ty > ( _Result );
    }



    _Ty fetch_add ( const ptrdiff_t _Diff ) volatile noexcept {
        return const_cast < _Atomic_pointer * > ( this ) -> fetch_add ( _Diff );
    }

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order ) volatile noexcept {
        return const_cast < _Atomic_pointer * > ( this ) -> fetch_add ( _Diff, _Order );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty operator ++ ( int ) volatile noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( int ) noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( ) volatile noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator ++ ( ) noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator -- ( int ) volatile noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( int ) noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( ) volatile noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator -- ( ) noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) volatile noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }
};
#line 2092 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct _Atomic_pointer < _Ty & > : _Atomic_storage < _Ty & > {
    using _Base = _Atomic_storage < _Ty & >;
    using difference_type = ptrdiff_t;

    using _Base :: _Base;

    _Ty fetch_add ( const ptrdiff_t _Diff, const memory_order _Order = memory_order_seq_cst ) const noexcept {
        const ptrdiff_t _Shift_bytes =
            static_cast < ptrdiff_t > ( static_cast < size_t > ( _Diff ) * sizeof ( remove_pointer_t < _Ty > ) );
        ptrdiff_t _Result;




        _Check_memory_order ( static_cast < unsigned int > ( _Order ) ); _Result = _InterlockedExchangeAdd64 ( _Atomic_address_as < long long > ( this -> _Storage ), _Shift_bytes );


        return reinterpret_cast < _Ty > ( _Result );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) );
    }

    _Ty fetch_sub ( const ptrdiff_t _Diff, const memory_order _Order ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ), _Order );
    }

    _Ty operator ++ ( int ) const noexcept {
        return fetch_add ( 1 );
    }

    _Ty operator ++ ( ) const noexcept {
        return fetch_add ( 1 ) + 1;
    }

    _Ty operator -- ( int ) const noexcept {
        return fetch_add ( - 1 );
    }

    _Ty operator -- ( ) const noexcept {
        return fetch_add ( - 1 ) - 1;
    }

    _Ty operator += ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( _Diff ) + _Diff;
    }

    _Ty operator -= ( const ptrdiff_t _Diff ) const noexcept {
        return fetch_add ( static_cast < ptrdiff_t > ( 0 - static_cast < size_t > ( _Diff ) ) ) - _Diff;
    }
};
#line 2149 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template< class _TVal, class _Ty = _TVal> using _Choose_atomic_base2_t = typename _Select< is_integral_v< _TVal>  && (!is_same_v< bool, _TVal> )> ::template _Apply< _Atomic_integral_facade< _Ty> , typename _Select< is_pointer_v< _TVal>  && is_object_v< remove_pointer_t< _TVal> > > ::template _Apply< _Atomic_pointer< _Ty> , _Atomic_storage< _Ty> > > ; 
#line 2160 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template< class _TVal, class _Ty = _TVal> using _Choose_atomic_base_t = _Choose_atomic_base2_t< _TVal, _Ty> ; 
#line 2164 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
struct atomic : _Choose_atomic_base_t < _Ty > {
private :
    using _Base = _Choose_atomic_base_t < _Ty >;

public :
    static_assert ( is_trivially_copyable_v < _Ty > && is_copy_constructible_v < _Ty > && is_move_constructible_v < _Ty >
                      && is_copy_assignable_v < _Ty > && is_move_assignable_v < _Ty >,
        "atomic<T> requires T to be trivially copyable, copy constructible, move constructible, copy assignable, and move assignable."
                              );

    using value_type = _Ty;

    using _Base :: _Base;

    constexpr atomic ( ) noexcept ( is_nothrow_default_constructible_v < _Ty > ) : _Base ( ) { }

    atomic ( const atomic & ) = delete;
    atomic & operator = ( const atomic & ) = delete;






    [ [ nodiscard ] ] bool is_lock_free ( ) const volatile noexcept {
        constexpr bool _Result = sizeof ( _Ty ) <= 8 && ( sizeof ( _Ty ) & sizeof ( _Ty ) - 1 ) == 0;
        return _Result;
    }












    [ [ nodiscard ] ] bool is_lock_free ( ) const noexcept {
        return static_cast < const volatile atomic * > ( this ) -> is_lock_free ( );
    }

    _Ty operator = ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        this -> store ( _Value );
        return _Value;
    }

    _Ty operator = ( const _Ty _Value ) noexcept {
        this -> store ( _Value );
        return _Value;
    }






    using _Base :: store;
    void store ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        const_cast < atomic * > ( this ) -> _Base :: store ( _Value );
    }

    void store ( const _Ty _Value, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        const_cast < atomic * > ( this ) -> _Base :: store ( _Value, _Order );
    }

    using _Base :: load;
    [ [ nodiscard ] ] _Ty load ( ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < const atomic * > ( this ) -> _Base :: load ( );
    }

    [ [ nodiscard ] ] _Ty load ( const memory_order _Order ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < const atomic * > ( this ) -> _Base :: load ( _Order );
    }

    using _Base :: exchange;
    _Ty exchange ( const _Ty _Value ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: exchange ( _Value );
    }

    _Ty exchange ( const _Ty _Value, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: exchange ( _Value, _Order );
    }

    using _Base :: compare_exchange_strong;
    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return const_cast < atomic * > ( this ) -> _Base :: compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_strong ( _Ty & _Expected, const _Ty _Desired, const memory_order _Success,
        const memory_order _Failure ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_strong (
        _Ty & _Expected, const _Ty _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired ) volatile noexcept {

        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Order ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Order );
    }

    bool compare_exchange_weak ( _Ty & _Expected, const _Ty _Desired, const memory_order _Success,
        const memory_order _Failure ) volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }

    bool compare_exchange_weak (
        _Ty & _Expected, const _Ty _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
        return this -> compare_exchange_strong ( _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
    }


















    operator _Ty ( ) const volatile noexcept {
        static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
        return this -> load ( );
    }

    operator _Ty ( ) const noexcept {
        return this -> load ( );
    }
};
#line 2452 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
template < class _Ty >
[ [ nodiscard ] ] bool atomic_is_lock_free ( const volatile atomic < _Ty > * _Mem ) noexcept {
    return _Mem -> is_lock_free ( );
}
#line 2457
template < class _Ty >
[ [ nodiscard ] ] bool atomic_is_lock_free ( const atomic < _Ty > * _Mem ) noexcept {
    return _Mem -> is_lock_free ( );
}
#line 2462
template < class _Ty >
void atomic_store ( volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    _Mem -> store ( _Value );
}
#line 2468
template < class _Ty >
void atomic_store ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    _Mem -> store ( _Value );
}
#line 2473
template < class _Ty >
void atomic_store_explicit (
    volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    _Mem -> store ( _Value, _Order );
}
#line 2480
template < class _Ty >
void atomic_store_explicit ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    _Mem -> store ( _Value, _Order );
}
#line 2485
template < class _Ty >
 void atomic_init (
    volatile atomic < _Ty > * const _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    :: std :: atomic_store_explicit ( _Mem, _Value, memory_order_relaxed );
}
#line 2492
template < class _Ty >
 void atomic_init (
    atomic < _Ty > * const _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    :: std :: atomic_store_explicit ( _Mem, _Value, memory_order_relaxed );
}
#line 2498
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load ( const volatile atomic < _Ty > * const _Mem ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> load ( );
}
#line 2504
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load ( const atomic < _Ty > * const _Mem ) noexcept {
    return _Mem -> load ( );
}
#line 2509
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load_explicit ( const volatile atomic < _Ty > * const _Mem, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> load ( _Order );
}
#line 2515
template < class _Ty >
[ [ nodiscard ] ] _Ty atomic_load_explicit ( const atomic < _Ty > * const _Mem, const memory_order _Order ) noexcept {
    return _Mem -> load ( _Order );
}
#line 2520
template < class _Ty >
_Ty atomic_exchange ( volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> exchange ( _Value );
}
#line 2526
template < class _Ty >
_Ty atomic_exchange ( atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value ) noexcept {
    return _Mem -> exchange ( _Value );
}
#line 2531
template < class _Ty >
_Ty atomic_exchange_explicit (
    volatile atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> exchange ( _Value, _Order );
}
#line 2538
template < class _Ty >
_Ty atomic_exchange_explicit (
    atomic < _Ty > * const _Mem, const _Identity_t < _Ty > _Value, const memory_order _Order ) noexcept {
    return _Mem -> exchange ( _Value, _Order );
}
#line 2544
template < class _Ty >
bool atomic_compare_exchange_strong (
    volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2551
template < class _Ty >
bool atomic_compare_exchange_strong (
    atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2557
template < class _Ty >
bool atomic_compare_exchange_strong_explicit ( volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2564
template < class _Ty >
bool atomic_compare_exchange_strong_explicit ( atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2570
template < class _Ty >
bool atomic_compare_exchange_weak (
    volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2577
template < class _Ty >
bool atomic_compare_exchange_weak (
    atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected, const _Identity_t < _Ty > _Desired ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired );
}
#line 2583
template < class _Ty >
bool atomic_compare_exchange_weak_explicit ( volatile atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2590
template < class _Ty >
bool atomic_compare_exchange_weak_explicit ( atomic < _Ty > * const _Mem, _Identity_t < _Ty > * const _Expected,
    const _Identity_t < _Ty > _Desired, const memory_order _Success, const memory_order _Failure ) noexcept {
    return _Mem -> compare_exchange_strong ( * _Expected, _Desired, _Combine_cas_memory_orders ( _Success, _Failure ) );
}
#line 2596
template < class _Ty >
_Ty atomic_fetch_add ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_add ( _Value );
}
#line 2602
template < class _Ty >
_Ty atomic_fetch_add ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    return _Mem -> fetch_add ( _Value );
}
#line 2607
template < class _Ty >
_Ty atomic_fetch_add_explicit ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value,
    const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_add ( _Value, _Order );
}
#line 2614
template < class _Ty >
_Ty atomic_fetch_add_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_add ( _Value, _Order );
}
#line 2620
template < class _Ty >
_Ty atomic_fetch_sub ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_sub ( _Value );
}
#line 2626
template < class _Ty >
_Ty atomic_fetch_sub ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value ) noexcept {
    return _Mem -> fetch_sub ( _Value );
}
#line 2631
template < class _Ty >
_Ty atomic_fetch_sub_explicit ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value,
    const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_sub ( _Value, _Order );
}
#line 2638
template < class _Ty >
_Ty atomic_fetch_sub_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: difference_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_sub ( _Value, _Order );
}
#line 2644
template < class _Ty >
_Ty atomic_fetch_and ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_and ( _Value );
}
#line 2650
template < class _Ty >
_Ty atomic_fetch_and ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_and ( _Value );
}
#line 2655
template < class _Ty >
_Ty atomic_fetch_and_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_and ( _Value, _Order );
}
#line 2662
template < class _Ty >
_Ty atomic_fetch_and_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_and ( _Value, _Order );
}
#line 2668
template < class _Ty >
_Ty atomic_fetch_or ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_or ( _Value );
}
#line 2674
template < class _Ty >
_Ty atomic_fetch_or ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_or ( _Value );
}
#line 2679
template < class _Ty >
_Ty atomic_fetch_or_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_or ( _Value, _Order );
}
#line 2686
template < class _Ty >
_Ty atomic_fetch_or_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_or ( _Value, _Order );
}
#line 2692
template < class _Ty >
_Ty atomic_fetch_xor ( volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_xor ( _Value );
}
#line 2698
template < class _Ty >
_Ty atomic_fetch_xor ( atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value ) noexcept {
    return _Mem -> fetch_xor ( _Value );
}
#line 2703
template < class _Ty >
_Ty atomic_fetch_xor_explicit (
    volatile atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    static_assert ( _Deprecate_non_lock_free_volatile < _Ty >, "Never fails" );
    return _Mem -> fetch_xor ( _Value, _Order );
}
#line 2710
template < class _Ty >
_Ty atomic_fetch_xor_explicit (
    atomic < _Ty > * _Mem, const typename atomic < _Ty > :: value_type _Value, const memory_order _Order ) noexcept {
    return _Mem -> fetch_xor ( _Value, _Order );
}
#line 2764 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
using atomic_bool = atomic< bool> ; 
#line 2766
using atomic_char = atomic< char> ; 
#line 2767
using atomic_schar = atomic< signed char> ; 
#line 2768
using atomic_uchar = atomic< unsigned char> ; 
#line 2769
using atomic_short = atomic< short> ; 
#line 2770
using atomic_ushort = atomic< unsigned short> ; 
#line 2771
using atomic_int = atomic< int> ; 
#line 2772
using atomic_uint = atomic< unsigned> ; 
#line 2773
using atomic_long = atomic< long> ; 
#line 2774
using atomic_ulong = atomic< unsigned long> ; 
#line 2775
using atomic_llong = atomic< __int64> ; 
#line 2776
using atomic_ullong = atomic< unsigned __int64> ; 
#line 2781
using atomic_char16_t = atomic< char16_t> ; 
#line 2782
using atomic_char32_t = atomic< char32_t> ; 
#line 2783
using atomic_wchar_t = atomic< __wchar_t> ; 
#line 2785
using atomic_int8_t = atomic< signed char> ; 
#line 2786
using atomic_uint8_t = atomic< unsigned char> ; 
#line 2787
using atomic_int16_t = atomic< short> ; 
#line 2788
using atomic_uint16_t = atomic< unsigned short> ; 
#line 2789
using atomic_int32_t = atomic< int> ; 
#line 2790
using atomic_uint32_t = atomic< unsigned> ; 
#line 2791
using atomic_int64_t = atomic< __int64> ; 
#line 2792
using atomic_uint64_t = atomic< unsigned __int64> ; 
#line 2794
using atomic_int_least8_t = atomic< signed char> ; 
#line 2795
using atomic_uint_least8_t = atomic< unsigned char> ; 
#line 2796
using atomic_int_least16_t = atomic< short> ; 
#line 2797
using atomic_uint_least16_t = atomic< unsigned short> ; 
#line 2798
using atomic_int_least32_t = atomic< int> ; 
#line 2799
using atomic_uint_least32_t = atomic< unsigned> ; 
#line 2800
using atomic_int_least64_t = atomic< __int64> ; 
#line 2801
using atomic_uint_least64_t = atomic< unsigned __int64> ; 
#line 2803
using atomic_int_fast8_t = atomic< signed char> ; 
#line 2804
using atomic_uint_fast8_t = atomic< unsigned char> ; 
#line 2805
using atomic_int_fast16_t = atomic< int> ; 
#line 2806
using atomic_uint_fast16_t = atomic< unsigned> ; 
#line 2807
using atomic_int_fast32_t = atomic< int> ; 
#line 2808
using atomic_uint_fast32_t = atomic< unsigned> ; 
#line 2809
using atomic_int_fast64_t = atomic< __int64> ; 
#line 2810
using atomic_uint_fast64_t = atomic< unsigned __int64> ; 
#line 2812
using atomic_intptr_t = atomic< __int64> ; 
#line 2813
using atomic_uintptr_t = atomic< unsigned __int64> ; 
#line 2814
using atomic_size_t = atomic< unsigned __int64> ; 
#line 2815
using atomic_ptrdiff_t = atomic< __int64> ; 
#line 2816
using atomic_intmax_t = atomic< __int64> ; 
#line 2817
using atomic_uintmax_t = atomic< unsigned __int64> ; 
#line 2829 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
struct atomic_flag { 
#line 2840 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
bool test_and_set(const memory_order _Order = memory_order_seq_cst) noexcept { 
#line 2841
return (_Storage).exchange(true, _Order) != (0); 
#line 2842
} 
#line 2844
bool test_and_set(const memory_order _Order = memory_order_seq_cst) volatile noexcept { 
#line 2845
return (_Storage).exchange(true, _Order) != (0); 
#line 2846
} 
#line 2848
void clear(const memory_order _Order = memory_order_seq_cst) noexcept { 
#line 2849
(_Storage).store(false, _Order); 
#line 2850
} 
#line 2852
void clear(const memory_order _Order = memory_order_seq_cst) volatile noexcept { 
#line 2853
(_Storage).store(false, _Order); 
#line 2854
} 
#line 2856
constexpr atomic_flag() noexcept = default;
#line 2885 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
atomic< long>  _Storage; 
#line 2889 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
}; 
#line 2911 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
inline bool atomic_flag_test_and_set(atomic_flag *const _Flag) noexcept { 
#line 2912
return _Flag->test_and_set(); 
#line 2913
} 
#line 2915
inline bool atomic_flag_test_and_set(volatile atomic_flag *const _Flag) noexcept { 
#line 2916
return _Flag->test_and_set(); 
#line 2917
} 
#line 2919
inline bool atomic_flag_test_and_set_explicit(atomic_flag *const 
#line 2920
_Flag, const memory_order _Order) noexcept { 
#line 2921
return _Flag->test_and_set(_Order); 
#line 2922
} 
#line 2924
inline bool atomic_flag_test_and_set_explicit(volatile atomic_flag *const 
#line 2925
_Flag, const memory_order _Order) noexcept { 
#line 2926
return _Flag->test_and_set(_Order); 
#line 2927
} 
#line 2929
inline void atomic_flag_clear(atomic_flag *const _Flag) noexcept { 
#line 2930
_Flag->clear(); 
#line 2931
} 
#line 2933
inline void atomic_flag_clear(volatile atomic_flag *const _Flag) noexcept { 
#line 2934
_Flag->clear(); 
#line 2935
} 
#line 2937
inline void atomic_flag_clear_explicit(atomic_flag *const _Flag, const memory_order _Order) noexcept { 
#line 2938
_Flag->clear(_Order); 
#line 2939
} 
#line 2941
inline void atomic_flag_clear_explicit(volatile atomic_flag *const 
#line 2942
_Flag, const memory_order _Order) noexcept { 
#line 2943
_Flag->clear(_Order); 
#line 2944
} 
#line 3045 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\atomic"
}
#line 3071
#pragma warning(pop)
#pragma pack ( pop )
#line 24 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 37
namespace std { 
#line 38
enum class io_errc { 
#line 39
stream = 1
#line 40
}; 
#line 42
template< class _Enum> 
#line 43
struct is_error_code_enum : public false_type { }; 
#line 46
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
#line 48
template< class _Ty> constexpr bool 
#line 49
is_error_code_enum_v = (is_error_code_enum< _Ty> ::value); 
#line 51
template< class _Enum> 
#line 52
struct is_error_condition_enum : public false_type { }; 
#line 55
template<> struct is_error_condition_enum< errc>  : public true_type { }; 
#line 57
template< class _Ty> constexpr bool 
#line 58
is_error_condition_enum_v = (is_error_condition_enum< _Ty> ::value); 
#line 60
class error_code; 
#line 61
class error_condition; 
#line 63
namespace _Ensure_adl { 
#line 64
inline void make_error_code() = delete;
#line 65
inline void make_error_condition() = delete;
#line 66
}
#line 68
class error_category; 
#line 70
[[nodiscard]] inline const error_category &generic_category() noexcept; 
#line 71
[[nodiscard]] inline const error_category &iostream_category() noexcept; 
#line 72
[[nodiscard]] inline const error_category &system_category() noexcept; 
#line 74
class __declspec(novtable) error_category { 
#line 81
#pragma warning(push)
#pragma warning(disable : 4355)
public: constexpr error_category() noexcept : _Addr(this) { } 
#pragma warning(pop)
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
virtual ~error_category() noexcept = default;
#line 89
[[nodiscard]] virtual const char *name() const noexcept = 0; 
#line 91
[[nodiscard]] virtual string message(int _Errval) const = 0; 
#line 93
[[nodiscard]] inline virtual error_condition default_error_condition(int _Errval) const noexcept; 
#line 95
[[nodiscard]] inline virtual bool equivalent(int _Errval, const error_condition & _Cond) const noexcept; 
#line 97
[[nodiscard]] inline virtual bool equivalent(const error_code & _Code, int _Errval) const noexcept; 
#line 99
[[nodiscard]] bool operator==(const error_category &_Right) const noexcept { 
#line 103
return _Bit_cast< unsigned __int64> (_Addr) == _Bit_cast< unsigned __int64> (_Right._Addr); 
#line 105 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
} 
#line 108
[[nodiscard]] bool operator!=(const error_category &_Right) const noexcept { 
#line 109
return !((*this) == _Right); 
#line 110
} 
#line 118 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
[[nodiscard]] bool operator<(const error_category &_Right) const noexcept { 
#line 122
return _Bit_cast< unsigned __int64> (_Addr) < _Bit_cast< unsigned __int64> (_Right._Addr); 
#line 124 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
} 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
error_category(const error_category &) = delete;
#line 128
error_category &operator=(const error_category &) = delete;
#line 134
protected: union _Addr_storage { 
#line 136
private: uintptr_t _Num; 
#line 137
error_category *_Ptr; 
#line 140
public: constexpr explicit _Addr_storage(const uintptr_t _Addr_num) noexcept : _Num(_Addr_num) { } 
#line 141
constexpr explicit _Addr_storage(error_category *const _Addr_ptr) noexcept : _Ptr(_Addr_ptr) { } 
#line 144
constexpr _Addr_storage &operator=(const uintptr_t _Addr_num) noexcept { 
#line 145
(_Num) = _Addr_num; 
#line 146
return *this; 
#line 147
} 
#line 148
}; 
#line 152
_Addr_storage _Addr; 
#line 155 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
constexpr explicit error_category(const uintptr_t _Addr_) noexcept : _Addr(_Addr_) { } 
#line 157
enum: uintptr_t { 
#line 158
_Future_addr = 1Ui64, 
#line 159
_Generic_addr = 3Ui64, 
#line 160
_Iostream_addr = 5Ui64, 
#line 161
_System_addr = 7Ui64
#line 162
}; 
#line 163
}; 
#line 166
[[nodiscard]] inline bool _System_error_equal(const error_code &, const error_condition &) noexcept; 
#line 169 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
class error_code { 
#line 171
public: error_code() noexcept : _Myval(0), _Mycat(&::std::system_category()) { } 
#line 173
error_code(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) { } 
#line 175
template < class _Enum, enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
    error_code ( _Enum _Errcode ) noexcept : _Myval ( 0 ), _Mycat ( nullptr ) {
        using _Ensure_adl :: make_error_code;
        * this = make_error_code ( _Errcode );
    }
#line 181
void assign(int _Val, const error_category &_Cat) noexcept { 
#line 182
(_Myval) = _Val; 
#line 183
(_Mycat) = (&_Cat); 
#line 184
} 
#line 186
template < class _Enum, enable_if_t < is_error_code_enum_v < _Enum >, int > = 0 >
    error_code & operator = ( _Enum _Errcode ) noexcept {
        using _Ensure_adl :: make_error_code;
        * this = make_error_code ( _Errcode );
        return * this;
    }
#line 193
void clear() noexcept { 
#line 194
(_Myval) = 0; 
#line 195
(_Mycat) = (&::std::system_category()); 
#line 196
} 
#line 198
[[nodiscard]] int value() const noexcept { 
#line 199
return _Myval; 
#line 200
} 
#line 202
[[nodiscard]] const error_category &category() const noexcept { 
#line 203
return *(_Mycat); 
#line 204
} 
#line 206
[[nodiscard]] inline error_condition default_error_condition() const noexcept; 
#line 208
[[nodiscard]] string message() const { 
#line 209
return this->category().message(this->value()); 
#line 210
} 
#line 212
explicit operator bool() const noexcept { 
#line 213
return this->value() != 0; 
#line 214
} 
#line 217
friend inline bool operator==(const error_code &_Left, const error_code &_Right) noexcept { 
#line 218
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 219
} 
#line 221
friend inline bool operator==(const error_code &_Left, const std::error_condition &_Right) noexcept { 
#line 222
return _System_error_equal(_Left, _Right); 
#line 223
} 
#line 233
friend inline bool operator<(const error_code &_Left, const error_code &_Right) noexcept { 
#line 234
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 236
} 
#line 239 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
friend inline bool operator==(const std::error_condition &_Left, const error_code &_Right) noexcept { 
#line 240
return _System_error_equal(_Right, _Left); 
#line 241
} 
#line 243
friend inline bool operator!=(const error_code &_Left, const error_code &_Right) noexcept { 
#line 244
return !(_Left == _Right); 
#line 245
} 
#line 247
friend inline bool operator!=(const error_code &_Left, const std::error_condition &_Right) noexcept { 
#line 248
return !_System_error_equal(_Left, _Right); 
#line 249
} 
#line 251
friend inline bool operator!=(const std::error_condition &_Left, const error_code &_Right) noexcept { 
#line 252
return !_System_error_equal(_Right, _Left); 
#line 253
} 
#line 258 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
private: int _Myval; 
#line 259
const error_category *_Mycat; 
#line 260
}; 
#line 262
class error_condition { 
#line 264
public: error_condition() noexcept : _Myval(0), _Mycat(&::std::generic_category()) { } 
#line 266
error_condition(int _Val, const error_category &_Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) { } 
#line 268
template < class _Enum, enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
    error_condition ( _Enum _Errcode ) noexcept : _Myval ( 0 ), _Mycat ( nullptr ) {
        using _Ensure_adl :: make_error_condition;
        * this = make_error_condition ( _Errcode );
    }
#line 274
void assign(int _Val, const error_category &_Cat) noexcept { 
#line 275
(_Myval) = _Val; 
#line 276
(_Mycat) = (&_Cat); 
#line 277
} 
#line 279
template < class _Enum, enable_if_t < is_error_condition_enum_v < _Enum >, int > = 0 >
    error_condition & operator = ( _Enum _Errcode ) noexcept {
        using _Ensure_adl :: make_error_condition;
        * this = make_error_condition ( _Errcode );
        return * this;
    }
#line 286
void clear() noexcept { 
#line 287
(_Myval) = 0; 
#line 288
(_Mycat) = (&::std::generic_category()); 
#line 289
} 
#line 291
[[nodiscard]] int value() const noexcept { 
#line 292
return _Myval; 
#line 293
} 
#line 295
[[nodiscard]] const error_category &category() const noexcept { 
#line 296
return *(_Mycat); 
#line 297
} 
#line 299
[[nodiscard]] string message() const { 
#line 300
return this->category().message(this->value()); 
#line 301
} 
#line 303
explicit operator bool() const noexcept { 
#line 304
return this->value() != 0; 
#line 305
} 
#line 308
friend inline bool operator==(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 309
return ((_Left.category()) == (_Right.category())) && (_Left.value() == _Right.value()); 
#line 310
} 
#line 321
friend inline bool operator<(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 322
return ((_Left.category()) < (_Right.category())) || (((_Left.category()) == (_Right.category())) && (_Left.value() < _Right.value())); 
#line 324
} 
#line 327 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
friend inline bool operator!=(const error_condition &_Left, const error_condition &_Right) noexcept { 
#line 328
return !(_Left == _Right); 
#line 329
} 
#line 335 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
friend inline bool operator==(const std::error_code & _Left, const error_condition & _Right) noexcept; 
#line 337
friend inline bool operator==(const error_condition & _Left, const std::error_code & _Right) noexcept; 
#line 338
friend inline bool operator!=(const std::error_code & _Left, const error_condition & _Right) noexcept; 
#line 339
friend inline bool operator!=(const error_condition & _Left, const std::error_code & _Right) noexcept; 
#line 344 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
private: int _Myval; 
#line 345
const error_category *_Mycat; 
#line 346
}; 
#line 349
[[nodiscard]] inline bool _System_error_equal(const error_code &_Left, const error_condition &_Right) noexcept { 
#line 350
return _Left.category().equivalent(_Left.value(), _Right) || _Right.category().equivalent(_Left, _Right.value()); 
#line 351
} 
#line 415 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
[[nodiscard]] inline error_condition error_category::default_error_condition(int _Errval) const noexcept { 
#line 417
return error_condition(_Errval, *this); 
#line 418
} 
#line 420
[[nodiscard]] inline bool error_category::equivalent(int _Errval, const error_condition &_Cond) const noexcept { 
#line 421
return ((this->default_error_condition(_Errval)) == _Cond); 
#line 422
} 
#line 424
[[nodiscard]] inline bool error_category::equivalent(const error_code &_Code, int _Errval) const noexcept { 
#line 425
return ((*this) == (_Code.category())) && (_Code.value() == _Errval); 
#line 426
} 
#line 428
[[nodiscard]] inline error_condition error_code::default_error_condition() const noexcept { 
#line 430
return this->category().default_error_condition(this->value()); 
#line 431
} 
#line 433
[[nodiscard]] inline error_code make_error_code(errc _Ec) noexcept { 
#line 434
return error_code(static_cast< int>(_Ec), ::std::generic_category()); 
#line 435
} 
#line 437
[[nodiscard]] inline error_code make_error_code(io_errc _Ec) noexcept { 
#line 438
return error_code(static_cast< int>(_Ec), ::std::iostream_category()); 
#line 439
} 
#line 441
[[nodiscard]] inline error_condition make_error_condition(errc _Ec) noexcept { 
#line 442
return error_condition(static_cast< int>(_Ec), ::std::generic_category()); 
#line 443
} 
#line 445
[[nodiscard]] inline error_condition make_error_condition(io_errc _Ec) noexcept { 
#line 446
return error_condition(static_cast< int>(_Ec), ::std::iostream_category()); 
#line 447
} 
#line 450
template<> struct hash< error_code>  { 
#line 451
using argument_type = error_code; 
#line 452
using result_type = size_t; 
#line 454
[[nodiscard]] size_t operator()(const error_code &_Keyval) const noexcept { 
#line 455
return std::hash< int> {}(_Keyval.value()); 
#line 456
} 
#line 457
}; 
#line 460
template<> struct hash< error_condition>  { 
#line 461
using argument_type = error_condition; 
#line 462
using result_type = size_t; 
#line 464
[[nodiscard]] size_t operator()(const error_condition &_Keyval) const noexcept { 
#line 465
return std::hash< int> {}(_Keyval.value()); 
#line 466
} 
#line 467
}; 
#line 469
class _System_error : public runtime_error { 
#line 471
static string _Makestr(error_code _Errcode, string _Message) { 
#line 472
if (!_Message.empty()) { 
#line 473
_Message.append(": "); 
#line 474
}  
#line 476
_Message.append(_Errcode.message()); 
#line 477
return _Message; 
#line 478
} 
#line 481
protected: _System_error(error_code _Errcode) : runtime_error(_Errcode.message()), _Mycode(_Errcode) { } 
#line 483
_System_error(error_code _Errcode, const string &_Message) : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) 
#line 484
{ } 
#line 486
error_code _Mycode; 
#line 487
}; 
#line 489
class system_error : public _System_error { 
#line 491
using _Mybase = _System_error; 
#line 494
public: system_error(error_code _Errcode) : _Mybase(_Errcode) { } 
#line 496
system_error(error_code _Errcode, const string &_Message) : _Mybase(_Errcode, _Message) { } 
#line 498
system_error(error_code _Errcode, const char *_Message) : _Mybase(_Errcode, _Message) { } 
#line 500
system_error(int _Errval, const error_category &_Errcat) : _Mybase(error_code(_Errval, _Errcat)) { } 
#line 502
system_error(int _Errval, const error_category &_Errcat, const string &_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 503
{ } 
#line 505
system_error(int _Errval, const error_category &_Errcat, const char *_Message) : _Mybase(error_code(_Errval, _Errcat), _Message) 
#line 506
{ } 
#line 508
[[nodiscard]] const error_code &code() const noexcept { 
#line 509
return _Mycode; 
#line 510
} 
#line 518 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
}; 
#line 520
[[noreturn]] inline void _Throw_system_error(const errc _Ec) { 
#line 521
throw system_error{::std::make_error_code(_Ec)}; 
#line 522
} 
#line 524
const char *__cdecl _Syserror_map(int); 
#line 525
int __cdecl _Winerror_map(int); 
#line 527
struct _System_error_message { 
#line 528
char *_Str; 
#line 529
size_t _Length; 
#line 531
explicit _System_error_message(const unsigned long _Ec) noexcept : _Str((nullptr)), _Length(::__std_system_error_allocate_message(_Ec, &(_Str))) 
#line 532
{ } 
#line 534
_System_error_message(const _System_error_message &) = delete;
#line 535
_System_error_message &operator=(const _System_error_message &) = delete;
#line 537
~_System_error_message() { 
#line 538
::__std_system_error_deallocate_message(_Str); 
#line 539
} 
#line 540
}; 
#line 542
class _Generic_error_category : public error_category { 
#line 544
public: constexpr _Generic_error_category() noexcept : error_category(_Generic_addr) { } 
#line 546
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 547
return "generic"; 
#line 548
} 
#line 550
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 551
return _Syserror_map(_Errcode); 
#line 552
} 
#line 553
}; 
#line 555
class _Iostream_error_category2 : public error_category { 
#line 557
public: constexpr _Iostream_error_category2() noexcept : error_category(_Iostream_addr) { } 
#line 559
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 560
return "iostream"; 
#line 561
} 
#line 563
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 564
if (_Errcode == (static_cast< int>(io_errc::stream))) { 
#line 565
static constexpr char _Iostream_error[] = "iostream stream error"; 
#line 566
constexpr size_t _Iostream_error_length = (sizeof _Iostream_error - (1)); 
#line 567
return string{_Iostream_error, _Iostream_error_length}; 
#line 568
} else { 
#line 569
return _Syserror_map(_Errcode); 
#line 570
}  
#line 571
} 
#line 572
}; 
#line 574
class _System_error_category : public error_category { 
#line 576
public: constexpr _System_error_category() noexcept : error_category(_System_addr) { } 
#line 578
[[nodiscard]] virtual const char *name() const noexcept override { 
#line 579
return "system"; 
#line 580
} 
#line 582
[[nodiscard]] virtual string message(int _Errcode) const override { 
#line 583
const _System_error_message _Msg(static_cast< unsigned long>(_Errcode)); 
#line 584
if ((_Msg._Length) == (0)) { 
#line 585
static constexpr char _Unknown_error[] = "unknown error"; 
#line 586
constexpr size_t _Unknown_error_length = (sizeof _Unknown_error - (1)); 
#line 587
return string{_Unknown_error, _Unknown_error_length}; 
#line 588
} else { 
#line 589
; 
#line 590
return string{_Msg._Str, _Msg._Length}; 
#line 591
}  
#line 592
} 
#line 594
[[nodiscard]] virtual error_condition default_error_condition(int _Errval) const noexcept override { 
#line 595
if (_Errval == 0) { 
#line 596
return error_condition(0, ::std::generic_category()); 
#line 597
}  
#line 600
const int _Posv = _Winerror_map(_Errval); 
#line 601
if (_Posv == 0) { 
#line 602
return error_condition(_Errval, ::std::system_category()); 
#line 603
} else { 
#line 604
return error_condition(_Posv, ::std::generic_category()); 
#line 605
}  
#line 606
} 
#line 607
}; 
#line 658 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
template < class _Ty >
struct _Constexpr_immortalize_impl {
    union {
        _Ty _Storage;
    };

    constexpr _Constexpr_immortalize_impl ( ) noexcept : _Storage { } { }

    _Constexpr_immortalize_impl ( const _Constexpr_immortalize_impl & ) = delete;
    _Constexpr_immortalize_impl & operator = ( const _Constexpr_immortalize_impl & ) = delete;

     ~ _Constexpr_immortalize_impl ( ) {

    }
};
#line 674
template < class _Ty >
[ [ nodiscard ] ] const _Ty & _Immortalize_memcpy_image ( ) noexcept {
    static _Constexpr_immortalize_impl < _Ty > _Static;
    return _Static . _Storage;
}
#line 700 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
[[nodiscard]] inline const error_category &generic_category() noexcept { 
#line 701
return _Immortalize_memcpy_image< _Generic_error_category> (); 
#line 702
} 
#line 704
[[nodiscard]] inline const error_category &iostream_category() noexcept { 
#line 705
return _Immortalize_memcpy_image< _Iostream_error_category2> (); 
#line 706
} 
#line 708
[[nodiscard]] inline const error_category &system_category() noexcept { 
#line 709
return _Immortalize_memcpy_image< _System_error_category> (); 
#line 710
} 
#line 711
}
#line 742 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\system_error"
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\typeinfo"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
#pragma warning(disable : 4275)
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
#pragma warning(push)
#pragma warning(disable: 4514 4820 )
#line 18
#pragma pack ( push, 8 )
#line 20
extern "C++" {
#line 27 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
struct __type_info_node; 
#line 33 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
extern __type_info_node __type_info_root_node; 
#line 36 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
}
#line 39
__pragma( pack ( push, 8 )) extern "C" {
#line 41
struct __std_type_info_data { 
#line 43
const char *_UndecoratedName; 
#line 44
const char _DecoratedName[1]; 
#line 45
__std_type_info_data() = delete;
#line 46
__std_type_info_data(const __std_type_info_data &) = delete;
#line 47
__std_type_info_data(__std_type_info_data &&) = delete;
#line 49
__std_type_info_data &operator=(const __std_type_info_data &) = delete;
#line 50
__std_type_info_data &operator=(__std_type_info_data &&) = delete;
#line 51
}; 
#line 53
int __cdecl __std_type_info_compare(const __std_type_info_data * _Lhs, const __std_type_info_data * _Rhs); 
#line 58
size_t __cdecl __std_type_info_hash(const __std_type_info_data * _Data); 
#line 62
const char *__cdecl __std_type_info_name(__std_type_info_data * _Data, __type_info_node * _RootNode); 
#line 67
}__pragma( pack ( pop )) 
#line 70
#pragma warning(push)
#pragma warning(disable: 4577)
extern "C++" {
#line 73
class type_info { 
#line 77
public: type_info(const type_info &) = delete;
#line 78
type_info &operator=(const type_info &) = delete;
#line 80
[[nodiscard]] size_t hash_code() const noexcept 
#line 81
{ 
#line 82
return __std_type_info_hash(&(_Data)); 
#line 83
} 
#line 85
[[nodiscard]] bool 
#line 89 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
operator==(const type_info &_Other) const noexcept 
#line 90
{ 
#line 98 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
return __std_type_info_compare(&(_Data), &(_Other._Data)) == 0; 
#line 99
} 
#line 102
[[nodiscard]] bool operator!=(const type_info &_Other) const noexcept 
#line 103
{ 
#line 104
return __std_type_info_compare(&(_Data), &(_Other._Data)) != 0; 
#line 105
} 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
[[nodiscard]] bool before(const type_info &_Other) const noexcept 
#line 109
{ 
#line 110
return __std_type_info_compare(&(_Data), &(_Other._Data)) < 0; 
#line 111
} 
#line 113
[[nodiscard]] const char *name() const noexcept 
#line 114
{ 
#line 118
return __std_type_info_name(&(_Data), &__type_info_root_node); 
#line 120 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
} 
#line 122
[[nodiscard]] const char *raw_name() const noexcept 
#line 123
{ 
#line 124
return (_Data)._DecoratedName; 
#line 125
} 
#line 127
virtual ~type_info() noexcept; 
#line 131
private: mutable __std_type_info_data _Data; 
#line 132
}; 
#line 133
}
#pragma warning(pop)
#line 136
namespace std { 
#line 137
using ::type_info;
#line 138
}
#line 142
namespace std { 
#line 144
#pragma warning(push)
#pragma warning(disable: 4577)
class bad_cast : public exception { 
#line 151
public: bad_cast() noexcept : exception("bad cast", 1) 
#line 153
{ 
#line 154
} 
#line 156
static bad_cast __construct_from_string_literal(const char *const _Message) noexcept 
#line 157
{ 
#line 158
return bad_cast(_Message, 1); 
#line 159
} 
#line 163
private: bad_cast(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 165
{ 
#line 166
} 
#line 167
}; 
#line 169
class bad_typeid : public exception { 
#line 174
public: bad_typeid() noexcept : exception("bad typeid", 1) 
#line 176
{ 
#line 177
} 
#line 179
static bad_typeid __construct_from_string_literal(const char *const _Message) noexcept 
#line 180
{ 
#line 181
return bad_typeid(_Message, 1); 
#line 182
} 
#line 186
friend class __non_rtti_object; 
#line 188
private: bad_typeid(const char *const _Message, int) noexcept : exception(_Message, 1) 
#line 190
{ 
#line 191
} 
#line 192
}; 
#line 194
class __non_rtti_object : public bad_typeid { 
#line 199
public: static __non_rtti_object __construct_from_string_literal(const char *const _Message) noexcept 
#line 200
{ 
#line 201
return __non_rtti_object(_Message, 1); 
#line 202
} 
#line 206
private: __non_rtti_object(const char *const _Message, int) noexcept : bad_typeid(_Message, 1) 
#line 208
{ 
#line 209
} 
#line 210
}; 
#line 212
#pragma warning(pop)
}
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vcruntime_typeinfo.h"
#pragma pack ( pop )
#pragma warning(pop)
#line 23 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\typeinfo"
class type_info; 
#line 25
namespace std { 
#line 28
constexpr int _Small_object_num_ptrs = ((6) + ((16) / sizeof(void *))); 
#line 33
class bad_cast; 
#line 34
class bad_typeid; 
#line 66 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\typeinfo"
[[noreturn]] inline void _Throw_bad_cast() { 
#line 67
throw bad_cast{}; 
#line 68
} 
#line 70
}
#line 74
#pragma pack ( pop )
#pragma warning(pop)
#line 20 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 31
namespace std { 
#line 127 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _InIt, class _Diff, class _NoThrowFwdIt >
_NoThrowFwdIt uninitialized_copy_n ( const _InIt _First, const _Diff _Count_raw, _NoThrowFwdIt _Dest ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( _Count <= 0 ) {
        return _Dest;
    }

    auto _UFirst = _Get_unwrapped_n ( _First, _Count );
    auto _UDest = _Get_unwrapped_n ( _Dest, _Count );
    if constexpr ( _Iter_copy_cat < decltype ( _UFirst ), decltype ( _UDest ) > :: _Bitcopy_constructible ) {
        _UDest = _Copy_memmove_n ( _UFirst, static_cast < size_t > ( _Count ), _UDest );
    } else {
        _Uninitialized_backout < decltype ( _UDest ) > _Backout { _UDest };

        for (; _Count > 0; -- _Count, ( void ) ++ _UFirst ) {
            _Backout . _Emplace_back ( * _UFirst );
        }

        _UDest = _Backout . _Release ( );
    }

    _Seek_wrapped ( _Dest, _UDest );
    return _Dest;
}
#line 441 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _NoThrowFwdIt, class _Diff, class _Tval >
_NoThrowFwdIt uninitialized_fill_n ( _NoThrowFwdIt _First, const _Diff _Count_raw, const _Tval & _Val ) {

    _Algorithm_int_t < _Diff > _Count = _Count_raw;
    if ( _Count <= 0 ) {
        return _First;
    }

    auto _UFirst = _Get_unwrapped_n ( _First, _Count );
    if constexpr ( _Fill_memset_is_safe < decltype ( _UFirst ), _Tval > ) {
        _Fill_memset ( _UFirst, _Val, static_cast < size_t > ( _Count ) );
        _UFirst += _Count;
    } else {
        if constexpr ( _Fill_zero_memset_is_safe < decltype ( _UFirst ), _Tval > ) {
            if ( _Is_all_bits_zero ( _Val ) ) {
                _Fill_zero_memset ( _UFirst, static_cast < size_t > ( _Count ) );
                _Seek_wrapped ( _First, _UFirst + _Count );
                return _First;
            }
        }

        _Uninitialized_backout < decltype ( _UFirst ) > _Backout { _UFirst };

        for (; _Count > 0; -- _Count ) {
            _Backout . _Emplace_back ( _Val );
        }

        _UFirst = _Backout . _Release ( );
    }

    _Seek_wrapped ( _First, _UFirst );
    return _First;
}
#line 952 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _OutIt, class _Ty >
class raw_storage_iterator {
public :
    using iterator_category = output_iterator_tag;
    using value_type = void;



    using difference_type = void;

    using pointer = void;
    using reference = void;

    explicit raw_storage_iterator ( _OutIt _First ) : _Next ( _First ) { }

    [ [ nodiscard ] ] raw_storage_iterator & operator * ( ) {
        return * this;
    }

    raw_storage_iterator & operator = ( const _Ty & _Val ) {
        :: std :: _Construct_in_place ( const_cast < _Remove_cvref_t < decltype ( * _Next ) > & > ( * _Next ), _Val );
        return * this;
    }

    raw_storage_iterator & operator = ( _Ty && _Val ) {
        :: std :: _Construct_in_place ( const_cast < _Remove_cvref_t < decltype ( * _Next ) > & > ( * _Next ), :: std :: move ( _Val ) );
        return * this;
    }

    raw_storage_iterator & operator ++ ( ) {
        ++ _Next;
        return * this;
    }

    raw_storage_iterator operator ++ ( int ) {
        raw_storage_iterator _Ans = * this;
        ++ _Next;
        return _Ans;
    }

    [ [ nodiscard ] ] _OutIt base ( ) const {
        return _Next;
    }

private :
    _OutIt _Next;
};
#line 1002 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty >
class auto_ptr;
#line 1005
template < class _Ty >
struct auto_ptr_ref {
    explicit auto_ptr_ref ( _Ty * _Right ) : _Ref ( _Right ) { }

    _Ty * _Ref;
};
#line 1012
template < class _Ty >
class auto_ptr {
public :
    using element_type = _Ty;

    explicit auto_ptr ( _Ty * _Ptr = nullptr ) noexcept : _Myptr ( _Ptr ) { }

    auto_ptr ( auto_ptr & _Right ) noexcept : _Myptr ( _Right . release ( ) ) { }

    auto_ptr ( auto_ptr_ref < _Ty > _Right ) noexcept {
        _Ty * _Ptr = _Right . _Ref;
        _Right . _Ref = nullptr;
        _Myptr = _Ptr;
    }

    template < class _Other >
    operator auto_ptr < _Other > ( ) noexcept {
        return auto_ptr < _Other > ( * this );
    }

    template < class _Other >
    operator auto_ptr_ref < _Other > ( ) noexcept {
        _Other * _Cvtptr = _Myptr;
        auto_ptr_ref < _Other > _Ans ( _Cvtptr );
        _Myptr = nullptr;
        return _Ans;
    }

    template < class _Other >
    auto_ptr & operator = ( auto_ptr < _Other > & _Right ) noexcept {
        reset ( _Right . release ( ) );
        return * this;
    }

    template < class _Other >
    auto_ptr ( auto_ptr < _Other > & _Right ) noexcept : _Myptr ( _Right . release ( ) ) { }

    auto_ptr & operator = ( auto_ptr & _Right ) noexcept {
        reset ( _Right . release ( ) );
        return * this;
    }

    auto_ptr & operator = ( auto_ptr_ref < _Ty > _Right ) noexcept {
        _Ty * _Ptr = _Right . _Ref;
        _Right . _Ref = 0;
        reset ( _Ptr );
        return * this;
    }

    ~ auto_ptr ( ) noexcept {
        delete _Myptr;
    }

    [ [ nodiscard ] ] _Ty & operator * ( ) const noexcept {

        do { if ( _Myptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory", 1067, 0, "%s", "auto_ptr not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x61\x75\x74\x6f\x5f\x70\x74\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6d\x65\x6d\x6f\x72\x79" L"", 1067, 0 ); } while ( false ); }; } while ( false );


        return * get ( );
    }

    [ [ nodiscard ] ] _Ty * operator -> ( ) const noexcept {

        do { if ( _Myptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory", 1075, 0, "%s", "auto_ptr not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x61\x75\x74\x6f\x5f\x70\x74\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x6d\x65\x6d\x6f\x72\x79" L"", 1075, 0 ); } while ( false ); }; } while ( false );


        return get ( );
    }

    [ [ nodiscard ] ] _Ty * get ( ) const noexcept {
        return _Myptr;
    }

    _Ty * release ( ) noexcept {
        _Ty * _Tmp = _Myptr;
        _Myptr = nullptr;
        return _Tmp;
    }

    void reset ( _Ty * _Ptr = nullptr ) noexcept {
        if ( _Ptr != _Myptr ) {
            delete _Myptr;
        }

        _Myptr = _Ptr;
    }

private :
    _Ty * _Myptr;
};
#line 1104 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
#pragma pack(8)
template<> 
#line 1104
class auto_ptr< void>  { 
#line 1106
public: using element_type = void; 
#line 1107
}; 
#pragma pack()
#line 1110 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
#pragma pack(8)
#line 1110
class bad_weak_ptr : public exception { 
#line 1112
public: bad_weak_ptr() noexcept { } 
#line 1114
[[nodiscard]] virtual const char *what() const noexcept override { 
#line 1116
return "bad_weak_ptr"; 
#line 1117
} 
#line 1118
}; 
#pragma pack()
[[noreturn]] inline void _Throw_bad_weak_ptr() { 
#line 1121
throw bad_weak_ptr{}; 
#line 1122
} 
#line 1124
#pragma pack(8)
#line 1124
class __declspec(novtable) _Ref_count_base { 
#line 1136
virtual void _Destroy() noexcept = 0; 
#line 1137
virtual void _Delete_this() noexcept = 0; 
#line 1140 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
_Atomic_counter_t _Uses = (1); 
#line 1141
_Atomic_counter_t _Weaks = (1); 
#line 1144
protected: constexpr _Ref_count_base() noexcept = default;
#line 1147
public: _Ref_count_base(const _Ref_count_base &) = delete;
#line 1148
_Ref_count_base &operator=(const _Ref_count_base &) = delete;
#line 1150
virtual ~_Ref_count_base() noexcept { } 
#line 1152
bool _Incref_nz() noexcept { 
#line 1153
auto &_Volatile_uses = reinterpret_cast< volatile long &>(_Uses); 
#line 1157
long _Count = __iso_volatile_load32(reinterpret_cast< volatile int *>(&_Volatile_uses)); 
#line 1159 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
while (_Count != (0)) { 
#line 1160
const long _Old_value = _InterlockedCompareExchange(&_Volatile_uses, _Count + (1), _Count); 
#line 1161
if (_Old_value == _Count) { 
#line 1162
return true; 
#line 1163
}  
#line 1165
_Count = _Old_value; 
#line 1166
}  
#line 1168
return false; 
#line 1169
} 
#line 1171
void _Incref() noexcept { 
#line 1172
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Uses))); 
#line 1173
} 
#line 1175
void _Incwref() noexcept { 
#line 1176
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Weaks))); 
#line 1177
} 
#line 1179
void _Decref() noexcept { 
#line 1180
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Uses))) == (0)) { 
#line 1181
this->_Destroy(); 
#line 1182
this->_Decwref(); 
#line 1183
}  
#line 1184
} 
#line 1186
void _Decwref() noexcept { 
#line 1187
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Weaks))) == (0)) { 
#line 1188
this->_Delete_this(); 
#line 1189
}  
#line 1190
} 
#line 1192
long _Use_count() const noexcept { 
#line 1193
return static_cast< long>(_Uses); 
#line 1194
} 
#line 1196
virtual void *_Get_deleter(const type_info &) const noexcept { 
#line 1197
return nullptr; 
#line 1198
} 
#line 1199
}; 
#pragma pack()
template < class _Ty >
class _Ref_count : public _Ref_count_base {
public :
    explicit _Ref_count ( _Ty * _Px ) : _Ref_count_base ( ), _Ptr ( _Px ) { }

private :
    void _Destroy ( ) noexcept override {
        delete _Ptr;
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }

    _Ty * _Ptr;
};
#line 1218
template < class _Resource, class _Dx >
class _Ref_count_resource : public _Ref_count_base {
public :
    _Ref_count_resource ( _Resource _Px, _Dx _Dt )
        : _Ref_count_base ( ), _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Px ) { }

    ~ _Ref_count_resource ( ) noexcept override = default;

    void * _Get_deleter ( const type_info & _Typeid ) const noexcept override {

        if ( _Typeid == typeid ( _Dx ) ) {
            return const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) );
        }




        return nullptr;
    }

private :
    void _Destroy ( ) noexcept override {
        _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }

    _Compressed_pair < _Dx, _Resource > _Mypair;
};
#line 1250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Resource, class _Dx, class _Alloc >
class _Ref_count_resource_alloc : public _Ref_count_base {

public :
    _Ref_count_resource_alloc ( _Resource _Px, _Dx _Dt, const _Alloc & _Ax )
        : _Ref_count_base ( ),
          _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _One_then_variadic_args_t { }, _Ax, _Px ) { }

    ~ _Ref_count_resource_alloc ( ) noexcept override = default;

    void * _Get_deleter ( const type_info & _Typeid ) const noexcept override {

        if ( _Typeid == typeid ( _Dx ) ) {
            return const_cast < _Dx * > ( :: std :: addressof ( _Mypair . _Get_first ( ) ) );
        }




        return nullptr;
    }

private :
    using _Myalty = _Rebind_alloc_t < _Alloc, _Ref_count_resource_alloc >;

    void _Destroy ( ) noexcept override {
        _Mypair . _Get_first ( ) ( _Mypair . _Myval2 . _Myval2 );
    }

    void _Delete_this ( ) noexcept override {
        _Myalty _Al = _Mypair . _Myval2 . _Get_first ( );
        this -> ~ _Ref_count_resource_alloc ( );
        _Deallocate_plain ( _Al, this );
    }

    _Compressed_pair < _Dx, _Compressed_pair < _Myalty, _Resource >> _Mypair;
};
#line 1288 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty >
struct default_delete;
#line 1291
template < class _Ty, class _Dx = default_delete < _Ty > >
class unique_ptr;
#line 1294
template < class _Ty >
class shared_ptr;
#line 1297
template < class _Ty >
class weak_ptr;
#line 1300
template< class _Yty, class  = void> 
#line 1301
struct _Can_enable_shared : public false_type { }; 
#line 1303
template< class _Yty> 
#line 1304
struct _Can_enable_shared< _Yty, void_t< typename _Yty::_Esft_type> >  : public is_convertible< remove_cv_t< _Yty>  *, typename _Yty::_Esft_type *> ::type { 
#line 1307
}; 
#line 1309
struct _Exception_ptr_access; 
#line 1311
template < class _Ty >
class _Ptr_base {
public :
    using element_type = remove_extent_t < _Ty >;

    [ [ nodiscard ] ] long use_count ( ) const noexcept {
        return _Rep ? _Rep -> _Use_count ( ) : 0;
    }

    template < class _Ty2 >
    [ [ nodiscard ] ] bool owner_before ( const _Ptr_base < _Ty2 > & _Right ) const noexcept {
        return _Rep < _Right . _Rep;
    }

    _Ptr_base ( const _Ptr_base & ) = delete;
    _Ptr_base & operator = ( const _Ptr_base & ) = delete;

protected :
    [ [ nodiscard ] ] element_type * get ( ) const noexcept {
        return _Ptr;
    }

    constexpr _Ptr_base ( ) noexcept = default;

    ~ _Ptr_base ( ) = default;

    template < class _Ty2 >
    void _Move_construct_from ( _Ptr_base < _Ty2 > && _Right ) noexcept {

        _Ptr = _Right . _Ptr;
        _Rep = _Right . _Rep;

        _Right . _Ptr = nullptr;
        _Right . _Rep = nullptr;
    }

    template < class _Ty2 >
    void _Copy_construct_from ( const shared_ptr < _Ty2 > & _Other ) noexcept {

        _Other . _Incref ( );

        _Ptr = _Other . _Ptr;
        _Rep = _Other . _Rep;
    }

    template < class _Ty2 >
    void _Alias_construct_from ( const shared_ptr < _Ty2 > & _Other, element_type * _Px ) noexcept {

        _Other . _Incref ( );

        _Ptr = _Px;
        _Rep = _Other . _Rep;
    }

    template < class _Ty2 >
    void _Alias_move_construct_from ( shared_ptr < _Ty2 > && _Other, element_type * _Px ) noexcept {

        _Ptr = _Px;
        _Rep = _Other . _Rep;

        _Other . _Ptr = nullptr;
        _Other . _Rep = nullptr;
    }

    template < class _Ty0 >
    friend class weak_ptr;

    template < class _Ty2 >
    bool _Construct_from_weak ( const weak_ptr < _Ty2 > & _Other ) noexcept {

        if ( _Other . _Rep && _Other . _Rep -> _Incref_nz ( ) ) {
            _Ptr = _Other . _Ptr;
            _Rep = _Other . _Rep;
            return true;
        }

        return false;
    }

    void _Incref ( ) const noexcept {
        if ( _Rep ) {
            _Rep -> _Incref ( );
        }
    }

    void _Decref ( ) noexcept {
        if ( _Rep ) {
            _Rep -> _Decref ( );
        }
    }

    void _Swap ( _Ptr_base & _Right ) noexcept {
        :: std :: swap ( _Ptr, _Right . _Ptr );
        :: std :: swap ( _Rep, _Right . _Rep );
    }

    template < class _Ty2 >
    void _Weakly_construct_from ( const _Ptr_base < _Ty2 > & _Other ) noexcept {
        if ( _Other . _Rep ) {
            _Ptr = _Other . _Ptr;
            _Rep = _Other . _Rep;
            _Rep -> _Incwref ( );
        } else {
            ;
        }
    }

    template < class _Ty2 >
    void _Weakly_convert_lvalue_avoiding_expired_conversions ( const _Ptr_base < _Ty2 > & _Other ) noexcept {

        if ( _Other . _Rep ) {
            _Rep = _Other . _Rep;
            _Rep -> _Incwref ( );

            if ( _Rep -> _Incref_nz ( ) ) {
                _Ptr = _Other . _Ptr;
                _Rep -> _Decref ( );
            } else {
                ;
            }
        } else {
            ;
        }
    }

    template < class _Ty2 >
    void _Weakly_convert_rvalue_avoiding_expired_conversions ( _Ptr_base < _Ty2 > && _Other ) noexcept {

        _Rep = _Other . _Rep;
        _Other . _Rep = nullptr;

        if ( _Rep && _Rep -> _Incref_nz ( ) ) {
            _Ptr = _Other . _Ptr;
            _Rep -> _Decref ( );
        } else {
            ;
        }

        _Other . _Ptr = nullptr;
    }

    void _Incwref ( ) const noexcept {
        if ( _Rep ) {
            _Rep -> _Incwref ( );
        }
    }

    void _Decwref ( ) noexcept {
        if ( _Rep ) {
            _Rep -> _Decwref ( );
        }
    }

private :
    element_type * _Ptr { nullptr };
    _Ref_count_base * _Rep { nullptr };

    template < class _Ty0 >
    friend class _Ptr_base;

    friend shared_ptr < _Ty >;

    template < class _Ty0 >
    friend struct atomic;

    friend _Exception_ptr_access;


    template < class _Dx, class _Ty0 >
    friend _Dx * get_deleter ( const shared_ptr < _Ty0 > & _Sx ) noexcept;

};
#line 1484 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template< class _Yty, class  = void> 
#line 1485
struct _Can_scalar_delete : public false_type { }; 
#line 1486
template< class _Yty> 
#line 1487
struct _Can_scalar_delete< _Yty, void_t< decltype(delete std::declval< _Yty *> ())> >  : public bool_constant< !is_void_v< _Yty> >  { }; 
#line 1489
template< class _Yty, class  = void> 
#line 1490
struct _Can_array_delete : public false_type { }; 
#line 1491
template< class _Yty> 
#line 1492
struct _Can_array_delete< _Yty, void_t< decltype(delete [] std::declval< _Yty *> ())> >  : public true_type { }; 
#line 1494
template< class _Fx, class _Arg, class  = void> 
#line 1495
struct _Can_call_function_object : public false_type { }; 
#line 1496
template< class _Fx, class _Arg> 
#line 1497
struct _Can_call_function_object< _Fx, _Arg, void_t< decltype(std::declval< _Fx> ()(std::declval< _Arg> ()))> >  : public true_type { }; 
#line 1499
template< class _Yty, class _Ty> 
#line 1500
struct _SP_convertible : public is_convertible< _Yty *, _Ty *> ::type { }; 
#line 1501
template< class _Yty, class _Uty> 
#line 1502
struct _SP_convertible< _Yty, _Uty []>  : public is_convertible< _Yty (*)[], _Uty (*)[]> ::type { }; 
#line 1503
template< class _Yty, class _Uty, size_t _Ext> 
#line 1504
struct _SP_convertible< _Yty, _Uty [_Ext]>  : public is_convertible< _Yty (*)[_Ext], _Uty (*)[_Ext]> ::type { }; 
#line 1506
template< class _Yty, class _Ty> 
#line 1507
struct _SP_pointer_compatible : public is_convertible< _Yty *, _Ty *> ::type { 
#line 1510
}; 
#line 1511
template< class _Uty, size_t _Ext> 
#line 1512
struct _SP_pointer_compatible< _Uty [_Ext], _Uty []>  : public true_type { 
#line 1514
}; 
#line 1515
template< class _Uty, size_t _Ext> 
#line 1516
struct _SP_pointer_compatible< _Uty [_Ext], const _Uty []>  : public true_type { 
#line 1518
}; 
#line 1519
template< class _Uty, size_t _Ext> 
#line 1520
struct _SP_pointer_compatible< _Uty [_Ext], volatile _Uty []>  : public true_type { 
#line 1522
}; 
#line 1523
template< class _Uty, size_t _Ext> 
#line 1524
struct _SP_pointer_compatible< _Uty [_Ext], const volatile _Uty []>  : public true_type { 
#line 1526
}; 
#line 1528
template < class _Ux >
struct _Temporary_owner {
    _Ux * _Ptr;

    explicit _Temporary_owner ( _Ux * const _Ptr_ ) noexcept : _Ptr ( _Ptr_ ) { }
    _Temporary_owner ( const _Temporary_owner & ) = delete;
    _Temporary_owner & operator = ( const _Temporary_owner & ) = delete;
    ~ _Temporary_owner ( ) {
        delete _Ptr;
    }
};
#line 1540
template < class _UxptrOrNullptr, class _Dx >
struct _Temporary_owner_del {
    _UxptrOrNullptr _Ptr;
    _Dx & _Dt;
    bool _Call_deleter = true;

    explicit _Temporary_owner_del ( const _UxptrOrNullptr _Ptr_, _Dx & _Dt_ ) noexcept : _Ptr ( _Ptr_ ), _Dt ( _Dt_ ) { }
    _Temporary_owner_del ( const _Temporary_owner_del & ) = delete;
    _Temporary_owner_del & operator = ( const _Temporary_owner_del & ) = delete;
    ~ _Temporary_owner_del ( ) {
        if ( _Call_deleter ) {
            _Dt ( _Ptr );
        }
    }
};
#line 1556
template < class _Ty >
class shared_ptr : public _Ptr_base < _Ty > {
private :
    using _Mybase = _Ptr_base < _Ty >;

public :
    using typename _Mybase :: element_type;





    constexpr shared_ptr ( ) noexcept = default;

    constexpr shared_ptr ( nullptr_t ) noexcept { }

    template < class _Ux,
        enable_if_t < conjunction_v < conditional_t < is_array_v < _Ty >, _Can_array_delete < _Ux >, _Can_scalar_delete < _Ux >>,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    explicit shared_ptr ( _Ux * _Px ) {
        if constexpr ( is_array_v < _Ty > ) {
            _Setpd ( _Px, default_delete < _Ux [ ] > { } );
        } else {
            _Temporary_owner < _Ux > _Owner ( _Px );
            _Set_ptr_rep_and_enable_shared ( _Owner . _Ptr, new _Ref_count < _Ux > ( _Owner . _Ptr ) );
            _Owner . _Ptr = nullptr;
        }
    }

    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    shared_ptr ( _Ux * _Px, _Dx _Dt ) {
        _Setpd ( _Px, :: std :: move ( _Dt ) );
    }

    template < class _Ux, class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    shared_ptr ( _Ux * _Px, _Dx _Dt, _Alloc _Ax ) {
        _Setpda ( _Px, :: std :: move ( _Dt ), _Ax );
    }

    template < class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, nullptr_t & >>, int > = 0 >
    shared_ptr ( nullptr_t, _Dx _Dt ) {
        _Setpd ( nullptr, :: std :: move ( _Dt ) );
    }

    template < class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, nullptr_t & >>, int > = 0 >
    shared_ptr ( nullptr_t, _Dx _Dt, _Alloc _Ax ) {
        _Setpda ( nullptr, :: std :: move ( _Dt ), _Ax );
    }

    template < class _Ty2 >
    shared_ptr ( const shared_ptr < _Ty2 > & _Right, element_type * _Px ) noexcept {

        this -> _Alias_construct_from ( _Right, _Px );
    }

    template < class _Ty2 >
    shared_ptr ( shared_ptr < _Ty2 > && _Right, element_type * _Px ) noexcept {

        this -> _Alias_move_construct_from ( :: std :: move ( _Right ), _Px );
    }

    shared_ptr ( const shared_ptr & _Other ) noexcept {
        this -> _Copy_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept {

        this -> _Copy_construct_from ( _Other );
    }

    shared_ptr ( shared_ptr && _Right ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Right ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr ( shared_ptr < _Ty2 > && _Right ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Right ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    explicit shared_ptr ( const weak_ptr < _Ty2 > & _Other ) {
        if ( ! this -> _Construct_from_weak ( _Other ) ) {
            _Throw_bad_weak_ptr ( );
        }
    }


    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    shared_ptr ( auto_ptr < _Ty2 > && _Other ) {
        _Ty2 * _Px = _Other . get ( );
        _Set_ptr_rep_and_enable_shared ( _Px, new _Ref_count < _Ty2 > ( _Px ) );
        _Other . release ( );
    }


    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < _SP_pointer_compatible < _Ux, _Ty >,
                        is_convertible < typename unique_ptr < _Ux, _Dx > :: pointer, element_type * >>,
            int > = 0 >
    shared_ptr ( unique_ptr < _Ux, _Dx > && _Other ) {
        using _Fancy_t = typename unique_ptr < _Ux, _Dx > :: pointer;
        using _Raw_t = typename unique_ptr < _Ux, _Dx > :: element_type *;
        using _Deleter_t = conditional_t < is_reference_v < _Dx >, decltype ( :: std :: ref ( _Other . get_deleter ( ) ) ), _Dx >;

        const _Fancy_t _Fancy = _Other . get ( );

        if ( _Fancy ) {
            const _Raw_t _Raw = _Fancy;
            const auto _Rx =
                new _Ref_count_resource < _Fancy_t, _Deleter_t > ( _Fancy, :: std :: forward < _Dx > ( _Other . get_deleter ( ) ) );
            _Set_ptr_rep_and_enable_shared ( _Raw, _Rx );
            _Other . release ( );
        }
    }

    ~ shared_ptr ( ) noexcept {
        this -> _Decref ( );
    }

    shared_ptr & operator = ( const shared_ptr & _Right ) noexcept {
        shared_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept {
        shared_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    shared_ptr & operator = ( shared_ptr && _Right ) noexcept {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    shared_ptr & operator = ( shared_ptr < _Ty2 > && _Right ) noexcept {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }


    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    shared_ptr & operator = ( auto_ptr < _Ty2 > && _Right ) {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }


    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < _SP_pointer_compatible < _Ux, _Ty >,
                        is_convertible < typename unique_ptr < _Ux, _Dx > :: pointer, element_type * >>,
            int > = 0 >
    shared_ptr & operator = ( unique_ptr < _Ux, _Dx > && _Right ) {
        shared_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    void swap ( shared_ptr & _Other ) noexcept {
        this -> _Swap ( _Other );
    }

    void reset ( ) noexcept {
        shared_ptr ( ) . swap ( * this );
    }

    template < class _Ux,
        enable_if_t < conjunction_v < conditional_t < is_array_v < _Ty >, _Can_array_delete < _Ux >, _Can_scalar_delete < _Ux >>,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px ) {
        shared_ptr ( _Px ) . swap ( * this );
    }

    template < class _Ux, class _Dx,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px, _Dx _Dt ) {
        shared_ptr ( _Px, _Dt ) . swap ( * this );
    }

    template < class _Ux, class _Dx, class _Alloc,
        enable_if_t < conjunction_v < is_move_constructible < _Dx >, _Can_call_function_object < _Dx &, _Ux * & >,
                        _SP_convertible < _Ux, _Ty >>,
            int > = 0 >
    void reset ( _Ux * _Px, _Dx _Dt, _Alloc _Ax ) {
        shared_ptr ( _Px, _Dt, _Ax ) . swap ( * this );
    }

    using _Mybase :: get;

    template < class _Ty2 = _Ty, enable_if_t < ! disjunction_v < is_array < _Ty2 >, is_void < _Ty2 >>, int > = 0 >
    [ [ nodiscard ] ] _Ty2 & operator * ( ) const noexcept {
        return * get ( );
    }

    template < class _Ty2 = _Ty, enable_if_t < ! is_array_v < _Ty2 >, int > = 0 >
    [ [ nodiscard ] ] _Ty2 * operator -> ( ) const noexcept {
        return get ( );
    }

    template < class _Ty2 = _Ty, class _Elem = element_type, enable_if_t < is_array_v < _Ty2 >, int > = 0 >
    [ [ nodiscard ] ] _Elem & operator [ ] ( ptrdiff_t _Idx ) const noexcept {
        return get ( ) [ _Idx ];
    }


     [ [ nodiscard ] ] bool unique ( ) const noexcept {

        return this -> use_count ( ) == 1;
    }


    explicit operator bool ( ) const noexcept {
        return get ( ) != nullptr;
    }

private :
    template < class _UxptrOrNullptr, class _Dx >
    void _Setpd ( const _UxptrOrNullptr _Px, _Dx _Dt ) {
        _Temporary_owner_del < _UxptrOrNullptr, _Dx > _Owner ( _Px, _Dt );
        _Set_ptr_rep_and_enable_shared (
            _Owner . _Ptr, new _Ref_count_resource < _UxptrOrNullptr, _Dx > ( _Owner . _Ptr, :: std :: move ( _Dt ) ) );
        _Owner . _Call_deleter = false;
    }

    template < class _UxptrOrNullptr, class _Dx, class _Alloc >
    void _Setpda ( const _UxptrOrNullptr _Px, _Dx _Dt, _Alloc _Ax ) {
        using _Alref_alloc = _Rebind_alloc_t < _Alloc, _Ref_count_resource_alloc < _UxptrOrNullptr, _Dx, _Alloc >>;

        _Temporary_owner_del < _UxptrOrNullptr, _Dx > _Owner ( _Px, _Dt );
        _Alref_alloc _Alref ( _Ax );
        _Alloc_construct_ptr < _Alref_alloc > _Constructor ( _Alref );
        _Constructor . _Allocate ( );
        _Construct_in_place ( * _Constructor . _Ptr, _Owner . _Ptr, :: std :: move ( _Dt ), _Ax );
        _Set_ptr_rep_and_enable_shared ( _Owner . _Ptr, _Unfancy ( _Constructor . _Ptr ) );
        _Constructor . _Ptr = nullptr;
        _Owner . _Call_deleter = false;
    }



































    template < class _Ty0, class ... _Types >
    friend shared_ptr < _Ty0 > make_shared ( _Types && ... _Args );

    template < class _Ty0, class _Alloc, class ... _Types >
    friend shared_ptr < _Ty0 > allocate_shared ( const _Alloc & _Al_arg, _Types && ... _Args );


    template < class _Ux >
    void _Set_ptr_rep_and_enable_shared ( _Ux * const _Px, _Ref_count_base * const _Rx ) noexcept {
        this -> _Ptr = _Px;
        this -> _Rep = _Rx;
        if constexpr ( conjunction_v < negation < is_array < _Ty >>, negation < is_volatile < _Ux >>, _Can_enable_shared < _Ux >> ) {
            if ( _Px && _Px -> _Wptr . expired ( ) ) {
                _Px -> _Wptr = shared_ptr < remove_cv_t < _Ux >> ( * this, const_cast < remove_cv_t < _Ux > * > ( _Px ) );
            }
        }
    }

    void _Set_ptr_rep_and_enable_shared ( nullptr_t, _Ref_count_base * const _Rx ) noexcept {
        this -> _Ptr = nullptr;
        this -> _Rep = _Rx;
    }
};
#line 1873 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator == ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) == _Right . get ( );
}
#line 1884 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator != ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) != _Right . get ( );
}
#line 1889
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator < ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) < _Right . get ( );
}
#line 1894
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator >= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) >= _Right . get ( );
}
#line 1899
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator > ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) > _Right . get ( );
}
#line 1904
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] bool operator <= ( const shared_ptr < _Ty1 > & _Left, const shared_ptr < _Ty2 > & _Right ) noexcept {
    return _Left . get ( ) <= _Right . get ( );
}
#line 1910 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator == ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) == nullptr;
}
#line 1921 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty >
[ [ nodiscard ] ] bool operator == ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return nullptr == _Right . get ( );
}
#line 1926
template < class _Ty >
[ [ nodiscard ] ] bool operator != ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) != nullptr;
}
#line 1931
template < class _Ty >
[ [ nodiscard ] ] bool operator != ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return nullptr != _Right . get ( );
}
#line 1936
template < class _Ty >
[ [ nodiscard ] ] bool operator < ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) < static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1941
template < class _Ty >
[ [ nodiscard ] ] bool operator < ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) < _Right . get ( );
}
#line 1946
template < class _Ty >
[ [ nodiscard ] ] bool operator >= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) >= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1951
template < class _Ty >
[ [ nodiscard ] ] bool operator >= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) >= _Right . get ( );
}
#line 1956
template < class _Ty >
[ [ nodiscard ] ] bool operator > ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) > static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1961
template < class _Ty >
[ [ nodiscard ] ] bool operator > ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) > _Right . get ( );
}
#line 1966
template < class _Ty >
[ [ nodiscard ] ] bool operator <= ( const shared_ptr < _Ty > & _Left, nullptr_t ) noexcept {
    return _Left . get ( ) <= static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr );
}
#line 1971
template < class _Ty >
[ [ nodiscard ] ] bool operator <= ( nullptr_t, const shared_ptr < _Ty > & _Right ) noexcept {
    return static_cast < typename shared_ptr < _Ty > :: element_type * > ( nullptr ) <= _Right . get ( );
}
#line 1977 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Elem, class _Traits, class _Ty >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const shared_ptr < _Ty > & _Px ) {

    return _Out << _Px . get ( );
}
#line 1983
template < class _Ty >
void swap ( shared_ptr < _Ty > & _Left, shared_ptr < _Ty > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 1988
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > static_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = static_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 1995
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > static_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = static_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 2002
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > const_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = const_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 2009
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > const_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = const_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 2016
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > reinterpret_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = reinterpret_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( _Other, _Ptr );
}
#line 2023
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > reinterpret_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = reinterpret_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );
    return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
}
#line 2031
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > dynamic_pointer_cast ( const shared_ptr < _Ty2 > & _Other ) noexcept {

    const auto _Ptr = dynamic_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );

    if ( _Ptr ) {
        return shared_ptr < _Ty1 > ( _Other, _Ptr );
    }

    return { };
}
#line 2043
template < class _Ty1, class _Ty2 >
[ [ nodiscard ] ] shared_ptr < _Ty1 > dynamic_pointer_cast ( shared_ptr < _Ty2 > && _Other ) noexcept {

    const auto _Ptr = dynamic_cast < typename shared_ptr < _Ty1 > :: element_type * > ( _Other . get ( ) );

    if ( _Ptr ) {
        return shared_ptr < _Ty1 > ( :: std :: move ( _Other ), _Ptr );
    }

    return { };
}
#line 2062 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Dx, class _Ty >
[ [ nodiscard ] ] _Dx * get_deleter ( const shared_ptr < _Ty > & _Sx ) noexcept {

    if ( _Sx . _Rep ) {
        return static_cast < _Dx * > ( _Sx . _Rep -> _Get_deleter ( typeid ( _Dx ) ) );
    }

    return nullptr;
}
#line 2082 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty >
class _Ref_count_obj2 : public _Ref_count_base {
public :
    template < class ... _Types >
    explicit _Ref_count_obj2 ( _Types && ... _Args ) : _Ref_count_base ( ) {






        {
            :: std :: _Construct_in_place ( _Storage . _Value, :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    ~ _Ref_count_obj2 ( ) noexcept override {





    }

    union {
        _Wrap < remove_cv_t < _Ty >> _Storage;
    };

private :
    void _Destroy ( ) noexcept override {
        _Destroy_in_place ( _Storage . _Value );
    }

    void _Delete_this ( ) noexcept override {
        delete this;
    }
};
#line 2465 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty, class _Alloc >
class _Ref_count_obj_alloc3 : public _Ebco_base < _Rebind_alloc_t < _Alloc, _Ty > >, public _Ref_count_base {

private :
    static_assert ( is_same_v < _Ty, remove_cv_t < _Ty >>, "allocate_shared should remove_cv_t" );

    using _Rebound = _Rebind_alloc_t < _Alloc, _Ty >;

public :
    template < class ... _Types >
    explicit _Ref_count_obj_alloc3 ( const _Alloc & _Al_arg, _Types && ... _Args )
        : _Ebco_base < _Rebound > ( _Al_arg ), _Ref_count_base ( ) {






        {
            allocator_traits < _Rebound > :: construct (
                this -> _Get_val ( ), :: std :: addressof ( _Storage . _Value ), :: std :: forward < _Types > ( _Args ) ... );
        }
    }

    union {
        _Wrap < _Ty > _Storage;
    };

private :
    ~ _Ref_count_obj_alloc3 ( ) noexcept override {



    }

    void _Destroy ( ) noexcept override {
        allocator_traits < _Rebound > :: destroy ( this -> _Get_val ( ), :: std :: addressof ( _Storage . _Value ) );
    }

    void _Delete_this ( ) noexcept override {
        _Rebind_alloc_t < _Alloc, _Ref_count_obj_alloc3 > _Al ( this -> _Get_val ( ) );
        this -> ~ _Ref_count_obj_alloc3 ( );
        _Deallocate_plain ( _Al, this );
    }
};
#line 2761 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty, class ... _Types >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ]



    shared_ptr < _Ty >

    make_shared ( _Types && ... _Args ) {
    const auto _Rx = new _Ref_count_obj2 < _Ty > ( :: std :: forward < _Types > ( _Args ) ... );
    shared_ptr < _Ty > _Ret;
    _Ret . _Set_ptr_rep_and_enable_shared ( :: std :: addressof ( _Rx -> _Storage . _Value ), _Rx );
    return _Ret;
}
#line 2856 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty, class _Alloc, class ... _Types >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ]



    shared_ptr < _Ty >

    allocate_shared ( const _Alloc & _Al, _Types && ... _Args ) {


    using _Refoa = _Ref_count_obj_alloc3 < remove_cv_t < _Ty >, _Alloc >;
    using _Alblock = _Rebind_alloc_t < _Alloc, _Refoa >;
    _Alblock _Rebound ( _Al );
    _Alloc_construct_ptr < _Alblock > _Constructor { _Rebound };
    _Constructor . _Allocate ( );
    _Construct_in_place ( * _Constructor . _Ptr, _Al, :: std :: forward < _Types > ( _Args ) ... );
    shared_ptr < _Ty > _Ret;
    const auto _Ptr = reinterpret_cast < _Ty * > ( :: std :: addressof ( _Constructor . _Ptr -> _Storage . _Value ) );
    _Ret . _Set_ptr_rep_and_enable_shared ( _Ptr, _Unfancy ( _Constructor . _Release ( ) ) );
    return _Ret;
}
#line 2996 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty >
class weak_ptr : public _Ptr_base < _Ty > {
public :





    template < class _Ty2, class = const _Ty2 * >
    static constexpr bool _Must_avoid_expired_conversions_from = true;


    template < class _Ty2 >
    static constexpr bool
        _Must_avoid_expired_conversions_from < _Ty2, decltype ( static_cast < const _Ty2 * > ( static_cast < _Ty * > ( nullptr ) ) ) > =
            false;


    constexpr weak_ptr ( ) noexcept { }

    weak_ptr ( const weak_ptr & _Other ) noexcept {
        this -> _Weakly_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( const shared_ptr < _Ty2 > & _Other ) noexcept {
        this -> _Weakly_construct_from ( _Other );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( const weak_ptr < _Ty2 > & _Other ) noexcept {



        constexpr bool _Avoid_expired_conversions = _Must_avoid_expired_conversions_from < _Ty2 >;


        if constexpr ( _Avoid_expired_conversions ) {
            this -> _Weakly_convert_lvalue_avoiding_expired_conversions ( _Other );
        } else {
            this -> _Weakly_construct_from ( _Other );
        }
    }

    weak_ptr ( weak_ptr && _Other ) noexcept {
        this -> _Move_construct_from ( :: std :: move ( _Other ) );
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr ( weak_ptr < _Ty2 > && _Other ) noexcept {



        constexpr bool _Avoid_expired_conversions = _Must_avoid_expired_conversions_from < _Ty2 >;


        if constexpr ( _Avoid_expired_conversions ) {
            this -> _Weakly_convert_rvalue_avoiding_expired_conversions ( :: std :: move ( _Other ) );
        } else {
            this -> _Move_construct_from ( :: std :: move ( _Other ) );
        }
    }

    ~ weak_ptr ( ) noexcept {
        this -> _Decwref ( );
    }

    weak_ptr & operator = ( const weak_ptr & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( const weak_ptr < _Ty2 > & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    weak_ptr & operator = ( weak_ptr && _Right ) noexcept {
        weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( weak_ptr < _Ty2 > && _Right ) noexcept {
        weak_ptr ( :: std :: move ( _Right ) ) . swap ( * this );
        return * this;
    }

    template < class _Ty2, enable_if_t < _SP_pointer_compatible < _Ty2, _Ty > :: value, int > = 0 >
    weak_ptr & operator = ( const shared_ptr < _Ty2 > & _Right ) noexcept {
        weak_ptr ( _Right ) . swap ( * this );
        return * this;
    }

    void reset ( ) noexcept {
        weak_ptr { } . swap ( * this );
    }

    void swap ( weak_ptr & _Other ) noexcept {
        this -> _Swap ( _Other );
    }

    [ [ nodiscard ] ] bool expired ( ) const noexcept {
        return this -> use_count ( ) == 0;
    }

    [ [ nodiscard ] ] shared_ptr < _Ty > lock ( ) const noexcept {
        shared_ptr < _Ty > _Ret;
        ( void ) _Ret . _Construct_from_weak ( * this );
        return _Ret;
    }
};
#line 3115 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty >
void swap ( weak_ptr < _Ty > & _Left, weak_ptr < _Ty > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 3120
template < class _Ty >
class enable_shared_from_this {
public :
    using _Esft_type = enable_shared_from_this;

    [ [ nodiscard ] ] shared_ptr < _Ty > shared_from_this ( ) {
        return shared_ptr < _Ty > ( _Wptr );
    }

    [ [ nodiscard ] ] shared_ptr < const _Ty > shared_from_this ( ) const {
        return shared_ptr < const _Ty > ( _Wptr );
    }

    [ [ nodiscard ] ] weak_ptr < _Ty > weak_from_this ( ) noexcept {
        return _Wptr;
    }

    [ [ nodiscard ] ] weak_ptr < const _Ty > weak_from_this ( ) const noexcept {
        return _Wptr;
    }

protected :
    constexpr enable_shared_from_this ( ) noexcept : _Wptr ( ) { }

    enable_shared_from_this ( const enable_shared_from_this & ) noexcept : _Wptr ( ) {

    }

    enable_shared_from_this & operator = ( const enable_shared_from_this & ) noexcept {
        return * this;
    }

    ~ enable_shared_from_this ( ) = default;

private :
    template < class _Yty >
    friend class shared_ptr;

    mutable weak_ptr < _Ty > _Wptr;
};
#line 3161
template < class _Ty >
struct default_delete {
    constexpr default_delete ( ) noexcept = default;

    template < class _Ty2, enable_if_t < is_convertible_v < _Ty2 *, _Ty * >, int > = 0 >
    inline default_delete ( const default_delete < _Ty2 > & ) noexcept { }

    inline void operator ( ) ( _Ty * _Ptr ) const noexcept {
        static_assert ( 0 < sizeof ( _Ty ), "can\'t delete an incomplete type" );
        delete _Ptr;
    }
};
#line 3174
template< class _Ty> 
#pragma pack(8)
#line 3175
struct default_delete< _Ty []>  { 
#line 3176
constexpr default_delete() noexcept = default;
#line 3178
template < class _Uty, enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
    inline default_delete ( const default_delete < _Uty [ ] > & ) noexcept { }
#line 3181
template < class _Uty, enable_if_t < is_convertible_v < _Uty ( * ) [ ], _Ty ( * ) [ ] >, int > = 0 >
    inline void operator ( ) ( _Uty * _Ptr ) const noexcept {
        static_assert ( 0 < sizeof ( _Uty ), "can\'t delete an incomplete type" );
        delete [ ] _Ptr;
    }
#line 3186
}; 
#pragma pack(8)
template< class _Ty, class _Dx_noref, class  = void> 
#line 3189
struct _Get_deleter_pointer_type { 
#line 3190
using type = _Ty *; 
#line 3191
}; 
#line 3193
template< class _Ty, class _Dx_noref> 
#line 3194
struct _Get_deleter_pointer_type< _Ty, _Dx_noref, void_t< typename _Dx_noref::pointer> >  { 
#line 3195
using type = typename _Dx_noref::pointer; 
#line 3196
}; 
#line 3198
template< class _Dx2> using _Unique_ptr_enable_default_t = enable_if_t< conjunction_v< negation< is_pointer< _Dx2> > , is_default_constructible< _Dx2> > , int> ; 
#line 3202
template < class _Ty, class _Dx >
class unique_ptr {
public :
    using pointer = typename _Get_deleter_pointer_type < _Ty, remove_reference_t < _Dx >> :: type;
    using element_type = _Ty;
    using deleter_type = _Dx;

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( nullptr_t ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    inline unique_ptr & operator = ( nullptr_t ) noexcept {
        reset ( );
        return * this;
    }



    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    inline explicit unique_ptr ( pointer _Ptr ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Ptr ) { }

    template < class _Dx2 = _Dx, enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0 >
    inline unique_ptr ( pointer _Ptr, const _Dx & _Dt ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Dt, _Ptr ) { }

    template < class _Dx2 = _Dx,
        enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>, is_constructible < _Dx2, _Dx2 >>, int > = 0 >
    inline unique_ptr ( pointer _Ptr, _Dx && _Dt ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Ptr ) { }

    template < class _Dx2 = _Dx,
        enable_if_t < conjunction_v < is_reference < _Dx2 >, is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
    unique_ptr ( pointer, remove_reference_t < _Dx > && ) = delete;

    template < class _Dx2 = _Dx, enable_if_t < is_move_constructible_v < _Dx2 >, int > = 0 >
    inline unique_ptr ( unique_ptr && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Ty2, class _Dx2,
        enable_if_t <
            conjunction_v < negation < is_array < _Ty2 >>, is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >,
                conditional_t < is_reference_v < _Dx >, is_same < _Dx2, _Dx >, is_convertible < _Dx2, _Dx >> >,
            int > = 0 >
    inline unique_ptr ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx2 > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }


    template < class _Ty2,
        enable_if_t < conjunction_v < is_convertible < _Ty2 *, _Ty * >, is_same < _Dx, default_delete < _Ty >> >, int > = 0 >
    unique_ptr ( auto_ptr < _Ty2 > && _Right ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Right . release ( ) ) { }


    template < class _Ty2, class _Dx2,
        enable_if_t < conjunction_v < negation < is_array < _Ty2 >>, is_assignable < _Dx &, _Dx2 >,
                        is_convertible < typename unique_ptr < _Ty2, _Dx2 > :: pointer, pointer >>,
            int > = 0 >
    inline unique_ptr & operator = ( unique_ptr < _Ty2, _Dx2 > && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Dx2 > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    template < class _Dx2 = _Dx, enable_if_t < is_move_assignable_v < _Dx2 >, int > = 0 >
    inline unique_ptr & operator = ( unique_ptr && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Dx > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    inline void swap ( unique_ptr & _Right ) noexcept {
        using :: std :: swap;
        swap ( _Mypair . _Myval2, _Right . _Mypair . _Myval2 );
        swap ( _Mypair . _Get_first ( ), _Right . _Mypair . _Get_first ( ) );
    }

    inline ~ unique_ptr ( ) noexcept {
        if ( _Mypair . _Myval2 ) {
            _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
        }
    }

    [ [ nodiscard ] ] inline _Dx & get_deleter ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline const _Dx & get_deleter ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline add_lvalue_reference_t < _Ty > operator * ( ) const noexcept ( noexcept ( * :: std :: declval < pointer > ( ) ) ) {
        return * _Mypair . _Myval2;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    [ [ nodiscard ] ] inline pointer get ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    inline explicit operator bool ( ) const noexcept {
        return static_cast < bool > ( _Mypair . _Myval2 );
    }

    inline pointer release ( ) noexcept {
        return :: std :: exchange ( _Mypair . _Myval2, nullptr );
    }

    inline void reset ( pointer _Ptr = nullptr ) noexcept {
        pointer _Old = :: std :: exchange ( _Mypair . _Myval2, _Ptr );
        if ( _Old ) {
            _Mypair . _Get_first ( ) ( _Old );
        }
    }

    unique_ptr ( const unique_ptr & ) = delete;
    unique_ptr & operator = ( const unique_ptr & ) = delete;

private :
    template < class, class >
    friend class unique_ptr;

    _Compressed_pair < _Dx, pointer > _Mypair;
};
#line 3329 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty, class _Dx >
class unique_ptr < _Ty [ ], _Dx > {
public :
    using pointer = typename _Get_deleter_pointer_type < _Ty, remove_reference_t < _Dx >> :: type;
    using element_type = _Ty;
    using deleter_type = _Dx;

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    template < class _Uty, class _Is_nullptr = is_same < _Uty, nullptr_t >>
    using _Enable_ctor_reset =
        enable_if_t < is_same_v < _Uty, pointer > || _Is_nullptr :: value
                        || ( is_same_v < pointer, element_type * > && is_pointer_v < _Uty >
                            && is_convertible_v < remove_pointer_t < _Uty > ( * ) [ ], element_type ( * ) [ ] > ),
            int >;

    template < class _Uty, class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0, _Enable_ctor_reset < _Uty > = 0 >
    inline explicit unique_ptr ( _Uty _Ptr ) noexcept : _Mypair ( _Zero_then_variadic_args_t { }, _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx, enable_if_t < is_constructible_v < _Dx2, const _Dx2 & >, int > = 0,
        _Enable_ctor_reset < _Uty > = 0 >
    inline unique_ptr ( _Uty _Ptr, const _Dx & _Dt ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Dt, _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx,
        enable_if_t < conjunction_v < negation < is_reference < _Dx2 >>, is_constructible < _Dx2, _Dx2 >>, int > = 0,
        _Enable_ctor_reset < _Uty > = 0 >
    inline unique_ptr ( _Uty _Ptr, _Dx && _Dt ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Dt ), _Ptr ) { }

    template < class _Uty, class _Dx2 = _Dx,
        enable_if_t < conjunction_v < is_reference < _Dx2 >, is_constructible < _Dx2, remove_reference_t < _Dx2 >> >, int > = 0 >
    unique_ptr ( _Uty, remove_reference_t < _Dx > && ) = delete;

    template < class _Dx2 = _Dx, enable_if_t < is_move_constructible_v < _Dx2 >, int > = 0 >
    inline unique_ptr ( unique_ptr && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Dx > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Dx2 = _Dx, enable_if_t < is_move_assignable_v < _Dx2 >, int > = 0 >
    inline unique_ptr & operator = ( unique_ptr && _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            reset ( _Right . release ( ) );
            _Mypair . _Get_first ( ) = :: std :: move ( _Right . _Mypair . _Get_first ( ) );
        }

        return * this;
    }

    template < class _Uty, class _Ex, class _More, class _UP_pointer = typename unique_ptr < _Uty, _Ex > :: pointer,
        class _UP_element_type = typename unique_ptr < _Uty, _Ex > :: element_type >
    using _Enable_conversion = enable_if_t <
        conjunction_v < is_array < _Uty >, is_same < pointer, element_type * >, is_same < _UP_pointer, _UP_element_type * >,
            is_convertible < _UP_element_type ( * ) [ ], element_type ( * ) [ ] >, _More >,
        int >;

    template < class _Uty, class _Ex,
        _Enable_conversion < _Uty, _Ex, conditional_t < is_reference_v < _Dx >, is_same < _Ex, _Dx >, is_convertible < _Ex, _Dx >> > =
            0 >
    inline unique_ptr ( unique_ptr < _Uty, _Ex > && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: forward < _Ex > ( _Right . get_deleter ( ) ), _Right . release ( ) ) { }

    template < class _Uty, class _Ex, _Enable_conversion < _Uty, _Ex, is_assignable < _Dx &, _Ex >> = 0 >
    inline unique_ptr & operator = ( unique_ptr < _Uty, _Ex > && _Right ) noexcept {
        reset ( _Right . release ( ) );
        _Mypair . _Get_first ( ) = :: std :: forward < _Ex > ( _Right . _Mypair . _Get_first ( ) );
        return * this;
    }

    template < class _Dx2 = _Dx, _Unique_ptr_enable_default_t < _Dx2 > = 0 >
    constexpr unique_ptr ( nullptr_t ) noexcept : _Mypair ( _Zero_then_variadic_args_t { } ) { }

    inline unique_ptr & operator = ( nullptr_t ) noexcept {
        reset ( );
        return * this;
    }

    inline void reset ( nullptr_t = nullptr ) noexcept {
        reset ( pointer ( ) );
    }

    inline void swap ( unique_ptr & _Right ) noexcept {
        using :: std :: swap;
        swap ( _Mypair . _Myval2, _Right . _Mypair . _Myval2 );
        swap ( _Mypair . _Get_first ( ), _Right . _Mypair . _Get_first ( ) );
    }

    inline ~ unique_ptr ( ) noexcept {
        if ( _Mypair . _Myval2 ) {
            _Mypair . _Get_first ( ) ( _Mypair . _Myval2 );
        }
    }

    [ [ nodiscard ] ] inline _Dx & get_deleter ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline const _Dx & get_deleter ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline _Ty & operator [ ] ( size_t _Idx ) const noexcept {
        return _Mypair . _Myval2 [ _Idx ];
    }

    [ [ nodiscard ] ] inline pointer get ( ) const noexcept {
        return _Mypair . _Myval2;
    }

    inline explicit operator bool ( ) const noexcept {
        return static_cast < bool > ( _Mypair . _Myval2 );
    }

    inline pointer release ( ) noexcept {
        return :: std :: exchange ( _Mypair . _Myval2, nullptr );
    }

    template < class _Uty, _Enable_ctor_reset < _Uty, false_type > = 0 >
    inline void reset ( _Uty _Ptr ) noexcept {
        pointer _Old = :: std :: exchange ( _Mypair . _Myval2, _Ptr );
        if ( _Old ) {
            _Mypair . _Get_first ( ) ( _Old );
        }
    }

    unique_ptr ( const unique_ptr & ) = delete;
    unique_ptr & operator = ( const unique_ptr & ) = delete;

private :
    template < class, class >
    friend class unique_ptr;

    _Compressed_pair < _Dx, pointer > _Mypair;
};
#line 3463
template < class _Ty, class ... _Types, enable_if_t < ! is_array_v < _Ty >, int > = 0 >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] inline unique_ptr < _Ty > make_unique ( _Types && ... _Args ) {
    return unique_ptr < _Ty > ( new _Ty ( :: std :: forward < _Types > ( _Args ) ... ) );
}
#line 3468
template < class _Ty, enable_if_t < is_array_v < _Ty > && extent_v < _Ty > == 0, int > = 0 >
[ [ nodiscard ( "This function constructs an object wrapped by a smart pointer and has no other effects; it is not useful to call this function a" "nd discard the return value." ) ] ] inline unique_ptr < _Ty > make_unique ( const size_t _Size ) {
    using _Elem = remove_extent_t < _Ty >;
    return unique_ptr < _Ty > ( new _Elem [ _Size ] ( ) );
}
#line 3474
template < class _Ty, class ... _Types, enable_if_t < extent_v < _Ty > != 0, int > = 0 >
void make_unique ( _Types && ... ) = delete;
#line 3495 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty, class _Dx, enable_if_t < _Is_swappable < _Dx > :: value, int > = 0 >
inline void swap ( unique_ptr < _Ty, _Dx > & _Left, unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 3500
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] inline bool operator == ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return _Left . get ( ) == _Right . get ( );
}
#line 3506
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator != ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Left == _Right );
}
#line 3512 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator < ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    using _Ptr1 = typename unique_ptr < _Ty1, _Dx1 > :: pointer;
    using _Ptr2 = typename unique_ptr < _Ty2, _Dx2 > :: pointer;
    using _Common = common_type_t < _Ptr1, _Ptr2 >;
    return less < _Common > { } ( _Left . get ( ), _Right . get ( ) );
}
#line 3520
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator >= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Left < _Right );
}
#line 3525
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator > ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return _Right < _Left;
}
#line 3530
template < class _Ty1, class _Dx1, class _Ty2, class _Dx2 >
[ [ nodiscard ] ] bool operator <= ( const unique_ptr < _Ty1, _Dx1 > & _Left, const unique_ptr < _Ty2, _Dx2 > & _Right ) {
    return ! ( _Right < _Left );
}
#line 3548
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator == ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t ) noexcept {
    return ! _Left;
}
#line 3554
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator == ( nullptr_t, const unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    return ! _Right;
}
#line 3559
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator != ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 3564
template < class _Ty, class _Dx >
[ [ nodiscard ] ] bool operator != ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) noexcept {
    return ! ( _Left == _Right );
}
#line 3570 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator < ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    using _Ptr = typename unique_ptr < _Ty, _Dx > :: pointer;
    return less < _Ptr > { } ( _Left . get ( ), _Right );
}
#line 3576
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator < ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    using _Ptr = typename unique_ptr < _Ty, _Dx > :: pointer;
    return less < _Ptr > { } ( _Left, _Right . get ( ) );
}
#line 3582
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator >= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return ! ( _Left < _Right );
}
#line 3587
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator >= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return ! ( _Left < _Right );
}
#line 3592
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator > ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return _Right < _Left;
}
#line 3597
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator > ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return _Right < _Left;
}
#line 3602
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator <= ( const unique_ptr < _Ty, _Dx > & _Left, nullptr_t _Right ) {
    return ! ( _Right < _Left );
}
#line 3607
template < class _Ty, class _Dx >
[ [ nodiscard ] ] inline bool operator <= ( nullptr_t _Left, const unique_ptr < _Ty, _Dx > & _Right ) {
    return ! ( _Right < _Left );
}
#line 3621
template< class _OutTy, class _PxTy, class  = void> 
#line 3622
struct _Can_stream_unique_ptr : public false_type { }; 
#line 3623
template< class _OutTy, class _PxTy> 
#line 3624
struct _Can_stream_unique_ptr< _OutTy, _PxTy, void_t< decltype(std::declval< _OutTy> () << std::declval< _PxTy> ().get())> >  : public true_type { 
#line 3625
}; 
#line 3627
template < class _Elem, class _Traits, class _Yty, class _Dx,
    enable_if_t < _Can_stream_unique_ptr < basic_ostream < _Elem, _Traits > &, const unique_ptr < _Yty, _Dx > & > :: value, int > = 0 >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Out, const unique_ptr < _Yty, _Dx > & _Px ) {

    _Out << _Px . get ( );
    return _Out;
}
#line 3636
enum class pointer_safety { relaxed, preferred, strict}; 
#line 3638
inline void declare_reachable(void *) { } 
#line 3640
template < class _Ty >
_Ty * undeclare_reachable ( _Ty * _Ptr ) {
    return _Ptr;
}
#line 3645
inline void declare_no_pointers(char *, size_t) { } 
#line 3647
inline void undeclare_no_pointers(char *, size_t) { } 
#line 3649
inline pointer_safety get_pointer_safety() noexcept { 
#line 3650
return pointer_safety::relaxed; 
#line 3651
} 
#line 3654 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
template< class _Ty = void> struct owner_less; 
#line 3657
template < class _Ty >
struct owner_less < shared_ptr < _Ty > > {
    using first_argument_type = shared_ptr < _Ty >;
    using second_argument_type = shared_ptr < _Ty >;
    using result_type = bool;

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
};
#line 3676
template < class _Ty >
struct owner_less < weak_ptr < _Ty > > {
    using first_argument_type = weak_ptr < _Ty >;
    using second_argument_type = weak_ptr < _Ty >;
    using result_type = bool;

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }

    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Ty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
};
#line 3696
template<> struct owner_less< void>  { 
#line 3697
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3702
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const shared_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3707
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const shared_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3712
template < class _Ty, class _Uty >
    [ [ nodiscard ] ] bool operator ( ) ( const weak_ptr < _Ty > & _Left, const weak_ptr < _Uty > & _Right ) const noexcept {
        return _Left . owner_before ( _Right );
    }
#line 3717
using is_transparent = int; 
#line 3718
}; 
#line 3720
template < class _Ty, class _Dx >
struct hash < unique_ptr < _Ty, _Dx > > : _Conditionally_enabled_hash < unique_ptr < _Ty, _Dx >,
                                        is_default_constructible_v < hash < typename unique_ptr < _Ty, _Dx > :: pointer > > > {
    static size_t _Do_hash ( const unique_ptr < _Ty, _Dx > & _Keyval ) noexcept (
        _Is_nothrow_hashable < typename unique_ptr < _Ty, _Dx > :: pointer > :: value ) {
        return hash < typename unique_ptr < _Ty, _Dx > :: pointer > { } ( _Keyval . get ( ) );
    }
};
#line 3729
template < class _Ty >
struct hash < shared_ptr < _Ty > > {
    using argument_type = shared_ptr < _Ty >;
    using result_type = size_t;

    [ [ nodiscard ] ] size_t operator ( ) ( const shared_ptr < _Ty > & _Keyval ) const noexcept {
        return hash < typename shared_ptr < _Ty > :: element_type * > ( ) ( _Keyval . get ( ) );
    }
};
#line 3751 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
extern "C" {
#line 3752
void __cdecl _Lock_shared_ptr_spin_lock(); 
#line 3753
void __cdecl _Unlock_shared_ptr_spin_lock(); 
#line 3754
}
#line 3756
struct _Shared_ptr_spin_lock { 
#line 3757
_Shared_ptr_spin_lock() { 
#line 3758
_Lock_shared_ptr_spin_lock(); 
#line 3759
} 
#line 3761
~_Shared_ptr_spin_lock() noexcept { 
#line 3762
_Unlock_shared_ptr_spin_lock(); 
#line 3763
} 
#line 3764
}; 
#line 3766
template < class _Ty >
 [ [ nodiscard ] ] bool atomic_is_lock_free ( const shared_ptr < _Ty > * ) {

    return false;
}
#line 3772
template < class _Ty >
 [ [ nodiscard ] ] shared_ptr < _Ty > atomic_load_explicit (
    const shared_ptr < _Ty > * _Ptr, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    shared_ptr < _Ty > _Result = * _Ptr;
    return _Result;
}
#line 3781
template < class _Ty >
 [ [ nodiscard ] ] shared_ptr < _Ty > atomic_load (
    const shared_ptr < _Ty > * _Ptr ) {
    return :: std :: atomic_load_explicit ( _Ptr, memory_order_seq_cst );
}
#line 3787
template < class _Ty >
 void atomic_store_explicit (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    _Ptr -> swap ( _Other );
}
#line 3795
template < class _Ty >
 void atomic_store (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other ) {
    :: std :: atomic_store_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst );
}
#line 3801
template < class _Ty >
 shared_ptr < _Ty > atomic_exchange_explicit (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other, memory_order ) {

    _Shared_ptr_spin_lock _Lock;
    _Ptr -> swap ( _Other );
    return _Other;
}
#line 3810
template < class _Ty >
 shared_ptr < _Ty > atomic_exchange (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > _Other ) {

    return :: std :: atomic_exchange_explicit ( _Ptr, :: std :: move ( _Other ), memory_order_seq_cst );
}
#line 3817
template < class _Ty >
 bool atomic_compare_exchange_weak_explicit ( shared_ptr < _Ty > * _Ptr,
    shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value, memory_order, memory_order ) {
    shared_ptr < _Ty > _Old_exp;
    _Shared_ptr_spin_lock _Lock;
    bool _Success = _Ptr -> get ( ) == _Exp -> get ( ) && ! _Ptr -> owner_before ( * _Exp ) && ! _Exp -> owner_before ( * _Ptr );
    if ( _Success ) {
        _Ptr -> swap ( _Value );
    } else {
        _Exp -> swap ( _Old_exp );
        * _Exp = * _Ptr;
    }
    return _Success;
}
#line 3832
template < class _Ty >
 bool atomic_compare_exchange_weak (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value ) {

    return :: std :: atomic_compare_exchange_weak_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 3840
template < class _Ty >
 bool atomic_compare_exchange_strong_explicit ( shared_ptr < _Ty > * _Ptr,
    shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value, memory_order, memory_order ) {
    return :: std :: atomic_compare_exchange_weak_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 3847
template < class _Ty >
 bool atomic_compare_exchange_strong (
    shared_ptr < _Ty > * _Ptr, shared_ptr < _Ty > * _Exp, shared_ptr < _Ty > _Value ) {

    return :: std :: atomic_compare_exchange_strong_explicit (
        _Ptr, _Exp, :: std :: move ( _Value ), memory_order_seq_cst, memory_order_seq_cst );
}
#line 4336 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 4337
using std::allocate_shared;
#line 4338
using std::bad_weak_ptr;
#line 4339
using std::const_pointer_cast;
#line 4340
using std::dynamic_pointer_cast;
#line 4341
using std::enable_shared_from_this;
#line 4342
using std::get_deleter;
#line 4343
using std::make_shared;
#line 4344
using std::shared_ptr;
#line 4345
using std::static_pointer_cast;
#line 4346
using std::swap;
#line 4347
using std::weak_ptr;
#line 4348
}
#line 4351 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\memory"
}
#line 4358
#pragma warning(pop)
#pragma pack ( pop )
#line 15 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xfacet"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 22
namespace std { 
#line 23
class __declspec(dllimport) _Facet_base { 
#line 25
public: virtual ~_Facet_base() noexcept { } 
#line 28
virtual void _Incref() noexcept = 0; 
#line 31
virtual _Facet_base *_Decref() noexcept = 0; 
#line 32
}; 
#line 37 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xfacet"
void __cdecl _Facet_Register(_Facet_base *); 
#line 39 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xfacet"
}
#line 42
#pragma warning(pop)
#pragma pack ( pop )
#line 11 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_xlocinfo_types.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 18
extern "C" {
#line 20
struct _Collvec { 
#line 21
unsigned _Page; 
#line 22
__wchar_t *_LocaleName; 
#line 23
}; 
#line 25
struct _Ctypevec { 
#line 26
unsigned _Page; 
#line 27
const short *_Table; 
#line 28
int _Delfl; 
#line 29
__wchar_t *_LocaleName; 
#line 30
}; 
#line 32
struct _Cvtvec { 
#line 33
unsigned _Page; 
#line 34
unsigned _Mbcurmax; 
#line 35
int _Isclocale; 
#line 36
unsigned char _Isleadbyte[32]; 
#line 37
}; 
#line 39
}
#line 43
#pragma warning(pop)
#pragma pack ( pop )
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\cctype"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
using ::isalnum;
#line 22
using ::isalpha;
#line 23
using ::iscntrl;
#line 24
using ::isdigit;
#line 25
using ::isgraph;
#line 26
using ::islower;
#line 27
using ::isprint;
#line 28
using ::ispunct;
#line 29
using ::isspace;
#line 30
using ::isupper;
#line 31
using ::isxdigit;
#line 32
using ::tolower;
#line 33
using ::toupper;
#line 35
using ::isblank;
#line 36
}
#line 40
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\locale.h"
#pragma warning(push)
#pragma warning(disable: 4324 4514 4574 4710 4793 4820 4995 4996 28719 28726 28727 )
#line 18
__pragma( pack ( push, 8 )) extern "C" {
#line 34
struct lconv { 
#line 36
char *decimal_point; 
#line 37
char *thousands_sep; 
#line 38
char *grouping; 
#line 39
char *int_curr_symbol; 
#line 40
char *currency_symbol; 
#line 41
char *mon_decimal_point; 
#line 42
char *mon_thousands_sep; 
#line 43
char *mon_grouping; 
#line 44
char *positive_sign; 
#line 45
char *negative_sign; 
#line 46
char int_frac_digits; 
#line 47
char frac_digits; 
#line 48
char p_cs_precedes; 
#line 49
char p_sep_by_space; 
#line 50
char n_cs_precedes; 
#line 51
char n_sep_by_space; 
#line 52
char p_sign_posn; 
#line 53
char n_sign_posn; 
#line 54
__wchar_t *_W_decimal_point; 
#line 55
__wchar_t *_W_thousands_sep; 
#line 56
__wchar_t *_W_int_curr_symbol; 
#line 57
__wchar_t *_W_currency_symbol; 
#line 58
__wchar_t *_W_mon_decimal_point; 
#line 59
__wchar_t *_W_mon_thousands_sep; 
#line 60
__wchar_t *_W_positive_sign; 
#line 61
__wchar_t *_W_negative_sign; 
#line 62
}; 
#line 64
struct tm; 
#line 88
__declspec(dllimport) void __cdecl _lock_locales(); 
#line 89
__declspec(dllimport) void __cdecl _unlock_locales(); 
#line 92
__declspec(dllimport) int __cdecl _configthreadlocale(int _Flag); 
#line 97
__declspec(dllimport) char *__cdecl setlocale(int _Category, const char * _Locale); 
#line 103
__declspec(dllimport) lconv *__cdecl localeconv(); 
#line 106
__declspec(dllimport) _locale_t __cdecl _get_current_locale(); 
#line 109
__declspec(dllimport) _locale_t __cdecl _create_locale(int _Category, const char * _Locale); 
#line 114
__declspec(dllimport) void __cdecl _free_locale(_locale_t _Locale); 
#line 120
__declspec(dllimport) __wchar_t *__cdecl _wsetlocale(int _Category, const __wchar_t * _Locale); 
#line 126
__declspec(dllimport) _locale_t __cdecl _wcreate_locale(int _Category, const __wchar_t * _Locale); 
#line 133
__declspec(dllimport) __wchar_t **__cdecl ___lc_locale_name_func(); 
#line 134
__declspec(dllimport) unsigned __cdecl ___lc_codepage_func(); 
#line 135
__declspec(dllimport) unsigned __cdecl ___lc_collate_cp_func(); 
#line 143
__declspec(dllimport) char *__cdecl _Getdays(); 
#line 147
__declspec(dllimport) char *__cdecl _Getmonths(); 
#line 149
__declspec(dllimport) void *__cdecl _Gettnames(); 
#line 153
__declspec(dllimport) __wchar_t *__cdecl _W_Getdays(); 
#line 157
__declspec(dllimport) __wchar_t *__cdecl _W_Getmonths(); 
#line 159
__declspec(dllimport) void *__cdecl _W_Gettnames(); 
#line 162
__declspec(dllimport) size_t __cdecl _Strftime(char * _Buffer, size_t _Max_size, const char * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 170
__declspec(dllimport) size_t __cdecl _Wcsftime(__wchar_t * _Buffer, size_t _Max_size, const __wchar_t * _Format, const tm * _Timeptr, void * _Lc_time_arg); 
#line 181 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0\\ucrt\\locale.h"
}__pragma( pack ( pop )) 
#line 183
#pragma warning(pop)
#line 13 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\clocale"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 20
namespace std { 
#line 21
using ::lconv;
#line 22
using ::localeconv;
#line 23
using ::setlocale;
#line 24
}
#line 28
#pragma warning(pop)
#pragma pack ( pop )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocinfo"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 25
extern "C" {
#line 46
_Collvec __cdecl _Getcoll(); 
#line 47
_Ctypevec __cdecl _Getctype(); 
#line 48
_Cvtvec __cdecl _Getcvt(); 
#line 49
int __cdecl _Getdateorder(); 
#line 57
int __cdecl _Mbrtowc(__wchar_t *, const char *, size_t _Max_multibyte, mbstate_t *, const _Cvtvec *); 
#line 61 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocinfo"
int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *); 
#line 62
size_t __cdecl _Strxfrm(char * _String1, char * _End1, const char *, const char *, const _Collvec *); 
#line 65
int __cdecl _Tolower(int, const _Ctypevec *); 
#line 66
int __cdecl _Toupper(int, const _Ctypevec *); 
#line 68
int __cdecl _Wcrtomb(char *, __wchar_t, mbstate_t *, const _Cvtvec *); 
#line 69
int __cdecl _Wcscoll(const __wchar_t *, const __wchar_t *, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 71
size_t __cdecl _Wcsxfrm(__wchar_t * _String1, __wchar_t * _End1, const __wchar_t *, const __wchar_t *, const _Collvec *); 
#line 75
short __cdecl _Getwctype(__wchar_t, const _Ctypevec *); 
#line 76
const __wchar_t *__cdecl _Getwctypes(const __wchar_t *, const __wchar_t *, short *, const _Ctypevec *); 
#line 78
__wchar_t __cdecl _Towlower(__wchar_t, const _Ctypevec *); 
#line 79
__wchar_t __cdecl _Towupper(__wchar_t, const _Ctypevec *); 
#line 81
}
#line 83
extern "C" {
#line 84
__declspec(dllimport) char *__cdecl _Getdays(); 
#line 86
__declspec(dllimport) char *__cdecl _Getmonths(); 
#line 88
__declspec(dllimport) void *__cdecl _Gettnames(); 
#line 90
__declspec(dllimport) size_t __cdecl _Strftime(char *, size_t _Maxsize, const char *, const tm *, void *); 
#line 93
__declspec(dllimport) __wchar_t *__cdecl _W_Getdays(); 
#line 95
__declspec(dllimport) __wchar_t *__cdecl _W_Getmonths(); 
#line 97
__declspec(dllimport) void *__cdecl _W_Gettnames(); 
#line 99
__declspec(dllimport) size_t __cdecl _Wcsftime(__wchar_t *, size_t _Maxsize, const __wchar_t *, const tm *, void *); 
#line 101
}
#line 103
namespace std { 
#line 104
class __declspec(dllimport) _Timevec { 
#line 106
public: explicit _Timevec(void *_Ptr = 0) : _Timeptr(_Ptr) { } 
#line 108
_Timevec(const _Timevec &_Right) : _Timeptr((nullptr)) { 
#line 109
((*this) = _Right); 
#line 110
} 
#line 112
~_Timevec() noexcept { 
#line 113
::free(_Timeptr); 
#line 114
} 
#line 116
_Timevec &operator=(const _Timevec &_Right) { 
#line 117
if (this != (&_Right)) { 
#line 118
::free(_Timeptr); 
#line 119
(_Timeptr) = (_Right._Timeptr); 
#line 120
((const_cast< _Timevec &>(_Right))._Timeptr) = (nullptr); 
#line 121
}  
#line 123
return *this; 
#line 124
} 
#line 126
void *_Getptr() const { 
#line 127
return _Timeptr; 
#line 128
} 
#line 131
private: void *_Timeptr; 
#line 132
}; 
#line 134
template < class _Elem >
class __declspec ( dllimport ) _Yarn {
public :
     _Yarn ( ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) { }

     _Yarn ( const _Yarn & _Right ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) {
        * this = _Right;
    }

     _Yarn ( const _Elem * _Right ) noexcept : _Myptr ( nullptr ), _Nul ( 0 ) {
        * this = _Right;
    }

    _Yarn & operator = ( const _Yarn & _Right ) noexcept {
        return * this = _Right . _Myptr;
    }

    _Yarn & operator = ( const _Elem * _Right ) noexcept {
        if ( _Myptr != _Right ) {
            _Tidy ( );

            if ( _Right ) {
                const _Elem * _Ptr = _Right;
                while ( * _Ptr != _Elem { } ) {
                    ++ _Ptr;
                }

                const auto _Count = ( ++ _Ptr - _Right ) * sizeof ( _Elem );


                _Myptr = static_cast < _Elem * > ( _malloc_dbg ( _Count, 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocinfo", 164 ) );




                if ( _Myptr ) {
                    :: memcpy ( _Myptr, _Right, _Count );
                }
            }
        }

        return * this;
    }

     ~ _Yarn ( ) noexcept {
        _Tidy ( );
    }

    [ [ nodiscard ] ] bool empty ( ) const noexcept {
        return _Myptr == nullptr;
    }

      const _Elem * c_str ( ) const noexcept {
        return _Myptr ? _Myptr : & _Nul;
    }

    [ [ nodiscard ] ] bool _Empty ( ) const noexcept {
        return _Myptr == nullptr;
    }

      const _Elem * _C_str ( ) const noexcept {
        return _Myptr ? _Myptr : & _Nul;
    }

private :
    void _Tidy ( ) noexcept {
        if ( _Myptr ) {

            _free_dbg ( _Myptr, 2 );



        }

        _Myptr = nullptr;
    }

    _Elem * _Myptr;
    _Elem _Nul;
};
#line 215 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocinfo"
class __declspec(dllimport) _Locinfo { 
#line 217
public: using _Collvec = ::_Collvec; 
#line 218
using _Ctypevec = ::_Ctypevec; 
#line 219
using _Cvtvec = ::_Cvtvec; 
#line 220
using _Timevec = std::_Timevec; 
#line 222
static void __cdecl _Locinfo_ctor(_Locinfo *, const char *); 
#line 223
static void __cdecl _Locinfo_ctor(_Locinfo *, int, const char *); 
#line 224
static void __cdecl _Locinfo_dtor(_Locinfo *); 
#line 225
static _Locinfo &__cdecl _Locinfo_Addcats(_Locinfo *, int, const char *); 
#line 227
_Locinfo(const char *_Pch = "C") : _Lock(0) 
#line 231 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocinfo"
{ 
#line 232
if (_Pch) { 
#line 233
_Locinfo_ctor(this, _Pch); 
#line 234
return; 
#line 235
}  
#line 237
_Xruntime_error("bad locale name"); 
#line 238
} 
#line 240
_Locinfo(int _Cat, const char *_Pch) : _Lock(0) 
#line 244 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocinfo"
{ 
#line 245
if (_Pch) { 
#line 246
_Locinfo_ctor(this, _Cat, _Pch); 
#line 247
return; 
#line 248
}  
#line 250
_Xruntime_error("bad locale name"); 
#line 251
} 
#line 253
~_Locinfo() noexcept { 
#line 254
_Locinfo_dtor(this); 
#line 255
} 
#line 257
_Locinfo &_Addcats(int _Cat, const char *_Pch) { 
#line 258
if (_Pch) { 
#line 259
return _Locinfo_Addcats(this, _Cat, _Pch); 
#line 260
}  
#line 262
_Xruntime_error("bad locale name"); 
#line 263
} 
#line 265
const char *_Getname() const { 
#line 266
return (_Newlocname)._C_str(); 
#line 267
} 
#line 269
_Collvec _Getcoll() const { 
#line 270
return ::_Getcoll(); 
#line 271
} 
#line 273
_Ctypevec _Getctype() const { 
#line 274
return ::_Getctype(); 
#line 275
} 
#line 277
_Cvtvec _Getcvt() const { 
#line 278
return ::_Getcvt(); 
#line 279
} 
#line 281
const lconv *_Getlconv() const { 
#line 282
return localeconv(); 
#line 283
} 
#line 285
_Timevec _Gettnames() const { 
#line 286
return ((std::_Timevec)(::_Gettnames())); 
#line 287
} 
#line 289
const char *_Getdays() const { 
#line 290
const char *_Ptr = ::_Getdays(); 
#line 291
if (_Ptr) { 
#line 292
(((const_cast< _Locinfo *>(this))->_Days) = _Ptr); 
#line 293
::free(const_cast< char *>(_Ptr)); 
#line 294
}  
#line 296
return (!(_Days)._Empty()) ? (_Days)._C_str() : (":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday:Thu:Thursday:Fri:Friday:Sat:Saturday"); 
#line 299
} 
#line 301
const char *_Getmonths() const { 
#line 302
const char *_Ptr = ::_Getmonths(); 
#line 303
if (_Ptr) { 
#line 304
(((const_cast< _Locinfo *>(this))->_Months) = _Ptr); 
#line 305
::free(const_cast< char *>(_Ptr)); 
#line 306
}  
#line 308
return (!(_Months)._Empty()) ? (_Months)._C_str() : (":Jan:January:Feb:February:Mar:March:Apr:April:May:May:Jun:June:Jul:July:Aug:August:Sep:September:Oct:October:Nov:November:Dec:De" "cember"); 
#line 313
} 
#line 315
const char *_Getfalse() const { 
#line 316
return "false"; 
#line 317
} 
#line 319
const char *_Gettrue() const { 
#line 320
return "true"; 
#line 321
} 
#line 323
int _Getdateorder() const { 
#line 324
return ::_Getdateorder(); 
#line 325
} 
#line 327
_Timevec _W_Gettnames() const { 
#line 328
return ((std::_Timevec)(::_W_Gettnames())); 
#line 329
} 
#line 331
const unsigned short *_W_Getdays() const { 
#line 332
const __wchar_t *_Ptr = ::_W_Getdays(); 
#line 333
if (_Ptr) { 
#line 334
(((const_cast< _Locinfo *>(this))->_W_Days) = _Ptr); 
#line 335
::free(const_cast< __wchar_t *>(_Ptr)); 
#line 336
}  
#line 338
const __wchar_t *_Ret; 
#line 340
if ((_W_Days)._Empty()) { 
#line 341
_Ret = (L"\x3a\x53\x75\x6e\x3a\x53\x75\x6e\x64\x61\x79\x3a\x4d\x6f\x6e\x3a\x4d\x6f\x6e\x64\x61\x79\x3a\x54\x75\x65\x3a\x54\x75\x65\x73\x64" L"\x61\x79\x3a\x57\x65\x64\x3a\x57\x65\x64\x6e\x65\x73\x64\x61\x79\x3a\x54\x68\x75\x3a\x54\x68\x75\x72\x73\x64\x61\x79\x3a\x46\x72" L"\x69\x3a\x46\x72\x69\x64\x61\x79\x3a\x53\x61\x74\x3a\x53\x61\x74\x75\x72\x64\x61\x79"); 
#line 342
} else { 
#line 343
_Ret = (_W_Days)._C_str(); 
#line 344
}  
#line 346
return reinterpret_cast< const unsigned short *>(_Ret); 
#line 347
} 
#line 349
const unsigned short *_W_Getmonths() const { 
#line 350
const __wchar_t *_Ptr = ::_W_Getmonths(); 
#line 351
if (_Ptr) { 
#line 352
(((const_cast< _Locinfo *>(this))->_W_Months) = _Ptr); 
#line 353
::free(const_cast< __wchar_t *>(_Ptr)); 
#line 354
}  
#line 356
const __wchar_t *_Ret; 
#line 358
if ((_W_Months)._Empty()) { 
#line 359
_Ret = (L"\x3a\x4a\x61\x6e\x3a\x4a\x61\x6e\x75\x61\x72\x79\x3a\x46\x65\x62\x3a\x46\x65\x62\x72\x75\x61\x72\x79\x3a\x4d\x61\x72\x3a\x4d\x61" L"\x72\x63\x68\x3a\x41\x70\x72\x3a\x41\x70\x72\x69\x6c\x3a\x4d\x61\x79\x3a\x4d\x61\x79\x3a\x4a\x75\x6e\x3a\x4a\x75\x6e\x65\x3a\x4a" L"\x75\x6c\x3a\x4a\x75\x6c\x79\x3a\x41\x75\x67\x3a\x41\x75\x67\x75\x73\x74\x3a\x53\x65\x70\x3a\x53\x65\x70\x74\x65\x6d\x62\x65\x72" L"\x3a\x4f\x63\x74\x3a\x4f\x63\x74\x6f\x62\x65\x72\x3a\x4e\x6f\x76\x3a\x4e\x6f\x76\x65\x6d\x62\x65\x72\x3a\x44\x65\x63\x3a\x44\x65" L"\x63\x65\x6d\x62\x65\x72"); 
#line 361
} else { 
#line 362
_Ret = (_W_Months)._C_str(); 
#line 363
}  
#line 365
return reinterpret_cast< const unsigned short *>(_Ret); 
#line 366
} 
#line 368
_Locinfo(const _Locinfo &) = delete;
#line 369
_Locinfo &operator=(const _Locinfo &) = delete;
#line 375
private: _Lockit _Lock; 
#line 378 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocinfo"
_Yarn< char>  _Days; 
#line 379
_Yarn< char>  _Months; 
#line 380
_Yarn< __wchar_t>  _W_Days; 
#line 381
_Yarn< __wchar_t>  _W_Months; 
#line 382
_Yarn< char>  _Oldlocname; 
#line 383
_Yarn< char>  _Newlocname; 
#line 384
}; 
#line 386
template < class _Elem >
int __cdecl _LStrcoll ( const _Elem * _First1, const _Elem * _Last1, const _Elem * _First2, const _Elem * _Last2,
    const _Locinfo :: _Collvec * ) {
    for (; _First1 != _Last1 && _First2 != _Last2; ++ _First1, ++ _First2 ) {
        if ( * _First1 < * _First2 ) {
            return - 1;
        } else if ( * _First2 < * _First1 ) {
            return + 1;
        }
    }

    return _First2 != _Last2 ? - 1 : _First1 != _Last1 ? + 1 : 0;
}
#line 401
template<> inline int __cdecl _LStrcoll(const char *_First1, const char *_Last1, const char *_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 402
_Vector) { 
#line 403
return _Strcoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 404
} 
#line 407
template<> inline int __cdecl _LStrcoll(const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *_First2, const __wchar_t *
#line 408
_Last2, const _Locinfo::_Collvec *
#line 409
_Vector) { 
#line 410
return _Wcscoll(_First1, _Last1, _First2, _Last2, _Vector); 
#line 411
} 
#line 413
template < class _Elem >
size_t __cdecl _LStrxfrm ( _Elem * _First1, _Elem * _Last1, const _Elem * _First2, const _Elem * _Last2,
    const _Locinfo :: _Collvec * ) {
    const ptrdiff_t _Count = _Last2 - _First2;
    if ( _Count <= _Last1 - _First1 ) {
        :: memcpy ( _First1, _First2, _Count * sizeof ( _Elem ) );
    }

    return _Count;
}
#line 425
template<> inline size_t __cdecl _LStrxfrm(char *_First1, char *
#line 426
_Last1, const char *_First2, const char *_Last2, const _Locinfo::_Collvec *
#line 427
_Vector) { 
#line 428
return _Strxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 429
} 
#line 432
template<> inline size_t __cdecl _LStrxfrm(__wchar_t *_First1, __wchar_t *
#line 433
_Last1, const __wchar_t *_First2, const __wchar_t *_Last2, const _Locinfo::_Collvec *
#line 434
_Vector) { 
#line 435
return _Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector); 
#line 436
} 
#line 437
}
#line 440
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 24
namespace std { 
#line 25
template< class _Dummy> 
#line 26
class _Locbase { 
#line 28
public: static const int collate = ((1 << 1) >> 1); 
#line 29
static const int ctype = ((1 << 2) >> 1); 
#line 30
static const int monetary = ((1 << 3) >> 1); 
#line 31
static const int numeric = ((1 << 4) >> 1); 
#line 32
static const int time = ((1 << 5) >> 1); 
#line 33
static const int messages = ((1 << 6) >> 1); 
#line 34
static const int all = (((1 << (6 + 1)) >> 1) - 1); 
#line 35
static const int none = 0; 
#line 36
}; 
#line 38
template< class _Dummy> const int _Locbase< _Dummy> ::collate; 
#line 40
template< class _Dummy> const int _Locbase< _Dummy> ::ctype; 
#line 42
template< class _Dummy> const int _Locbase< _Dummy> ::monetary; 
#line 44
template< class _Dummy> const int _Locbase< _Dummy> ::numeric; 
#line 46
template< class _Dummy> const int _Locbase< _Dummy> ::time; 
#line 48
template< class _Dummy> const int _Locbase< _Dummy> ::messages; 
#line 50
template< class _Dummy> const int _Locbase< _Dummy> ::all; 
#line 52
template< class _Dummy> const int _Locbase< _Dummy> ::none; 
#line 55
template< class _Elem> class collate; 
#line 58
struct __declspec(dllimport) _Crt_new_delete { 
#line 60
void *__cdecl operator new(size_t _Size) { 
#line 61
void *_Ptr = operator new(_Size, nothrow); 
#line 62
if (!_Ptr) { 
#line 63
_Xbad_alloc(); 
#line 64
}  
#line 66
return _Ptr; 
#line 67
} 
#line 69
void *__cdecl operator new(size_t _Size, const nothrow_t &) noexcept { 
#line 70
return _malloc_dbg((_Size > (0)) ? _Size : (1), 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale", 70); 
#line 71
} 
#line 73
void __cdecl operator delete(void *_Ptr) noexcept { 
#line 74
::free(_Ptr); 
#line 75
} 
#line 77
void __cdecl operator delete(void *_Ptr, const nothrow_t &) noexcept { 
#line 78
operator delete(_Ptr); 
#line 79
} 
#line 81
void *__cdecl operator new(size_t, void *_Ptr) noexcept { 
#line 82
return _Ptr; 
#line 83
} 
#line 85
void __cdecl operator delete(void *, void *) noexcept { } 
#line 87 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
}; 
#line 89
class locale : public _Locbase< int> , public _Crt_new_delete { 
#line 91
public: using category = int; 
#line 93
class __declspec(dllimport) id { 
#line 95
public: id(size_t _Val = 0) : _Id(_Val) { } 
#line 97
id(const id &) = delete;
#line 98
id &operator=(const id &) = delete;
#line 100
operator size_t() { 
#line 101
if ((_Id) == (0)) { 
#line 102
{ _Lockit _Lock(0); 
#line 103
if ((_Id) == (0)) { 
#line 104
(_Id) = (static_cast< size_t>(++_Id_cnt)); 
#line 105
}  
#line 106
} 
#line 107
}  
#line 108
return _Id; 
#line 109
} 
#line 112
private: size_t _Id; 
#line 114
static int _Id_cnt; 
#line 115
}; 
#line 117
struct _Facet_guard; 
#line 119
class __declspec(dllimport) facet : public _Facet_base, public _Crt_new_delete { 
#line 122
friend struct _Facet_guard; 
#line 125
public: static size_t __cdecl _Getcat(const facet ** = 0, const locale * = 0) { 
#line 127
return static_cast< size_t>(-1); 
#line 128
} 
#line 130
virtual void _Incref() noexcept override { 
#line 131
_InterlockedIncrement(reinterpret_cast< volatile long *>(&(_Myrefs))); 
#line 132
} 
#line 134
virtual _Facet_base *_Decref() noexcept override { 
#line 135
if (_InterlockedDecrement(reinterpret_cast< volatile long *>(&(_Myrefs))) == (0)) { 
#line 136
return this; 
#line 137
}  
#line 139
return nullptr; 
#line 140
} 
#line 143
private: _Atomic_counter_t _Myrefs; 
#line 146
protected: explicit facet(size_t _Initrefs = 0) noexcept : _Myrefs(static_cast< _Atomic_counter_t>(_Initrefs)) 
#line 148
{ } 
#line 150
virtual ~facet() noexcept override { } 
#line 153
public: facet(const facet &) = delete;
#line 154
facet &operator=(const facet &) = delete;
#line 155
}; 
#line 157
struct [[nodiscard]] _Facet_guard { 
#line 158
facet *_Target; 
#line 159
~_Facet_guard() { 
#line 160
if (_Target) { 
#line 161
delete (_Target)->_Decref(); 
#line 162
}  
#line 163
} 
#line 164
}; 
#line 166
class __declspec(dllimport) _Locimp : public facet { 
#line 168
protected: virtual ~_Locimp() noexcept { 
#line 169
_Locimp_dtor(this); 
#line 170
} 
#line 173
private: static _Locimp *__cdecl _New_Locimp(bool _Transparent = false); 
#line 174
static _Locimp *__cdecl _New_Locimp(const _Locimp & _Right); 
#line 176
static void __cdecl _Locimp_dtor(_Locimp *); 
#line 177
static void __cdecl _Locimp_Addfac(_Locimp *, facet *, size_t); 
#line 178
static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp &); 
#line 180
friend class locale; 
#line 182
_Locimp(bool _Transparent) : facet(1), _Facetvec((nullptr)), _Facetcount((0)), _Catmask(none), _Xparent(_Transparent), _Name("*") 
#line 183
{ 
#line 184
} 
#line 186
_Locimp(const _Locimp &_Right) : facet(1), _Facetvec((nullptr)), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask), _Xparent(_Right._Xparent), _Name((_Right._Name).c_str()) 
#line 188
{ 
#line 189
_Locimp_ctor(this, _Right); 
#line 190
} 
#line 192
void _Addfac(facet *_Pfacet, size_t _Id) { 
#line 193
_Locimp_Addfac(this, _Pfacet, _Id); 
#line 194
} 
#line 196
static _Locimp *__cdecl _Makeloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 199
static void __cdecl _Makewloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 203
static void __cdecl _Makeushloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 207 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
static void __cdecl _Makexloc(const _Locinfo &, category, _Locimp *, const locale *); 
#line 210
facet **_Facetvec; 
#line 211
size_t _Facetcount; 
#line 212
category _Catmask; 
#line 213
bool _Xparent; 
#line 214
_Yarn< char>  _Name; 
#line 216
static _Locimp *_Clocptr; 
#line 219
public: _Locimp &operator=(const _Locimp &) = delete;
#line 220
}; 
#line 222
template < class _Elem, class _Traits, class _Alloc >
    bool operator ( ) (
        const basic_string < _Elem, _Traits, _Alloc > & _Left, const basic_string < _Elem, _Traits, _Alloc > & _Right ) const {

        const auto & _Coll_fac = :: std :: use_facet < :: std :: collate < _Elem >> ( * this );

        const _Elem * const _Left_data = _Left . data ( );
        const _Elem * const _Right_data = _Right . data ( );
        return _Coll_fac . compare ( _Left_data, _Left_data + _Left . size ( ), _Right_data, _Right_data + _Right . size ( ) ) < 0;
    }
#line 233
template < class _Facet >
    locale combine ( const locale & _Loc ) const {
        _Facet * _Facptr;

        try {
        _Facptr = const_cast < _Facet * > ( :: std :: addressof ( :: std :: use_facet < _Facet > ( _Loc ) ) );
        } catch ( ... ) {
        _Xruntime_error ( "locale::combine facet missing" );
        }

        _Locimp * _Newimp = _Locimp :: _New_Locimp ( * _Ptr );
        _Newimp -> _Addfac ( _Facptr, _Facet :: id );
        _Newimp -> _Catmask = none;
        _Newimp -> _Name = "*";
        return locale { _Newimp };
    }
#line 250
template < class _Facet >
    locale ( const locale & _Loc, const _Facet * _Facptr ) : _Ptr ( _Locimp :: _New_Locimp ( * _Loc . _Ptr ) ) {
        if ( _Facptr ) {
            _Ptr -> _Addfac ( const_cast < _Facet * > ( _Facptr ), _Facet :: id );
            _Ptr -> _Catmask = none;
            _Ptr -> _Name = "*";
        }
    }
#line 259
#pragma warning(push)
#pragma warning(disable : 26495)
#line 269
locale(_Uninitialized) { } 
#pragma warning(pop)
#line 272
locale(const locale &_Right) noexcept : _Ptr(_Right._Ptr) { 
#line 273
(_Ptr)->_Incref(); 
#line 274
} 
#line 276
locale() noexcept : _Ptr(_Init(true)) { } 
#line 279
locale(const locale &_Loc, const locale &_Other, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 281
if (_Cat != none) { 
#line 282
do { if ((_Cat & all) == _Cat) { } else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale", 282, 0, "%s", "the bitmask value specifying category must be valid")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x74\x68\x65\x20\x62\x69\x74\x6d\x61\x73\x6b\x20\x76\x61\x6c\x75\x65\x20\x73\x70\x65\x63\x69\x66\x79\x69\x6e\x67\x20\x63\x61" L"\x74\x65\x67\x6f\x72\x79\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x76\x61\x6c\x69\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6c\x6f\x63\x61\x6c" L"\x65", 282, 0); } while (false); }  ; } while (false); 
#line 283
_Facet_guard _Guard{_Ptr}; 
#line 284
{ _Locinfo _Lobj; 
#line 285
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other); 
#line 286
_Lobj._Addcats((_Loc._Ptr)->_Catmask, (_Loc.name()).c_str()); 
#line 287
_Lobj._Addcats((_Other._Ptr)->_Catmask, (_Other.name()).c_str()); 
#line 288
((_Ptr)->_Catmask) = (((_Loc._Ptr)->_Catmask) | ((_Other._Ptr)->_Catmask)); 
#line 289
(((_Ptr)->_Name) = (_Lobj._Getname())); 
#line 290
} 
#line 291
(_Guard._Target) = (nullptr); 
#line 292
}  
#line 293
} 
#line 296
private: void _Construct(const string &_Str, category _Cat) { 
#line 297
do { if ((_Cat & all) == _Cat) { } else { do { (void)((1 != _CrtDbgReport(2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale", 297, 0, "%s", "the bitmask value specifying category must be valid")) || (__debugbreak(), 0)); ::_invalid_parameter(L"\x22\x74\x68\x65\x20\x62\x69\x74\x6d\x61\x73\x6b\x20\x76\x61\x6c\x75\x65\x20\x73\x70\x65\x63\x69\x66\x79\x69\x6e\x67\x20\x63\x61" L"\x74\x65\x67\x6f\x72\x79\x20\x6d\x75\x73\x74\x20\x62\x65\x20\x76\x61\x6c\x69\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x78\x6c\x6f\x63\x61\x6c" L"\x65", 297, 0); } while (false); }  ; } while (false); 
#line 299
bool _Bad = false; 
#line 300
_Init(); 
#line 301
if (_Cat != none) { 
#line 302
_Facet_guard _Guard{_Ptr}; 
#line 303
{ _Locinfo _Lobj(_Cat, _Str.c_str()); 
#line 304
if (this->_Badname(_Lobj)) { 
#line 305
_Bad = true; 
#line 306
} else { 
#line 307
_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr); 
#line 308
((_Ptr)->_Catmask) = _Cat; 
#line 309
(((_Ptr)->_Name) = (_Str.c_str())); 
#line 310
}  
#line 311
} 
#line 312
(_Guard._Target) = (nullptr); 
#line 313
}  
#line 315
if (_Bad) { 
#line 316
delete (_Ptr)->_Decref(); 
#line 317
_Xruntime_error("bad locale name"); 
#line 318
}  
#line 319
} 
#line 322
public: explicit locale(const char *_Locname, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) { 
#line 326
if (_Locname) { 
#line 327
this->_Construct(_Locname, _Cat); 
#line 328
return; 
#line 329
}  
#line 331
_Xruntime_error("bad locale name"); 
#line 332
} 
#line 334
locale(const locale &_Loc, const char *_Locname, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 338
if (_Locname) { 
#line 339
this->_Construct(_Locname, _Cat); 
#line 340
return; 
#line 341
}  
#line 343
_Xruntime_error("bad locale name"); 
#line 344
} 
#line 346
explicit locale(const string &_Str, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) { 
#line 348
this->_Construct(_Str, _Cat); 
#line 349
} 
#line 351
locale(const locale &_Loc, const string &_Str, category _Cat) : _Ptr(_Locimp::_New_Locimp(*(_Loc._Ptr))) { 
#line 353
this->_Construct(_Str, _Cat); 
#line 354
} 
#line 357 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
~locale() noexcept { 
#line 358
if (_Ptr) { 
#line 359
delete (_Ptr)->_Decref(); 
#line 360
}  
#line 361
} 
#line 363
const locale &operator=(const locale &_Right) noexcept { 
#line 364
if ((_Ptr) != (_Right._Ptr)) { 
#line 365
delete (_Ptr)->_Decref(); 
#line 366
(_Ptr) = (_Right._Ptr); 
#line 367
(_Ptr)->_Incref(); 
#line 368
}  
#line 369
return *this; 
#line 370
} 
#line 372
string name() const { 
#line 373
return ((_Ptr) ? ((_Ptr)->_Name).c_str() : string{}); 
#line 374
} 
#line 376
const char *_C_str() const noexcept { 
#line 377
return (_Ptr) ? ((_Ptr)->_Name).c_str() : (""); 
#line 378
} 
#line 380
const facet *_Getfacet(size_t _Id) const { 
#line 381
const facet *_Facptr = (_Id < ((_Ptr)->_Facetcount)) ? ((_Ptr)->_Facetvec)[_Id] : (nullptr); 
#line 382
if (_Facptr || (!((_Ptr)->_Xparent))) { 
#line 383
return _Facptr; 
#line 384
}  
#line 387
_Locimp *_Ptr0 = _Getgloballocale(); 
#line 388
if (_Id < (_Ptr0->_Facetcount)) { 
#line 389
return (_Ptr0->_Facetvec)[_Id]; 
#line 390
}  
#line 392
return nullptr; 
#line 393
} 
#line 395
[[nodiscard]] bool operator==(const locale &_Loc) const noexcept { 
#line 396
return ((_Ptr) == (_Loc._Ptr)) || ((::strcmp(this->_C_str(), "*") != 0) && (::strcmp(this->_C_str(), _Loc._C_str()) == 0)); 
#line 397
} 
#line 400
[[nodiscard]] bool operator!=(const locale &_Right) const noexcept { 
#line 401
return !((*this) == _Right); 
#line 402
} 
#line 405 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
static const locale &__cdecl classic(); 
#line 407
static locale __cdecl global(const locale &); 
#line 409
static locale __cdecl empty(); 
#line 412
private: locale(_Locimp *_Ptrimp) : _Ptr(_Ptrimp) { } 
#line 414
static _Locimp *__cdecl _Init(bool _Do_incref = false); 
#line 415
static _Locimp *__cdecl _Getgloballocale(); 
#line 416
static void __cdecl _Setgloballocale(void *); 
#line 418
bool _Badname(const _Locinfo &_Lobj) { 
#line 419
return ::strcmp(_Lobj._Getname(), "*") == 0; 
#line 420
} 
#line 422
_Locimp *_Ptr; 
#line 423
}; 
#line 425
template< class _Facet> 
#line 426
struct _Facetptr { 
#line 427
static const locale::facet *_Psave; 
#line 428
}; 
#line 430
template< class _Facet> const locale::facet *
#line 431
_Facetptr< _Facet> ::_Psave = (nullptr); 
#line 433
template < class _Facet >
const _Facet & __cdecl use_facet ( const locale & _Loc ) {
    { :: std :: _Lockit _Lock ( 0 );
    const locale :: facet * _Psave = _Facetptr < _Facet > :: _Psave;

    const size_t _Id = _Facet :: id;
    const locale :: facet * _Pf = _Loc . _Getfacet ( _Id );

    if ( ! _Pf ) {
        if ( _Psave ) {
            _Pf = _Psave;
        } else if ( _Facet :: _Getcat ( & _Psave, & _Loc ) == static_cast < size_t > ( - 1 ) ) {

            _Throw_bad_cast ( );



        } else {
            auto _Pfmod = const_cast < locale :: facet * > ( _Psave );
            unique_ptr < _Facet_base > _Psave_guard ( static_cast < _Facet_base * > ( _Pfmod ) );




            _Facet_Register ( _Pfmod );


            _Pfmod -> _Incref ( );
            _Facetptr < _Facet > :: _Psave = _Psave;
            _Pf = _Psave;

            ( void ) _Psave_guard . release ( );
        }
    }

    return static_cast < const _Facet & > ( * _Pf );
    }
}
#line 472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
template < class _Elem >
char __cdecl _Maklocbyte ( _Elem _Char, const _Locinfo :: _Cvtvec & ) {

    return static_cast < char > ( static_cast < unsigned char > ( _Char ) );
}
#line 479
template<> inline char __cdecl _Maklocbyte(__wchar_t _Char, const _Locinfo::_Cvtvec &_Cvt) { 
#line 481
char _Byte = '\000'; 
#line 482
mbstate_t _Mbst1 = {}; 
#line 483
_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt); 
#line 484
return _Byte; 
#line 485
} 
#line 489
template<> inline char __cdecl _Maklocbyte(unsigned short _Char, const _Locinfo::_Cvtvec &_Cvt) { 
#line 491
char _Byte = '\000'; 
#line 492
mbstate_t _Mbst1 = {}; 
#line 493
_Wcrtomb(&_Byte, static_cast< __wchar_t>(_Char), &_Mbst1, &_Cvt); 
#line 494
return _Byte; 
#line 495
} 
#line 498 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
template < class _Elem >
_Elem __cdecl _Maklocchr ( char _Byte, _Elem *, const _Locinfo :: _Cvtvec & ) {

    return static_cast < _Elem > ( static_cast < unsigned char > ( _Byte ) );
}
#line 505
template<> inline __wchar_t __cdecl _Maklocchr(char _Byte, __wchar_t *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 507
__wchar_t _Wc = L'\x0'; 
#line 508
mbstate_t _Mbst1 = {}; 
#line 509
_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt); 
#line 510
return _Wc; 
#line 511
} 
#line 515
template<> inline unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 517
unsigned short _Wc = (0); 
#line 518
mbstate_t _Mbst1 = {}; 
#line 519
_Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), &_Byte, 1, &_Mbst1, &_Cvt); 
#line 520
return _Wc; 
#line 521
} 
#line 524 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
template < class _Elem >
_Elem * __cdecl _Maklocstr ( const char * _Ptr, _Elem *, const _Locinfo :: _Cvtvec & ) {

    size_t _Count = :: strlen ( _Ptr ) + 1;

    _Elem * _Ptrdest = static_cast < _Elem * > ( _calloc_dbg ( _Count, sizeof ( _Elem ), 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale", 529 ) );

    if ( ! _Ptrdest ) {
        _Xbad_alloc ( );
    }

    for ( _Elem * _Ptrnext = _Ptrdest; 0 < _Count; -- _Count, ++ _Ptrnext, ++ _Ptr ) {
        * _Ptrnext = static_cast < _Elem > ( static_cast < unsigned char > ( * _Ptr ) );
    }

    return _Ptrdest;
}
#line 543
template<> inline __wchar_t *__cdecl _Maklocstr(const char *_Ptr, __wchar_t *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 545
size_t _Count; 
#line 546
size_t _Count1; 
#line 547
size_t _Wchars; 
#line 548
const char *_Ptr1; 
#line 549
int _Bytes; 
#line 550
__wchar_t _Wc; 
#line 551
mbstate_t _Mbst1 = {}; 
#line 553
_Count1 = (::strlen(_Ptr) + (1)); 
#line 554
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 555
if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 556
break; 
#line 557
}  
#line 558
}  
#line 560
++_Wchars; 
#line 562
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(_calloc_dbg(_Wchars, sizeof(__wchar_t), 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale", 562)); 
#line 564
if (!_Ptrdest) { 
#line 565
_Xbad_alloc(); 
#line 566
}  
#line 568
__wchar_t *_Ptrnext = _Ptrdest; 
#line 569
mbstate_t _Mbst2 = {}; 
#line 571
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 572
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 573
break; 
#line 574
}  
#line 575
}  
#line 577
(*_Ptrnext) = L'\x0'; 
#line 579
return _Ptrdest; 
#line 580
} 
#line 584
template<> inline unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *, const _Locinfo::_Cvtvec &_Cvt) { 
#line 586
size_t _Count; 
#line 587
size_t _Count1; 
#line 588
size_t _Wchars; 
#line 589
const char *_Ptr1; 
#line 590
int _Bytes; 
#line 591
unsigned short _Wc; 
#line 592
mbstate_t _Mbst1 = {}; 
#line 594
_Count1 = (::strlen(_Ptr) + (1)); 
#line 595
for (((_Count = _Count1), (_Wchars = (0))), (_Ptr1 = _Ptr); (0) < _Count; ((_Count -= _Bytes), (_Ptr1 += _Bytes)), (++_Wchars)) { 
#line 596
if ((_Bytes = _Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) { 
#line 597
break; 
#line 598
}  
#line 599
}  
#line 601
++_Wchars; 
#line 603
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(_calloc_dbg(_Wchars, sizeof(__wchar_t), 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale", 603)); 
#line 605
if (!_Ptrdest) { 
#line 606
_Xbad_alloc(); 
#line 607
}  
#line 609
__wchar_t *_Ptrnext = _Ptrdest; 
#line 610
mbstate_t _Mbst2 = {}; 
#line 611
for (; (0) < _Wchars; (((_Count -= _Bytes), (_Ptr += _Bytes)), (--_Wchars)), (++_Ptrnext)) { 
#line 612
if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) { 
#line 613
break; 
#line 614
}  
#line 615
}  
#line 617
(*_Ptrnext) = L'\x0'; 
#line 618
return reinterpret_cast< unsigned short *>(_Ptrdest); 
#line 619
} 
#line 622 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
class __declspec(dllimport) codecvt_base : public locale::facet { 
#line 626
public: enum { 
#line 627
ok, 
#line 628
partial, 
#line 629
error, 
#line 630
noconv
#line 631
}; 
#line 632
using result = int; 
#line 634
codecvt_base(size_t _Refs = 0) noexcept : locale::facet(_Refs) 
#line 635
{ } 
#line 637
bool always_noconv() const noexcept { 
#line 639
return this->do_always_noconv(); 
#line 640
} 
#line 642
int max_length() const noexcept { 
#line 644
return this->do_max_length(); 
#line 645
} 
#line 647
int encoding() const noexcept { 
#line 648
return this->do_encoding(); 
#line 649
} 
#line 651
virtual ~codecvt_base() noexcept { } 
#line 654
protected: virtual bool do_always_noconv() const noexcept { 
#line 656
return false; 
#line 657
} 
#line 659
virtual int do_max_length() const noexcept { 
#line 661
return 1; 
#line 662
} 
#line 664
virtual int do_encoding() const noexcept { 
#line 665
return 1; 
#line 666
} 
#line 667
}; 
#line 669
template< class _Ty> constexpr bool 
#line 670
_Is_one_byte_char_like_v = _Is_any_of_v< remove_cv_t< _Ty> , signed char, unsigned char, char> ; 
#line 679
template< class _Elem, class _Byte> constexpr bool 
#line 680
_Is_codecvt_do_always_noconv_v = is_same_v< _Byte, _Elem>  || (_Is_one_byte_char_like_v< _Byte>  && _Is_one_byte_char_like_v< _Elem> ); 
#line 683
template < class _Elem, class _Byte, class _Statype >
class codecvt : public codecvt_base {
public :








    static_assert ( ! 0 || is_same_v < codecvt, codecvt < char, char, mbstate_t >>,
        "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    using intern_type = _Elem;
    using extern_type = _Byte;
    using state_type = _Statype;

    result in ( _Statype & _State, const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
        _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const {
        return do_in ( _State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 );
    }

    result out ( _Statype & _State, const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
        _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {
        return do_out ( _State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2 );
    }

    result unshift ( _Statype & _State, _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {

        return do_unshift ( _State, _First2, _Last2, _Mid2 );
    }

    int length ( _Statype & _State, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) const {


        return do_length ( _State, _First1, _Last1, _Count );
    }

     static locale :: id id;

    explicit codecvt ( size_t _Refs = 0 ) : codecvt_base ( _Refs ) {
        _Init ( _Locinfo ( ) );
    }

    explicit codecvt ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : codecvt_base ( _Refs ) {
        _Init ( _Lobj );
    }

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new codecvt ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 2;
    }

protected :
     ~ codecvt ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

    bool do_always_noconv ( ) const noexcept override {

        return _Is_codecvt_do_always_noconv_v < _Elem, _Byte >;
    }

    virtual result do_in ( _Statype &, const _Byte * _First1, const _Byte * _Last1, const _Byte * & _Mid1,
        _Elem * _First2, _Elem * _Last2, _Elem * & _Mid2 ) const {
        _Mid1 = _First1;
        _Mid2 = _First2;
        if constexpr ( _Is_codecvt_do_always_noconv_v < _Elem, _Byte > ) {
            return noconv;
        } else {

            for (; _Mid1 != _Last1; ++ _Mid1, ++ _Mid2 ) {
                if ( _Mid2 == _Last2 ) {
                    return partial;
                }
                * _Mid2 = static_cast < _Elem > ( * _Mid1 );
            }

            return ok;
        }
    }

    virtual result do_out ( _Statype &, const _Elem * _First1, const _Elem * _Last1, const _Elem * & _Mid1,
        _Byte * _First2, _Byte * _Last2, _Byte * & _Mid2 ) const {
        _Mid1 = _First1;
        _Mid2 = _First2;
        if constexpr ( _Is_codecvt_do_always_noconv_v < _Elem, _Byte > ) {
            return noconv;
        } else {

            for (; _Mid1 != _Last1; ++ _Mid1, ++ _Mid2 ) {
                if ( _Mid2 == _Last2 ) {
                    return partial;
                }
                * _Mid2 = static_cast < _Byte > ( * _Mid1 );
            }

            return ok;
        }
    }

    virtual result do_unshift ( _Statype &, _Byte * _First2, _Byte *, _Byte * & _Mid2 ) const {

        _Mid2 = _First2;
        return noconv;
    }

    virtual int do_length (
        _Statype &, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) const {



        const auto _Dist = static_cast < size_t > ( ( :: std :: min ) ( _Last1 - _First1, ptrdiff_t { 2147483647 } ) );
        return static_cast < int > ( ( :: std :: min ) ( _Count, _Dist ) );
    }
};
#line 810
template< class _Elem, class _Byte, class _Statype> locale::id 
#line 811
codecvt< _Elem, _Byte, _Statype> ::id; 
#line 817
template < class _CvtTy, class _Byte, class _Statype >
[ [ nodiscard ] ] int _Codecvt_do_length (
    const _CvtTy & _Cvt, _Statype & _State, const _Byte * _First1, const _Byte * _Last1, size_t _Count ) {



    __pragma(warning(push))                            __pragma(warning(disable : 4996))
    using _Elem = typename _CvtTy :: intern_type;
    __pragma(warning(pop))

    _Adl_verify_range ( _First1, _Last1 );
    const auto _Old_first1 = _First1;

    while ( _Count > 0 && _First1 != _Last1 ) {
        const _Byte * _Mid1;
        _Elem * _Mid2;
        _Elem _Ch;



        __pragma(warning(push))                                __pragma(warning(disable : 4996))
        const auto _Result = _Cvt . _CvtTy :: do_in ( _State, _First1, _Last1, _Mid1, & _Ch, & _Ch + 1, _Mid2 );
        __pragma(warning(pop))

        if ( _Result != codecvt_base :: ok ) {
            if ( _Result == codecvt_base :: noconv ) {
                _First1 += ( :: std :: min ) ( static_cast < size_t > ( _Last1 - _First1 ), _Count );
            }

            break;
        }

        if ( _Mid2 == & _Ch + 1 ) {
            -- _Count;
        }

        _First1 = _Mid1;
    }

    return static_cast < int > ( ( :: std :: min ) ( _First1 - _Old_first1, ptrdiff_t { 2147483647 } ) );
}
#line 859
enum _Codecvt_mode { _Consume_header = 4, _Generate_header = 2}; 
#line 863
template<> class
#line 862
 __declspec(dllimport) codecvt< char16_t, char, _Mbstatet>  : public codecvt_base { 
#line 866
public: using intern_type = char16_t; 
#line 867
using extern_type = char; 
#line 868
using state_type = mbstate_t; 
#line 870
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, char16_t *
#line 871
_First2, char16_t *_Last2, char16_t *&_Mid2) const { 
#line 873
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 874
} 
#line 876
result out(mbstate_t &_State, const char16_t *_First1, const char16_t *_Last1, const char16_t *&
#line 877
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 879
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 880
} 
#line 882
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 884
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 885
} 
#line 887
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 890
return this->do_length(_State, _First1, _Last1, _Count); 
#line 891
} 
#line 893
static locale::id id; 
#line 895
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 896
{ 
#line 897
{ _Locinfo _Lobj; 
#line 898
this->_Init(_Lobj); 
#line 899
} 
#line 900
} 
#line 902
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((1114111)), _Mode(_Consume_header) 
#line 903
{ 
#line 904
this->_Init(_Lobj); 
#line 905
} 
#line 907
codecvt(const _Locinfo &
#line 908
_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 909
{ 
#line 910
this->_Init(_Lobj); 
#line 911
} 
#line 913
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 915
if (_Ppf && (!(*_Ppf))) { 
#line 916
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 917
(*_Ppf) = (new std::codecvt< char16_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 918
__pragma( warning(pop)) 
#line 919
}  
#line 921
return 2; 
#line 922
} 
#line 925
protected: virtual ~codecvt() noexcept override { } 
#line 927
void _Init(const _Locinfo &) { } 
#line 929
virtual result do_in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&
#line 930
_Mid1, char16_t *_First2, char16_t *_Last2, char16_t *&_Mid2) const { 
#line 932
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 933
_Mid1 = _First1; 
#line 934
_Mid2 = _First2; 
#line 936
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 937
unsigned char _By = static_cast< unsigned char>(*_Mid1); 
#line 938
unsigned long _Ch; 
#line 939
int _Nextra; 
#line 940
int _Nskip; 
#line 942
if ((*_Pstate) > 1) { 
#line 943
if ((_By < 128) || (192 <= _By)) { 
#line 944
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 945
}  
#line 948
++_Mid1; 
#line 949
(*(_Mid2++)) = (static_cast< char16_t>((*_Pstate) | (_By & 63))); 
#line 950
(*_Pstate) = (1); 
#line 951
continue; 
#line 952
}  
#line 954
if (_By < 128U) { 
#line 955
_Ch = _By; 
#line 956
_Nextra = 0; 
#line 957
} else { if (_By < 192U) { 
#line 958
++_Mid1; 
#line 959
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 960
} else { if (_By < 224U) { 
#line 961
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 962
_Nextra = 1; 
#line 963
} else { if (_By < 240U) { 
#line 964
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 965
_Nextra = 2; 
#line 966
} else { if (_By < 248U) { 
#line 967
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 968
_Nextra = 3; 
#line 969
} else { 
#line 970
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 971
_Nextra = ((_By < 252) ? 4 : 5); 
#line 972
}  }  }  }  }  
#line 974
_Nskip = ((_Nextra < 3) ? 0 : 1); 
#line 975
_First1 = _Mid1; 
#line 977
if (_Nextra == 0) { 
#line 978
++_Mid1; 
#line 979
} else { if ((_Last1 - _Mid1) < ((_Nextra + 1) - _Nskip)) { 
#line 980
break; 
#line 981
} else { 
#line 982
for (++_Mid1; _Nskip < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 983
if (((_By = (static_cast< unsigned char>(*_Mid1))) < 128U) || (192U <= _By)) { 
#line 984
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 985
} else { 
#line 986
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 987
}  
#line 988
}  
#line 989
}  }  
#line 991
if (0 < _Nskip) { 
#line 992
_Ch <<= 6; 
#line 993
}  
#line 995
if ((((_Maxcode) < (1114111U)) ? _Maxcode : (1114111U)) < _Ch) { 
#line 996
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 997
}  
#line 999
if ((65535U) < _Ch) { 
#line 1000
unsigned short _Ch0 = static_cast< unsigned short>((55296) | ((_Ch >> 10) - (64))); 
#line 1002
(*(_Mid2++)) = (static_cast< char16_t>(_Ch0)); 
#line 1003
(*_Pstate) = (static_cast< unsigned short>((56320) | (_Ch & (1023)))); 
#line 1004
continue; 
#line 1005
}  
#line 1007
if (_Nskip != 0) { 
#line 1008
if (_Mid1 == _Last1) { 
#line 1009
_Mid1 = _First1; 
#line 1010
break; 
#line 1011
}  
#line 1013
if (((_By = (static_cast< unsigned char>(*(_Mid1++)))) < 128U) || (192U <= _By)) { 
#line 1014
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 1015
}  
#line 1017
_Ch |= (_By & 63); 
#line 1018
}  
#line 1020
if ((*_Pstate) == 0U) { 
#line 1021
(*_Pstate) = (1); 
#line 1023
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279U))) { 
#line 1024
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1026
if (_Ans == (codecvt< char16_t, char, _Mbstatet> ::partial)) { 
#line 1027
(*_Pstate) = (0); 
#line 1028
_Mid1 = _First1; 
#line 1029
}  
#line 1031
return _Ans; 
#line 1032
}  
#line 1033
}  
#line 1035
(*(_Mid2++)) = (static_cast< char16_t>(_Ch)); 
#line 1036
}   
#line 1038
return (_First1 == _Mid1) ? codecvt< char16_t, char, _Mbstatet> ::partial : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1039
} 
#line 1041
virtual result do_out(mbstate_t &_State, const char16_t *_First1, const char16_t *_Last1, const char16_t *&
#line 1042
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1044
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 1045
_Mid1 = _First1; 
#line 1046
_Mid2 = _First2; 
#line 1048
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1049
unsigned long _Ch; 
#line 1050
const unsigned short _Ch1 = static_cast< unsigned short>(*_Mid1); 
#line 1051
bool _Save = false; 
#line 1053
if (1 < (*_Pstate)) { 
#line 1054
if ((_Ch1 < 56320U) || (57344U <= _Ch1)) { 
#line 1055
return codecvt< char16_t, char, _Mbstatet> ::error; 
#line 1056
}  
#line 1058
_Ch = (static_cast< unsigned long>(((*_Pstate) << 10) | (_Ch1 - 56320))); 
#line 1059
} else { if ((55296U <= _Ch1) && (_Ch1 < 56320U)) { 
#line 1060
_Ch = (static_cast< unsigned long>(((_Ch1 - 55296) + 64) << 10)); 
#line 1061
_Save = true; 
#line 1062
} else { 
#line 1063
_Ch = _Ch1; 
#line 1064
}  }  
#line 1066
char _By; 
#line 1067
int _Nextra; 
#line 1069
if (_Ch < (128U)) { 
#line 1070
_By = (static_cast< char>(_Ch)); 
#line 1071
_Nextra = 0; 
#line 1072
} else { if (_Ch < (2048U)) { 
#line 1073
_By = (static_cast< char>((192) | (_Ch >> 6))); 
#line 1074
_Nextra = 1; 
#line 1075
} else { if (_Ch < (65536U)) { 
#line 1076
_By = (static_cast< char>((224) | (_Ch >> 12))); 
#line 1077
_Nextra = 2; 
#line 1078
} else { 
#line 1079
_By = (static_cast< char>((240) | (_Ch >> 18))); 
#line 1080
_Nextra = 3; 
#line 1081
}  }  }  
#line 1083
int _Nput = (_Nextra < 3) ? _Nextra + 1 : (_Save ? 1 : 3); 
#line 1085
if ((_Last2 - _Mid2) < _Nput) { 
#line 1086
break; 
#line 1087
}  
#line 1089
if (((*_Pstate) == 0U) && (((_Mode) & (_Generate_header)) != 0)) { 
#line 1090
if ((_Last2 - _Mid2) < (3 + _Nput)) { 
#line 1091
break; 
#line 1092
}  
#line 1095
(*(_Mid2++)) = '\357'; 
#line 1096
(*(_Mid2++)) = '\273'; 
#line 1097
(*(_Mid2++)) = '\277'; 
#line 1098
}  
#line 1100
++_Mid1; 
#line 1101
if (_Save || (_Nextra < 3)) { 
#line 1102
(*(_Mid2++)) = _By; 
#line 1103
--_Nput; 
#line 1104
}  
#line 1106
for (; 0 < _Nput; --_Nput) { 
#line 1107
(*(_Mid2++)) = (static_cast< char>(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1108
}  
#line 1110
(*_Pstate) = (static_cast< unsigned short>(_Save ? _Ch >> 10 : (1))); 
#line 1111
}  
#line 1113
return (_First1 == _Mid1) ? codecvt< char16_t, char, _Mbstatet> ::partial : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1114
} 
#line 1116
virtual result do_unshift(mbstate_t &_State, char *_First2, char *, char *&_Mid2) const { 
#line 1118
unsigned short *_Pstate = reinterpret_cast< unsigned short *>(&_State); 
#line 1119
_Mid2 = _First2; 
#line 1121
return (1U < (*_Pstate)) ? codecvt< char16_t, char, _Mbstatet> ::error : codecvt< char16_t, char, _Mbstatet> ::ok; 
#line 1122
} 
#line 1124
friend int _Codecvt_do_length<> (const std::codecvt< char16_t, char, _Mbstatet>  &, mbstate_t &, const char *, const char *, size_t); 
#line 1126
virtual int do_length(mbstate_t &
#line 1127
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1128
return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count); 
#line 1129
} 
#line 1131
virtual bool do_always_noconv() const noexcept override { 
#line 1133
return false; 
#line 1134
} 
#line 1136
virtual int do_max_length() const noexcept override { 
#line 1139
if (((_Mode) & (_Consume_header)) != 0) { 
#line 1140
return 9; 
#line 1141
}  
#line 1143
if (((_Mode) & (_Generate_header)) != 0) { 
#line 1144
return 7; 
#line 1145
}  
#line 1147
return 6; 
#line 1148
} 
#line 1150
virtual int do_encoding() const noexcept override { 
#line 1151
return 0; 
#line 1152
} 
#line 1155
private: unsigned long _Maxcode; 
#line 1156
_Codecvt_mode _Mode; 
#line 1157
}; 
#line 1161
template<> class
#line 1160
 __declspec(dllimport) codecvt< char32_t, char, _Mbstatet>  : public codecvt_base { 
#line 1164
public: using intern_type = char32_t; 
#line 1165
using extern_type = char; 
#line 1166
using state_type = mbstate_t; 
#line 1168
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, char32_t *
#line 1169
_First2, char32_t *_Last2, char32_t *&_Mid2) const { 
#line 1171
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1172
} 
#line 1174
result out(mbstate_t &_State, const char32_t *_First1, const char32_t *_Last1, const char32_t *&
#line 1175
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1177
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1178
} 
#line 1180
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1182
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1183
} 
#line 1185
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1188
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1189
} 
#line 1191
static locale::id id; 
#line 1193
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1194
{ 
#line 1195
{ _Locinfo _Lobj; 
#line 1196
this->_Init(_Lobj); 
#line 1197
} 
#line 1198
} 
#line 1200
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode((4294967295U)), _Mode(_Consume_header) 
#line 1201
{ 
#line 1202
this->_Init(_Lobj); 
#line 1203
} 
#line 1205
codecvt(const _Locinfo &
#line 1206
_Lobj, unsigned long _Maxcode_arg, _Codecvt_mode _Mode_arg, size_t _Refs = 0) : codecvt_base(_Refs), _Maxcode(_Maxcode_arg), _Mode(_Mode_arg) 
#line 1207
{ 
#line 1208
this->_Init(_Lobj); 
#line 1209
} 
#line 1211
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 1213
if (_Ppf && (!(*_Ppf))) { 
#line 1214
__pragma( warning(push)) __pragma( warning(disable : 4996)) 
#line 1215
(*_Ppf) = (new std::codecvt< char32_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 1216
__pragma( warning(pop)) 
#line 1217
}  
#line 1219
return 2; 
#line 1220
} 
#line 1223
protected: virtual ~codecvt() noexcept override { } 
#line 1225
void _Init(const _Locinfo &) { } 
#line 1227
virtual result do_in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&
#line 1228
_Mid1, char32_t *_First2, char32_t *_Last2, char32_t *&_Mid2) const { 
#line 1230
char *_Pstate = reinterpret_cast< char *>(&_State); 
#line 1231
_Mid1 = _First1; 
#line 1232
_Mid2 = _First2; 
#line 1234
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1235
unsigned char _By = static_cast< unsigned char>(*_Mid1); 
#line 1236
unsigned long _Ch; 
#line 1237
int _Nextra; 
#line 1239
if (_By < 128U) { 
#line 1240
_Ch = _By; 
#line 1241
_Nextra = 0; 
#line 1242
} else { if (_By < 192U) { 
#line 1243
++_Mid1; 
#line 1244
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1245
} else { if (_By < 224U) { 
#line 1246
_Ch = (static_cast< unsigned long>(_By & 31)); 
#line 1247
_Nextra = 1; 
#line 1248
} else { if (_By < 240U) { 
#line 1249
_Ch = (static_cast< unsigned long>(_By & 15)); 
#line 1250
_Nextra = 2; 
#line 1251
} else { if (_By < 248U) { 
#line 1252
_Ch = (static_cast< unsigned long>(_By & 7)); 
#line 1253
_Nextra = 3; 
#line 1254
} else { 
#line 1255
_Ch = (static_cast< unsigned long>(_By & 3)); 
#line 1256
_Nextra = ((_By < 252) ? 4 : 5); 
#line 1257
}  }  }  }  }  
#line 1259
if (_Nextra == 0) { 
#line 1260
++_Mid1; 
#line 1261
} else { if ((_Last1 - _Mid1) < (_Nextra + 1)) { 
#line 1262
break; 
#line 1263
} else { 
#line 1264
for (++_Mid1; 0 < _Nextra; (--_Nextra), (++_Mid1)) { 
#line 1265
if (((_By = (static_cast< unsigned char>(*_Mid1))) < 128U) || (192U <= _By)) { 
#line 1266
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1267
} else { 
#line 1268
_Ch = ((_Ch << 6) | (_By & 63)); 
#line 1269
}  
#line 1270
}  
#line 1271
}  }  
#line 1273
if ((*_Pstate) == 0) { 
#line 1274
(*_Pstate) = (1); 
#line 1276
if ((((_Mode) & (_Consume_header)) != 0) && (_Ch == (65279U))) { 
#line 1277
const result _Ans = this->do_in(_State, _Mid1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1279
if (_Ans == (codecvt< char32_t, char, _Mbstatet> ::partial)) { 
#line 1280
(*_Pstate) = (0); 
#line 1281
_Mid1 = _First1; 
#line 1282
}  
#line 1283
return _Ans; 
#line 1284
}  
#line 1285
}  
#line 1287
if ((_Maxcode) < _Ch) { 
#line 1288
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1289
}  
#line 1291
(*(_Mid2++)) = (static_cast< char32_t>(_Ch)); 
#line 1292
}  
#line 1294
return (_First1 == _Mid1) ? codecvt< char32_t, char, _Mbstatet> ::partial : codecvt< char32_t, char, _Mbstatet> ::ok; 
#line 1295
} 
#line 1297
virtual result do_out(mbstate_t &_State, const char32_t *_First1, const char32_t *_Last1, const char32_t *&
#line 1298
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1300
char *_Pstate = reinterpret_cast< char *>(&_State); 
#line 1301
_Mid1 = _First1; 
#line 1302
_Mid2 = _First2; 
#line 1304
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 1305
char _By; 
#line 1306
int _Nextra; 
#line 1307
unsigned long _Ch = static_cast< unsigned long>(*_Mid1); 
#line 1309
if ((_Maxcode) < _Ch) { 
#line 1310
return codecvt< char32_t, char, _Mbstatet> ::error; 
#line 1311
}  
#line 1313
if (_Ch < (128U)) { 
#line 1314
_By = (static_cast< char>(_Ch)); 
#line 1315
_Nextra = 0; 
#line 1316
} else { if (_Ch < (2048U)) { 
#line 1317
_By = (static_cast< char>((192) | (_Ch >> 6))); 
#line 1318
_Nextra = 1; 
#line 1319
} else { if (_Ch < (65536U)) { 
#line 1320
_By = (static_cast< char>((224) | (_Ch >> 12))); 
#line 1321
_Nextra = 2; 
#line 1322
} else { if (_Ch < (2097152U)) { 
#line 1323
_By = (static_cast< char>((240) | (_Ch >> 18))); 
#line 1324
_Nextra = 3; 
#line 1325
} else { if (_Ch < (67108864U)) { 
#line 1326
_By = (static_cast< char>((248) | (_Ch >> 24))); 
#line 1327
_Nextra = 4; 
#line 1328
} else { 
#line 1329
_By = (static_cast< char>((252) | ((_Ch >> 30) & (3)))); 
#line 1330
_Nextra = 5; 
#line 1331
}  }  }  }  }  
#line 1333
if ((*_Pstate) == 0) { 
#line 1334
(*_Pstate) = (1); 
#line 1335
if (((_Mode) & (_Generate_header)) != 0) { 
#line 1336
if ((_Last2 - _Mid2) < ((3 + 1) + _Nextra)) { 
#line 1337
return codecvt< char32_t, char, _Mbstatet> ::partial; 
#line 1338
}  
#line 1341
(*(_Mid2++)) = '\357'; 
#line 1342
(*(_Mid2++)) = '\273'; 
#line 1343
(*(_Mid2++)) = '\277'; 
#line 1344
}  
#line 1345
}  
#line 1347
if ((_Last2 - _Mid2) < (1 + _Nextra)) { 
#line 1348
break; 
#line 1349
}  
#line 1351
++_Mid1; 
#line 1352
for ((*(_Mid2++)) = _By; 0 < _Nextra;) { 
#line 1353
(*(_Mid2++)) = (static_cast< char>(((_Ch >> (6 * (--_Nextra))) & (63)) | (128))); 
#line 1354
}  
#line 1355
}  
#line 1356
return (_First1 == _Mid1) ? codecvt< char32_t, char, _Mbstatet> ::partial : codecvt< char32_t, char, _Mbstatet> ::ok; 
#line 1357
} 
#line 1359
virtual result do_unshift(mbstate_t &, char *_First2, char *, char *&_Mid2) const { 
#line 1361
_Mid2 = _First2; 
#line 1362
return codecvt< char32_t, char, _Mbstatet> ::noconv; 
#line 1363
} 
#line 1365
friend int _Codecvt_do_length<> (const std::codecvt< char32_t, char, _Mbstatet>  &, mbstate_t &, const char *, const char *, size_t); 
#line 1367
virtual int do_length(mbstate_t &
#line 1368
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1369
return _Codecvt_do_length(*this, _State, _First1, _Last1, _Count); 
#line 1370
} 
#line 1372
virtual bool do_always_noconv() const noexcept override { 
#line 1374
return false; 
#line 1375
} 
#line 1377
virtual int do_max_length() const noexcept override { 
#line 1379
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? 9 : 6; 
#line 1380
} 
#line 1382
virtual int do_encoding() const noexcept override { 
#line 1384
return (((_Mode) & ((_Consume_header) | (_Generate_header))) != 0) ? -1 : 0; 
#line 1386
} 
#line 1389
private: unsigned long _Maxcode; 
#line 1390
_Codecvt_mode _Mode; 
#line 1391
}; 
#line 1938 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
template<> class __declspec(dllimport) codecvt< __wchar_t, char, _Mbstatet>  : public codecvt_base { 
#line 1941
public: using intern_type = __wchar_t; 
#line 1942
using extern_type = char; 
#line 1943
using state_type = mbstate_t; 
#line 1945
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, __wchar_t *
#line 1946
_First2, __wchar_t *_Last2, __wchar_t *&_Mid2) const { 
#line 1948
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1949
} 
#line 1951
result out(mbstate_t &_State, const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *&
#line 1952
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1954
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 1955
} 
#line 1957
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 1959
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 1960
} 
#line 1962
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 1965
return this->do_length(_State, _First1, _Last1, _Count); 
#line 1966
} 
#line 1968
static locale::id id; 
#line 1970
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 1971
{ _Locinfo _Lobj; 
#line 1972
this->_Init(_Lobj); 
#line 1973
} 
#line 1974
} 
#line 1976
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 1977
this->_Init(_Lobj); 
#line 1978
} 
#line 1980
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 1982
if (_Ppf && (!(*_Ppf))) { 
#line 1983
(*_Ppf) = (new std::codecvt< __wchar_t, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 1984
}  
#line 1986
return 2; 
#line 1987
} 
#line 1990
protected: virtual ~codecvt() noexcept override { } 
#line 1992
void _Init(const _Locinfo &_Lobj) { 
#line 1993
(_Cvt) = _Lobj._Getcvt(); 
#line 1994
} 
#line 1996
virtual result do_in(mbstate_t &, const char *_First1, const char *_Last1, const char *&_Mid1, __wchar_t *
#line 1997
_First2, __wchar_t *_Last2, __wchar_t *&_Mid2) const { 
#line 1999
mbstate_t _Mystate{}; 
#line 2000
_Adl_verify_range(_First1, _Last1); 
#line 2001
_Adl_verify_range(_First2, _Last2); 
#line 2002
_Mid1 = _First1; 
#line 2003
_Mid2 = _First2; 
#line 2004
for (; ;) { 
#line 2005
if (_Mid1 == _Last1) { 
#line 2006
return ok; 
#line 2007
}  
#line 2009
if (_Mid2 == _Last2) { 
#line 2010
return partial; 
#line 2011
}  
#line 2013
int _Bytes = _Mbrtowc(_Mid2, _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 2014
switch (_Bytes) { 
#line 2015
case -2:  
#line 2016
return partial; 
#line 2018
case -1:  
#line 2019
return error; 
#line 2021
case 0:  
#line 2022
_Bytes = 1; 
#line 2023
; 
#line 2025
default:  
#line 2026
_Mid1 += _Bytes; 
#line 2027
++_Mid2; 
#line 2028
break; 
#line 2029
}  
#line 2030
}  
#line 2031
} 
#line 2033
virtual result do_out(mbstate_t &_State, const __wchar_t *_First1, const __wchar_t *_Last1, const __wchar_t *&
#line 2034
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2036
_Adl_verify_range(_First1, _Last1); 
#line 2037
_Adl_verify_range(_First2, _Last2); 
#line 2038
_Mid1 = _First1; 
#line 2039
_Mid2 = _First2; 
#line 2040
int _Bytes; 
#line 2042
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 2043
if ((5) <= (_Last2 - _Mid2)) { 
#line 2044
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2045
return error; 
#line 2046
} else { 
#line 2047
++_Mid1; 
#line 2048
_Mid2 += _Bytes; 
#line 2049
}  
#line 2050
} else { 
#line 2051
char _Buf[5]; 
#line 2052
mbstate_t _Stsave = _State; 
#line 2054
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2055
return error; 
#line 2056
} else { if ((_Last2 - _Mid2) < _Bytes) { 
#line 2057
_State = _Stsave; 
#line 2058
break; 
#line 2059
} else { 
#line 2060
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2061
++_Mid1; 
#line 2062
_Mid2 += _Bytes; 
#line 2063
}  }  
#line 2064
}  
#line 2065
}  
#line 2067
return (_Mid1 == _Last1) ? ok : partial; 
#line 2068
} 
#line 2070
virtual result do_unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2072
_Adl_verify_range(_First2, _Last2); 
#line 2073
_Mid2 = _First2; 
#line 2074
result _Ans = (ok); 
#line 2075
int _Bytes; 
#line 2076
char _Buf[5]; 
#line 2077
mbstate_t _Stsave = _State; 
#line 2079
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 2080
_Ans = (error); 
#line 2081
} else { if ((_Last2 - _Mid2) < (--_Bytes)) { 
#line 2082
_State = _Stsave; 
#line 2083
_Ans = (partial); 
#line 2084
} else { if (0 < _Bytes) { 
#line 2085
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2086
_Mid2 += _Bytes; 
#line 2087
}  }  }  
#line 2088
return _Ans; 
#line 2089
} 
#line 2091
virtual int do_length(mbstate_t &
#line 2092
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2095
_Adl_verify_range(_First1, _Last1); 
#line 2096
const auto _Old_first1 = _First1; 
#line 2098
for (; (_Count > (0U)) && (_First1 != _Last1); --_Count) { 
#line 2099
__wchar_t _Ch; 
#line 2100
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_State, &(_Cvt)); 
#line 2101
if (_Bytes < 0) { 
#line 2102
break; 
#line 2103
}  
#line 2105
if (_Bytes == 0) { 
#line 2106
_Bytes = 1; 
#line 2107
}  
#line 2110
_First1 += _Bytes; 
#line 2111
}  
#line 2113
return static_cast< int>((::std::min)(_First1 - _Old_first1, (ptrdiff_t)2147483647)); 
#line 2114
} 
#line 2116
virtual bool do_always_noconv() const noexcept override { 
#line 2118
return false; 
#line 2119
} 
#line 2121
virtual int do_max_length() const noexcept override { 
#line 2123
return static_cast< int>((_Cvt)._Mbcurmax); 
#line 2124
} 
#line 2126
virtual int do_encoding() const noexcept override { 
#line 2128
return ((_Cvt)._Mbcurmax) == (1); 
#line 2129
} 
#line 2132
private: _Locinfo::_Cvtvec _Cvt; 
#line 2133
}; 
#line 2137
template<> class __declspec(dllimport) codecvt< unsigned short, char, _Mbstatet>  : public codecvt_base { 
#line 2140
public: using intern_type = unsigned short; 
#line 2141
using extern_type = char; 
#line 2142
using state_type = mbstate_t; 
#line 2144
result in(mbstate_t &_State, const char *_First1, const char *_Last1, const char *&_Mid1, unsigned short *
#line 2145
_First2, unsigned short *_Last2, unsigned short *&_Mid2) const { 
#line 2147
return this->do_in(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 2148
} 
#line 2150
result out(mbstate_t &_State, const unsigned short *_First1, const unsigned short *_Last1, const unsigned short *&
#line 2151
_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2153
return this->do_out(_State, _First1, _Last1, _Mid1, _First2, _Last2, _Mid2); 
#line 2154
} 
#line 2156
result unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2158
return this->do_unshift(_State, _First2, _Last2, _Mid2); 
#line 2159
} 
#line 2161
int length(mbstate_t &_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2164
return this->do_length(_State, _First1, _Last1, _Count); 
#line 2165
} 
#line 2167
static locale::id id; 
#line 2169
explicit codecvt(size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 2170
{ _Locinfo _Lobj; 
#line 2171
this->_Init(_Lobj); 
#line 2172
} 
#line 2173
} 
#line 2175
explicit codecvt(const _Locinfo &_Lobj, size_t _Refs = 0) : codecvt_base(_Refs) { 
#line 2176
this->_Init(_Lobj); 
#line 2177
} 
#line 2179
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2181
if (_Ppf && (!(*_Ppf))) { 
#line 2182
(*_Ppf) = (new std::codecvt< unsigned short, char, _Mbstatet> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2183
}  
#line 2185
return 2; 
#line 2186
} 
#line 2189
protected: virtual ~codecvt() noexcept override { } 
#line 2191
void _Init(const _Locinfo &_Lobj) { 
#line 2192
(_Cvt) = _Lobj._Getcvt(); 
#line 2193
} 
#line 2195
virtual result do_in(mbstate_t &, const char *_First1, const char *_Last1, const char *&_Mid1, unsigned short *
#line 2196
_First2, unsigned short *_Last2, unsigned short *&_Mid2) const { 
#line 2198
mbstate_t _Mystate{}; 
#line 2199
_Adl_verify_range(_First1, _Last1); 
#line 2200
_Adl_verify_range(_First2, _Last2); 
#line 2201
_Mid1 = _First1; 
#line 2202
_Mid2 = _First2; 
#line 2203
for (; ;) { 
#line 2204
if (_Mid1 == _Last1) { 
#line 2205
return ok; 
#line 2206
}  
#line 2208
if (_Mid2 == _Last2) { 
#line 2209
return partial; 
#line 2210
}  
#line 2212
int _Bytes = _Mbrtowc(reinterpret_cast< __wchar_t *>(_Mid2), _Mid1, static_cast< size_t>(_Last1 - _Mid1), &_Mystate, &(_Cvt)); 
#line 2214
switch (_Bytes) { 
#line 2215
case -2:  
#line 2216
return partial; 
#line 2218
case -1:  
#line 2219
return error; 
#line 2221
case 0:  
#line 2222
_Bytes = 1; 
#line 2223
; 
#line 2225
default:  
#line 2226
_Mid1 += _Bytes; 
#line 2227
++_Mid2; 
#line 2228
break; 
#line 2229
}  
#line 2230
}  
#line 2231
} 
#line 2233
virtual result do_out(mbstate_t &_State, const unsigned short *_First1, const unsigned short *
#line 2234
_Last1, const unsigned short *&_Mid1, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2236
_Adl_verify_range(_First1, _Last1); 
#line 2237
_Adl_verify_range(_First2, _Last2); 
#line 2238
_Mid1 = _First1; 
#line 2239
_Mid2 = _First2; 
#line 2240
int _Bytes; 
#line 2242
while ((_Mid1 != _Last1) && (_Mid2 != _Last2)) { 
#line 2243
if ((5) <= (_Last2 - _Mid2)) { 
#line 2244
if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2245
return error; 
#line 2246
} else { 
#line 2247
++_Mid1; 
#line 2248
_Mid2 += _Bytes; 
#line 2249
}  
#line 2250
} else { 
#line 2251
char _Buf[5]; 
#line 2252
mbstate_t _Stsave = _State; 
#line 2254
if ((_Bytes = _Wcrtomb(_Buf, *_Mid1, &_State, &(_Cvt))) < 0) { 
#line 2255
return error; 
#line 2256
} else { if ((_Last2 - _Mid2) < _Bytes) { 
#line 2257
_State = _Stsave; 
#line 2258
break; 
#line 2259
} else { 
#line 2260
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2261
++_Mid1; 
#line 2262
_Mid2 += _Bytes; 
#line 2263
}  }  
#line 2264
}  
#line 2265
}  
#line 2267
return (_Mid1 == _Last1) ? ok : partial; 
#line 2268
} 
#line 2270
virtual result do_unshift(mbstate_t &_State, char *_First2, char *_Last2, char *&_Mid2) const { 
#line 2272
_Adl_verify_range(_First2, _Last2); 
#line 2273
_Mid2 = _First2; 
#line 2274
result _Ans = (ok); 
#line 2275
int _Bytes; 
#line 2276
char _Buf[5]; 
#line 2277
mbstate_t _Stsave = _State; 
#line 2279
if ((_Bytes = _Wcrtomb(_Buf, L'\x0', &_State, &(_Cvt))) <= 0) { 
#line 2280
_Ans = (error); 
#line 2281
} else { if ((_Last2 - _Mid2) < (--_Bytes)) { 
#line 2282
_State = _Stsave; 
#line 2283
_Ans = (partial); 
#line 2284
} else { if (0 < _Bytes) { 
#line 2285
::memcpy(_Mid2, _Buf, static_cast< size_t>(_Bytes)); 
#line 2286
_Mid2 += _Bytes; 
#line 2287
}  }  }  
#line 2289
return _Ans; 
#line 2290
} 
#line 2292
virtual int do_length(mbstate_t &
#line 2293
_State, const char *_First1, const char *_Last1, size_t _Count) const { 
#line 2296
_Adl_verify_range(_First1, _Last1); 
#line 2297
const auto _Old_first1 = _First1; 
#line 2299
for (; (_Count > (0U)) && (_First1 != _Last1); --_Count) { 
#line 2300
__wchar_t _Ch; 
#line 2301
int _Bytes = _Mbrtowc(&_Ch, _First1, static_cast< size_t>(_Last1 - _First1), &_State, &(_Cvt)); 
#line 2302
if (_Bytes < 0) { 
#line 2303
break; 
#line 2304
}  
#line 2306
if (_Bytes == 0) { 
#line 2307
_Bytes = 1; 
#line 2308
}  
#line 2311
_First1 += _Bytes; 
#line 2312
}  
#line 2314
return static_cast< int>((::std::min)(_First1 - _Old_first1, (ptrdiff_t)2147483647)); 
#line 2315
} 
#line 2317
virtual bool do_always_noconv() const noexcept override { 
#line 2319
return false; 
#line 2320
} 
#line 2322
virtual int do_max_length() const noexcept override { 
#line 2324
return static_cast< int>((_Cvt)._Mbcurmax); 
#line 2325
} 
#line 2327
virtual int do_encoding() const noexcept override { 
#line 2329
return ((_Cvt)._Mbcurmax) == 1U; 
#line 2330
} 
#line 2333
private: _Locinfo::_Cvtvec _Cvt; 
#line 2334
}; 
#line 2337 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
template < class _Elem, class _Byte, class _Statype >
class codecvt_byname : public codecvt < _Elem, _Byte, _Statype > {
public :
    static_assert ( ! 0
                      || _Is_any_of_v < codecvt_byname,



                          codecvt_byname < char, char, mbstate_t >, codecvt_byname < wchar_t, char, mbstate_t >>,
        "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    explicit codecvt_byname ( const char * _Locname, size_t _Refs = 0 )
        : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Locname ), _Refs ) { }

    explicit codecvt_byname ( const string & _Str, size_t _Refs = 0 )
        : codecvt < _Elem, _Byte, _Statype > ( _Locinfo ( _Str . c_str ( ) ), _Refs ) { }

protected :
     ~ codecvt_byname ( ) noexcept override { }
};
#line 2368
struct __declspec(dllimport) ctype_base : public locale::facet { 
#line 2371
enum { 
#line 2372
alnum = (((4 | 2) | 1) | 256), 
#line 2373
alpha = ((2 | 1) | 256), 
#line 2374
cntrl = 32, 
#line 2375
digit = 4, 
#line 2376
graph = ((((4 | 2) | 16) | 1) | 256), 
#line 2377
lower = 2, 
#line 2378
print = ((((((4 | 2) | 16) | 64) | 1) | 256) | 128), 
#line 2379
punct = 16, 
#line 2380
space = (8 | 64), 
#line 2381
upper = 1, 
#line 2382
xdigit = 128, 
#line 2383
blank = (8 | 64)
#line 2384
}; 
#line 2385
using mask = short; 
#line 2387
ctype_base(size_t _Refs = 0) noexcept : locale::facet(_Refs) 
#line 2388
{ } 
#line 2390
virtual ~ctype_base() noexcept override { } 
#line 2391
}; 
#line 2403
template < class _Elem >
class ctype : public ctype_base {
public :

    static_assert ( ! 0 || _Always_false < _Elem >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    using char_type = _Elem;

    bool is ( mask _Maskval, _Elem _Ch ) const {
        return do_is ( _Maskval, _Ch );
    }

    const _Elem * is ( const _Elem * _First, const _Elem * _Last,
        mask * _Dest ) const {
        return do_is ( _First, _Last, _Dest );
    }

    const _Elem * scan_is ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        return do_scan_is ( _Maskval, _First, _Last );
    }

    const _Elem * scan_not ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        return do_scan_not ( _Maskval, _First, _Last );
    }

    _Elem tolower ( _Elem _Ch ) const {
        return do_tolower ( _Ch );
    }

    const _Elem * tolower (
        _Elem * _First, const _Elem * _Last ) const {
        return do_tolower ( _First, _Last );
    }

    _Elem toupper ( _Elem _Ch ) const {
        return do_toupper ( _Ch );
    }

    const _Elem * toupper (
        _Elem * _First, const _Elem * _Last ) const {
        return do_toupper ( _First, _Last );
    }

    _Elem widen ( char _Byte ) const {
        return do_widen ( _Byte );
    }

    const char * widen ( const char * _First, const char * _Last,
        _Elem * _Dest ) const {
        return do_widen ( _First, _Last, _Dest );
    }

    char narrow ( _Elem _Ch, char _Dflt = '\000' ) const {
        return do_narrow ( _Ch, _Dflt );
    }

    const _Elem * narrow ( const _Elem * _First, const _Elem * _Last, char _Dflt,
        char * _Dest ) const {
        return do_narrow ( _First, _Last, _Dflt, _Dest );
    }

     static locale :: id id;

    explicit ctype ( size_t _Refs = 0 ) : ctype_base ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     ctype ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : ctype_base ( _Refs ) {
        _Init ( _Lobj );
    }

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {
        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new ctype < _Elem > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 2;
    }

protected :
     ~ ctype ( ) noexcept override {
        if ( _Ctype . _Delfl ) {
            :: free ( const_cast < short * > ( _Ctype . _Table ) );
        }

        :: free ( _Ctype . _LocaleName );
    }

    void _Init ( const _Locinfo & _Lobj ) {
        _Ctype = _Lobj . _Getctype ( );
        _Cvt = _Lobj . _Getcvt ( );
    }

    virtual bool do_is (
        mask _Maskval, _Elem _Ch ) const {
        return ( _Ctype . _Table [ static_cast < unsigned char > ( narrow ( _Ch ) ) ] & _Maskval ) != 0;
    }

    virtual const _Elem * do_is ( const _Elem * _First, const _Elem * _Last,
        mask * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Ctype . _Table [ static_cast < unsigned char > ( narrow ( * _First ) ) ];
        }

        return _First;
    }

    virtual const _Elem * do_scan_is ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        while ( _First != _Last && ! is ( _Maskval, * _First ) ) {
            ++ _First;
        }

        return _First;
    }

    virtual const _Elem * do_scan_not ( mask _Maskval, const _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        while ( _First != _Last && is ( _Maskval, * _First ) ) {
            ++ _First;
        }

        return _First;
    }

    virtual _Elem do_tolower ( _Elem _Ch ) const {
        unsigned char _Byte = static_cast < unsigned char > ( narrow ( _Ch, '\000' ) );
        if ( _Byte == '\000' ) {
            return _Ch;
        }

        return widen ( static_cast < char > ( _Tolower ( _Byte, & _Ctype ) ) );
    }

    virtual const _Elem * do_tolower ( _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First ) {
            unsigned char _Byte = static_cast < unsigned char > ( narrow ( * _First, '\000' ) );
            if ( _Byte != '\000' ) {
                * _First = ( widen ( static_cast < char > ( _Tolower ( _Byte, & _Ctype ) ) ) );
            }
        }
        return _First;
    }

    virtual _Elem do_toupper ( _Elem _Ch ) const {
        unsigned char _Byte = static_cast < unsigned char > ( narrow ( _Ch, '\000' ) );
        if ( _Byte == '\000' ) {
            return _Ch;
        }

        return widen ( static_cast < char > ( _Toupper ( _Byte, & _Ctype ) ) );
    }

    virtual const _Elem * do_toupper ( _Elem * _First,
        const _Elem * _Last ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First ) {
            unsigned char _Byte = static_cast < unsigned char > ( narrow ( * _First, '\000' ) );
            if ( _Byte != '\000' ) {
                * _First = ( widen ( static_cast < char > ( _Toupper ( _Byte, & _Ctype ) ) ) );
            }
        }

        return _First;
    }

    virtual _Elem do_widen ( char _Byte ) const {
        return _Maklocchr ( _Byte, static_cast < _Elem * > ( nullptr ), _Cvt );
    }

    virtual const char * do_widen (
        const char * _First, const char * _Last, _Elem * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Maklocchr ( * _First, static_cast < _Elem * > ( nullptr ), _Cvt );
        }

        return _First;
    }

    char _Donarrow ( _Elem _Ch, char _Dflt ) const {
        char _Byte;
        if ( _Ch == _Elem { } ) {
            return '\000';
        }

        if ( ( _Byte = _Maklocbyte ( _Ch, _Cvt ) ) == '\000' ) {
            return _Dflt;
        }

        return _Byte;
    }

    virtual char do_narrow ( _Elem _Ch, char _Dflt ) const {
        return _Donarrow ( _Ch, _Dflt );
    }

    virtual const _Elem * do_narrow ( const _Elem * _First, const _Elem * _Last, char _Dflt,
        char * _Dest ) const {
        _Adl_verify_range ( _First, _Last );
        for (; _First != _Last; ++ _First, ++ _Dest ) {
            * _Dest = _Donarrow ( * _First, _Dflt );
        }

        return _First;
    }

private :
    _Locinfo :: _Ctypevec _Ctype;
    _Locinfo :: _Cvtvec _Cvt;
};
#line 2629
template< class _Elem> locale::id 
#line 2630
ctype< _Elem> ::id; 
#line 2637
template<> class __declspec(dllimport) ctype< char>  : public ctype_base { 
#line 2639
public: using _Elem = char; 
#line 2640
using char_type = _Elem; 
#line 2642
bool is(mask _Maskval, _Elem _Ch) const { 
#line 2643
return ((((_Ctype)._Table)[static_cast< unsigned char>(_Ch)]) & _Maskval) != 0; 
#line 2644
} 
#line 2646
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2647
_Dest) const { 
#line 2648
_Adl_verify_range(_First, _Last); 
#line 2649
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2650
(*_Dest) = (((_Ctype)._Table)[static_cast< unsigned char>(*_First)]); 
#line 2651
}  
#line 2653
return _First; 
#line 2654
} 
#line 2656
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2657
_Last) const { 
#line 2658
_Adl_verify_range(_First, _Last); 
#line 2659
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 2660
++_First; 
#line 2661
}  
#line 2663
return _First; 
#line 2664
} 
#line 2666
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2667
_Last) const { 
#line 2668
_Adl_verify_range(_First, _Last); 
#line 2669
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 2670
++_First; 
#line 2671
}  
#line 2673
return _First; 
#line 2674
} 
#line 2676
_Elem tolower(_Elem _Ch) const { 
#line 2677
return this->do_tolower(_Ch); 
#line 2678
} 
#line 2680
const _Elem *tolower(_Elem *
#line 2681
_First, const _Elem *_Last) const { 
#line 2682
return this->do_tolower(_First, _Last); 
#line 2683
} 
#line 2685
_Elem toupper(_Elem _Ch) const { 
#line 2686
return this->do_toupper(_Ch); 
#line 2687
} 
#line 2689
const _Elem *toupper(_Elem *
#line 2690
_First, const _Elem *_Last) const { 
#line 2691
return this->do_toupper(_First, _Last); 
#line 2692
} 
#line 2694
_Elem widen(char _Byte) const { 
#line 2695
return this->do_widen(_Byte); 
#line 2696
} 
#line 2698
const _Elem *widen(const char *_First, const char *_Last, _Elem *
#line 2699
_Dest) const { 
#line 2700
return this->do_widen(_First, _Last, _Dest); 
#line 2701
} 
#line 2703
_Elem narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 2704
return this->do_narrow(_Ch, _Dflt); 
#line 2705
} 
#line 2707
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2708
_Dest) const { 
#line 2709
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2710
} 
#line 2712
static locale::id id; 
#line 2714
explicit ctype(const mask *_Table = 0, bool _Deletetable = false, size_t 
#line 2715
_Refs = 0) : ctype_base(_Refs) 
#line 2716
{ 
#line 2717
{ _Locinfo _Lobj; 
#line 2718
this->_Init(_Lobj); 
#line 2719
} 
#line 2721
this->_Tidy(); 
#line 2722
if (_Table) { 
#line 2723
((_Ctype)._Table) = _Table; 
#line 2724
((_Ctype)._Delfl) = (_Deletetable ? -1 : 0); 
#line 2725
} else { 
#line 2726
((_Ctype)._Table) = classic_table(); 
#line 2727
((_Ctype)._Delfl) = 0; 
#line 2728
}  
#line 2729
} 
#line 2731
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2732
this->_Init(_Lobj); 
#line 2733
} 
#line 2735
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2736
if (_Ppf && (!(*_Ppf))) { 
#line 2737
(*_Ppf) = (new std::ctype< char> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2738
}  
#line 2740
return 2; 
#line 2741
} 
#line 2743
const mask *table() const noexcept { 
#line 2744
return (_Ctype)._Table; 
#line 2745
} 
#line 2747
static const mask *__cdecl classic_table() noexcept { 
#line 2748
return ::std::use_facet< std::ctype< char> > (locale::classic()).table(); 
#line 2749
} 
#line 2751
static const size_t table_size = (1 << 8); 
#line 2754
protected: virtual ~ctype() noexcept override { 
#line 2755
this->_Tidy(); 
#line 2756
} 
#line 2758
void _Init(const _Locinfo &_Lobj) { 
#line 2759
(_Ctype) = _Lobj._Getctype(); 
#line 2760
} 
#line 2762
void _Tidy() noexcept { 
#line 2763
if (0 < ((_Ctype)._Delfl)) { 
#line 2764
::free(const_cast< short *>((_Ctype)._Table)); 
#line 2765
} else { if (((_Ctype)._Delfl) < 0) { 
#line 2766
delete [] ((_Ctype)._Table); 
#line 2767
}  }  
#line 2769
::free((_Ctype)._LocaleName); 
#line 2770
} 
#line 2772
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 2773
return static_cast< _Elem>(_Tolower(static_cast< unsigned char>(_Ch), &(_Ctype))); 
#line 2774
} 
#line 2776
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2777
_Last) const { 
#line 2778
_Adl_verify_range(_First, _Last); 
#line 2779
for (; _First != _Last; ++_First) { 
#line 2780
(*_First) = (static_cast< _Elem>(_Tolower(static_cast< unsigned char>(*_First), &(_Ctype)))); 
#line 2781
}  
#line 2783
return _First; 
#line 2784
} 
#line 2786
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 2787
return static_cast< _Elem>(_Toupper(static_cast< unsigned char>(_Ch), &(_Ctype))); 
#line 2788
} 
#line 2790
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2791
_Last) const { 
#line 2792
_Adl_verify_range(_First, _Last); 
#line 2793
for (; _First != _Last; ++_First) { 
#line 2794
(*_First) = (static_cast< _Elem>(_Toupper(static_cast< unsigned char>(*_First), &(_Ctype)))); 
#line 2795
}  
#line 2797
return _First; 
#line 2798
} 
#line 2800
virtual _Elem do_widen(char _Byte) const { 
#line 2801
return _Byte; 
#line 2802
} 
#line 2804
virtual const _Elem *do_widen(const char *
#line 2805
_First, const char *_Last, _Elem *_Dest) const { 
#line 2806
_Adl_verify_range(_First, _Last); 
#line 2807
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2808
return _Last; 
#line 2809
} 
#line 2811
virtual _Elem do_narrow(_Elem _Ch, char) const { 
#line 2812
return _Ch; 
#line 2813
} 
#line 2815
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char, char *
#line 2816
_Dest) const { 
#line 2817
_Adl_verify_range(_First, _Last); 
#line 2818
::memcpy(_Dest, _First, static_cast< size_t>(_Last - _First)); 
#line 2819
return _Last; 
#line 2820
} 
#line 2823
private: _Locinfo::_Ctypevec _Ctype; 
#line 2824
}; 
#line 2827
template<> class __declspec(dllimport) ctype< __wchar_t>  : public ctype_base { 
#line 2830
public: using _Elem = __wchar_t; 
#line 2831
using char_type = _Elem; 
#line 2833
bool is(mask _Maskval, _Elem _Ch) const { 
#line 2834
return this->do_is(_Maskval, _Ch); 
#line 2835
} 
#line 2837
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 2838
_Dest) const { 
#line 2839
return this->do_is(_First, _Last, _Dest); 
#line 2840
} 
#line 2842
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2843
_Last) const { 
#line 2844
return this->do_scan_is(_Maskval, _First, _Last); 
#line 2845
} 
#line 2847
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2848
_Last) const { 
#line 2849
return this->do_scan_not(_Maskval, _First, _Last); 
#line 2850
} 
#line 2852
_Elem tolower(_Elem _Ch) const { 
#line 2853
return this->do_tolower(_Ch); 
#line 2854
} 
#line 2856
const _Elem *tolower(_Elem *
#line 2857
_First, const _Elem *_Last) const { 
#line 2858
return this->do_tolower(_First, _Last); 
#line 2859
} 
#line 2861
_Elem toupper(_Elem _Ch) const { 
#line 2862
return this->do_toupper(_Ch); 
#line 2863
} 
#line 2865
const _Elem *toupper(_Elem *
#line 2866
_First, const _Elem *_Last) const { 
#line 2867
return this->do_toupper(_First, _Last); 
#line 2868
} 
#line 2870
_Elem widen(char _Byte) const { 
#line 2871
return this->do_widen(_Byte); 
#line 2872
} 
#line 2874
const char *widen(const char *_First, const char *_Last, _Elem *
#line 2875
_Dest) const { 
#line 2876
return this->do_widen(_First, _Last, _Dest); 
#line 2877
} 
#line 2879
char narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 2880
return this->do_narrow(_Ch, _Dflt); 
#line 2881
} 
#line 2883
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 2884
_Dest) const { 
#line 2885
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 2886
} 
#line 2888
static locale::id id; 
#line 2890
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2891
{ _Locinfo _Lobj; 
#line 2892
this->_Init(_Lobj); 
#line 2893
} 
#line 2894
} 
#line 2896
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 2897
this->_Init(_Lobj); 
#line 2898
} 
#line 2900
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 2901
if (_Ppf && (!(*_Ppf))) { 
#line 2902
(*_Ppf) = (new std::ctype< __wchar_t> (((_Locinfo)(_Ploc->_C_str())))); 
#line 2903
}  
#line 2905
return 2; 
#line 2906
} 
#line 2909
protected: virtual ~ctype() noexcept override { 
#line 2910
if ((_Ctype)._Delfl) { 
#line 2911
::free(const_cast< short *>((_Ctype)._Table)); 
#line 2912
}  
#line 2914
::free((_Ctype)._LocaleName); 
#line 2915
} 
#line 2917
void _Init(const _Locinfo &_Lobj) { 
#line 2918
(_Ctype) = _Lobj._Getctype(); 
#line 2919
(_Cvt) = _Lobj._Getcvt(); 
#line 2920
} 
#line 2922
virtual bool do_is(mask 
#line 2923
_Maskval, _Elem _Ch) const { 
#line 2924
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 2925
} 
#line 2927
virtual const _Elem *do_is(const _Elem *_First, const _Elem *_Last, mask *
#line 2928
_Dest) const { 
#line 2929
_Adl_verify_range(_First, _Last); 
#line 2930
return ::_Getwctypes(_First, _Last, _Dest, &(_Ctype)); 
#line 2931
} 
#line 2933
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 2934
_Last) const { 
#line 2935
_Adl_verify_range(_First, _Last); 
#line 2936
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 2937
++_First; 
#line 2938
}  
#line 2940
return _First; 
#line 2941
} 
#line 2943
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 2944
_Last) const { 
#line 2945
_Adl_verify_range(_First, _Last); 
#line 2946
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 2947
++_First; 
#line 2948
}  
#line 2950
return _First; 
#line 2951
} 
#line 2953
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 2954
return _Towlower(_Ch, &(_Ctype)); 
#line 2955
} 
#line 2957
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 2958
_Last) const { 
#line 2959
_Adl_verify_range(_First, _Last); 
#line 2960
for (; _First != _Last; ++_First) { 
#line 2961
(*_First) = _Towlower(*_First, &(_Ctype)); 
#line 2962
}  
#line 2964
return _First; 
#line 2965
} 
#line 2967
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 2968
return _Towupper(_Ch, &(_Ctype)); 
#line 2969
} 
#line 2971
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 2972
_Last) const { 
#line 2973
_Adl_verify_range(_First, _Last); 
#line 2974
for (; _First != _Last; ++_First) { 
#line 2975
(*_First) = _Towupper(*_First, &(_Ctype)); 
#line 2976
}  
#line 2978
return _First; 
#line 2979
} 
#line 2981
_Elem _Dowiden(char _Byte) const { 
#line 2982
mbstate_t _Mbst = {}; 
#line 2983
__wchar_t _Wc; 
#line 2984
return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &(_Cvt)) < 0) ? static_cast< __wchar_t>((wint_t)65535) : _Wc; 
#line 2985
} 
#line 2987
virtual _Elem do_widen(char _Byte) const { 
#line 2988
return this->_Dowiden(_Byte); 
#line 2989
} 
#line 2991
virtual const char *do_widen(const char *
#line 2992
_First, const char *_Last, _Elem *_Dest) const { 
#line 2993
_Adl_verify_range(_First, _Last); 
#line 2994
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 2995
(*_Dest) = this->_Dowiden(*_First); 
#line 2996
}  
#line 2998
return _First; 
#line 2999
} 
#line 3001
char _Donarrow(_Elem _Ch, char _Dflt) const { 
#line 3002
char _Buf[5]; 
#line 3003
mbstate_t _Mbst = {}; 
#line 3004
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 3005
} 
#line 3007
virtual char do_narrow(_Elem _Ch, char _Dflt) const { 
#line 3008
return this->_Donarrow(_Ch, _Dflt); 
#line 3009
} 
#line 3011
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 3012
_Dest) const { 
#line 3013
_Adl_verify_range(_First, _Last); 
#line 3014
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3015
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 3016
}  
#line 3018
return _First; 
#line 3019
} 
#line 3022
private: _Locinfo::_Ctypevec _Ctype; 
#line 3023
_Locinfo::_Cvtvec _Cvt; 
#line 3024
}; 
#line 3028
template<> class __declspec(dllimport) ctype< unsigned short>  : public ctype_base { 
#line 3031
public: using _Elem = unsigned short; 
#line 3032
using char_type = _Elem; 
#line 3034
bool is(mask _Maskval, _Elem _Ch) const { 
#line 3035
return this->do_is(_Maskval, _Ch); 
#line 3036
} 
#line 3038
const _Elem *is(const _Elem *_First, const _Elem *_Last, mask *
#line 3039
_Dest) const { 
#line 3040
return this->do_is(_First, _Last, _Dest); 
#line 3041
} 
#line 3043
const _Elem *scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 3044
_Last) const { 
#line 3045
return this->do_scan_is(_Maskval, _First, _Last); 
#line 3046
} 
#line 3048
const _Elem *scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 3049
_Last) const { 
#line 3050
return this->do_scan_not(_Maskval, _First, _Last); 
#line 3051
} 
#line 3053
_Elem tolower(_Elem _Ch) const { 
#line 3054
return this->do_tolower(_Ch); 
#line 3055
} 
#line 3057
const _Elem *tolower(_Elem *
#line 3058
_First, const _Elem *_Last) const { 
#line 3059
return this->do_tolower(_First, _Last); 
#line 3060
} 
#line 3062
_Elem toupper(_Elem _Ch) const { 
#line 3063
return this->do_toupper(_Ch); 
#line 3064
} 
#line 3066
const _Elem *toupper(_Elem *
#line 3067
_First, const _Elem *_Last) const { 
#line 3068
return this->do_toupper(_First, _Last); 
#line 3069
} 
#line 3071
_Elem widen(char _Byte) const { 
#line 3072
return this->do_widen(_Byte); 
#line 3073
} 
#line 3075
const char *widen(const char *_First, const char *_Last, _Elem *
#line 3076
_Dest) const { 
#line 3077
return this->do_widen(_First, _Last, _Dest); 
#line 3078
} 
#line 3080
char narrow(_Elem _Ch, char _Dflt = '\000') const { 
#line 3081
return this->do_narrow(_Ch, _Dflt); 
#line 3082
} 
#line 3084
const _Elem *narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 3085
_Dest) const { 
#line 3086
return this->do_narrow(_First, _Last, _Dflt, _Dest); 
#line 3087
} 
#line 3089
static locale::id id; 
#line 3091
explicit ctype(size_t _Refs = 0) : ctype_base(_Refs) { 
#line 3092
{ _Locinfo _Lobj; 
#line 3093
this->_Init(_Lobj); 
#line 3094
} 
#line 3095
} 
#line 3097
ctype(const _Locinfo &_Lobj, size_t _Refs = 0) : ctype_base(_Refs) { 
#line 3098
this->_Init(_Lobj); 
#line 3099
} 
#line 3101
static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0, const locale *_Ploc = 0) { 
#line 3102
if (_Ppf && (!(*_Ppf))) { 
#line 3103
(*_Ppf) = (new std::ctype< unsigned short> (((_Locinfo)(_Ploc->_C_str())))); 
#line 3104
}  
#line 3106
return 2; 
#line 3107
} 
#line 3110
protected: virtual ~ctype() noexcept override { 
#line 3111
if ((_Ctype)._Delfl) { 
#line 3112
::free(const_cast< short *>((_Ctype)._Table)); 
#line 3113
}  
#line 3115
::free((_Ctype)._LocaleName); 
#line 3116
} 
#line 3118
void _Init(const _Locinfo &_Lobj) { 
#line 3119
(_Ctype) = _Lobj._Getctype(); 
#line 3120
(_Cvt) = _Lobj._Getcvt(); 
#line 3121
} 
#line 3123
virtual bool do_is(mask 
#line 3124
_Maskval, _Elem _Ch) const { 
#line 3125
return ((::_Getwctype(_Ch, &(_Ctype))) & _Maskval) != 0; 
#line 3126
} 
#line 3128
virtual const _Elem *do_is(const _Elem *_First, const _Elem *_Last, mask *
#line 3129
_Dest) const { 
#line 3130
_Adl_verify_range(_First, _Last); 
#line 3131
return reinterpret_cast< const _Elem *>(::_Getwctypes(reinterpret_cast< const __wchar_t *>(_First), reinterpret_cast< const __wchar_t *>(_Last), _Dest, &(_Ctype))); 
#line 3133
} 
#line 3135
virtual const _Elem *do_scan_is(mask _Maskval, const _Elem *_First, const _Elem *
#line 3136
_Last) const { 
#line 3137
_Adl_verify_range(_First, _Last); 
#line 3138
while ((_First != _Last) && (!this->is(_Maskval, *_First))) { 
#line 3139
++_First; 
#line 3140
}  
#line 3142
return _First; 
#line 3143
} 
#line 3145
virtual const _Elem *do_scan_not(mask _Maskval, const _Elem *_First, const _Elem *
#line 3146
_Last) const { 
#line 3147
_Adl_verify_range(_First, _Last); 
#line 3148
while ((_First != _Last) && this->is(_Maskval, *_First)) { 
#line 3149
++_First; 
#line 3150
}  
#line 3152
return _First; 
#line 3153
} 
#line 3155
virtual _Elem do_tolower(_Elem _Ch) const { 
#line 3156
return _Towlower(_Ch, &(_Ctype)); 
#line 3157
} 
#line 3159
virtual const _Elem *do_tolower(_Elem *_First, const _Elem *
#line 3160
_Last) const { 
#line 3161
_Adl_verify_range(_First, _Last); 
#line 3162
for (; _First != _Last; ++_First) { 
#line 3163
(*_First) = (_Towlower(*_First, &(_Ctype))); 
#line 3164
}  
#line 3166
return _First; 
#line 3167
} 
#line 3169
virtual _Elem do_toupper(_Elem _Ch) const { 
#line 3170
return _Towupper(_Ch, &(_Ctype)); 
#line 3171
} 
#line 3173
virtual const _Elem *do_toupper(_Elem *_First, const _Elem *
#line 3174
_Last) const { 
#line 3175
_Adl_verify_range(_First, _Last); 
#line 3176
for (; _First != _Last; ++_First) { 
#line 3177
(*_First) = (_Towupper(*_First, &(_Ctype))); 
#line 3178
}  
#line 3180
return _First; 
#line 3181
} 
#line 3183
_Elem _Dowiden(char _Byte) const { 
#line 3184
mbstate_t _Mbst = {}; 
#line 3185
unsigned short _Wc; 
#line 3187
if (_Mbrtowc(reinterpret_cast< __wchar_t *>(&_Wc), &_Byte, 1, &_Mbst, &(_Cvt)) < 0) { 
#line 3188
return static_cast< unsigned short>((wint_t)65535); 
#line 3189
}  
#line 3191
return _Wc; 
#line 3192
} 
#line 3194
virtual _Elem do_widen(char _Byte) const { 
#line 3195
return this->_Dowiden(_Byte); 
#line 3196
} 
#line 3198
virtual const char *do_widen(const char *
#line 3199
_First, const char *_Last, _Elem *_Dest) const { 
#line 3200
_Adl_verify_range(_First, _Last); 
#line 3201
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3202
(*_Dest) = this->_Dowiden(*_First); 
#line 3203
}  
#line 3205
return _First; 
#line 3206
} 
#line 3208
char _Donarrow(_Elem _Ch, char _Dflt) const { 
#line 3209
char _Buf[5]; 
#line 3210
mbstate_t _Mbst = {}; 
#line 3211
return (_Wcrtomb(_Buf, _Ch, &_Mbst, &(_Cvt)) != 1) ? _Dflt : (_Buf[0]); 
#line 3212
} 
#line 3214
virtual char do_narrow(_Elem _Ch, char _Dflt) const { 
#line 3215
return this->_Donarrow(_Ch, _Dflt); 
#line 3216
} 
#line 3218
virtual const _Elem *do_narrow(const _Elem *_First, const _Elem *_Last, char _Dflt, char *
#line 3219
_Dest) const { 
#line 3220
_Adl_verify_range(_First, _Last); 
#line 3221
for (; _First != _Last; (++_First), (++_Dest)) { 
#line 3222
(*_Dest) = this->_Donarrow(*_First, _Dflt); 
#line 3223
}  
#line 3225
return _First; 
#line 3226
} 
#line 3229
private: _Locinfo::_Ctypevec _Ctype; 
#line 3230
_Locinfo::_Cvtvec _Cvt; 
#line 3231
}; 
#line 3234 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
template < class _Elem >
class ctype_byname : public ctype < _Elem > {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    explicit ctype_byname ( const char * _Locname, size_t _Refs = 0 )
        : ctype < _Elem > ( _Locinfo ( _Locname ), _Refs ) { }

    explicit ctype_byname ( const string & _Str, size_t _Refs = 0 )
        : ctype < _Elem > ( _Locinfo ( _Str . c_str ( ) ), _Refs ) { }

protected :
     ~ ctype_byname ( ) noexcept override { }
};
#line 3249
enum class _Case_sensitive: bool { _Nope, _Yes}; 
#line 3251
template < class _InIt, class _Elem >
int __cdecl _Getloctxt (
    _InIt & _First, _InIt & _Last, size_t _Numfields, const _Elem * _Ptr, const _Case_sensitive _Matching ) {

    for ( size_t _Off = 0; _Ptr [ _Off ] != _Elem { }; ++ _Off ) {
        if ( _Ptr [ _Off ] == _Ptr [ 0 ] ) {
            ++ _Numfields;
        }
    }

    string _Str ( _Numfields, '\000' );
    const ctype < _Elem > & _CType = :: std :: use_facet < ctype < _Elem >> ( locale { } );

    int _Ans = - 2;
    for ( size_t _Column = 1;; ++ _Column, ( void ) ++ _First, _Ans = - 1 ) {
        bool _Prefix = false;
        size_t _Off = 0;
        size_t _Field = 0;

        for (; _Field < _Numfields; ++ _Field ) {
            while ( _Ptr [ _Off ] != _Elem { } && _Ptr [ _Off ] != _Ptr [ 0 ] ) {
                ++ _Off;
            }

            if ( _Str [ _Field ] != '\000' ) {
                _Off += _Str [ _Field ];
            } else if ( _Ptr [ _Off += _Column ] == _Ptr [ 0 ]
                       || _Ptr [ _Off ] == _Elem { } ) {
                _Str [ _Field ] = static_cast < char > ( _Column < 127 ? _Column : 127 );
                _Ans = static_cast < int > ( _Field );
            } else if ( _First == _Last
                       || ( _Matching == _Case_sensitive :: _Yes
                               ? _Ptr [ _Off ] != * _First
                               : _CType . tolower ( _Ptr [ _Off ] ) != _CType . tolower ( static_cast < _Elem > ( * _First ) ) ) ) {
                _Str [ _Field ] = static_cast < char > ( _Column < 127 ? _Column : 127 );
            } else {
                _Prefix = true;
            }
        }

        if ( ! _Prefix || _First == _Last ) {
            break;
        }
    }
    return _Ans;
}
#line 3300
template class __declspec(dllimport) codecvt< char, char, _Mbstatet> ;
#line 3303 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocale"
}
#line 3306
#pragma warning(pop)
#pragma pack ( pop )
#line 14 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 21
namespace std { 
#line 22
template< class _Dummy> 
#line 23
class _Iosb { 
#line 25
public: enum _Dummy_enum { _Dummy_enum_val = 1}; 
#line 26
enum _Fmtflags { 
#line 27
_Fmtmask = 65535, 
#line 28
_Fmtzero = 0
#line 29
}; 
#line 31
static constexpr int skipws = 1; 
#line 32
static constexpr int unitbuf = 2; 
#line 33
static constexpr int uppercase = 4; 
#line 34
static constexpr int showbase = 8; 
#line 35
static constexpr int showpoint = 16; 
#line 36
static constexpr int showpos = 32; 
#line 37
static constexpr int left = 64; 
#line 38
static constexpr int right = 128; 
#line 39
static constexpr int internal = 256; 
#line 40
static constexpr int dec = 512; 
#line 41
static constexpr int oct = 1024; 
#line 42
static constexpr int hex = 2048; 
#line 43
static constexpr int scientific = 4096; 
#line 44
static constexpr int fixed = 8192; 
#line 46
static constexpr int hexfloat = 12288; 
#line 48
static constexpr int boolalpha = 16384; 
#line 49
static constexpr int _Stdio = 32768; 
#line 50
static constexpr int adjustfield = 448; 
#line 51
static constexpr int basefield = 3584; 
#line 52
static constexpr int floatfield = 12288; 
#line 54
enum _Iostate { 
#line 55
_Statmask = 23
#line 56
}; 
#line 58
static constexpr int goodbit = 0; 
#line 59
static constexpr int eofbit = 1; 
#line 60
static constexpr int failbit = 2; 
#line 61
static constexpr int badbit = 4; 
#line 63
enum _Openmode { 
#line 64
_Openmask = 255
#line 65
}; 
#line 67
static constexpr int in = 1; 
#line 68
static constexpr int out = 2; 
#line 69
static constexpr int ate = 4; 
#line 70
static constexpr int app = 8; 
#line 71
static constexpr int trunc = 16; 
#line 72
static constexpr int _Nocreate = 64; 
#line 73
static constexpr int _Noreplace = 128; 
#line 74
static constexpr int binary = 32; 
#line 79 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
enum _Seekdir { 
#line 80
_Seekbeg, 
#line 81
_Seekcur, 
#line 82
_Seekend
#line 83
}; 
#line 85
static constexpr int beg = (_Seekbeg); 
#line 86
static constexpr int cur = (_Seekcur); 
#line 87
static constexpr int end = (_Seekend); 
#line 89
enum { 
#line 90
_Openprot = 64
#line 91
}; 
#line 93
static constexpr int _Default_open_prot = 64; 
#line 94
}; 
#line 96
class __declspec(dllimport) ios_base : public _Iosb< int>  { 
#line 98
public: using fmtflags = int; 
#line 99
using iostate = int; 
#line 100
using openmode = int; 
#line 101
using seekdir = int; 
#line 104
using streamoff = std::streamoff; 
#line 105
using streampos = std::streampos; 
#line 108 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
enum event { 
#line 109
erase_event, 
#line 110
imbue_event, 
#line 111
copyfmt_event
#line 112
}; 
#line 114
using event_callback = void (__cdecl *)(event, ios_base &, int); 
#line 117
using io_state = unsigned; 
#line 118
using open_mode = unsigned; 
#line 119
using seek_dir = unsigned; 
#line 122 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
class failure : public system_error { 
#line 124
public: explicit failure(const string &_Message, const error_code &_Errcode = ::std::make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 125
{ } 
#line 127
explicit failure(const char *_Message, const error_code &_Errcode = ::std::make_error_code(io_errc::stream)) : system_error(_Errcode, _Message) 
#line 128
{ } 
#line 136 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
}; 
#line 138
class __declspec(dllimport) Init { 
#line 140
public: Init() { 
#line 141
_Init_ctor(this); 
#line 142
} 
#line 144
~Init() noexcept { 
#line 145
_Init_dtor(this); 
#line 146
} 
#line 149
private: static void __cdecl _Init_ctor(Init *); 
#line 150
static void __cdecl _Init_dtor(Init *); 
#line 152
static int _Init_cnt; 
#line 154
static int &__cdecl _Init_cnt_func(); 
#line 155
}; 
#line 157
explicit operator bool() const noexcept { 
#line 158
return !this->fail(); 
#line 159
} 
#line 161
[[nodiscard]] bool operator!() const noexcept { 
#line 162
return this->fail(); 
#line 163
} 
#line 165
void clear(iostate _State, bool _Reraise) { 
#line 166
_State &= (_Statmask); 
#line 167
(_Mystate) = _State; 
#line 168
const auto _Filtered = _State & (_Except); 
#line 169
if (_Filtered) { 
#line 170
if (_Reraise) { 
#line 171
throw; 
#line 172
}  
#line 174
const char *_Msg; 
#line 175
if (_Filtered & ios_base::badbit) { 
#line 176
_Msg = ("ios_base::badbit set"); 
#line 177
} else { if (_Filtered & ios_base::failbit) { 
#line 178
_Msg = ("ios_base::failbit set"); 
#line 179
} else { 
#line 180
_Msg = ("ios_base::eofbit set"); 
#line 181
}  }  
#line 183
throw ((failure)(_Msg)); 
#line 184
}  
#line 185
} 
#line 187
void clear(iostate _State = goodbit) { 
#line 188
this->clear(_State, false); 
#line 189
} 
#line 192
void clear(io_state _State) { 
#line 193
this->clear(static_cast< iostate>(_State)); 
#line 194
} 
#line 197 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
[[nodiscard]] iostate rdstate() const noexcept { 
#line 198
return _Mystate; 
#line 199
} 
#line 201
void setstate(iostate 
#line 202
_State, bool _Exreraise) { 
#line 203
this->clear(this->rdstate() | _State, _Exreraise); 
#line 204
} 
#line 206
void setstate(iostate _State) { 
#line 207
this->clear(this->rdstate() | _State, false); 
#line 208
} 
#line 211
void setstate(io_state _State) { 
#line 212
this->setstate(static_cast< iostate>(_State)); 
#line 213
} 
#line 216 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
[[nodiscard]] bool good() const noexcept { 
#line 217
return this->rdstate() == ios_base::goodbit; 
#line 218
} 
#line 220
[[nodiscard]] bool eof() const noexcept { 
#line 221
return this->rdstate() & ios_base::eofbit; 
#line 222
} 
#line 224
[[nodiscard]] bool fail() const noexcept { 
#line 225
return this->rdstate() & (ios_base::badbit | ios_base::failbit); 
#line 226
} 
#line 228
[[nodiscard]] bool bad() const noexcept { 
#line 229
return this->rdstate() & ios_base::badbit; 
#line 230
} 
#line 232
[[nodiscard]] iostate exceptions() const noexcept { 
#line 233
return _Except; 
#line 234
} 
#line 236
void exceptions(iostate _Newexcept) { 
#line 237
(_Except) = (_Newexcept & (_Statmask)); 
#line 238
this->clear(this->rdstate()); 
#line 239
} 
#line 242
void exceptions(io_state _State) { 
#line 243
this->exceptions(static_cast< iostate>(_State)); 
#line 244
} 
#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xiosbase"
[[nodiscard]] fmtflags flags() const noexcept { 
#line 248
return _Fmtfl; 
#line 249
} 
#line 251
fmtflags flags(fmtflags _Newfmtflags) noexcept { 
#line 253
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 254
(_Fmtfl) = (_Newfmtflags & (_Fmtmask)); 
#line 255
return _Oldfmtflags; 
#line 256
} 
#line 258
fmtflags setf(fmtflags _Newfmtflags) noexcept { 
#line 260
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 261
(_Fmtfl) |= (_Newfmtflags & (_Fmtmask)); 
#line 262
return _Oldfmtflags; 
#line 263
} 
#line 265
fmtflags setf(fmtflags _Newfmtflags, fmtflags _Mask) noexcept { 
#line 267
const fmtflags _Oldfmtflags = _Fmtfl; 
#line 268
(_Fmtfl) = ((_Oldfmtflags & (~_Mask)) | ((_Newfmtflags & _Mask) & (_Fmtmask))); 
#line 269
return _Oldfmtflags; 
#line 270
} 
#line 272
void unsetf(fmtflags _Mask) noexcept { 
#line 274
(_Fmtfl) &= (~_Mask); 
#line 275
} 
#line 277
[[nodiscard]] streamsize precision() const noexcept { 
#line 278
return _Prec; 
#line 279
} 
#line 281
streamsize precision(streamsize _Newprecision) noexcept { 
#line 283
const streamsize _Oldprecision = _Prec; 
#line 284
(_Prec) = _Newprecision; 
#line 285
return _Oldprecision; 
#line 286
} 
#line 288
[[nodiscard]] streamsize width() const noexcept { 
#line 289
return _Wide; 
#line 290
} 
#line 292
streamsize width(streamsize _Newwidth) noexcept { 
#line 294
const streamsize _Oldwidth = _Wide; 
#line 295
(_Wide) = _Newwidth; 
#line 296
return _Oldwidth; 
#line 297
} 
#line 299
[[nodiscard]] locale getloc() const noexcept { 
#line 300
return *(_Ploc); 
#line 301
} 
#line 303
locale imbue(const locale &_Loc) { 
#line 304
locale _Oldlocale = *(_Ploc); 
#line 305
((*(_Ploc)) = _Loc); 
#line 306
this->_Callfns(imbue_event); 
#line 307
return _Oldlocale; 
#line 308
} 
#line 310
[[nodiscard]] static int __cdecl xalloc() { 
#line 311
{ _Lockit _Lock(2); 
#line 312
return _Index++; 
#line 313
} 
#line 314
} 
#line 316
[[nodiscard]] long &iword(int _Idx) { 
#line 317
return this->_Findarr(_Idx)._Lo; 
#line 318
} 
#line 320
[[nodiscard]] void *&pword(int _Idx) { 
#line 321
return this->_Findarr(_Idx)._Vp; 
#line 322
} 
#line 324
void register_callback(event_callback _Pfn, int _Idx) { 
#line 326
(_Calls) = (new _Fnarray(_Idx, _Pfn, _Calls)); 
#line 327
} 
#line 329
ios_base &copyfmt(const ios_base &_Other) { 
#line 330
if (this != ::std::addressof(_Other)) { 
#line 331
this->_Tidy(); 
#line 332
((*(_Ploc)) = (*(_Other._Ploc))); 
#line 333
(_Fmtfl) = (_Other._Fmtfl); 
#line 334
(_Prec) = (_Other._Prec); 
#line 335
(_Wide) = (_Other._Wide); 
#line 336
_Iosarray *_Ptr = _Other._Arr; 
#line 338
for ((_Arr) = (nullptr); _Ptr; _Ptr = (_Ptr->_Next)) { 
#line 339
if (((_Ptr->_Lo) != (0)) || (_Ptr->_Vp)) { 
#line 340
this->iword(_Ptr->_Index) = (_Ptr->_Lo); 
#line 341
this->pword(_Ptr->_Index) = (_Ptr->_Vp); 
#line 342
}  
#line 343
}  
#line 345
for (_Fnarray *_Pfa = _Other._Calls; _Pfa; _Pfa = (_Pfa->_Next)) { 
#line 346
this->register_callback(_Pfa->_Pfn, _Pfa->_Index); 
#line 347
}  
#line 349
this->_Callfns(copyfmt_event); 
#line 350
this->exceptions(_Other._Except); 
#line 351
}  
#line 352
return *this; 
#line 353
} 
#line 355
static bool __cdecl sync_with_stdio(bool _Newsync = true) { 
#line 357
{ _Lockit _Lock(2); 
#line 358
const bool _Oldsync = _Sync; 
#line 359
_Sync = _Newsync; 
#line 360
return _Oldsync; 
#line 361
} 
#line 362
} 
#line 364
void swap(ios_base &_Right) noexcept { 
#line 365
if (this != ::std::addressof(_Right)) { 
#line 366
::std::swap(_Mystate, _Right._Mystate); 
#line 367
::std::swap(_Except, _Right._Except); 
#line 368
::std::swap(_Fmtfl, _Right._Fmtfl); 
#line 369
::std::swap(_Prec, _Right._Prec); 
#line 370
::std::swap(_Wide, _Right._Wide); 
#line 372
::std::swap(_Arr, _Right._Arr); 
#line 373
::std::swap(_Calls, _Right._Calls); 
#line 374
::std::swap(_Ploc, _Right._Ploc); 
#line 375
}  
#line 376
} 
#line 378
virtual ~ios_base() noexcept { 
#line 379
_Ios_base_dtor(this); 
#line 380
} 
#line 382
static void __cdecl _Addstd(ios_base *); 
#line 384
size_t _Stdstr{(0)}; 
#line 387
protected: ios_base() { } 
#line 389
void _Init() { 
#line 390
(_Ploc) = (nullptr); 
#line 391
(_Stdstr) = (0); 
#line 392
(_Except) = goodbit; 
#line 393
(_Fmtfl) = (skipws | dec); 
#line 394
(_Prec) = (6); 
#line 395
(_Wide) = (0); 
#line 396
(_Arr) = (nullptr); 
#line 397
(_Calls) = (nullptr); 
#line 398
this->clear(goodbit); 
#line 399
(_Ploc) = (new locale); 
#line 400
} 
#line 403
private: struct _Iosarray : public _Crt_new_delete { 
#line 405
_Iosarray(int _Idx, _Iosarray *_Link) : _Next(_Link), _Index(_Idx), _Lo((0)), _Vp((nullptr)) 
#line 406
{ } 
#line 408
_Iosarray *_Next; 
#line 409
int _Index; 
#line 410
long _Lo; 
#line 411
void *_Vp; 
#line 412
}; 
#line 414
struct _Fnarray : public _Crt_new_delete { 
#line 415
_Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link) : _Next(_Link), _Index(_Idx), _Pfn(_Pnew) 
#line 416
{ } 
#line 418
_Fnarray *_Next; 
#line 419
int _Index; 
#line 420
event_callback _Pfn; 
#line 421
}; 
#line 423
void _Callfns(event _Ev) { 
#line 424
for (_Fnarray *_Pfa = _Calls; _Pfa; _Pfa = (_Pfa->_Next)) { 
#line 425
(*(_Pfa->_Pfn))(_Ev, *this, _Pfa->_Index); 
#line 426
}  
#line 427
} 
#line 429
_Iosarray &_Findarr(int _Idx) { 
#line 430
_Iosarray *_Ptr1; 
#line 431
_Iosarray *_Ptr2; 
#line 433
for ((_Ptr1 = (_Arr)), (_Ptr2 = (nullptr)); _Ptr1; _Ptr1 = (_Ptr1->_Next)) { 
#line 434
if ((_Ptr1->_Index) == _Idx) { 
#line 435
return *_Ptr1; 
#line 436
} else { if (((!_Ptr2) && ((_Ptr1->_Lo) == (0))) && (!(_Ptr1->_Vp))) { 
#line 437
_Ptr2 = _Ptr1; 
#line 438
}  }  
#line 439
}  
#line 441
if (_Ptr2) { 
#line 442
(_Ptr2->_Index) = _Idx; 
#line 443
return *_Ptr2; 
#line 444
}  
#line 446
(_Arr) = (new _Iosarray(_Idx, _Arr)); 
#line 447
return *(_Arr); 
#line 448
} 
#line 450
void _Tidy() noexcept { 
#line 451
this->_Callfns(erase_event); 
#line 452
_Iosarray *_Ptr1; 
#line 453
_Iosarray *_Ptr2; 
#line 455
for (_Ptr1 = (_Arr); _Ptr1; _Ptr1 = _Ptr2) { 
#line 456
_Ptr2 = (_Ptr1->_Next); 
#line 457
delete _Ptr1; 
#line 458
}  
#line 459
(_Arr) = (nullptr); 
#line 461
_Fnarray *_Pfa1; 
#line 462
_Fnarray *_Pfa2; 
#line 463
for (_Pfa1 = (_Calls); _Pfa1; _Pfa1 = _Pfa2) { 
#line 464
_Pfa2 = (_Pfa1->_Next); 
#line 465
delete _Pfa1; 
#line 466
}  
#line 467
(_Calls) = (nullptr); 
#line 468
} 
#line 470
iostate _Mystate{0}; 
#line 471
iostate _Except{0}; 
#line 472
fmtflags _Fmtfl{0}; 
#line 473
streamsize _Prec{0i64}; 
#line 474
streamsize _Wide{0i64}; 
#line 475
_Iosarray *_Arr{(nullptr)}; 
#line 476
_Fnarray *_Calls{(nullptr)}; 
#line 477
locale *_Ploc{(nullptr)}; 
#line 479
static int _Index; 
#line 480
static bool _Sync; 
#line 482
static void __cdecl _Ios_base_dtor(ios_base *); 
#line 485
public: ios_base(const ios_base &) = delete;
#line 486
ios_base &operator=(const ios_base &) = delete;
#line 487
}; 
#line 488
}
#line 491
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\streambuf"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
template < class _Elem, class _Traits >
class basic_streambuf {
protected :
     basic_streambuf ( ) : _Plocale ( new locale ) {
        _Init ( );
    }

     basic_streambuf ( _Uninitialized ) noexcept { }

     basic_streambuf ( const basic_streambuf & _Right ) : _Plocale ( new locale { _Right . getloc ( ) } ) {
        _Init ( );
        setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
        setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
    }

    basic_streambuf & operator = ( const basic_streambuf & _Right ) {
        if ( this != :: std :: addressof ( _Right ) ) {
            setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
            setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
            pubimbue ( _Right . getloc ( ) );
        }
        return * this;
    }

    void swap ( basic_streambuf & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Elem * _Pfirst0 = pbase ( );
            _Elem * _Pnext0 = pptr ( );
            _Elem * _Pend = epptr ( );
            _Elem * _Gfirst0 = eback ( );
            _Elem * _Gnext0 = gptr ( );
            _Elem * _Gend = egptr ( );

            setp ( _Right . pbase ( ), _Right . pptr ( ), _Right . epptr ( ) );
            _Right . setp ( _Pfirst0, _Pnext0, _Pend );

            setg ( _Right . eback ( ), _Right . gptr ( ), _Right . egptr ( ) );
            _Right . setg ( _Gfirst0, _Gnext0, _Gend );

            :: std :: swap ( _Plocale, _Right . _Plocale );
        }
    }

public :
    using char_type = _Elem;
    using traits_type = _Traits;

    virtual ~ basic_streambuf ( ) noexcept {
        delete _Plocale;
    }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    pos_type pubseekoff ( off_type _Off, ios_base :: seekdir _Way,
        ios_base :: openmode _Mode = ios_base :: in | ios_base :: out ) {
        return seekoff ( _Off, _Way, _Mode );
    }


    pos_type pubseekoff ( off_type _Off, ios_base :: seek_dir _Way,
        ios_base :: open_mode _Mode ) {
        return pubseekoff ( _Off, static_cast < ios_base :: seekdir > ( _Way ), static_cast < ios_base :: openmode > ( _Mode ) );
    }


    pos_type pubseekpos ( pos_type _Pos,
        ios_base :: openmode _Mode = ios_base :: in | ios_base :: out ) {
        return seekpos ( _Pos, _Mode );
    }


    pos_type pubseekpos ( pos_type _Pos,
        ios_base :: open_mode _Mode ) {
        return seekpos ( _Pos, static_cast < ios_base :: openmode > ( _Mode ) );
    }


    basic_streambuf * pubsetbuf ( _Elem * _Buffer,
        streamsize _Count ) {
        return setbuf ( _Buffer, _Count );
    }

    locale pubimbue ( const locale & _Newlocale ) {
        locale _Oldlocale = * _Plocale;
        imbue ( _Newlocale );
        * _Plocale = _Newlocale;
        return _Oldlocale;
    }

    locale getloc ( ) const noexcept {
        return * _Plocale;
    }

    streamsize in_avail ( ) {
        streamsize _Res = _Gnavail ( );
        return 0 < _Res ? _Res : showmanyc ( );
    }

    int pubsync ( ) {
        return sync ( );
    }

    int_type sbumpc ( ) {
        return 0 < _Gnavail ( ) ? _Traits :: to_int_type ( * _Gninc ( ) ) : uflow ( );
    }

    int_type sgetc ( ) {
        return 0 < _Gnavail ( ) ? _Traits :: to_int_type ( * gptr ( ) ) : underflow ( );
    }

    streamsize sgetn ( _Elem * _Ptr,
        streamsize _Count ) {
        return xsgetn ( _Ptr, _Count );
    }

    int_type snextc ( ) {
        return 1 < _Gnavail ( ) ? _Traits :: to_int_type ( * _Gnpreinc ( ) )
             : _Traits :: eq_int_type ( _Traits :: eof ( ), sbumpc ( ) ) ? _Traits :: eof ( )
                                                              : sgetc ( );
    }

    int_type sputbackc ( _Elem _Ch ) {
        if ( gptr ( ) && eback ( ) < gptr ( ) && _Traits :: eq ( _Ch, gptr ( ) [ - 1 ] ) ) {
            return _Traits :: to_int_type ( * _Gndec ( ) );
        }

        return pbackfail ( _Traits :: to_int_type ( _Ch ) );
    }


    void stossc ( ) {
        if ( 0 < _Gnavail ( ) ) {
            _Gninc ( );
        } else {
            uflow ( );
        }
    }


    int_type sungetc ( ) {
        return gptr ( ) && eback ( ) < gptr ( ) ? _Traits :: to_int_type ( * _Gndec ( ) ) : pbackfail ( );
    }

    int_type sputc ( _Elem _Ch ) {
        return 0 < _Pnavail ( ) ? _Traits :: to_int_type ( * _Pninc ( ) = _Ch ) : overflow ( _Traits :: to_int_type ( _Ch ) );
    }

    streamsize sputn ( const _Elem * _Ptr,
        streamsize _Count ) {
        return xsputn ( _Ptr, _Count );
    }

    virtual void _Lock ( ) { }

    virtual void _Unlock ( ) { }

protected :
    _Elem * eback ( ) const noexcept {
        return * _IGfirst;
    }

    _Elem * gptr ( ) const noexcept {
        return * _IGnext;
    }

    _Elem * pbase ( ) const noexcept {
        return * _IPfirst;
    }

    _Elem * pptr ( ) const noexcept {
        return * _IPnext;
    }

    _Elem * egptr ( ) const noexcept {
        return * _IGnext + * _IGcount;
    }

    void gbump ( int _Off ) noexcept {

        * _IGcount -= _Off;
        * _IGnext += _Off;
    }

    void setg ( _Elem * _First, _Elem * _Next, _Elem * _Last ) noexcept {

        * _IGfirst = _First;
        * _IGnext = _Next;
        * _IGcount = static_cast < int > ( _Last - _Next );
    }

    _Elem * epptr ( ) const noexcept {
        return * _IPnext + * _IPcount;
    }

    _Elem * _Gndec ( ) noexcept {
        ++ * _IGcount;
        return -- * _IGnext;
    }

    _Elem * _Gninc ( ) noexcept {
        -- * _IGcount;
        return ( * _IGnext ) ++;
    }

    _Elem * _Gnpreinc ( ) noexcept {
        -- * _IGcount;
        return ++ ( * _IGnext );
    }

    streamsize _Gnavail ( ) const noexcept {
        return * _IGnext ? * _IGcount : 0;
    }

    void pbump ( int _Off ) noexcept {

        * _IPcount -= _Off;
        * _IPnext += _Off;
    }

    void setp ( _Elem * _First, _Elem * _Last ) noexcept {

        * _IPfirst = _First;
        * _IPnext = _First;
        * _IPcount = static_cast < int > ( _Last - _First );
    }

    void setp ( _Elem * _First, _Elem * _Next, _Elem * _Last ) noexcept {

        * _IPfirst = _First;
        * _IPnext = _Next;
        * _IPcount = static_cast < int > ( _Last - _Next );
    }

    _Elem * _Pninc ( ) noexcept {
        -- * _IPcount;
        return ( * _IPnext ) ++;
    }

    streamsize _Pnavail ( ) const noexcept {
        return * _IPnext ? * _IPcount : 0;
    }

    void _Init ( ) noexcept {
        _IGfirst = & _Gfirst;
        _IPfirst = & _Pfirst;
        _IGnext = & _Gnext;
        _IPnext = & _Pnext;
        _IGcount = & _Gcount;
        _IPcount = & _Pcount;
        setp ( nullptr, nullptr );
        setg ( nullptr, nullptr, nullptr );
    }

    void _Init ( _Elem * * _Gf, _Elem * * _Gn, int * _Gc, _Elem * * _Pf, _Elem * * _Pn, int * _Pc ) noexcept {

        _IGfirst = _Gf;
        _IPfirst = _Pf;
        _IGnext = _Gn;
        _IPnext = _Pn;
        _IGcount = _Gc;
        _IPcount = _Pc;
    }

    virtual int_type overflow ( int_type = _Traits :: eof ( ) ) {
        return _Traits :: eof ( );
    }

    virtual int_type pbackfail ( int_type = _Traits :: eof ( ) ) {

        return _Traits :: eof ( );
    }

    virtual streamsize showmanyc ( ) {
        return 0;
    }

    virtual int_type underflow ( ) {
        return _Traits :: eof ( );
    }

    virtual int_type uflow ( ) {
        return _Traits :: eq_int_type ( _Traits :: eof ( ), underflow ( ) ) ? _Traits :: eof ( ) : _Traits :: to_int_type ( * _Gninc ( ) );
    }

    virtual streamsize xsgetn ( _Elem * _Ptr, streamsize _Count ) {
        const streamsize _Start_count = _Count;

        while ( 0 < _Count ) {
            streamsize _Size = _Gnavail ( );
            if ( 0 < _Size ) {
                if ( _Count < _Size ) {
                    _Size = _Count;
                }

                _Traits :: copy ( _Ptr, gptr ( ), static_cast < size_t > ( _Size ) );
                _Ptr += _Size;
                _Count -= _Size;
                gbump ( static_cast < int > ( _Size ) );
            } else {
                const int_type _Meta = uflow ( );
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    break;
                }


                * _Ptr ++ = _Traits :: to_char_type ( _Meta );
                -- _Count;
            }
        }

        return _Start_count - _Count;
    }

    virtual streamsize xsputn ( const _Elem * _Ptr, streamsize _Count ) {

        const streamsize _Start_count = _Count;
        while ( 0 < _Count ) {
            streamsize _Size = _Pnavail ( );
            if ( 0 < _Size ) {
                if ( _Count < _Size ) {
                    _Size = _Count;
                }

                _Traits :: copy ( pptr ( ), _Ptr, static_cast < size_t > ( _Size ) );
                _Ptr += _Size;
                _Count -= _Size;
                pbump ( static_cast < int > ( _Size ) );
            } else if ( _Traits :: eq_int_type ( _Traits :: eof ( ), overflow ( _Traits :: to_int_type ( * _Ptr ) ) ) ) {
                break;
            } else {
                ++ _Ptr;
                -- _Count;
            }
        }

        return _Start_count - _Count;
    }

    virtual pos_type seekoff (
        off_type, ios_base :: seekdir, ios_base :: openmode = ios_base :: in | ios_base :: out ) {

        return pos_type { off_type { - 1 } };
    }

    virtual pos_type seekpos ( pos_type, ios_base :: openmode = ios_base :: in | ios_base :: out ) {

        return pos_type { off_type { - 1 } };
    }

    virtual basic_streambuf * setbuf ( _Elem *, streamsize ) {

        return this;
    }

    virtual int sync ( ) {
        return 0;
    }

    virtual void imbue ( const locale & ) { }

private :
    _Elem * _Gfirst { };
    _Elem * _Pfirst { };
    _Elem * * _IGfirst { };
    _Elem * * _IPfirst { };
    _Elem * _Gnext { };
    _Elem * _Pnext { };
    _Elem * * _IGnext { };
    _Elem * * _IPnext { };

    int _Gcount { };
    int _Pcount { };
    int * _IGcount { };
    int * _IPcount { };

protected :
    locale * _Plocale { };
};
#line 404 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\streambuf"
template class __declspec(dllimport) basic_streambuf< char, char_traits< char> > ;
#line 405
template class __declspec(dllimport) basic_streambuf< __wchar_t, char_traits< __wchar_t> > ;
#line 412 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\streambuf"
}
#line 416
#pragma warning(pop)
#pragma pack ( pop )
#line 17 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocnum"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 24
extern "C" {
#line 26
long __cdecl _Stolx(const char *, char **, int, int *); 
#line 27
unsigned long __cdecl _Stoulx(const char *, char **, int, int *); 
#line 29
__int64 __cdecl _Stollx(const char *, char **, int, int *); 
#line 31
unsigned __int64 __cdecl _Stoullx(const char *, char **, int, int *); 
#line 34
}
#line 36
namespace std { 
#line 38
constexpr size_t _Max_int_dig = (32); 
#line 40
inline double _Stodx_v3(const char *_Str, char **_Endptr, int *_Perr) noexcept { 
#line 41
int &_Errno_ref = *_errno(); 
#line 42
const int _Orig = _Errno_ref; 
#line 44
_Errno_ref = 0; 
#line 45
double _Val = ::strtod(_Str, _Endptr); 
#line 46
(*_Perr) = _Errno_ref; 
#line 47
_Errno_ref = _Orig; 
#line 49
return _Val; 
#line 50
} 
#line 52
inline float _Stofx_v3(const char *_Str, char **_Endptr, int *_Perr) noexcept { 
#line 53
int &_Errno_ref = *_errno(); 
#line 54
const int _Orig = _Errno_ref; 
#line 56
_Errno_ref = 0; 
#line 57
float _Val = ::strtof(_Str, _Endptr); 
#line 58
(*_Perr) = _Errno_ref; 
#line 59
_Errno_ref = _Orig; 
#line 61
return _Val; 
#line 62
} 
#line 64
template < class _Elem, size_t _Base_size >
size_t _Find_elem ( const _Elem ( & _Base ) [ _Base_size ], const _Elem _Ch ) {


    return static_cast < size_t > ( :: std :: _Find_unchecked ( _Base, _Base + ( _Base_size - 1 ), _Ch ) - _Base );
}
#line 71
inline __wchar_t *_Maklocwcs(const __wchar_t *_Ptr) { 
#line 72
const size_t _Count = ::wcslen(_Ptr) + (1); 
#line 74
__wchar_t *_Ptrdest = static_cast< __wchar_t *>(_calloc_dbg(_Count, sizeof(__wchar_t), 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocnum", 74)); 
#line 76
if (!_Ptrdest) { 
#line 77
_Xbad_alloc(); 
#line 78
}  
#line 80
::wmemcpy(_Ptrdest, _Ptr, _Count); 
#line 81
return _Ptrdest; 
#line 82
} 
#line 84
template < class _Elem >
class numpunct : public locale :: facet {
private :
    friend _Tidy_guard < numpunct >;

public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    using string_type = basic_string < _Elem, char_traits < _Elem >, allocator < _Elem >>;
    using char_type = _Elem;

     __declspec ( dllimport ) static locale :: id id;

    _Elem decimal_point ( ) const {
        return do_decimal_point ( );
    }

    _Elem thousands_sep ( ) const {
        return do_thousands_sep ( );
    }

    string grouping ( ) const {
        return do_grouping ( );
    }

    string_type falsename ( ) const {
        return do_falsename ( );
    }

    string_type truename ( ) const {
        return do_truename ( );
    }

    explicit numpunct ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        if ( _Kseparator == 0 ) {
            _Kseparator =
                _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Lobj . _Getcvt ( ) );
        }
        }
    }

    numpunct ( const _Locinfo & _Lobj, size_t _Refs = 0, bool _Isdef = false ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj, _Isdef );
    }

    static size_t _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new numpunct < _Elem > ( _Locinfo ( _Ploc -> _C_str ( ) ), 0, true );
        }
        return 4;
    }

protected :
     ~ numpunct ( ) noexcept override {
        _Tidy ( );
    }

    numpunct ( const char * _Locname, size_t _Refs = 0, bool _Isdef = false ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj ( _Locname );
        _Init ( _Lobj, _Isdef );
        }
    }

    template < class _Elem2 >
    void _Getvals ( _Elem2, const lconv * _Ptr, _Locinfo :: _Cvtvec _Cvt ) {
        _Dp = _Maklocchr ( _Ptr -> decimal_point [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
        _Kseparator = _Maklocchr ( _Ptr -> thousands_sep [ 0 ], static_cast < _Elem2 * > ( nullptr ), _Cvt );
    }

    void _Getvals ( wchar_t, const lconv * _Ptr, _Locinfo :: _Cvtvec ) {
        _Dp = static_cast < _Elem > ( _Ptr -> _W_decimal_point [ 0 ] );
        _Kseparator = static_cast < _Elem > ( _Ptr -> _W_thousands_sep [ 0 ] );
    }

    void _Init ( const _Locinfo & _Lobj, bool _Isdef = false ) {
        const lconv * _Ptr = _Lobj . _Getlconv ( );
        _Locinfo :: _Cvtvec _Cvt = _Lobj . _Getcvt ( );

        _Grouping = nullptr;
        _Falsename = nullptr;
        _Truename = nullptr;

        _Tidy_guard < numpunct > _Guard { this };
        _Grouping = _Maklocstr ( _Isdef ? "" : _Ptr -> grouping, static_cast < char * > ( nullptr ), _Lobj . _Getcvt ( ) );
        _Falsename = _Maklocstr ( _Lobj . _Getfalse ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
        _Truename = _Maklocstr ( _Lobj . _Gettrue ( ), static_cast < _Elem * > ( nullptr ), _Cvt );
        _Guard . _Target = nullptr;

        if ( _Isdef ) {

            _Dp = _Maklocchr ( '.', static_cast < _Elem * > ( nullptr ), _Cvt );
            _Kseparator = _Maklocchr ( ',', static_cast < _Elem * > ( nullptr ), _Cvt );
        } else {
            _Getvals ( _Elem { }, _Ptr, _Cvt );
        }
    }

    virtual _Elem do_decimal_point ( ) const {
        return _Dp;
    }

    virtual _Elem do_thousands_sep ( ) const {
        return _Kseparator;
    }

    virtual string do_grouping ( ) const {
        return string { _Grouping };
    }

    virtual string_type do_falsename ( ) const {
        return string_type { _Falsename };
    }

    virtual string_type do_truename ( ) const {
        return string_type { _Truename };
    }

private :
    void _Tidy ( ) noexcept {
        :: free ( const_cast < char * > ( _Grouping ) );
        :: free ( const_cast < _Elem * > ( _Falsename ) );
        :: free ( const_cast < _Elem * > ( _Truename ) );
    }

    const char * _Grouping;
    _Elem _Dp;
    _Elem _Kseparator;
    const _Elem * _Falsename;
    const _Elem * _Truename;
};
#line 218
template < class _Elem >
class numpunct_byname : public numpunct < _Elem > {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    explicit numpunct_byname ( const char * _Locname, size_t _Refs = 0 )
        : numpunct < _Elem > ( _Locname, _Refs ) { }

    explicit numpunct_byname ( const string & _Str, size_t _Refs = 0 )
        : numpunct < _Elem > ( _Str . c_str ( ), _Refs ) { }

protected :
     ~ numpunct_byname ( ) noexcept override { }
};
#line 239
template< class _Elem> locale::id 
#line 240
numpunct< _Elem> ::id; 
#line 247 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocnum"
struct _Num_get_parse_result { 
#line 251
int8_t _Base; 
#line 252
bool _Bad_grouping; 
#line 253
}; 
#line 255
template < class _Elem, class _InIt = istreambuf_iterator < _Elem, char_traits < _Elem > > >
class num_get : public locale :: facet {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new num_get < _Elem, _InIt > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 4;
    }

     static locale :: id id;

protected :
     ~ num_get ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

public :
    explicit num_get ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     num_get ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj );
    }

    using char_type = _Elem;
    using iter_type = _InIt;

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        bool & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned short & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned int & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long long & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        float & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        double & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long double & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

    _InIt get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        void * & _Val ) const {
        return do_get ( _First, _Last, _Iosbase, _State, _Val );
    }

protected :
    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        bool & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        if ( _Iosbase . flags ( ) & ios_base :: boolalpha ) {
            const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
            basic_string < _Elem > _Str ( static_cast < size_t > ( 1 ), _Elem { } );
            _Str += _Punct_fac . falsename ( );
            _Str . push_back ( _Elem { } );
            _Str += _Punct_fac . truename ( );
            switch ( _Getloctxt ( _First, _Last, 2, _Str . c_str ( ), _Case_sensitive :: _Yes ) ) {
            case 0 :
                _Val = false;
                break;
            case 1 :
                _Val = true;
                break;
            default :
                _Val = false;
                _State = ios_base :: failbit;
                break;
            }
        } else {
            char _Ac [ _Max_int_dig ];
            const auto _Parse_result =
                _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
            if ( _Parse_result . _Base < 0 ) {


                _Val = false;
                _State = ios_base :: failbit;
            } else {
                char * _Ep;
                int _Errno;
                const long _Ans = :: _Stolx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
                if ( _Ep == _Ac || _Errno != 0
                    || _Parse_result . _Bad_grouping ) {
                    _Val = true;
                    _State = ios_base :: failbit;
                } else {
                    _Val = _Ans != 0;
                    if ( _Ans != 0 && _Ans != 1 ) {
                        _State = ios_base :: failbit;
                    }
                }
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned short & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            const bool _Minus = _Ac [ 0 ] == '-';
            const char * _Digits = _Ac;


            if ( _Minus ) {
                ++ _Digits;
            }

            char * _Ep;
            int _Errno;
            const unsigned long _Tmp = :: _Stoulx ( _Digits, & _Ep, _Parse_result . _Base, & _Errno );
            _Val = static_cast < unsigned short > ( _Tmp );
            if ( _Ep == _Digits || _Errno != 0 || _Tmp > 65535 ) {
                _State = ios_base :: failbit;
                _Val = 65535;
            } else if ( _Minus ) {

                _Val = static_cast < unsigned short > ( 0 - _Val );
            }

            if ( _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned int & _Val ) const {
        static_assert ( sizeof ( unsigned int ) == sizeof ( unsigned long ),
            "Bad overflow assumptions due to sizeof(unsigned int) != sizeof(unsigned long)" );
        unsigned long _Tmp;
        _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Tmp );
        _Val = _Tmp;
        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stolx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stoulx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            char * _Ep;
            int _Errno;
            _Val = :: _Stollx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        unsigned long long & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, _Iosbase . flags ( ), _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = 0;
        } else {
            int _Errno;
            char * _Ep;
            _Val = :: _Stoullx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }






    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        float & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ ( 8 + 768 + 16 ) ];
        const auto _Parse_result =
            _Parse_fp_with_locale ( _Ac, 768, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 ) {
            _State = ios_base :: failbit;
            _Val = (0.0F);
        } else {
            int _Errno;
            char * _Ep;
            _Val = :: std :: _Stofx_v3 ( _Ac, & _Ep, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        double & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ ( 8 + 768 + 16 ) ];
        const auto _Parse_result =
            _Parse_fp_with_locale ( _Ac, 768, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 ) {
            _State = ios_base :: failbit;
            _Val = (0.0);
        } else {
            int _Errno;
            char * _Ep;
            _Val = :: std :: _Stodx_v3 ( _Ac, & _Ep, & _Errno );
            if ( _Ep == _Ac || _Errno != 0
                || _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }



    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        long double & _Val ) const {
        static_assert ( sizeof ( double ) == sizeof ( long double ), "Bad assumption: sizeof(double) == sizeof(long double)." );
        double _Result;
        _First = num_get :: do_get ( _First, _Last, _Iosbase, _State, _Result );
        _Val = _Result;
        return _First;
    }

    virtual _InIt do_get ( _InIt _First, _InIt _Last, ios_base & _Iosbase, ios_base :: iostate & _State,
        void * & _Val ) const {
        _Adl_verify_range ( _First, _Last );
        char _Ac [ _Max_int_dig ];
        const auto _Parse_result =
            _Parse_int_with_locale ( _Ac, _First, _Last, ios_base :: hex, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base < 0 ) {
            _State = ios_base :: failbit;
            _Val = nullptr;
        } else {
            int _Errno;
            char * _Ep;

            _Val = reinterpret_cast < void * > ( :: _Stoullx ( _Ac, & _Ep, _Parse_result . _Base, & _Errno ) );



            if ( _Ep == _Ac || _Errno != 0 ) {
                _State = ios_base :: failbit;
                _Val = nullptr;
            }

            if ( _Parse_result . _Bad_grouping ) {
                _State = ios_base :: failbit;
            }
        }

        if ( _First == _Last ) {
            _State |= ios_base :: eofbit;
        }

        return _First;
    }

private :
    template < int = 0 >
    static _Num_get_parse_result _Parse_int_with_locale (
        char * const _Ac, _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield, const locale & _Loc ) {

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Loc );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Grouping . empty ( ) ? _Elem { } : _Punct_fac . thousands_sep ( );

        constexpr int _Numget_signoff = 22;
        constexpr int _Numget_xoff = 24;
        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+Xx";
        _Elem _Atoms [ sizeof ( _Src ) ];
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Loc );
        _Ctype_fac . widen ( :: std :: begin ( _Src ), :: std :: end ( _Src ), _Atoms );

        bool _Bad_grouping = false;


        if ( _Kseparator != _Elem { } ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        char * _Ptr = _Ac;

        if ( _First != _Last ) {
            if ( * _First == _Atoms [ _Numget_signoff + 1 ] ) {
                * _Ptr ++ = '+';
                ++ _First;
            } else if ( * _First == _Atoms [ _Numget_signoff ] ) {
                * _Ptr ++ = '-';
                ++ _First;
            }
        }


        if ( _Kseparator != _Elem { } ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        _Basefield &= ios_base :: basefield;

        int8_t _Base;
        if ( _Basefield == ios_base :: oct ) {
            _Base = 8;
        } else if ( _Basefield == ios_base :: hex ) {
            _Base = 16;
        } else if ( _Basefield == ios_base :: _Fmtzero ) {
            _Base = 0;
        } else {
            _Base = 10;
        }

        bool _Seendigit = false;
        bool _Nonzero = false;

        if ( _First != _Last && * _First == _Atoms [ 0 ] ) {
            _Seendigit = true;
            ++ _First;
            if ( _First != _Last && ( * _First == _Atoms [ _Numget_xoff + 1 ] || * _First == _Atoms [ _Numget_xoff ] )
                && ( _Base == 0 || _Base == 16 ) ) {
                _Base = 16;
                _Seendigit = false;
                ++ _First;
            } else if ( _Base == 0 ) {
                _Base = 8;
            }
        }

        const auto _Dlen = static_cast < size_t > ( _Base == 0 || _Base == 10 ? 10 : _Base == 8 ? 8 : 16 + 6 );
        string _Groups ( 1, static_cast < char > ( _Seendigit ) );
        size_t _Groups_arr_idx = 0;

        for ( char * const _Pe = & _Ac [ _Max_int_dig - 1 ]; _First != _Last; ++ _First ) {
            size_t _Idx = :: std :: _Find_elem ( _Atoms, * _First );
            if ( _Idx < _Dlen ) {
                * _Ptr = _Src [ _Idx ];
                if ( ( _Nonzero || * _Ptr != '0' ) && _Ptr < _Pe ) {
                    ++ _Ptr;
                    _Nonzero = true;
                }

                _Seendigit = true;
                if ( _Groups [ _Groups_arr_idx ] != 127 ) {
                    ++ _Groups [ _Groups_arr_idx ];
                }
            } else if ( _Kseparator == _Elem { } || * _First != _Kseparator ) {
                break;
            } else if ( _Groups [ _Groups_arr_idx ] == '\000' ) {
                _Bad_grouping = true;
            } else {
                _Groups . push_back ( '\000' );
                ++ _Groups_arr_idx;
            }
        }

        if ( _Groups_arr_idx != 0 ) {
            if ( _Groups [ _Groups_arr_idx ] > '\000' ) {
                ++ _Groups_arr_idx;
            } else {
                _Bad_grouping = true;
            }
        }


        if ( _Kseparator != _Elem { } ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        const char * _Grouping_iter = _Grouping . data ( );
        const char * const _Grouping_end = _Grouping_iter + _Grouping . size ( );
        for ( char _Current_grouping_count = '\000'; _Seendigit && ! _Bad_grouping && _Groups_arr_idx > 0; ) {
            if ( _Grouping_iter != _Grouping_end ) {
                _Current_grouping_count = * _Grouping_iter;
                ++ _Grouping_iter;
            }

            -- _Groups_arr_idx;
            if ( ( _Current_grouping_count > '\000' && _Current_grouping_count != 127 )
                && ( ( _Groups_arr_idx > 0 && _Groups [ _Groups_arr_idx ] != _Current_grouping_count )
                    || ( _Groups_arr_idx == 0 && _Groups [ _Groups_arr_idx ] > _Current_grouping_count ) ) ) {
                _Bad_grouping = true;
            }

        }

        if ( ! _Seendigit ) {
            return { static_cast < int8_t > ( ~ _Base ), false };
        }

        if ( ! _Nonzero ) {
            * _Ptr ++ = '0';
        }

        * _Ptr = '\000';
        return { _Base, _Bad_grouping };
    }

    template < int = 0 >
    static _Num_get_parse_result _Parse_fp_with_locale (
        char * const _Ac, const int _Max_sig_dig, _InIt & _First, _InIt & _Last, const locale & _Loc ) {

        char * _Ptr = _Ac;

        constexpr size_t _Offset_dec_digit_end = 10;
        constexpr size_t _Offset_hex_digit_end = 22;
        constexpr size_t _Offset_neg_sign = 22;
        constexpr size_t _Offset_pos_sign = 23;
        constexpr size_t _Offset_upper_x = 24;
        constexpr size_t _Offset_lower_x = 25;
        constexpr size_t _Offset_upper_p = 26;
        constexpr size_t _Offset_lower_p = 27;
        constexpr size_t _Offset_upper_e = 14;
        constexpr size_t _Offset_lower_e = 20;
        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+XxPp";
        _Elem _Atoms [ sizeof ( _Src ) ];
        const auto & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Loc );
        _Ctype_fac . widen ( :: std :: begin ( _Src ), :: std :: end ( _Src ), _Atoms );

        const _Elem _Positive_sign = _Atoms [ _Offset_pos_sign ];
        const _Elem _Negative_sign = _Atoms [ _Offset_neg_sign ];
        const _Elem _Zero_wc = _Atoms [ 0 ];

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Loc );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Grouping . empty ( ) ? _Elem { } : _Punct_fac . thousands_sep ( );

        bool _Bad_grouping = false;


        if ( ! _Grouping . empty ( ) ) {
            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }
        }

        if ( _First != _Last ) {
            if ( * _First == _Positive_sign ) {
                * _Ptr ++ = '+';
                ++ _First;
            } else if ( * _First == _Negative_sign ) {
                * _Ptr ++ = '-';
                ++ _First;
            }
        }

        * _Ptr ++ = '0';

        bool _Parse_hex = false;
        bool _Seendigit = false;
        char _Initial_dec_leading_zero = '\000';
        if ( _First != _Last && * _First == _Zero_wc ) {
            ++ _First;
            if ( _First == _Last ) {
                * _Ptr = '\000';
                return { 10, _Bad_grouping };
            }

            if ( * _First == _Atoms [ _Offset_lower_x ] || * _First == _Atoms [ _Offset_upper_x ] ) {
                _Parse_hex = true;
                ++ _First;
                * _Ptr ++ = 'x';
            } else {
                _Seendigit = true;
                ++ _Initial_dec_leading_zero;
            }
        }

        bool _Has_unaccumulated_digits = false;
        int _Significant = 0;
        ptrdiff_t _Power_of_rep_base = 0;

        const size_t _Offset_digit_end = _Parse_hex ? _Offset_hex_digit_end : _Offset_dec_digit_end;
        if ( _Grouping . empty ( ) ) {
            for ( size_t _Idx; _First != _Last && ( _Idx = :: std :: _Find_elem ( _Atoms, * _First ) ) < _Offset_digit_end;
                 _Seendigit = true, ( void ) ++ _First ) {
                if ( _Significant >= _Max_sig_dig ) {
                    ++ _Power_of_rep_base;
                    if ( _Idx > 0 ) {
                        _Has_unaccumulated_digits = true;
                    }
                } else if ( _Idx != 0 || _Significant != 0 ) {
                    * _Ptr ++ = _Src [ _Idx ];
                    ++ _Significant;
                }
            }
        } else {

            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }

            string _Groups ( 1, _Initial_dec_leading_zero );
            size_t _Groups_arr_idx = 0;

            for (; _First != _Last; ++ _First ) {
                const size_t _Idx = :: std :: _Find_elem ( _Atoms, * _First );
                if ( _Idx < _Offset_digit_end ) {
                    _Seendigit = true;
                    if ( _Significant >= _Max_sig_dig ) {
                        ++ _Power_of_rep_base;
                        if ( _Idx > 0 ) {
                            _Has_unaccumulated_digits = true;
                        }
                    } else if ( _Idx != 0 || _Significant != 0 ) {
                        * _Ptr ++ = _Src [ _Idx ];
                        ++ _Significant;
                    }

                    if ( _Groups [ _Groups_arr_idx ] != 127 ) {
                        ++ _Groups [ _Groups_arr_idx ];
                    }
                } else if ( * _First != _Kseparator ) {
                    break;
                } else if ( _Groups [ _Groups_arr_idx ] == '\000' ) {
                    _Bad_grouping = true;
                } else {
                    _Groups . push_back ( '\000' );
                    ++ _Groups_arr_idx;
                }
            }

            if ( _Groups_arr_idx != 0 ) {
                if ( _Groups [ _Groups_arr_idx ] > '\000' ) {
                    ++ _Groups_arr_idx;
                } else {
                    _Bad_grouping = true;
                }
            }


            while ( _First != _Last && * _First == _Kseparator ) {
                ++ _First;
                _Bad_grouping = true;
            }

            const char * _Grouping_iter = _Grouping . data ( );
            const char * const _Grouping_end = _Grouping_iter + _Grouping . size ( );
            char _Current_grouping_count = '\000';
            while ( ! _Bad_grouping && _Groups_arr_idx > 0 ) {
                if ( _Grouping_iter != _Grouping_end ) {
                    _Current_grouping_count = * _Grouping_iter;
                    ++ _Grouping_iter;
                }

                -- _Groups_arr_idx;
                if ( ( _Current_grouping_count > '\000' && _Current_grouping_count != 127 )
                    && ( ( _Groups_arr_idx > 0 && _Groups [ _Groups_arr_idx ] != _Current_grouping_count )
                        || ( _Groups_arr_idx == 0 && _Groups [ _Groups_arr_idx ] > _Current_grouping_count ) ) ) {
                    _Bad_grouping = true;
                }

            }
        }

        if ( _Parse_hex && _Seendigit && _Significant == 0 ) {

            * _Ptr ++ = '0';
        }

        const char _Decimal_point = :: localeconv ( ) -> decimal_point [ 0 ];
        if ( _First != _Last && * _First == _Punct_fac . decimal_point ( ) ) {
            * _Ptr ++ = _Decimal_point;
            ++ _First;
        }

        if ( _Significant == 0 ) {
            for (; _First != _Last && * _First == _Zero_wc; _Seendigit = true, ( void ) ++ _First ) {
                -- _Power_of_rep_base;
            }
        }

        for ( size_t _Idx; _First != _Last && ( _Idx = :: std :: _Find_elem ( _Atoms, * _First ) ) < _Offset_digit_end;
             _Seendigit = true, ( void ) ++ _First ) {
            if ( _Significant < _Max_sig_dig ) {
                * _Ptr ++ = _Src [ _Idx ];
                ++ _Significant;
            } else if ( _Idx > 0 ) {
                _Has_unaccumulated_digits = true;
            }
        }

        if ( _Has_unaccumulated_digits ) {
            char & _Last_got_digit = _Ptr [ - 1 ] == _Decimal_point ? _Ptr [ - 2 ] : _Ptr [ - 1 ];
            if ( _Last_got_digit == '0' || _Last_got_digit == ( _Parse_hex ? '8' : '5' ) ) {
                ++ _Last_got_digit;
            }
        }

        const _Elem _Lower_exp_wc = _Atoms [ _Parse_hex ? _Offset_lower_p : _Offset_lower_e ];
        const _Elem _Upper_exp_wc = _Atoms [ _Parse_hex ? _Offset_upper_p : _Offset_upper_e ];

        bool _Exponent_part_negative = false;
        ptrdiff_t _Exponent_part = 0;
        if ( _Seendigit && _First != _Last
            && ( * _First == _Lower_exp_wc || * _First == _Upper_exp_wc ) ) {
            ++ _First;
            _Seendigit = false;
            _Significant = 0;

            if ( _First != _Last ) {
                if ( * _First == _Positive_sign ) {
                    ++ _First;
                } else if ( * _First == _Negative_sign ) {
                    _Exponent_part_negative = true;
                    ++ _First;
                }
            }

            for (; _First != _Last && * _First == _Zero_wc; ++ _First ) {
                _Seendigit = true;
            }

            for ( size_t _Idx; _First != _Last && ( _Idx = :: std :: _Find_elem ( _Atoms, * _First ) ) < _Offset_dec_digit_end;
                 _Seendigit = true, ( void ) ++ _First ) {
                if ( _Exponent_part < 9223372036854775807i64 / 10
                    || ( _Exponent_part == 9223372036854775807i64 / 10
                        && static_cast < ptrdiff_t > ( _Idx ) <= 9223372036854775807i64 % 10 ) ) {
                    _Exponent_part = _Exponent_part * 10 + static_cast < ptrdiff_t > ( _Idx );
                } else {
                    _Exponent_part = 9223372036854775807i64;
                }
            }

            if ( _Exponent_part_negative ) {
                _Exponent_part = - _Exponent_part;
            }
        }

        if ( ! _Seendigit ) {
            return { 0, false };
        }

        constexpr int _Dec_exp_abs_bound = 1100;
        constexpr int _Hex_exp_abs_bound = 4200;

        const ptrdiff_t _Exp_abs_bound = _Parse_hex ? _Hex_exp_abs_bound : _Dec_exp_abs_bound;
        const ptrdiff_t _Exp_rep_abs_bound = _Parse_hex ? _Hex_exp_abs_bound / 4 : _Dec_exp_abs_bound;




        for ( ptrdiff_t _Power_of_rep_adjusted = _Power_of_rep_base;; ) {
            if ( _Exponent_part >= 0 && _Power_of_rep_adjusted >= 0
                && ( _Exponent_part >= _Exp_abs_bound || _Power_of_rep_adjusted >= _Exp_rep_abs_bound ) ) {
                _Exponent_part = _Exp_abs_bound;
                break;
            } else if ( _Exponent_part <= 0 && _Power_of_rep_adjusted <= 0
                       && ( _Exponent_part <= - _Exp_abs_bound || _Power_of_rep_adjusted <= - _Exp_rep_abs_bound ) ) {
                _Exponent_part = - _Exp_abs_bound;
                break;
            } else if ( :: std :: abs ( _Exponent_part ) <= _Exp_abs_bound
                       && :: std :: abs ( _Power_of_rep_adjusted ) <= _Exp_rep_abs_bound ) {

                _Exponent_part += _Parse_hex ? _Power_of_rep_adjusted * 4 : _Power_of_rep_adjusted;
                if ( _Exponent_part > _Exp_abs_bound ) {
                    _Exponent_part = _Exp_abs_bound;
                } else if ( _Exponent_part < - _Exp_abs_bound ) {
                    _Exponent_part = - _Exp_abs_bound;
                }
                break;
            } else {


                const ptrdiff_t _Exponent_part_preadjustment_round_up =
                    _Parse_hex ? ( :: std :: abs ( _Exponent_part ) - 1 ) / 4 + 1 : :: std :: abs ( _Exponent_part );
                const ptrdiff_t _Exp_rep_adjustment =
                    ( :: std :: min ) ( _Exponent_part_preadjustment_round_up, :: std :: abs ( _Power_of_rep_base ) );

                if ( _Exponent_part >= 0 ) {
                    _Exponent_part -= _Parse_hex ? _Exp_rep_adjustment * 4 : _Exp_rep_adjustment;
                    _Power_of_rep_adjusted += _Exp_rep_adjustment;
                } else {
                    _Exponent_part += _Parse_hex ? _Exp_rep_adjustment * 4 : _Exp_rep_adjustment;
                    _Power_of_rep_adjusted -= _Exp_rep_adjustment;
                }
            }
        }

        if ( _Exponent_part != 0 ) {
            * _Ptr ++ = _Parse_hex ? 'p' : 'e';
            if ( _Exponent_part < 0 ) {
                * _Ptr ++ = '-';
            }

            char * const _Rev_begin = _Ptr;
            for ( ptrdiff_t _Exponent_part_abs = :: std :: abs ( _Exponent_part ); _Exponent_part_abs != 0;
                 _Exponent_part_abs /= 10 ) {
                * _Ptr ++ = static_cast < char > ( '0' + _Exponent_part_abs % 10 );
            }
            :: std :: reverse ( _Rev_begin, _Ptr );
        }

        * _Ptr = '\000';
        return { static_cast < int8_t > ( _Parse_hex ? 16 : 10 ), _Bad_grouping };
    }


    int __cdecl _Getifld (
        char * _Ac, _InIt & _First, _InIt & _Last, ios_base :: fmtflags _Basefield, const locale & _Loc ) const {

        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+Xx";
        const char * volatile _Ptr = _Src;
        ( void ) _Ptr;

        const auto _Parse_result = _Parse_int_with_locale ( _Ac, _First, _Last, _Basefield, _Loc );
        if ( _Parse_result . _Base < 0 || _Parse_result . _Bad_grouping ) {
            * _Ac = '\000';
        }
        return _Parse_result . _Base < 0 ? ~ _Parse_result . _Base : _Parse_result . _Base;
    }







    int __cdecl _Getffld ( char * _Ac, _InIt & _First, _InIt & _Last, ios_base & _Iosbase, int * _Phexexp ) const {

        static constexpr char _Src [ ] = "0123456789-+Ee";
        const char * volatile _Ptr = & _Src [ 0 ];
        ( void ) _Ptr;
        const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );
        const auto _Parse_result = _Parse_fp_with_locale ( _Ac, _Max_sig_dig, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 || _Parse_result . _Bad_grouping ) {
            * _Ac = '\000';
        }

        if ( _Parse_result . _Base == 16 ) {
            * _Phexexp = 0;
        }
        return 0;
    }


    int __cdecl _Getffldx ( char * _Ac, _InIt & _First, _InIt & _Last, ios_base & _Iosbase, int * _Phexexp ) const {

        static constexpr char _Src [ ] = "0123456789ABCDEFabcdef-+XxPp";
        const char * volatile _Ptr = & _Src [ 0 ];
        ( void ) _Ptr;
        const int _Max_sig_dig = ( * _Phexexp == 1000000000 ? 768 : 36 );
        const auto _Parse_result = _Parse_fp_with_locale ( _Ac, _Max_sig_dig, _First, _Last, _Iosbase . getloc ( ) );
        if ( _Parse_result . _Base == 0 || _Parse_result . _Bad_grouping ) {
            * _Ac = '\000';
        }

        if ( _Parse_result . _Base == 16 ) {
            * _Phexexp = 0;
        }
        return 0;
    }




};
#line 1172 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocnum"
template< class _Elem, class _InIt> locale::id 
#line 1173
num_get< _Elem, _InIt> ::id; 
#line 1179
template < class _Ty >
int _Float_put_desired_precision ( const streamsize _Precision, const ios_base :: fmtflags _Float_flags ) {

    const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
    if ( _Is_hex ) {

        if constexpr ( is_same_v < _Ty, double > ) {
            return ( ( 53 - 1 ) + 3 ) / 4;
        } else if constexpr ( is_same_v < _Ty, long double > ) {
            return ( ( 53 - 1 ) + 3 ) / 4;
        } else {
            static_assert ( _Always_false < _Ty >, "Expected only double or long double here (not float)." );
        }
    }

    if ( _Precision > 0 ) {
        return static_cast < int > ( _Precision );
    } else if ( _Precision == 0 ) {
        const bool _Is_default_float = _Float_flags == 0;
        if ( _Is_default_float ) {
            return 1;
        } else {
            return 0;
        }
    } else {
        constexpr int _Default_precision = 6;
        return _Default_precision;
    }
}
#line 1209
template < class _Elem, class _OutIt = ostreambuf_iterator < _Elem, char_traits < _Elem > > >
class num_put : public locale :: facet {
public :
    static_assert ( ! 0 || _Is_any_of_v < _Elem, char, wchar_t >, "Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPE" "CIALIZATIONS=0 to suppress this error." );

    static size_t __cdecl _Getcat ( const locale :: facet * * _Ppf = nullptr, const locale * _Ploc = nullptr ) {

        if ( _Ppf && ! * _Ppf ) {
            * _Ppf = new num_put < _Elem, _OutIt > ( _Locinfo ( _Ploc -> _C_str ( ) ) );
        }

        return 4;
    }

     static locale :: id id;

protected :
     ~ num_put ( ) noexcept override { }

    void _Init ( const _Locinfo & ) { }

public :
    explicit num_put ( size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        { _Locinfo _Lobj;
        _Init ( _Lobj );
        }
    }

     num_put ( const _Locinfo & _Lobj, size_t _Refs = 0 ) : locale :: facet ( _Refs ) {
        _Init ( _Lobj );
    }

    using char_type = _Elem;
    using iter_type = _OutIt;

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, bool _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long long _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, double _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long double _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

    _OutIt put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const {
        return do_put ( _Dest, _Iosbase, _Fill, _Val );
    }

protected :
    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, bool _Val ) const {
        if ( ! ( _Iosbase . flags ( ) & ios_base :: boolalpha ) ) {
            return do_put ( _Dest, _Iosbase, _Fill, static_cast < long > ( _Val ) );
        } else {
            const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
            basic_string < _Elem > _Str;
            if ( _Val ) {
                _Str . assign ( _Punct_fac . truename ( ) );
            } else {
                _Str . assign ( _Punct_fac . falsename ( ) );
            }

            size_t _Fillcount;
            if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Str . size ( ) ) {
                _Fillcount = 0;
            } else {
                _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Str . size ( );
            }

            if ( ( _Iosbase . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
                _Dest = _Rep ( _Dest, _Fill, _Fillcount );
                _Fillcount = 0;
            }
            _Dest = _Put ( _Dest, _Str . c_str ( ), _Str . size ( ) );
            _Iosbase . width ( 0 );
            return _Rep ( _Dest, _Fill, _Fillcount );
        }
    }

#pragma warning(push)
#pragma warning(disable : 4774)
    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 6 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "ld", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 6 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "lu", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 8 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Ld", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill,
        unsigned long long _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];
        char _Fmt [ 8 ];

        return _Iput ( _Dest, _Iosbase, _Fill, _Buf,
            static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), _Ifmt ( _Fmt, "Lu", _Iosbase . flags ( ) ), _Val ) ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, double _Val ) const {
        string _Buf;
        char _Fmt [ 8 ];
        const auto _Float_flags = _Iosbase . flags ( ) & ios_base :: floatfield;
        const bool _Is_fixed = _Float_flags == ios_base :: fixed;
        const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
        const streamsize _Precision = _Is_hex ? - 1 : _Iosbase . precision ( );
        const int _Desired_precision =
            _Float_put_desired_precision < double > ( _Precision, _Float_flags );
        size_t _Bufsize = static_cast < size_t > ( _Desired_precision );
        if ( _Is_fixed && (10000000000.0) < :: fabs ( _Val ) ) {
            int _Ptwo;
            ( void ) :: frexp ( _Val, & _Ptwo );
            _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
        }

        _Buf . resize ( _Bufsize + 50 );
        const auto _Ngen = static_cast < size_t > ( :: sprintf_s (
            & _Buf [ 0 ], _Buf . size ( ), _Ffmt ( _Fmt, 0, _Iosbase . flags ( ) ), static_cast < int > ( _Precision ), _Val ) );

        return _Fput_v3 ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen, ( :: std :: isfinite ) ( _Val ) );
    }

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, long double _Val ) const {
        string _Buf;
        char _Fmt [ 8 ];
        const auto _Float_flags = _Iosbase . flags ( ) & ios_base :: floatfield;
        const bool _Is_fixed = _Float_flags == ios_base :: fixed;
        const bool _Is_hex = _Float_flags == ( ios_base :: fixed | ios_base :: scientific );
        const streamsize _Precision = _Is_hex ? - 1 : _Iosbase . precision ( );
        const int _Desired_precision =
            _Float_put_desired_precision < long double > ( _Precision, _Float_flags );
        size_t _Bufsize = static_cast < size_t > ( _Desired_precision );
        if ( _Is_fixed && (10000000000.0) < :: fabsl ( _Val ) ) {
            int _Ptwo;
            ( void ) :: frexpl ( _Val, & _Ptwo );
            _Bufsize += :: abs ( _Ptwo ) * 30103L / 100000L;
        }

        _Buf . resize ( _Bufsize + 50 );
        const auto _Ngen = static_cast < size_t > ( :: sprintf_s (
            & _Buf [ 0 ], _Buf . size ( ), _Ffmt ( _Fmt, 'L', _Iosbase . flags ( ) ), static_cast < int > ( _Precision ), _Val ) );

        return _Fput_v3 ( _Dest, _Iosbase, _Fill, _Buf . c_str ( ), _Ngen, ( :: std :: isfinite ) ( _Val ) );
    }
#pragma warning(pop)

    virtual _OutIt do_put (
        _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const void * _Val ) const {
        char _Buf [ 2 * _Max_int_dig ];

        return _Iput (
            _Dest, _Iosbase, _Fill, _Buf, static_cast < size_t > ( :: sprintf_s ( _Buf, sizeof ( _Buf ), "%p", _Val ) ) );
    }

private :
    char * __cdecl _Ffmt (
        char * _Fmt, char _Spec, ios_base :: fmtflags _Flags ) const {
        char * _Ptr = _Fmt;
        * _Ptr ++ = '%';

        if ( _Flags & ios_base :: showpos ) {
            * _Ptr ++ = '+';
        }

        if ( _Flags & ios_base :: showpoint ) {
            * _Ptr ++ = '#';
        }

        * _Ptr ++ = '.';
        * _Ptr ++ = '*';
        if ( _Spec != '\000' ) {
            * _Ptr ++ = _Spec;
        }

        char _Ch;
        ios_base :: fmtflags _Ffl = _Flags & ios_base :: floatfield;
        if ( _Flags & ios_base :: uppercase ) {
            if ( _Ffl == ios_base :: fixed ) {
                _Ch = 'f';
            } else if ( _Ffl == ios_base :: hexfloat ) {
                _Ch = 'A';
            } else if ( _Ffl == ios_base :: scientific ) {
                _Ch = 'E';
            } else {
                _Ch = 'G';
            }
        } else {
            if ( _Ffl == ios_base :: fixed ) {
                _Ch = 'f';
            } else if ( _Ffl == ios_base :: hexfloat ) {
                _Ch = 'a';
            } else if ( _Ffl == ios_base :: scientific ) {
                _Ch = 'e';
            } else {
                _Ch = 'g';
            }
        }
        * _Ptr ++ = _Ch;

        * _Ptr = '\000';
        return _Fmt;
    }

    _OutIt __cdecl _Fput ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const char * _Buf,
        size_t _Count ) const {
        return _Fput_v3 ( _Dest, _Iosbase, _Fill, _Buf, _Count, true );
    }

    template < int = 0 >
    _OutIt _Fput_v3 ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, const char * _Buf, size_t _Count,
        bool _Is_finite_val ) const {
        auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
        const char * _Exps;
        if ( ( _Iosbase . flags ( ) & ios_base :: floatfield ) != ios_base :: hexfloat ) {
            _Exps = "eE";
        } else {
            _Exps = "pP";
            if ( _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
                && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) ) {
                _Prefix += 2;
            }
        }
        const size_t _Eoff = :: strcspn ( & _Buf [ 0 ], _Exps );
        char _Dp [ 2 ] = { "." };
        _Dp [ 0 ] = :: localeconv ( ) -> decimal_point [ 0 ];
        const size_t _Poff = :: strcspn ( & _Buf [ 0 ], & _Dp [ 0 ] );

        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
        _Ctype_fac . widen ( _Buf, _Buf + _Count, & _Groupstring [ 0 ] );

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );
        const _Elem _Kseparator = _Punct_fac . thousands_sep ( );

        if ( _Poff != _Count ) {
            _Groupstring [ _Poff ] = _Punct_fac . decimal_point ( );
        }

        if ( _Is_finite_val ) {
            size_t _Off = _Poff == _Count ? _Eoff : _Poff;
            const char * _Pg = & _Grouping [ 0 ];
            while ( * _Pg != 127 && '\000' < * _Pg && static_cast < size_t > ( * _Pg ) < _Off - _Prefix ) {

                _Groupstring . insert ( _Off -= * _Pg, 1, _Kseparator );
                if ( '\000' < _Pg [ 1 ] ) {
                    ++ _Pg;
                }
            }
        }

        _Count = _Groupstring . size ( );

        size_t _Fillcount;
        if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Count ) {
            _Fillcount = 0;
        } else {
            _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Count;
        }

        ios_base :: fmtflags _Adjustfield = _Iosbase . flags ( ) & ios_base :: adjustfield;
        if ( _Adjustfield != ios_base :: left && _Adjustfield != ios_base :: internal ) {
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        } else if ( _Adjustfield == ios_base :: internal ) {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
        } else {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        }

        _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
        _Iosbase . width ( 0 );
        return _Rep ( _Dest, _Fill, _Fillcount );
    }

    char * __cdecl _Ifmt (
        char * _Fmt, const char * _Spec, ios_base :: fmtflags _Flags ) const {
        char * _Ptr = _Fmt;
        * _Ptr ++ = '%';

        if ( _Flags & ios_base :: showpos ) {
            * _Ptr ++ = '+';
        }

        if ( _Flags & ios_base :: showbase ) {
            * _Ptr ++ = '#';
        }

        if ( _Spec [ 0 ] != 'L' ) {
            * _Ptr ++ = _Spec [ 0 ];
        } else {
            * _Ptr ++ = 'I';
            * _Ptr ++ = '6';
            * _Ptr ++ = '4';
        }

        ios_base :: fmtflags _Basefield = _Flags & ios_base :: basefield;
        * _Ptr ++ = _Basefield == ios_base :: oct ? 'o'
                                      : _Basefield != ios_base :: hex ? _Spec [ 1 ]
                                      : _Flags & ios_base :: uppercase ? 'X'
                                                                     : 'x';
        * _Ptr = '\000';
        return _Fmt;
    }

    _OutIt __cdecl _Iput ( _OutIt _Dest, ios_base & _Iosbase, _Elem _Fill, char * _Buf,
        size_t _Count ) const {
        auto _Prefix = static_cast < size_t > ( 0 < _Count && ( * _Buf == '+' || * _Buf == '-' ) );
        if ( ( _Iosbase . flags ( ) & ios_base :: basefield ) == ios_base :: hex && _Prefix + 2 <= _Count && _Buf [ _Prefix ] == '0'
            && ( _Buf [ _Prefix + 1 ] == 'x' || _Buf [ _Prefix + 1 ] == 'X' ) ) {
            _Prefix += 2;
        }

        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Iosbase . getloc ( ) );
        basic_string < _Elem > _Groupstring ( _Count, _Elem ( 0 ) );
        _Ctype_fac . widen ( _Buf, _Buf + _Count, & _Groupstring [ 0 ] );

        const auto & _Punct_fac = :: std :: use_facet < numpunct < _Elem >> ( _Iosbase . getloc ( ) );
        const string _Grouping = _Punct_fac . grouping ( );
        const char * _Pg = & _Grouping [ 0 ];
        if ( * _Pg != 127 && '\000' < * _Pg ) {
            const _Elem _Kseparator = _Punct_fac . thousands_sep ( );
            while ( * _Pg != 127 && '\000' < * _Pg && static_cast < size_t > ( * _Pg ) < _Count - _Prefix ) {

                _Count -= * _Pg;
                _Groupstring . insert ( _Count, 1, _Kseparator );
                if ( '\000' < _Pg [ 1 ] ) {
                    ++ _Pg;
                }
            }
        }

        _Count = _Groupstring . size ( );

        size_t _Fillcount;
        if ( _Iosbase . width ( ) <= 0 || static_cast < size_t > ( _Iosbase . width ( ) ) <= _Count ) {
            _Fillcount = 0;
        } else {
            _Fillcount = static_cast < size_t > ( _Iosbase . width ( ) ) - _Count;
        }

        ios_base :: fmtflags _Adjustfield = _Iosbase . flags ( ) & ios_base :: adjustfield;
        if ( _Adjustfield != ios_base :: left && _Adjustfield != ios_base :: internal ) {
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        } else if ( _Adjustfield == ios_base :: internal ) {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
            _Dest = _Rep ( _Dest, _Fill, _Fillcount );
            _Fillcount = 0;
        } else {
            _Dest = _Put ( _Dest, & _Groupstring [ 0 ], _Prefix );
        }

        _Dest = _Put ( _Dest, & _Groupstring [ _Prefix ], _Count - _Prefix );
        _Iosbase . width ( 0 );
        return _Rep ( _Dest, _Fill, _Fillcount );
    }

    _OutIt __cdecl _Put (
        _OutIt _Dest, const _Elem * _Ptr, size_t _Count ) const {
        for (; 0 < _Count; -- _Count, ( void ) ++ _Dest, ++ _Ptr ) {
            * _Dest = * _Ptr;
        }

        return _Dest;
    }

    _OutIt __cdecl _Rep ( _OutIt _Dest, _Elem _Ch, size_t _Count ) const {
        for (; 0 < _Count; -- _Count, ( void ) ++ _Dest ) {
            * _Dest = _Ch;
        }

        return _Dest;
    }
};
#line 1641
template< class _Elem, class _OutIt> locale::id 
#line 1642
num_put< _Elem, _OutIt> ::id; 
#line 1647
template locale::id numpunct< char> ::id;
#line 1648
template class __declspec(dllimport) num_get< char, istreambuf_iterator< char, char_traits< char> > > ;
#line 1649
template class __declspec(dllimport) num_put< char, ostreambuf_iterator< char, char_traits< char> > > ;
#line 1651
template locale::id numpunct< __wchar_t> ::id;
#line 1652
template class __declspec(dllimport) num_get< __wchar_t, istreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1653
template class __declspec(dllimport) num_put< __wchar_t, ostreambuf_iterator< __wchar_t, char_traits< __wchar_t> > > ;
#line 1668 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\xlocnum"
}
#line 1671
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ios"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#line 20
template < class _Elem, class _Traits >
class basic_ios : public ios_base {
public :
    using _Myos = basic_ostream < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    explicit basic_ios ( _Mysb * _Strbuf ) {
        init ( _Strbuf );
    }

     ~ basic_ios ( ) noexcept override { }

    void clear ( iostate _State = goodbit, bool _Reraise = false ) {

        ios_base :: clear ( _State | ( _Mystrbuf ? ios_base :: _Iostate { } : ios_base :: badbit ), _Reraise );
    }


    void clear ( io_state _State ) {
        clear ( static_cast < iostate > ( _State ) );
    }


    void setstate ( iostate _State, bool _Reraise = false ) {

        clear ( rdstate ( ) | _State, _Reraise );
    }


    void setstate ( io_state _State ) {
        setstate ( static_cast < iostate > ( _State ) );
    }


    basic_ios & copyfmt ( const basic_ios & _Right ) {
        _Tiestr = _Right . tie ( );
        _Fillch = _Right . fill ( );
        ios_base :: copyfmt ( _Right );
        return * this;
    }

    _Myos * tie ( ) const noexcept {
        return _Tiestr;
    }

    _Myos * tie ( _Myos * _Newtie ) noexcept {
        _Myos * _Oldtie = _Tiestr;
        _Tiestr = _Newtie;
        return _Oldtie;
    }

    [ [ nodiscard ] ] _Mysb * rdbuf ( ) const noexcept {
        return _Mystrbuf;
    }

    _Mysb * rdbuf ( _Mysb * _Strbuf ) {
        _Mysb * _Oldstrbuf = _Mystrbuf;
        _Mystrbuf = _Strbuf;
        clear ( );
        return _Oldstrbuf;
    }

    locale imbue ( const locale & _Loc ) {
        locale _Oldlocale = ios_base :: imbue ( _Loc );
        const auto _Rdbuf = rdbuf ( );
        if ( _Rdbuf ) {
            _Rdbuf -> pubimbue ( _Loc );
        }

        return _Oldlocale;
    }

    _Elem fill ( ) const noexcept {
        return _Fillch;
    }

    _Elem fill ( _Elem _Newfill ) noexcept {
        _Elem _Oldfill = _Fillch;
        _Fillch = _Newfill;
        return _Oldfill;
    }

    char narrow ( _Elem _Ch, char _Dflt = '\000' ) const {
        return :: std :: use_facet < _Ctype > ( getloc ( ) ) . narrow ( _Ch, _Dflt );
    }

    _Elem widen ( char _Byte ) const {
        return :: std :: use_facet < _Ctype > ( getloc ( ) ) . widen ( _Byte );
    }

    void move ( basic_ios & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mystrbuf = nullptr;
            _Tiestr = nullptr;
            this -> swap ( _Right );
        }
    }

    void move ( basic_ios && _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Mystrbuf = nullptr;
            _Tiestr = nullptr;
            this -> swap ( _Right );
        }
    }

    void swap ( basic_ios & _Right ) noexcept {
        ios_base :: swap ( _Right );
        :: std :: swap ( _Fillch, _Right . _Fillch );
        :: std :: swap ( _Tiestr, _Right . _Tiestr );
    }

    void set_rdbuf ( _Mysb * _Strbuf ) noexcept {

        _Mystrbuf = _Strbuf;
    }

protected :
    void init ( _Mysb * _Strbuf = nullptr, bool _Isstd = false ) {

        _Init ( );
        _Mystrbuf = _Strbuf;
        _Tiestr = nullptr;
        _Fillch = widen ( ' ' );

        if ( ! _Mystrbuf ) {
            setstate ( badbit );
        }

        if ( _Isstd ) {
            _Addstd ( this );
        }
    }

     basic_ios ( ) { }

private :
    _Mysb * _Mystrbuf { };
    _Myos * _Tiestr { };
    _Elem _Fillch { };

public :
     basic_ios ( const basic_ios & ) = delete;
    basic_ios & operator = ( const basic_ios & ) = delete;
};
#line 175 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ios"
template class __declspec(dllimport) basic_ios< char, char_traits< char> > ;
#line 176
template class __declspec(dllimport) basic_ios< __wchar_t, char_traits< __wchar_t> > ;
#line 184 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ios"
inline ios_base &__cdecl boolalpha(ios_base &_Iosbase) { 
#line 185
_Iosbase.setf(ios_base::boolalpha); 
#line 186
return _Iosbase; 
#line 187
} 
#line 189
inline ios_base &__cdecl dec(ios_base &_Iosbase) { 
#line 190
_Iosbase.setf(ios_base::dec, ios_base::basefield); 
#line 191
return _Iosbase; 
#line 192
} 
#line 194
inline ios_base &__cdecl defaultfloat(ios_base &_Iosbase) { 
#line 195
_Iosbase.unsetf(ios_base::floatfield); 
#line 196
return _Iosbase; 
#line 197
} 
#line 199
inline ios_base &__cdecl fixed(ios_base &_Iosbase) { 
#line 200
_Iosbase.setf(ios_base::fixed, ios_base::floatfield); 
#line 201
return _Iosbase; 
#line 202
} 
#line 204
inline ios_base &__cdecl hex(ios_base &_Iosbase) { 
#line 205
_Iosbase.setf(ios_base::hex, ios_base::basefield); 
#line 206
return _Iosbase; 
#line 207
} 
#line 209
inline ios_base &__cdecl hexfloat(ios_base &_Iosbase) { 
#line 210
_Iosbase.setf(ios_base::hexfloat, ios_base::floatfield); 
#line 211
return _Iosbase; 
#line 212
} 
#line 214
inline ios_base &__cdecl internal(ios_base &_Iosbase) { 
#line 215
_Iosbase.setf(ios_base::internal, ios_base::adjustfield); 
#line 216
return _Iosbase; 
#line 217
} 
#line 219
inline ios_base &__cdecl left(ios_base &_Iosbase) { 
#line 220
_Iosbase.setf(ios_base::left, ios_base::adjustfield); 
#line 221
return _Iosbase; 
#line 222
} 
#line 224
inline ios_base &__cdecl noboolalpha(ios_base &_Iosbase) { 
#line 225
_Iosbase.unsetf(ios_base::boolalpha); 
#line 226
return _Iosbase; 
#line 227
} 
#line 229
inline ios_base &__cdecl noshowbase(ios_base &_Iosbase) { 
#line 230
_Iosbase.unsetf(ios_base::showbase); 
#line 231
return _Iosbase; 
#line 232
} 
#line 234
inline ios_base &__cdecl noshowpoint(ios_base &_Iosbase) { 
#line 235
_Iosbase.unsetf(ios_base::showpoint); 
#line 236
return _Iosbase; 
#line 237
} 
#line 239
inline ios_base &__cdecl noshowpos(ios_base &_Iosbase) { 
#line 240
_Iosbase.unsetf(ios_base::showpos); 
#line 241
return _Iosbase; 
#line 242
} 
#line 244
inline ios_base &__cdecl noskipws(ios_base &_Iosbase) { 
#line 245
_Iosbase.unsetf(ios_base::skipws); 
#line 246
return _Iosbase; 
#line 247
} 
#line 249
inline ios_base &__cdecl nounitbuf(ios_base &_Iosbase) { 
#line 250
_Iosbase.unsetf(ios_base::unitbuf); 
#line 251
return _Iosbase; 
#line 252
} 
#line 254
inline ios_base &__cdecl nouppercase(ios_base &_Iosbase) { 
#line 255
_Iosbase.unsetf(ios_base::uppercase); 
#line 256
return _Iosbase; 
#line 257
} 
#line 259
inline ios_base &__cdecl oct(ios_base &_Iosbase) { 
#line 260
_Iosbase.setf(ios_base::oct, ios_base::basefield); 
#line 261
return _Iosbase; 
#line 262
} 
#line 264
inline ios_base &__cdecl right(ios_base &_Iosbase) { 
#line 265
_Iosbase.setf(ios_base::right, ios_base::adjustfield); 
#line 266
return _Iosbase; 
#line 267
} 
#line 269
inline ios_base &__cdecl scientific(ios_base &_Iosbase) { 
#line 270
_Iosbase.setf(ios_base::scientific, ios_base::floatfield); 
#line 271
return _Iosbase; 
#line 272
} 
#line 274
inline ios_base &__cdecl showbase(ios_base &_Iosbase) { 
#line 275
_Iosbase.setf(ios_base::showbase); 
#line 276
return _Iosbase; 
#line 277
} 
#line 279
inline ios_base &__cdecl showpoint(ios_base &_Iosbase) { 
#line 280
_Iosbase.setf(ios_base::showpoint); 
#line 281
return _Iosbase; 
#line 282
} 
#line 284
inline ios_base &__cdecl showpos(ios_base &_Iosbase) { 
#line 285
_Iosbase.setf(ios_base::showpos); 
#line 286
return _Iosbase; 
#line 287
} 
#line 289
inline ios_base &__cdecl skipws(ios_base &_Iosbase) { 
#line 290
_Iosbase.setf(ios_base::skipws); 
#line 291
return _Iosbase; 
#line 292
} 
#line 294
inline ios_base &__cdecl unitbuf(ios_base &_Iosbase) { 
#line 295
_Iosbase.setf(ios_base::unitbuf); 
#line 296
return _Iosbase; 
#line 297
} 
#line 299
inline ios_base &__cdecl uppercase(ios_base &_Iosbase) { 
#line 300
_Iosbase.setf(ios_base::uppercase); 
#line 301
return _Iosbase; 
#line 302
} 
#line 305
namespace [[deprecated("warning STL4002: The non-Standard std::tr1 namespace and TR1-only machinery are deprecated and will be REMOVED. You can define _" "SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING to suppress this warning.")]] tr1 { 
#line 306
using std::hexfloat;
#line 307
}
#line 310 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ios"
}
#line 314
#pragma warning(pop)
#pragma pack ( pop )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ostream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 25
namespace std { 
#pragma vtordisp(push, 2)
#line 28
template < class _Elem, class _Traits >
class basic_ostream : virtual public basic_ios < _Elem, _Traits > {
public :
    using _Myios = basic_ios < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Iter = ostreambuf_iterator < _Elem, _Traits >;
    using _Nput = num_put < _Elem, _Iter >;

    explicit basic_ostream ( basic_streambuf < _Elem, _Traits > * _Strbuf, bool _Isstd = false ) {
        _Myios :: init ( _Strbuf, _Isstd );
    }

     basic_ostream ( _Uninitialized, bool _Addit = true ) {
        if ( _Addit ) {
            this -> _Addstd ( this );
        }
    }

protected :
     basic_ostream ( basic_ostream && _Right ) noexcept ( false ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
    }

    basic_ostream & operator = ( basic_ostream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_ostream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Myios :: swap ( _Right );
        }
    }

public :
     basic_ostream ( const basic_ostream & ) = delete;
    basic_ostream & operator = ( const basic_ostream & ) = delete;

     ~ basic_ostream ( ) noexcept override { }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    class _Sentry_base {
    public :
         _Sentry_base ( basic_ostream & _Ostr ) : _Myostr ( _Ostr ) {
            const auto _Rdbuf = _Myostr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Lock ( );
            }
        }

         ~ _Sentry_base ( ) noexcept {
            const auto _Rdbuf = _Myostr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Unlock ( );
            }
        }

        basic_ostream & _Myostr;

        _Sentry_base & operator = ( const _Sentry_base & ) = delete;
    };

    class sentry : public _Sentry_base {
    public :
        explicit sentry ( basic_ostream & _Ostr ) : _Sentry_base ( _Ostr ) {
            if ( ! _Ostr . good ( ) ) {
                _Ok = false;
                return;
            }

            const auto _Tied = _Ostr . tie ( );
            if ( ! _Tied || _Tied == & _Ostr ) {
                _Ok = true;
                return;
            }

            _Tied -> flush ( );
            _Ok = _Ostr . good ( );
        }

        __pragma(warning(push))                                __pragma(warning(disable : 4996))
         ~ sentry ( ) noexcept {



            const bool _Zero_uncaught_exceptions = ! :: std :: uncaught_exception ( );




            if ( _Zero_uncaught_exceptions ) {
                this -> _Myostr . _Osfx ( );
            }
        }
        __pragma(warning(pop))

        explicit operator bool ( ) const {
            return _Ok;
        }

         sentry ( const sentry & ) = delete;
        sentry & operator = ( const sentry & ) = delete;

    private :
        bool _Ok;
    };


    bool opfx ( ) {
        if ( ! this -> good ( ) ) {
            return false;
        }

        const auto _Tied = _Myios :: tie ( );
        if ( ! _Tied || _Myios :: tie ( ) == this ) {
            return true;
        }

        _Tied -> flush ( );
        return this -> good ( );
    }


    void osfx ( ) noexcept {
        _Osfx ( );
    }

    void _Osfx ( ) noexcept {
        try {
        if ( this -> good ( ) && this -> flags ( ) & ios_base :: unitbuf ) {
            if ( _Myios :: rdbuf ( ) -> pubsync ( ) == - 1 ) {
                _Myios :: setstate ( ios_base :: badbit );
            }
        }
        } catch ( ... ) {
        }
    }




















    basic_ostream & operator << ( basic_ostream & ( __cdecl * _Pfn ) ( basic_ostream & ) ) {

        return _Pfn ( * this );
    }

    basic_ostream & operator << ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) ) {

        _Pfn ( * this );
        return * this;
    }

    basic_ostream & operator << ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) ) {

        _Pfn ( * this );
        return * this;
    }

    basic_ostream & operator << ( bool _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( short _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
            ios_base :: fmtflags _Bfl = this -> flags ( ) & ios_base :: basefield;

            long _Tmp;
            if ( _Bfl == ios_base :: oct || _Bfl == ios_base :: hex ) {
                _Tmp = static_cast < long > ( static_cast < unsigned short > ( _Val ) );
            } else {
                _Tmp = static_cast < long > ( _Val );
            }

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Tmp ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }









    basic_ostream & operator << ( unsigned short _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < unsigned long > ( _Val ) )
                    . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( int _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );
            ios_base :: fmtflags _Bfl = this -> flags ( ) & ios_base :: basefield;

            long _Tmp;
            if ( _Bfl == ios_base :: oct || _Bfl == ios_base :: hex ) {
                _Tmp = static_cast < long > ( static_cast < unsigned int > ( _Val ) );
            } else {
                _Tmp = static_cast < long > ( _Val );
            }

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Tmp ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned int _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < unsigned long > ( _Val ) )
                    . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( unsigned long long _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( float _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), static_cast < double > ( _Val ) ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( double _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( long double _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & operator << ( const void * _Val ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            const _Nput & _Nput_fac = :: std :: use_facet < _Nput > ( this -> getloc ( ) );

            try {
            if ( _Nput_fac . put ( _Iter ( _Myios :: rdbuf ( ) ), * this, _Myios :: fill ( ), _Val ) . failed ( ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }















    basic_ostream & operator << ( _Mysb * _Strbuf ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        bool _Copied = false;
        const sentry _Ok ( * this );

        if ( _Ok && _Strbuf ) {
            for ( int_type _Meta = _Traits :: eof ( );; _Copied = true ) {
                try {
                _Meta = _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ? _Strbuf -> sgetc ( ) : _Strbuf -> snextc ( );
                } catch ( ... ) {
                _Myios :: setstate ( ios_base :: failbit );
                throw;
                }

                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    break;
                }

                try {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
                } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            }
        }

        this -> width ( 0 );
        int _Setstate_with;
        if ( _Strbuf ) {
            if ( _Copied ) {
                _Setstate_with = _State;
            } else {
                _Setstate_with = _State | ios_base :: failbit;
            }
        } else {
            _Setstate_with = ios_base :: badbit;
        }

        _Myios :: setstate ( _Setstate_with );
        return * this;
    }

    basic_ostream & put ( _Elem _Ch ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( ! _Ok ) {
            _State |= ios_base :: badbit;
        } else {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputc ( _Ch ) ) ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & write ( const _Elem * _Str, streamsize _Count ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( ! _Ok ) {
            _State |= ios_base :: badbit;
        } else if ( 0 < _Count ) {
            try {
            if ( _Myios :: rdbuf ( ) -> sputn ( _Str, _Count ) != _Count ) {
                _State |= ios_base :: badbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_ostream & flush ( ) {
        const auto _Rdbuf = _Myios :: rdbuf ( );
        if ( _Rdbuf ) {
            const sentry _Ok ( * this );

            if ( _Ok ) {
                ios_base :: iostate _State = ios_base :: goodbit;
                try {
                if ( _Rdbuf -> pubsync ( ) == - 1 ) {
                    _State |= ios_base :: badbit;
                }
                } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
                _Myios :: setstate ( _State );
            }
        }
        return * this;
    }

    basic_ostream & seekp ( pos_type _Pos ) {
        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            ios_base :: iostate _State = ios_base :: goodbit;
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekpos ( _Pos, ios_base :: out ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            _Myios :: setstate ( _State );
        }

        return * this;
    }

    basic_ostream & seekp ( off_type _Off, ios_base :: seekdir _Way ) {

        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            ios_base :: iostate _State = ios_base :: goodbit;
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way, ios_base :: out ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
            _Myios :: setstate ( _State );
        }

        return * this;
    }

    pos_type tellp ( ) {
        const sentry _Ok ( * this );

        if ( ! this -> fail ( ) ) {
            try {
            return _Myios :: rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: out );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        return pos_type { off_type { - 1 } };
    }
};
#line 624 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ostream"
#pragma vtordisp(pop)
#line 676
template class __declspec(dllimport) basic_ostream< char, char_traits< char> > ;
#line 677
template class __declspec(dllimport) basic_ostream< __wchar_t, char_traits< __wchar_t> > ;
#line 685 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const char * _Val ) {
    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( :: strlen ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        for (; _State == ios_base :: goodbit && 0 < _Count; -- _Count, ++ _Val ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( * _Val ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 729
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, char _Ch ) {
    ios_base :: iostate _State = ios_base :: goodbit;
    const typename basic_ostream < _Elem, _Traits > :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        const ctype < _Elem > & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Ostr . getloc ( ) );
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit
            && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ctype_fac . widen ( _Ch ) ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 765
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const char * _Val ) {

    using _Elem = char;
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( _Traits :: length ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count ) {
            _State |= ios_base :: badbit;
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 810
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, char _Ch ) {

    using _Elem = char;
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 848
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const _Elem * _Val ) {
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    streamsize _Count = static_cast < streamsize > ( _Traits :: length ( _Val ) );
    streamsize _Pad = _Ostr . width ( ) <= 0 || _Ostr . width ( ) <= _Count ? 0 : _Ostr . width ( ) - _Count;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( ! _Ok ) {
        _State |= ios_base :: badbit;
    } else {
        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Ostr . rdbuf ( ) -> sputn ( _Val, _Count ) != _Count ) {
            _State |= ios_base :: badbit;
        }

        if ( _State == ios_base :: goodbit ) {
            for (; 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                    break;
                }
            }
        }

        _Ostr . width ( 0 );
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 891
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, _Elem _Ch ) {
    using _Myos = basic_ostream < _Elem, _Traits >;

    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myos :: sentry _Ok ( _Ostr );

    if ( _Ok ) {
        streamsize _Pad = _Ostr . width ( ) <= 1 ? 0 : _Ostr . width ( ) - 1;

        try {
        if ( ( _Ostr . flags ( ) & ios_base :: adjustfield ) != ios_base :: left ) {
            for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                    _State |= ios_base :: badbit;
                }
            }
        }

        if ( _State == ios_base :: goodbit && _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ch ) ) ) {
            _State |= ios_base :: badbit;
        }

        for (; _State == ios_base :: goodbit && 0 < _Pad; -- _Pad ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Ostr . rdbuf ( ) -> sputc ( _Ostr . fill ( ) ) ) ) {
                _State |= ios_base :: badbit;
            }
        }
        } catch ( ... ) { ( _Ostr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Ostr . width ( 0 );
    _Ostr . setstate ( _State );
    return _Ostr;
}
#line 927
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const signed char * _Val ) {

    return _Ostr << reinterpret_cast < const char * > ( _Val );
}
#line 933
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, signed char _Ch ) {
    return _Ostr << static_cast < char > ( _Ch );
}
#line 938
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, const unsigned char * _Val ) {

    return _Ostr << reinterpret_cast < const char * > ( _Val );
}
#line 944
template < class _Traits >
basic_ostream < char, _Traits > & operator << ( basic_ostream < char, _Traits > & _Ostr, unsigned char _Ch ) {

    return _Ostr << static_cast < char > ( _Ch );
}
#line 994 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ostream"
template< class _Ostr, class _Ty, class  = void> 
#line 995
struct _Can_stream_out : public false_type { }; 
#line 997
template< class _Ostr, class _Ty> 
#line 998
struct _Can_stream_out< _Ostr, _Ty, void_t< decltype(std::declval< _Ostr &> () << std::declval< const _Ty &> ())> >  : public true_type { 
#line 999
}; 
#line 1001
template < class _Ostr, class _Ty,
    enable_if_t < conjunction_v < is_convertible < _Ostr *, ios_base * >, _Can_stream_out < _Ostr, _Ty > >, int > = 0 >
_Ostr && operator << ( _Ostr && _Os, const _Ty & _Val ) {
    _Os << _Val;
    return :: std :: move ( _Os );
}
#line 1008
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl endl (
    basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . put ( _Ostr . widen ( '\n' ) );
    _Ostr . flush ( );
    return _Ostr;
}
#line 1016
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl ends ( basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . put ( _Elem ( ) );
    return _Ostr;
}
#line 1022
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & __cdecl flush ( basic_ostream < _Elem, _Traits > & _Ostr ) {
    _Ostr . flush ( );
    return _Ostr;
}
#line 1079 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\ostream"
template < class _Elem, class _Traits >
basic_ostream < _Elem, _Traits > & operator << ( basic_ostream < _Elem, _Traits > & _Ostr, const error_code & _Errcode ) {

    return _Ostr << _Errcode . category ( ) . name ( ) << ':' << _Errcode . value ( );
}
#line 1290
}
#line 1294
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\istream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 19
namespace std { 
#pragma vtordisp(push, 2)
#line 22
template < class _Elem, class _Traits >
class basic_istream : virtual public basic_ios < _Elem, _Traits > {
public :
    using _Myios = basic_ios < _Elem, _Traits >;
    using _Mysb = basic_streambuf < _Elem, _Traits >;
    using _Iter = istreambuf_iterator < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    using _Nget = num_get < _Elem, _Iter >;









    explicit basic_istream ( _Mysb * _Strbuf, bool _Isstd = false ) : _Chcount ( 0 ) {
        _Myios :: init ( _Strbuf, _Isstd );
    }

     basic_istream ( _Uninitialized ) {
        this -> _Addstd ( this );
    }

protected :
     basic_istream ( basic_istream && _Right ) noexcept ( false ) : _Chcount ( _Right . _Chcount ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
        _Right . _Chcount = 0;
    }

    basic_istream & operator = ( basic_istream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_istream & _Right ) noexcept {
        _Myios :: swap ( _Right );
        :: std :: swap ( _Chcount, _Right . _Chcount );
    }

public :
     basic_istream ( const basic_istream & ) = delete;
    basic_istream & operator = ( const basic_istream & ) = delete;

     ~ basic_istream ( ) noexcept override { }

    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    class _Sentry_base {
    public :
         _Sentry_base ( basic_istream & _Istr ) : _Myistr ( _Istr ) {
            const auto _Rdbuf = _Myistr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Lock ( );
            }
        }

         ~ _Sentry_base ( ) noexcept {
            const auto _Rdbuf = _Myistr . rdbuf ( );
            if ( _Rdbuf ) {
                _Rdbuf -> _Unlock ( );
            }
        }

        basic_istream & _Myistr;

        _Sentry_base & operator = ( const _Sentry_base & ) = delete;
    };

    class sentry : public _Sentry_base {
    public :
        explicit sentry ( basic_istream & _Istr, bool _Noskip = false )
            : _Sentry_base ( _Istr ), _Ok ( _Sentry_base :: _Myistr . _Ipfx ( _Noskip ) ) { }

        explicit operator bool ( ) const {
            return _Ok;
        }

         sentry ( const sentry & ) = delete;
        sentry & operator = ( const sentry & ) = delete;

    private :
        bool _Ok;
    };

    bool _Ipfx ( bool _Noskip = false ) {
        if ( ! this -> good ( ) ) {
            _Myios :: setstate ( ios_base :: failbit );
            return false;
        }


        const auto _Tied = _Myios :: tie ( );
        if ( _Tied ) {
            _Tied -> flush ( );
        }

        bool _Eof = false;
        if ( ! _Noskip && this -> flags ( ) & ios_base :: skipws ) {
            const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( this -> getloc ( ) );

            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _Eof = true;
                    break;
                } else if ( ! _Ctype_fac . is ( _Ctype :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                    break;
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Eof ) {
            _Myios :: setstate ( ios_base :: eofbit | ios_base :: failbit );
        }

        return this -> good ( );
    }


    bool ipfx ( bool _Noskip = false ) {
        return _Ipfx ( _Noskip );
    }


    void isfx ( ) { }


















    basic_istream & operator >> ( basic_istream & ( __cdecl * _Pfn ) ( basic_istream & ) ) {

        return _Pfn ( * this );
    }

    basic_istream & operator >> ( _Myios & ( __cdecl * _Pfn ) ( _Myios & ) ) {
        _Pfn ( * this );
        return * this;
    }

    basic_istream & operator >> ( ios_base & ( __cdecl * _Pfn ) ( ios_base & ) ) {
        _Pfn ( * this );
        return * this;
    }

private :
    template < class _Ty >
    basic_istream & _Common_extract_with_num_get ( _Ty & _Val ) {
        ios_base :: iostate _Err = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            try {
            :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Val );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Err );
        return * this;
    }

    template < class = void >
    void _Increment_gcount ( ) noexcept {
        if ( _Chcount != ( numeric_limits < streamsize > :: max ) ( ) ) {
            ++ _Chcount;
        }
    }

public :
    basic_istream & operator >> ( bool & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( short & _Val ) {
        ios_base :: iostate _Err = ios_base :: goodbit;
        const sentry _Ok ( * this );

        if ( _Ok ) {
            try {
            long _Lval;
            :: std :: use_facet < _Nget > ( this -> getloc ( ) ) . get ( * this, { }, * this, _Err, _Lval );
            if ( _Lval < ( - 32768 ) ) {
                _Err |= ios_base :: failbit;
                _Val = ( - 32768 );
            } else if ( _Lval > 32767 ) {
                _Err |= ios_base :: failbit;
                _Val = 32767;
            } else {
                _Val = static_cast < short > ( _Lval );
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Err );
        return * this;
    }









    basic_istream & operator >> ( unsigned short & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( int & _Val ) {
        static_assert ( sizeof ( int ) == sizeof ( long ), "Bad overflow assumptions due to sizeof(int) != sizeof(long)" );
        long _Result = _Val;
        _Common_extract_with_num_get ( _Result );
        _Val = _Result;
        return * this;
    }

    basic_istream & operator >> ( unsigned int & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( unsigned long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( unsigned long long & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( float & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( double & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( long double & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( void * & _Val ) {
        return _Common_extract_with_num_get ( _Val );
    }

    basic_istream & operator >> ( _Mysb * _Strbuf ) {
        _Chcount = 0;
        const sentry _Ok ( * this, true );
        ios_base :: iostate _State = ios_base :: goodbit;
        if ( _Ok && _Strbuf ) {
            try {
            for ( int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                }

                try {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Strbuf -> sputc ( _Traits :: to_char_type ( _Meta ) ) ) ) {
                    break;
                }

                } catch ( ... ) {
                break;
                }

                _Increment_gcount ( );
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Chcount == 0 ) {
            _State |= ios_base :: failbit;
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    int_type get ( ) {
        int_type _Meta = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( ! _Ok ) {
            _Meta = _Traits :: eof ( );
        } else {
            try {
            _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit | ios_base :: failbit;
            } else {
                _Myios :: rdbuf ( ) -> sbumpc ( );
                _Chcount = 1;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return _Meta;
    }

    basic_istream & get ( _Elem * _Str, streamsize _Count ) {
        return get ( _Str, _Count, _Myios :: widen ( '\n' ) );
    }

    basic_istream & get ( _Elem * _Str, streamsize _Count, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (; 0 < -- _Count; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else if ( _Traits :: to_char_type ( _Meta ) == _Delim ) {
                    break;
                } else {
                    * _Str ++ = _Traits :: to_char_type ( _Meta );
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
        * _Str = _Elem ( );
        return * this;
    }

    basic_istream & get ( _Elem & _Ch ) {
        int_type _Meta = get ( );
        if ( ! _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            _Ch = _Traits :: to_char_type ( _Meta );
        }

        return * this;
    }

    basic_istream & get ( _Mysb & _Strbuf ) {
        return get ( _Strbuf, _Myios :: widen ( '\n' ) );
    }

    basic_istream & get ( _Mysb & _Strbuf, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else {
                    try {
                    _Elem _Ch = _Traits :: to_char_type ( _Meta );
                    if ( _Ch == _Delim || _Traits :: eq_int_type ( _Traits :: eof ( ), _Strbuf . sputc ( _Ch ) ) ) {
                        break;
                    }
                    } catch ( ... ) {
                    break;
                    }
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        if ( _Chcount == 0 ) {
            _State |= ios_base :: failbit;
        }
        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & getline ( _Elem * _Str, streamsize _Count ) {

        return getline ( _Str, _Count, _Myios :: widen ( '\n' ) );
    }

    basic_istream & getline ( _Elem * _Str, streamsize _Count, _Elem _Delim ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            int_type _Metadelim = _Traits :: to_int_type ( _Delim );

            try {
            int_type _Meta = _Myios :: rdbuf ( ) -> sgetc ( );

            for (;; _Meta = _Myios :: rdbuf ( ) -> snextc ( ) ) {
                if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else if ( _Meta == _Metadelim ) {
                    _Increment_gcount ( );
                    _Myios :: rdbuf ( ) -> sbumpc ( );
                    break;
                } else if ( -- _Count <= 0 ) {
                    _State |= ios_base :: failbit;
                    break;
                } else {
                    * _Str ++ = _Traits :: to_char_type ( _Meta );
                    _Increment_gcount ( );
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        * _Str = _Elem ( );
        _Myios :: setstate ( _Chcount == 0 ? _State | ios_base :: failbit : _State );
        return * this;
    }

    basic_istream & ignore ( streamsize _Count = 1, int_type _Metadelim = _Traits :: eof ( ) ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            for (;; ) {
                int_type _Meta;
                if ( _Count != ( numeric_limits < streamsize > :: max ) ( ) && -- _Count < 0 ) {
                    break;
                } else if ( _Traits :: eq_int_type ( _Traits :: eof ( ),
                               _Meta = _Myios :: rdbuf ( ) -> sbumpc ( ) ) ) {
                    _State |= ios_base :: eofbit;
                    break;
                } else {
                    _Increment_gcount ( );
                    if ( _Meta == _Metadelim ) {
                        break;
                    }
                }
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & read ( _Elem * _Str, streamsize _Count ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );

        if ( _Ok && 0 < _Count ) {
            try {
            const streamsize _Num = _Myios :: rdbuf ( ) -> sgetn ( _Str, _Count );
            _Chcount = _Num;

            if ( _Num != _Count ) {
                _State |= ios_base :: eofbit | ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    streamsize readsome ( _Elem * _Str, streamsize _Count ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        const sentry _Ok ( * this, true );
        streamsize _Num;

        if ( ! _Ok ) {
            _State |= ios_base :: failbit;
        } else if ( ( _Num = _Myios :: rdbuf ( ) -> in_avail ( ) ) < 0 ) {
            _State |= ios_base :: eofbit;
        } else if ( 0 < _Count && 0 < _Num ) {
            read ( _Str, _Num < _Count ? _Num : _Count );
        }

        _Myios :: setstate ( _State );
        return gcount ( );
    }

    int_type peek ( ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        _Chcount = 0;
        int_type _Meta = 0;
        const sentry _Ok ( * this, true );

        if ( ! _Ok ) {
            _Meta = _Traits :: eof ( );
        } else {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta = _Myios :: rdbuf ( ) -> sgetc ( ) ) ) {
                _State |= ios_base :: eofbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return _Meta;
    }

    basic_istream & putback ( _Elem _Ch ) {
        _Chcount = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sputbackc ( _Ch ) ) ) {
                _State |= ios_base :: badbit | _Oldstate;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & unget ( ) {
        _Chcount = 0;
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( _Ok ) {
            try {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Myios :: rdbuf ( ) -> sungetc ( ) ) ) {
                _State |= ios_base :: badbit | _Oldstate;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    [ [ nodiscard ] ] streamsize gcount ( ) const noexcept {

        return _Chcount;
    }

    int sync ( ) {
        const sentry _Ok ( * this, true );

        const auto _Rdbuf = _Myios :: rdbuf ( );
        if ( ! _Rdbuf ) {
            return - 1;
        }

        ios_base :: iostate _State = ios_base :: goodbit;
        try {
        if ( _Rdbuf -> pubsync ( ) == - 1 ) {
            _State |= ios_base :: badbit;
        }
        } catch ( ... ) {
        _Myios :: setstate ( ios_base :: badbit, true );
        return - 1;
        }

        if ( _State & ios_base :: badbit ) {
            _Myios :: setstate ( ios_base :: badbit );
            return - 1;
        }

        return 0;
    }

    basic_istream & seekg ( pos_type _Pos ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekpos ( _Pos, ios_base :: in ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    basic_istream & seekg ( off_type _Off, ios_base :: seekdir _Way ) {

        ios_base :: iostate _State = ios_base :: goodbit;
        ios_base :: iostate _Oldstate = _Myios :: rdstate ( );
        _Myios :: clear ( _Oldstate & ~ ios_base :: eofbit );
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            if ( static_cast < off_type > ( _Myios :: rdbuf ( ) -> pubseekoff ( _Off, _Way, ios_base :: in ) ) == - 1 ) {
                _State |= ios_base :: failbit;
            }
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        _Myios :: setstate ( _State );
        return * this;
    }

    pos_type tellg ( ) {
        const sentry _Ok ( * this, true );

        if ( ! this -> fail ( ) ) {
            try {
            return _Myios :: rdbuf ( ) -> pubseekoff ( 0, ios_base :: cur, ios_base :: in );
            } catch ( ... ) { _Myios :: setstate ( ios_base :: badbit, true ); }
        }

        return pos_type { off_type { - 1 } };
    }

private :
    streamsize _Chcount { };
};
#line 689 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\istream"
#pragma vtordisp(pop)
#line 713
template class __declspec(dllimport) basic_istream< char, char_traits< char> > ;
#line 714
template class __declspec(dllimport) basic_istream< __wchar_t, char_traits< __wchar_t> > ;
#line 722 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\istream"
template < class _Elem, class _Traits >
class basic_iostream : public basic_istream < _Elem, _Traits >,
                       public basic_ostream < _Elem, _Traits > {
public :
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Myos = basic_ostream < _Elem, _Traits >;
    using _Myios = basic_ios < _Elem, _Traits >;
    using char_type = _Elem;
    using traits_type = _Traits;
    using int_type = typename _Traits :: int_type;
    using pos_type = typename _Traits :: pos_type;
    using off_type = typename _Traits :: off_type;

    explicit basic_iostream ( basic_streambuf < _Elem, _Traits > * _Strbuf )
        : _Myis ( _Strbuf, false ), _Myos ( _Noinit, false ) { }

protected :
     basic_iostream ( basic_iostream && _Right ) noexcept ( false )
        : _Myis ( _Right . rdbuf ( ), false ), _Myos ( _Noinit, false ) {
        _Myios :: init ( );
        _Myios :: move ( :: std :: move ( _Right ) );
    }

    basic_iostream & operator = ( basic_iostream && _Right ) noexcept {
        this -> swap ( _Right );
        return * this;
    }

    void swap ( basic_iostream & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Myios :: swap ( _Right );
        }
    }

public :
     basic_iostream ( const basic_iostream & ) = delete;
    basic_iostream & operator = ( const basic_iostream & ) = delete;

     ~ basic_iostream ( ) noexcept override { }
};
#line 766
template class __declspec(dllimport) basic_iostream< char, char_traits< char> > ;
#line 767
template class __declspec(dllimport) basic_iostream< __wchar_t, char_traits< __wchar_t> > ;
#line 775 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & _Istream_extract_into_buffer (
    basic_istream < _Elem, _Traits > & _Istr, size_t _Size, _Elem * _Str ) {
    using _Myis = basic_istream < _Elem, _Traits >;
    using _Ctype = ctype < _Elem >;
    ios_base :: iostate _State = ios_base :: goodbit;
    size_t _Current = 0;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        const _Ctype & _Ctype_fac = :: std :: use_facet < _Ctype > ( _Istr . getloc ( ) );

        try {
        size_t _Count = _Size;
        const size_t _Width = static_cast < size_t > ( _Istr . width ( ) );
        if ( _Width > 0 && _Width < _Size ) {
            _Count = _Width;
        }

        typename _Myis :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );
        _Elem _Ch;

        for (; _Current < _Count - 1; _Meta = _Istr . rdbuf ( ) -> snextc ( ), ( void ) ++ _Current ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit;
                break;
            } else if ( _Ctype_fac . is ( _Ctype :: space, _Ch = _Traits :: to_char_type ( _Meta ) ) || _Ch == _Elem ( ) ) {
                break;
            } else {
                _Str [ _Current ] = _Traits :: to_char_type ( _Meta );
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
    }
    ;
    _Str [ _Current ] = _Elem ( );
    _Istr . width ( 0 );
    if ( _Current == 0 ) {
        _State |= ios_base :: failbit;
    }
    _Istr . setstate ( _State );
    return _Istr;
}
#line 841 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & operator >> ( basic_istream < _Elem, _Traits > & _Istr, _Elem * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, _Str );
}
#line 846
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, signed char * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, reinterpret_cast < char * > ( _Str ) );
}
#line 851
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, unsigned char * _Str ) {
    return _Istream_extract_into_buffer ( _Istr, 18446744073709551615Ui64, reinterpret_cast < char * > ( _Str ) );
}
#line 857 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\istream"
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & operator >> ( basic_istream < _Elem, _Traits > & _Istr, _Elem & _Ch ) {
    using _Myis = basic_istream < _Elem, _Traits >;

    typename _Myis :: int_type _Meta;
    ios_base :: iostate _State = ios_base :: goodbit;
    const typename _Myis :: sentry _Ok ( _Istr );

    if ( _Ok ) {
        try {
        _Meta = _Istr . rdbuf ( ) -> sbumpc ( );
        if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
            _State |= ios_base :: eofbit | ios_base :: failbit;
        } else {
            _Ch = _Traits :: to_char_type ( _Meta );
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
    }

    _Istr . setstate ( _State );
    return _Istr;
}
#line 880
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, signed char & _Ch ) {

    return _Istr >> reinterpret_cast < char & > ( _Ch );
}
#line 886
template < class _Traits >
basic_istream < char, _Traits > & operator >> ( basic_istream < char, _Traits > & _Istr, unsigned char & _Ch ) {

    return _Istr >> reinterpret_cast < char & > ( _Ch );
}
#line 892
template< class _Istr, class _Ty, class  = void> 
#line 893
struct _Can_stream_in : public false_type { }; 
#line 895
template< class _Istr, class _Ty> 
#line 896
struct _Can_stream_in< _Istr, _Ty, void_t< decltype(std::declval< _Istr &> () >> std::declval< _Ty> ())> >  : public true_type { }; 
#line 898
template < class _Istr, class _Ty,
    enable_if_t < conjunction_v < is_convertible < _Istr *, ios_base * >, _Can_stream_in < _Istr, _Ty > >, int > = 0 >
_Istr && operator >> ( _Istr && _Is, _Ty && _Val ) {
    _Is >> :: std :: forward < _Ty > ( _Val );
    return :: std :: move ( _Is );
}
#line 905
template < class _Elem, class _Traits >
basic_istream < _Elem, _Traits > & __cdecl ws ( basic_istream < _Elem, _Traits > & _Istr ) {
    const typename basic_istream < _Elem, _Traits > :: sentry _Ok ( _Istr, true );

    if ( _Ok ) {
        ios_base :: iostate _State = ios_base :: goodbit;
        const auto & _Ctype_fac = :: std :: use_facet < ctype < _Elem >> ( _Istr . getloc ( ) );

        try {
        for ( typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );; _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= ios_base :: eofbit;
                break;
            } else if ( ! _Ctype_fac . is ( ctype < _Elem > :: space, _Traits :: to_char_type ( _Meta ) ) ) {
                break;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( ios_base :: badbit, true ); }
        _Istr . setstate ( _State );
    }

    return _Istr;
}
#line 928
}
#line 932
#pragma warning(pop)
#pragma pack ( pop )
#line 12 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iostream"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 18
namespace std { 
#line 38
__declspec(dllimport) extern istream cin; 
#line 39
__declspec(dllimport) extern ostream cout; 
#line 40
__declspec(dllimport) extern ostream cerr; 
#line 41
__declspec(dllimport) extern ostream clog; 
#line 42
__declspec(dllimport) extern istream *_Ptr_cin; 
#line 43
__declspec(dllimport) extern ostream *_Ptr_cout; 
#line 44
__declspec(dllimport) extern ostream *_Ptr_cerr; 
#line 45
__declspec(dllimport) extern ostream *_Ptr_clog; 
#line 47
__declspec(dllimport) extern wistream wcin; 
#line 48
__declspec(dllimport) extern wostream wcout; 
#line 49
__declspec(dllimport) extern wostream wcerr; 
#line 50
__declspec(dllimport) extern wostream wclog; 
#line 51
__declspec(dllimport) extern wistream *_Ptr_wcin; 
#line 52
__declspec(dllimport) extern wostream *_Ptr_wcout; 
#line 53
__declspec(dllimport) extern wostream *_Ptr_wcerr; 
#line 54
__declspec(dllimport) extern wostream *_Ptr_wclog; 
#line 68 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\iostream"
}
#line 71
#pragma warning(pop)
#pragma pack ( pop )
#line 28 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_bit_utils.hpp"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 35
namespace std { 
#line 36
extern "C" {
#line 37
extern int __isa_available; 
#line 38
}
#line 40
constexpr int _Stl_isa_available_sse42 = 2; 
#line 41
constexpr int _Stl_isa_available_avx2 = 5; 
#line 43
template< class _UInt> constexpr int 
#line 44
_Unsigned_integer_digits = (sizeof(_UInt) * (8)); 
#line 49
template < class _Ty >
[ [ nodiscard ] ] constexpr int _Countl_zero_fallback ( _Ty _Val ) noexcept {
    _Ty _Yx = 0;

    unsigned int _Nx = _Unsigned_integer_digits < _Ty >;
    unsigned int _Cx = _Unsigned_integer_digits < _Ty > / 2;
    do {
        _Yx = static_cast < _Ty > ( _Val >> _Cx );
        if ( _Yx != 0 ) {
            _Nx -= _Cx;
            _Val = _Yx;
        }
        _Cx >>= 1;
    } while ( _Cx != 0 );
    return static_cast < int > ( _Nx ) - static_cast < int > ( _Val );
}
#line 188 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_bit_utils.hpp"
template < class _Ty >
[ [ nodiscard ] ] constexpr int _Countr_zero_fallback ( const _Ty _Val ) noexcept {
    constexpr int _Digits = _Unsigned_integer_digits < _Ty >;
    return _Digits - _Countl_zero_fallback ( static_cast < _Ty > ( static_cast < _Ty > ( ~ _Val ) & static_cast < _Ty > ( _Val - 1 ) ) );
}
#line 196
template < class _Ty >
[ [ nodiscard ] ] constexpr int _Popcount_fallback ( _Ty _Val ) noexcept {
    constexpr int _Digits = _Unsigned_integer_digits < _Ty >;









    _Val = static_cast < _Ty > ( _Val - ( ( _Val >> 1 ) & static_cast < _Ty > ( 6148914691236517205Ui64 ) ) );
    _Val = static_cast < _Ty > ( ( _Val & static_cast < _Ty > ( 3689348814741910323Ui64 ) )
                            + ( ( _Val >> 2 ) & static_cast < _Ty > ( 3689348814741910323Ui64 ) ) );
    _Val = static_cast < _Ty > ( ( _Val + ( _Val >> 4 ) ) & static_cast < _Ty > ( 1085102592571150095Ui64 ) );

    _Val = static_cast < _Ty > ( _Val * static_cast < _Ty > ( 72340172838076673Ui64 ) );

    return static_cast < int > ( _Val >> ( _Digits - 8 ) );
}
#line 356 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_bit_utils.hpp"
template< class _Ty> constexpr bool 
#line 357
_Is_standard_unsigned_integer = _Is_any_of_v< remove_cv_t< _Ty> , unsigned char, unsigned short, unsigned, unsigned long, unsigned __int64> ; 
#line 360
template < class _Ty, enable_if_t < _Is_standard_unsigned_integer < _Ty >, int > = 0 >
[ [ nodiscard ] ] inline int _Countr_zero ( const _Ty _Val ) noexcept {








    return _Countr_zero_fallback ( _Val );
}
#line 373 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_bit_utils.hpp"
template < class _Ty, class _Fn >
constexpr decltype ( auto ) _Select_countr_zero_impl ( _Fn _Callback ) {
















    return _Callback ( [ ] ( _Ty _Val ) { return _Countr_zero_fallback ( _Val ); } );
}
#line 394 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_bit_utils.hpp"
template < class _Ty, enable_if_t < _Is_standard_unsigned_integer < _Ty >, int > = 0 >
[ [ nodiscard ] ] inline int _Popcount ( const _Ty _Val ) noexcept {












    return _Popcount_fallback ( _Val );
}
#line 411 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_bit_utils.hpp"
template < class _Ty, class _Fn >
inline decltype ( auto ) _Select_popcount_impl ( _Fn _Callback ) {



















    return _Callback ( [ ] ( _Ty _Val ) { return _Popcount_fallback ( _Val ); } );
}
#line 438 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\__msvc_bit_utils.hpp"
}
#line 444
#pragma warning(pop)
#pragma pack ( pop )
#line 18 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 25
namespace std { 
#line 26
template < class _Myvec >
class _Vector_const_iterator : public _Iterator_base {
public :



    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Myvec :: value_type;
    using difference_type = typename _Myvec :: difference_type;
    using pointer = typename _Myvec :: const_pointer;
    using reference = const value_type &;

    using _Tptr = typename _Myvec :: pointer;

    inline _Vector_const_iterator ( ) noexcept : _Ptr ( ) { }

    inline _Vector_const_iterator ( _Tptr _Parg, const _Container_base * _Pvector ) noexcept : _Ptr ( _Parg ) {
        this -> _Adopt ( _Pvector );
    }

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {

        const auto _Mycont = static_cast < const _Myvec * > ( this -> _Getcont ( ) );
        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 49, 0, "%s", "can\'t dereference value-initialized vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c" L"\x69\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 49, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 50, 0, "%s", "can\'t dereference invalidated vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x76" L"\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 50, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont -> _Myfirst <= _Ptr && _Ptr < _Mycont -> _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 52, 0, "%s", "can\'t dereference out of range vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x20" L"\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 52, 0 ); } while ( false ); }; } while ( false );



        return * _Ptr;
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {

        const auto _Mycont = static_cast < const _Myvec * > ( this -> _Getcont ( ) );
        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 61, 0, "%s", "can\'t dereference value-initialized vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c" L"\x69\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 61, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 62, 0, "%s", "can\'t dereference invalidated vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x76" L"\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 62, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont -> _Myfirst <= _Ptr && _Ptr < _Mycont -> _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 64, 0, "%s", "can\'t dereference out of range vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x20" L"\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 64, 0 ); } while ( false ); }; } while ( false );



        return _Ptr;
    }

    inline _Vector_const_iterator & operator ++ ( ) noexcept {

        const auto _Mycont = static_cast < const _Myvec * > ( this -> _Getcont ( ) );
        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 73, 0, "%s", "can\'t increment value-initialized vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a" L"\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 73, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 74, 0, "%s", "can\'t increment invalidated vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x76\x65\x63" L"\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 74, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Ptr < _Mycont -> _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 75, 0, "%s", "can\'t increment vector iterator past end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72" L"\x20\x70\x61\x73\x74\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 75, 0 ); } while ( false ); }; } while ( false );


        ++ _Ptr;
        return * this;
    }

    inline _Vector_const_iterator operator ++ ( int ) noexcept {
        _Vector_const_iterator _Tmp = * this;
        ++ * this;
        return _Tmp;
    }

    inline _Vector_const_iterator & operator -- ( ) noexcept {

        const auto _Mycont = static_cast < const _Myvec * > ( this -> _Getcont ( ) );
        do { if ( _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 91, 0, "%s", "can\'t decrement value-initialized vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a" L"\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 91, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 92, 0, "%s", "can\'t decrement invalidated vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x76\x65\x63" L"\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 92, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont -> _Myfirst < _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 93, 0, "%s", "can\'t decrement vector iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72" L"\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 93, 0 ); } while ( false ); }; } while ( false );


        -- _Ptr;
        return * this;
    }

    inline _Vector_const_iterator operator -- ( int ) noexcept {
        _Vector_const_iterator _Tmp = * this;
        -- * this;
        return _Tmp;
    }

    inline void _Verify_offset ( const difference_type _Off ) const noexcept {



        const auto _Mycont = static_cast < const _Myvec * > ( this -> _Getcont ( ) );
        do { if ( _Off == 0 || _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 111, 0, "%s", "cannot seek value-initialized vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x76" L"\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 111, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Off == 0 || _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 112, 0, "%s", "cannot seek invalidated vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x20" L"\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 112, 0 ); } while ( false ); }; } while ( false );
        if ( _Off < 0 ) {
            do { if ( _Off >= _Mycont -> _Myfirst - _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 114, 0, "%s", "cannot seek vector iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x62\x65\x66" L"\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 114, 0 ); } while ( false ); }; } while ( false );
        }

        if ( _Off > 0 ) {
            do { if ( _Off <= _Mycont -> _Mylast - _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 118, 0, "%s", "cannot seek vector iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x61\x66\x74" L"\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 118, 0 ); } while ( false ); }; } while ( false );
        }

    }

    inline _Vector_const_iterator & operator += ( const difference_type _Off ) noexcept {
        _Verify_offset ( _Off );
        _Ptr += _Off;
        return * this;
    }

    [ [ nodiscard ] ] inline _Vector_const_iterator operator + ( const difference_type _Off ) const noexcept {
        _Vector_const_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _Vector_const_iterator operator + (
        const difference_type _Off, _Vector_const_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _Vector_const_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] inline _Vector_const_iterator operator - ( const difference_type _Off ) const noexcept {
        _Vector_const_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline difference_type operator - ( const _Vector_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr - _Right . _Ptr;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] inline bool operator == ( const _Vector_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr == _Right . _Ptr;
    }







    [ [ nodiscard ] ] bool operator != ( const _Vector_const_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] bool operator < ( const _Vector_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return _Ptr < _Right . _Ptr;
    }

    [ [ nodiscard ] ] bool operator > ( const _Vector_const_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] bool operator <= ( const _Vector_const_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] bool operator >= ( const _Vector_const_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    inline void _Compat ( const _Vector_const_iterator & _Right ) const noexcept {




        do { if ( this -> _Getcont ( ) == _Right . _Getcont ( ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 198, 0, "%s", "vector iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 198, 0 ); } while ( false ); }; } while ( false );

    }


    friend inline void _Verify_range (
        const _Vector_const_iterator & _First, const _Vector_const_iterator & _Last ) noexcept {
        do { if ( _First . _Getcont ( ) == _Last . _Getcont ( ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 205, 0, "%s", "vector iterators in range are from different containers" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x20\x72\x61\x6e\x67\x65\x20\x61\x72\x65\x20\x66" L"\x72\x6f\x6d\x20\x64\x69\x66\x66\x65\x72\x65\x6e\x74\x20\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x73\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 205, 0 ); } while ( false ); }; } while ( false );
        do { if ( _First . _Ptr <= _Last . _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 206, 0, "%s", "vector iterator range transposed" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x72\x61\x6e\x67\x65\x20\x74\x72\x61\x6e\x73\x70\x6f\x73\x65" L"\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 206, 0 ); } while ( false ); }; } while ( false );
    }


    using _Prevent_inheriting_unwrap = _Vector_const_iterator;

    [ [ nodiscard ] ] inline const value_type * _Unwrapped ( ) const noexcept {
        return _Unfancy ( _Ptr );
    }

    inline void _Seek_to ( const value_type * _It ) noexcept {
        _Ptr = _Refancy < _Tptr > ( const_cast < value_type * > ( _It ) );
    }

    _Tptr _Ptr;
};
#line 250 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Myvec >
class _Vector_iterator : public _Vector_const_iterator < _Myvec > {
public :
    using _Mybase = _Vector_const_iterator < _Myvec >;




    using iterator_category = random_access_iterator_tag;
    using value_type = typename _Myvec :: value_type;
    using difference_type = typename _Myvec :: difference_type;
    using pointer = typename _Myvec :: pointer;
    using reference = value_type &;

    using _Mybase :: _Mybase;

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator * ( ) );
    }

    [ [ nodiscard ] ] inline pointer operator -> ( ) const noexcept {

        const auto _Mycont = static_cast < const _Myvec * > ( this -> _Getcont ( ) );
        do { if ( this -> _Ptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 273, 0, "%s", "can\'t dereference value-initialized vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c" L"\x69\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 273, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 274, 0, "%s", "can\'t dereference invalidated vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x69\x6e\x76\x61\x6c\x69\x64\x61\x74\x65\x64\x20\x76" L"\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 274, 0 ); } while ( false ); }; } while ( false );
        do { if ( _Mycont -> _Myfirst <= this -> _Ptr && this -> _Ptr < _Mycont -> _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 276, 0, "%s", "can\'t dereference out of range vector iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x27\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x20" L"\x76\x65\x63\x74\x6f\x72\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 276, 0 ); } while ( false ); }; } while ( false );



        return this -> _Ptr;
    }

    inline _Vector_iterator & operator ++ ( ) noexcept {
        _Mybase :: operator ++ ( );
        return * this;
    }

    inline _Vector_iterator operator ++ ( int ) noexcept {
        _Vector_iterator _Tmp = * this;
        _Mybase :: operator ++ ( );
        return _Tmp;
    }

    inline _Vector_iterator & operator -- ( ) noexcept {
        _Mybase :: operator -- ( );
        return * this;
    }

    inline _Vector_iterator operator -- ( int ) noexcept {
        _Vector_iterator _Tmp = * this;
        _Mybase :: operator -- ( );
        return _Tmp;
    }

    inline _Vector_iterator & operator += ( const difference_type _Off ) noexcept {
        _Mybase :: operator += ( _Off );
        return * this;
    }

    [ [ nodiscard ] ] inline _Vector_iterator operator + ( const difference_type _Off ) const noexcept {
        _Vector_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _Vector_iterator operator + (
        const difference_type _Off, _Vector_iterator _Next ) noexcept {
        _Next += _Off;
        return _Next;
    }

    inline _Vector_iterator & operator -= ( const difference_type _Off ) noexcept {
        _Mybase :: operator -= ( _Off );
        return * this;
    }

    using _Mybase :: operator -;

    [ [ nodiscard ] ] inline _Vector_iterator operator - ( const difference_type _Off ) const noexcept {
        _Vector_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return const_cast < reference > ( _Mybase :: operator [ ] ( _Off ) );
    }

    using _Prevent_inheriting_unwrap = _Vector_iterator;

    [ [ nodiscard ] ] inline value_type * _Unwrapped ( ) const noexcept {
        return _Unfancy ( this -> _Ptr );
    }
};
#line 372 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template< class _Value_type, class _Size_type, class _Difference_type, class _Pointer, class _Const_pointer> 
#line 373
struct _Vec_iter_types { 
#line 374
using value_type = _Value_type; 
#line 375
using size_type = _Size_type; 
#line 376
using difference_type = _Difference_type; 
#line 377
using pointer = _Pointer; 
#line 378
using const_pointer = _Const_pointer; 
#line 379
}; 
#line 381
struct _Value_init_tag { 
#line 382
explicit _Value_init_tag() = default;
#line 383
}; 
#line 385
template < class _Val_types >
class _Vector_val : public _Container_base {
public :
    using value_type = typename _Val_types :: value_type;
    using size_type = typename _Val_types :: size_type;
    using difference_type = typename _Val_types :: difference_type;
    using pointer = typename _Val_types :: pointer;
    using const_pointer = typename _Val_types :: const_pointer;
    using reference = value_type &;
    using const_reference = const value_type &;

    inline _Vector_val ( ) noexcept : _Myfirst ( ), _Mylast ( ), _Myend ( ) { }

    inline _Vector_val ( pointer _First, pointer _Last, pointer _End ) noexcept
        : _Myfirst ( _First ), _Mylast ( _Last ), _Myend ( _End ) { }

    inline void _Swap_val ( _Vector_val & _Right ) noexcept {
        this -> _Swap_proxy_and_iterators ( _Right );
        swap ( _Myfirst, _Right . _Myfirst );
        swap ( _Mylast, _Right . _Mylast );
        swap ( _Myend, _Right . _Myend );
    }

    inline void _Take_contents ( _Vector_val & _Right ) noexcept {
        this -> _Swap_proxy_and_iterators ( _Right );
        _Myfirst = _Right . _Myfirst;
        _Mylast = _Right . _Mylast;
        _Myend = _Right . _Myend;

        _Right . _Myfirst = nullptr;
        _Right . _Mylast = nullptr;
        _Right . _Myend = nullptr;
    }

    pointer _Myfirst;
    pointer _Mylast;
    pointer _Myend;
};
#line 424
template < class _Ptrty >
constexpr auto _Unfancy_maybe_null ( _Ptrty _Ptr ) noexcept {

    return _Ptr ? :: std :: addressof ( * _Ptr ) : nullptr;
}
#line 430
template < class _Ty >
constexpr _Ty * _Unfancy_maybe_null ( _Ty * _Ptr ) noexcept {
    return _Ptr;
}
#line 435
template < class _Ty, class _Alloc = allocator < _Ty > >
class vector {
private :
    template < class >
    friend class _Vb_val;
    friend _Tidy_guard < vector >;

    using _Alty = _Rebind_alloc_t < _Alloc, _Ty >;
    using _Alty_traits = allocator_traits < _Alty >;

public :
    static_assert ( ! 0 || is_same_v < _Ty, typename _Alloc :: value_type >,
        "vector<T, Allocator> requires that Allocator\'s value_type match T (See N4950 [container.alloc.reqmts]/5) Either fix the allocat" "or value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this error." );
    static_assert ( is_object_v < _Ty >, "The C++ Standard forbids containers of non-object types because of [container.requirements]."
                                                                          );

    using value_type = _Ty;
    using allocator_type = _Alloc;
    using pointer = typename _Alty_traits :: pointer;
    using const_pointer = typename _Alty_traits :: const_pointer;
    using reference = _Ty &;
    using const_reference = const _Ty &;
    using size_type = typename _Alty_traits :: size_type;
    using difference_type = typename _Alty_traits :: difference_type;

private :










































































































































    using _Scary_val = _Vector_val < conditional_t < _Is_simple_alloc_v < _Alty >, _Simple_types < _Ty >,
        _Vec_iter_types < _Ty, size_type, difference_type, pointer, const_pointer >> >;

public :
    using iterator = _Vector_iterator < _Scary_val >;
    using const_iterator = _Vector_const_iterator < _Scary_val >;
    using reverse_iterator = :: std :: reverse_iterator < iterator >;
    using const_reverse_iterator = :: std :: reverse_iterator < const_iterator >;

    inline vector ( ) noexcept ( is_nothrow_default_constructible_v < _Alty > ) : _Mypair ( _Zero_then_variadic_args_t { } ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline explicit vector ( const _Alloc & _Al ) noexcept : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline explicit vector ( const size_type _Count, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct_n ( _Count );
    }

    inline vector ( const size_type _Count, const _Ty & _Val, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct_n ( _Count, _Val );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline vector ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_cpp17_fwd_iter_v < _Iter > ) {
            const auto _Length = static_cast < size_t > ( :: std :: distance ( _UFirst, _ULast ) );
            const auto _Count = _Convert_size < size_type > ( _Length );
            _Construct_n ( _Count, :: std :: move ( _UFirst ), :: std :: move ( _ULast ) );






        } else {
            auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
            _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _Mypair . _Myval2 );
            _Tidy_guard < vector > _Guard { this };

            _Append_uncounted_range ( :: std :: move ( _UFirst ), :: std :: move ( _ULast ) );

            _Guard . _Target = nullptr;
            _Proxy . _Release ( );
        }
    }

    inline vector ( initializer_list < _Ty > _Ilist, const _Alloc & _Al = _Alloc ( ) )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        _Construct_n ( _Convert_size < size_type > ( _Ilist . size ( ) ), _Ilist . begin ( ), _Ilist . end ( ) );
    }






















    inline vector ( const vector & _Right )
        : _Mypair ( _One_then_variadic_args_t { }, _Alty_traits :: select_on_container_copy_construction ( _Right . _Getal ( ) ) ) {
        const auto & _Right_data = _Right . _Mypair . _Myval2;
        const auto _Count = static_cast < size_type > ( _Right_data . _Mylast - _Right_data . _Myfirst );
        _Construct_n ( _Count, _Right_data . _Myfirst, _Right_data . _Mylast );
    }

    inline vector ( const vector & _Right, const _Identity_t < _Alloc > & _Al )
        : _Mypair ( _One_then_variadic_args_t { }, _Al ) {
        const auto & _Right_data = _Right . _Mypair . _Myval2;
        const auto _Count = static_cast < size_type > ( _Right_data . _Mylast - _Right_data . _Myfirst );
        _Construct_n ( _Count, _Right_data . _Myfirst, _Right_data . _Mylast );
    }

    inline vector ( vector && _Right ) noexcept
        : _Mypair ( _One_then_variadic_args_t { }, :: std :: move ( _Right . _Getal ( ) ),
            :: std :: exchange ( _Right . _Mypair . _Myval2 . _Myfirst, nullptr ),
            :: std :: exchange ( _Right . _Mypair . _Myval2 . _Mylast, nullptr ),
            :: std :: exchange ( _Right . _Mypair . _Myval2 . _Myend, nullptr ) ) {
        _Mypair . _Myval2 . _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) ) );
        _Mypair . _Myval2 . _Swap_proxy_and_iterators ( _Right . _Mypair . _Myval2 );
    }

    inline vector ( vector && _Right, const _Identity_t < _Alloc > & _Al_ ) noexcept (
        _Alty_traits :: is_always_equal :: value )
        : _Mypair ( _One_then_variadic_args_t { }, _Al_ ) {
        _Alty & _Al = _Getal ( );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );

        if constexpr ( ! _Alty_traits :: is_always_equal :: value ) {
            if ( _Al != _Right . _Getal ( ) ) {
                const auto _Count = static_cast < size_type > ( _Right_data . _Mylast - _Right_data . _Myfirst );
                if ( _Count != 0 ) {
                    _Buy_raw ( _Count );
                    _Tidy_guard < vector > _Guard { this };
                    _My_data . _Mylast =
                        _Uninitialized_move ( _Right_data . _Myfirst, _Right_data . _Mylast, _My_data . _Myfirst, _Al );

                    ;
                    _Guard . _Target = nullptr;
                }
                _Proxy . _Release ( );
                return;
            }
        }

        _My_data . _Take_contents ( _Right_data );
        _Proxy . _Release ( );
    }

    inline vector & operator = ( vector && _Right ) noexcept (
        _Choose_pocma_v < _Alty > != _Pocma_values :: _No_propagate_allocators ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        _Alty & _Al = _Getal ( );
        _Alty & _Right_al = _Right . _Getal ( );
        constexpr auto _Pocma_val = _Choose_pocma_v < _Alty >;
        if constexpr ( _Pocma_val == _Pocma_values :: _No_propagate_allocators ) {
            if ( _Al != _Right_al ) {
                _Move_assign_unequal_alloc ( _Right );
                return * this;
            }
        }

        _Tidy ( );

        if constexpr ( _Pocma_val == _Pocma_values :: _Propagate_allocators ) {
            if ( _Al != _Right_al ) {

                _Mypair . _Myval2 . _Reload_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al ), static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Right_al ) );
            }
        }


        _Pocma ( _Al, _Right_al );
        _Mypair . _Myval2 . _Take_contents ( _Right . _Mypair . _Myval2 );
        return * this;
    }

    inline ~ vector ( ) noexcept {
        _Tidy ( );

        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Getal ( ) );
        _Delete_plain_internal ( _Alproxy, :: std :: exchange ( _Mypair . _Myval2 . _Myproxy, nullptr ) );

    }

private :
    template < class ... _Valty >
    inline _Ty & _Emplace_one_at_back ( _Valty && ... _Val ) {

        auto & _My_data = _Mypair . _Myval2;
        pointer & _Mylast = _My_data . _Mylast;

        if ( _Mylast != _My_data . _Myend ) {
            return _Emplace_back_with_unused_capacity ( :: std :: forward < _Valty > ( _Val ) ... );
        }

        return * _Emplace_reallocate ( _Mylast, :: std :: forward < _Valty > ( _Val ) ... );
    }

    template < class ... _Valty >
    inline _Ty & _Emplace_back_with_unused_capacity ( _Valty && ... _Val ) {

        auto & _My_data = _Mypair . _Myval2;
        pointer & _Mylast = _My_data . _Mylast;
        ;
        if constexpr ( conjunction_v < is_nothrow_constructible < _Ty, _Valty ... >,
                          _Uses_default_construct < _Alloc, _Ty *, _Valty ... >> ) {
            ;
            _Construct_in_place ( * _Mylast, :: std :: forward < _Valty > ( _Val ) ... );
        } else {
            ;
            _Alty_traits :: construct ( _Getal ( ), _Unfancy ( _Mylast ), :: std :: forward < _Valty > ( _Val ) ... );
            ;
        }

        _Orphan_range ( _Mylast, _Mylast );
        _Ty & _Result = * _Mylast;
        ++ _Mylast;

        return _Result;
    }

    template < class ... _Valty >
    inline pointer _Emplace_reallocate ( const pointer _Whereptr, _Valty && ... _Val ) {

        _Alty & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;

        ;

        const auto _Whereoff = static_cast < size_type > ( _Whereptr - _Myfirst );
        const auto _Oldsize = static_cast < size_type > ( _Mylast - _Myfirst );

        if ( _Oldsize == max_size ( ) ) {
            _Xlength ( );
        }

        const size_type _Newsize = _Oldsize + 1;
        size_type _Newcapacity = _Calculate_growth ( _Newsize );

        const pointer _Newvec = _Allocate_at_least_helper ( _Al, _Newcapacity );
        const pointer _Constructed_last = _Newvec + _Whereoff + 1;
        pointer _Constructed_first = _Constructed_last;

        try {
        _Alty_traits :: construct ( _Al, _Unfancy ( _Newvec + _Whereoff ), :: std :: forward < _Valty > ( _Val ) ... );
        _Constructed_first = _Newvec + _Whereoff;

        if ( _Whereptr == _Mylast ) {
            if constexpr ( is_nothrow_move_constructible_v < _Ty > || ! is_copy_constructible_v < _Ty > ) {
                _Uninitialized_move ( _Myfirst, _Mylast, _Newvec, _Al );
            } else {
                _Uninitialized_copy ( _Myfirst, _Mylast, _Newvec, _Al );
            }
        } else {
            _Uninitialized_move ( _Myfirst, _Whereptr, _Newvec, _Al );
            _Constructed_first = _Newvec;
            _Uninitialized_move ( _Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al );
        }
        } catch ( ... ) {
        _Destroy_range ( _Constructed_first, _Constructed_last, _Al );
        _Al . deallocate ( _Newvec, _Newcapacity );
        throw;
        }

        _Change_array ( _Newvec, _Newsize, _Newcapacity );
        return _Newvec + _Whereoff;
    }

public :
    template < class ... _Valty >
    inline decltype ( auto ) emplace_back ( _Valty && ... _Val ) {

        _Ty & _Result = _Emplace_one_at_back ( :: std :: forward < _Valty > ( _Val ) ... );



        ( void ) _Result;

    }

    inline void push_back ( const _Ty & _Val ) {
        _Emplace_one_at_back ( _Val );
    }

    inline void push_back ( _Ty && _Val ) {

        _Emplace_one_at_back ( :: std :: move ( _Val ) );
    }

private :
    template < class _Iter, class _Sent >
    inline void _Append_uncounted_range ( _Iter _First, const _Sent _Last ) {






        for (; _First != _Last; ++ _First ) {
            _Emplace_one_at_back ( * _First );
        }
    }




























































public :













    template < class ... _Valty >
    inline iterator emplace ( const_iterator _Where, _Valty && ... _Val ) {

        const pointer _Whereptr = _Where . _Ptr;
        auto & _My_data = _Mypair . _Myval2;
        const pointer _Oldlast = _My_data . _Mylast;

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _My_data ) && _Whereptr >= _My_data . _Myfirst && _Oldlast >= _Whereptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 975, 0, "%s", "vector emplace iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x65\x6d\x70\x6c\x61\x63\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74\x73\x69\x64\x65" L"\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 975, 0 ); } while ( false ); }; } while ( false );



        if ( _Oldlast != _My_data . _Myend ) {
            if ( _Whereptr == _Oldlast ) {
                _Emplace_back_with_unused_capacity ( :: std :: forward < _Valty > ( _Val ) ... );
            } else {
                auto & _Al = _Getal ( );
                _Alloc_temporary2 < _Alty > _Obj ( _Al, :: std :: forward < _Valty > ( _Val ) ... );

                _Orphan_range ( _Whereptr, _Oldlast );
                ;
                _Alty_traits :: construct ( _Al, _Unfancy ( _Oldlast ), :: std :: move ( _Oldlast [ - 1 ] ) );
                ;
                ++ _My_data . _Mylast;
                _Move_backward_unchecked ( _Whereptr, _Oldlast - 1, _Oldlast );
                * _Whereptr = :: std :: move ( _Obj . _Get_value ( ) );
            }

            return _Make_iterator ( _Whereptr );
        }

        return _Make_iterator ( _Emplace_reallocate ( _Whereptr, :: std :: forward < _Valty > ( _Val ) ... ) );
    }

    inline iterator insert ( const_iterator _Where, const _Ty & _Val ) {
        return emplace ( _Where, _Val );
    }

    inline iterator insert ( const_iterator _Where, _Ty && _Val ) {
        return emplace ( _Where, :: std :: move ( _Val ) );
    }

    inline iterator insert ( const_iterator _Where, const size_type _Count, const _Ty & _Val ) {

        const pointer _Whereptr = _Where . _Ptr;

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Mylast = _My_data . _Mylast;

        const pointer _Oldfirst = _My_data . _Myfirst;
        const pointer _Oldlast = _Mylast;

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _My_data ) && _Whereptr >= _Oldfirst && _Oldlast >= _Whereptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1020, 0, "%s", "vector insert iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x69\x6e\x73\x65\x72\x74\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74\x73\x69\x64\x65\x20" L"\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1020, 0 ); } while ( false ); }; } while ( false );



        const auto _Whereoff = static_cast < size_type > ( _Whereptr - _Oldfirst );
        const auto _Unused_capacity = static_cast < size_type > ( _My_data . _Myend - _Oldlast );
        const bool _One_at_back = _Count == 1 && _Whereptr == _Oldlast;
        if ( _Count == 0 ) {
        } else if ( _Count > _Unused_capacity ) {
            const auto _Oldsize = static_cast < size_type > ( _Oldlast - _Oldfirst );

            if ( _Count > max_size ( ) - _Oldsize ) {
                _Xlength ( );
            }

            const size_type _Newsize = _Oldsize + _Count;
            size_type _Newcapacity = _Calculate_growth ( _Newsize );

            const pointer _Newvec = _Allocate_at_least_helper ( _Al, _Newcapacity );
            const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
            pointer _Constructed_first = _Constructed_last;

            try {
            _Uninitialized_fill_n ( _Newvec + _Whereoff, _Count, _Val, _Al );
            _Constructed_first = _Newvec + _Whereoff;

            if ( _One_at_back ) {
                if constexpr ( is_nothrow_move_constructible_v < _Ty > || ! is_copy_constructible_v < _Ty > ) {
                    _Uninitialized_move ( _Oldfirst, _Oldlast, _Newvec, _Al );
                } else {
                    _Uninitialized_copy ( _Oldfirst, _Oldlast, _Newvec, _Al );
                }
            } else {
                _Uninitialized_move ( _Oldfirst, _Whereptr, _Newvec, _Al );
                _Constructed_first = _Newvec;
                _Uninitialized_move ( _Whereptr, _Oldlast, _Newvec + _Whereoff + _Count, _Al );
            }
            } catch ( ... ) {
            _Destroy_range ( _Constructed_first, _Constructed_last, _Al );
            _Al . deallocate ( _Newvec, _Newcapacity );
            throw;
            }

            _Change_array ( _Newvec, _Newsize, _Newcapacity );
        } else if ( _One_at_back ) {
            _Emplace_back_with_unused_capacity ( _Val );
        } else {
            const _Alloc_temporary2 < _Alty > _Tmp_storage ( _Al, _Val );
            const auto & _Tmp = _Tmp_storage . _Get_value ( );
            const auto _Affected_elements = static_cast < size_type > ( _Oldlast - _Whereptr );
            _Orphan_range ( _Whereptr, _Oldlast );

            ;
            if ( _Count > _Affected_elements ) {
                _Mylast = _Uninitialized_fill_n ( _Oldlast, _Count - _Affected_elements, _Tmp, _Al );
                _Mylast = _Uninitialized_move ( _Whereptr, _Oldlast, _Mylast, _Al );
                :: std :: fill ( _Whereptr, _Oldlast, _Tmp );
            } else {
                _Mylast = _Uninitialized_move ( _Oldlast - _Count, _Oldlast, _Oldlast, _Al );
                _Move_backward_unchecked ( _Whereptr, _Oldlast - _Count, _Oldlast );
                :: std :: fill_n ( _Whereptr, _Count, _Tmp );
            }
            ;
        }

        return _Make_iterator_offset ( _Whereoff );
    }

private :
    template < class _Iter, class _Sent >
    inline void _Insert_uncounted_range ( const_iterator _Where, _Iter _First, _Sent _Last ) {

        if ( _First == _Last ) {
            return;
        }

        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;
        const auto _Whereoff = static_cast < size_type > ( _Where . _Ptr - _Myfirst );
        const auto _Oldsize = static_cast < size_type > ( _Mylast - _Myfirst );

        _Append_uncounted_range ( :: std :: move ( _First ), :: std :: move ( _Last ) );

        _Orphan_range ( _Myfirst + _Whereoff, _Myfirst + _Oldsize );

        :: std :: rotate ( _Myfirst + _Whereoff, _Myfirst + _Oldsize, _Mylast );
    }

    template < class _Iter >
    inline void _Insert_counted_range ( const_iterator _Where, _Iter _First, const size_type _Count ) {

        const pointer _Whereptr = _Where . _Ptr;

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Mylast = _My_data . _Mylast;

        const pointer _Oldfirst = _My_data . _Myfirst;
        const pointer _Oldlast = _Mylast;
        const auto _Unused_capacity = static_cast < size_type > ( _My_data . _Myend - _Oldlast );

        if ( _Count == 0 ) {
        } else if ( _Count > _Unused_capacity ) {
            const auto _Oldsize = static_cast < size_type > ( _Oldlast - _Oldfirst );

            if ( _Count > max_size ( ) - _Oldsize ) {
                _Xlength ( );
            }

            const size_type _Newsize = _Oldsize + _Count;
            size_type _Newcapacity = _Calculate_growth ( _Newsize );

            const pointer _Newvec = _Allocate_at_least_helper ( _Al, _Newcapacity );
            const auto _Whereoff = static_cast < size_type > ( _Whereptr - _Oldfirst );
            const pointer _Constructed_last = _Newvec + _Whereoff + _Count;
            pointer _Constructed_first = _Constructed_last;

            try {
            _Uninitialized_copy_n ( :: std :: move ( _First ), _Count, _Newvec + _Whereoff, _Al );
            _Constructed_first = _Newvec + _Whereoff;

            if ( _Count == 1 && _Whereptr == _Oldlast ) {
                if constexpr ( is_nothrow_move_constructible_v < _Ty > || ! is_copy_constructible_v < _Ty > ) {
                    _Uninitialized_move ( _Oldfirst, _Oldlast, _Newvec, _Al );
                } else {
                    _Uninitialized_copy ( _Oldfirst, _Oldlast, _Newvec, _Al );
                }
            } else {
                _Uninitialized_move ( _Oldfirst, _Whereptr, _Newvec, _Al );
                _Constructed_first = _Newvec;
                _Uninitialized_move ( _Whereptr, _Oldlast, _Newvec + _Whereoff + _Count, _Al );
            }
            } catch ( ... ) {
            _Destroy_range ( _Constructed_first, _Constructed_last, _Al );
            _Al . deallocate ( _Newvec, _Newcapacity );
            throw;
            }

            _Change_array ( _Newvec, _Newsize, _Newcapacity );
        } else {



            const auto _Affected_elements = static_cast < size_type > ( _Oldlast - _Whereptr );

            ;
            if ( _Count < _Affected_elements ) {
                _Mylast = _Uninitialized_move ( _Oldlast - _Count, _Oldlast, _Oldlast, _Al );
                _Move_backward_unchecked ( _Whereptr, _Oldlast - _Count, _Oldlast );
                _Destroy_range ( _Whereptr, _Whereptr + _Count, _Al );

                try {
                _Uninitialized_copy_n ( :: std :: move ( _First ), _Count, _Whereptr, _Al );
                } catch ( ... ) {


                try {
                _Uninitialized_move ( _Whereptr + _Count, _Whereptr + 2 * _Count, _Whereptr, _Al );
                } catch ( ... ) {

                _Orphan_range ( _Whereptr, _Oldlast );
                _Destroy_range ( _Whereptr + _Count, _Mylast, _Al );
                _Mylast = _Whereptr;
                throw;
                }

                :: std :: _Move_unchecked ( _Whereptr + 2 * _Count, _Mylast, _Whereptr + _Count );
                _Destroy_range ( _Oldlast, _Mylast, _Al );
                _Mylast = _Oldlast;
                throw;
                }
            } else {
                const pointer _Relocated = _Whereptr + _Count;
                _Mylast = _Uninitialized_move ( _Whereptr, _Oldlast, _Relocated, _Al );
                _Destroy_range ( _Whereptr, _Oldlast, _Al );

                try {
                _Uninitialized_copy_n ( :: std :: move ( _First ), _Count, _Whereptr, _Al );
                } catch ( ... ) {


                try {
                _Uninitialized_move ( _Relocated, _Mylast, _Whereptr, _Al );
                } catch ( ... ) {

                _Orphan_range ( _Whereptr, _Oldlast );
                _Destroy_range ( _Relocated, _Mylast, _Al );
                _Mylast = _Whereptr;
                throw;
                }

                _Destroy_range ( _Relocated, _Mylast, _Al );
                _Mylast = _Oldlast;
                throw;
                }
            }

            _Orphan_range ( _Whereptr, _Oldlast );
            ;
        }
    }

public :
    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline iterator insert ( const_iterator _Where, _Iter _First, _Iter _Last ) {
        const pointer _Whereptr = _Where . _Ptr;
        auto & _My_data = _Mypair . _Myval2;
        const pointer _Oldfirst = _My_data . _Myfirst;

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _My_data ) && _Whereptr >= _Oldfirst && _My_data . _Mylast >= _Whereptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1231, 0, "%s", "vector insert iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x69\x6e\x73\x65\x72\x74\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74\x73\x69\x64\x65\x20" L"\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1231, 0 ); } while ( false ); }; } while ( false );



        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        auto _ULast = _Get_unwrapped ( _Last );
        const auto _Whereoff = static_cast < size_type > ( _Whereptr - _Oldfirst );
        if constexpr ( _Is_cpp17_fwd_iter_v < _Iter > ) {
            const auto _Length = static_cast < size_t > ( :: std :: distance ( _UFirst, _ULast ) );
            const auto _Count = _Convert_size < size_type > ( _Length );
            _Insert_counted_range ( _Where, _UFirst, _Count );






        } else {
            _Insert_uncounted_range ( _Where, _UFirst, _ULast );
        }
        return _Make_iterator_offset ( _Whereoff );
    }

























    inline iterator insert ( const_iterator _Where, initializer_list < _Ty > _Ilist ) {
        const pointer _Whereptr = _Where . _Ptr;
        auto & _My_data = _Mypair . _Myval2;
        const pointer _Oldfirst = _My_data . _Myfirst;

        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _My_data ) && _Whereptr >= _Oldfirst && _My_data . _Mylast >= _Whereptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1285, 0, "%s", "vector insert iterator out-of-range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x69\x6e\x73\x65\x72\x74\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74\x2d\x6f\x66\x2d\x72" L"\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1285, 0 ); } while ( false ); }; } while ( false );


        const auto _Whereoff = static_cast < size_type > ( _Whereptr - _Oldfirst );

        const auto _Count = _Convert_size < size_type > ( _Ilist . size ( ) );
        _Insert_counted_range ( _Where, _Ilist . begin ( ), _Count );
        return _Make_iterator_offset ( _Whereoff );
    }

    inline void assign ( const size_type _Newsize, const _Ty & _Val ) {

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;





        {
            const auto _Valptr = :: std :: addressof ( _Val );
            do { if ( ! ( _Unfancy ( _Myfirst ) <= _Valptr && _Valptr < _Unfancy ( _Mylast ) ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1308, 0, "%s", "assignment value cannot be a reference into the container" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x61\x73\x73\x69\x67\x6e\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x20\x63\x61\x6e\x6e\x6f\x74\x20\x62\x65\x20\x61\x20\x72\x65" L"\x66\x65\x72\x65\x6e\x63\x65\x20\x69\x6e\x74\x6f\x20\x74\x68\x65\x20\x63\x6f\x6e\x74\x61\x69\x6e\x65\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1308, 0 ); } while ( false ); }; } while ( false );

        }


        constexpr bool _Nothrow_construct =
            conjunction_v < is_nothrow_copy_constructible < _Ty >, _Uses_default_construct < _Alloc, _Ty *, const _Ty & >>;

        _My_data . _Orphan_all ( );
        const auto _Oldcapacity = static_cast < size_type > ( _My_data . _Myend - _Myfirst );
        if ( _Newsize > _Oldcapacity ) {
            _Clear_and_reserve_geometric ( _Newsize );
            if constexpr ( _Nothrow_construct ) {
                _Mylast = _Uninitialized_fill_n ( _Myfirst, _Newsize, _Val, _Al );
                ;
            } else {
                ;
                _Mylast = _Uninitialized_fill_n ( _Myfirst, _Newsize, _Val, _Al );
            }

            return;
        }

        const auto _Oldsize = static_cast < size_type > ( _Mylast - _Myfirst );
        if ( _Newsize > _Oldsize ) {
            :: std :: fill ( _Myfirst, _Mylast, _Val );
            if constexpr ( _Nothrow_construct ) {
                ;
                _Mylast = _Uninitialized_fill_n ( _Mylast, _Newsize - _Oldsize, _Val, _Al );
            } else {
                ;
                _Mylast = _Uninitialized_fill_n ( _Mylast, _Newsize - _Oldsize, _Val, _Al );
                ;
            }
        } else {
            const pointer _Newlast = _Myfirst + _Newsize;
            :: std :: fill ( _Myfirst, _Newlast, _Val );
            _Destroy_range ( _Newlast, _Mylast, _Al );
            ;
            _Mylast = _Newlast;
        }
    }

private :
    template < class _Iter, class _Sent >
    inline void _Assign_uncounted_range ( _Iter _First, _Sent _Last ) {

        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;

        _My_data . _Orphan_all ( );

        pointer _Next = _Myfirst;
        for (; _First != _Last && _Next != _Mylast; ++ _First, ( void ) ++ _Next ) {
            * _Next = * _First;
        }







        _Destroy_range ( _Next, _Mylast, _Getal ( ) );
        ;
        _Mylast = _Next;

        _Append_uncounted_range ( :: std :: move ( _First ), :: std :: move ( _Last ) );
    }

    template < class _Iter >
    inline void _Assign_counted_range ( _Iter _First, const size_type _Newsize ) {

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;
        pointer & _Myend = _My_data . _Myend;

        constexpr bool _Nothrow_construct = conjunction_v < is_nothrow_constructible < _Ty, _Iter_ref_t < _Iter >>,
            _Uses_default_construct < _Alloc, _Ty *, _Iter_ref_t < _Iter >> >;

        _My_data . _Orphan_all ( );
        const auto _Oldcapacity = static_cast < size_type > ( _Myend - _Myfirst );
        if ( _Newsize > _Oldcapacity ) {
            _Clear_and_reserve_geometric ( _Newsize );
            if constexpr ( _Nothrow_construct ) {
                _Mylast = _Uninitialized_copy_n ( :: std :: move ( _First ), _Newsize, _Myfirst, _Al );
                ;
            } else {
                ;
                _Mylast = _Uninitialized_copy_n ( :: std :: move ( _First ), _Newsize, _Myfirst, _Al );
            }
            return;
        }

        const auto _Oldsize = static_cast < size_type > ( _Mylast - _Myfirst );
        if ( _Newsize > _Oldsize ) {
            bool _Copied = false;
            if constexpr ( _Iter_copy_cat < _Iter, pointer > :: _Bitcopy_assignable ) {



                {
                    _Copy_memmove_n ( _First, static_cast < size_t > ( _Oldsize ), _Myfirst );
                    _First += _Oldsize;
                    _Copied = true;
                }
            }

            if ( ! _Copied ) {
                for ( auto _Mid = _Myfirst; _Mid != _Mylast; ++ _Mid, ( void ) ++ _First ) {
                    * _Mid = * _First;
                }
            }

            if constexpr ( _Nothrow_construct ) {
                ;
                _Mylast = _Uninitialized_copy_n ( :: std :: move ( _First ), _Newsize - _Oldsize, _Mylast, _Al );
            } else {
                ;
                _Mylast = _Uninitialized_copy_n ( :: std :: move ( _First ), _Newsize - _Oldsize, _Mylast, _Al );
                ;
            }
        } else {
            const pointer _Newlast = _Myfirst + _Newsize;
            _Copy_n_unchecked4 ( :: std :: move ( _First ), _Newsize, _Myfirst );
            _Destroy_range ( _Newlast, _Mylast, _Al );
            ;
            _Mylast = _Newlast;
        }
    }

public :
    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline void assign ( _Iter _First, _Iter _Last ) {
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        auto _ULast = _Get_unwrapped ( _Last );
        if constexpr ( _Is_cpp17_fwd_iter_v < _Iter > ) {
            const auto _Length = static_cast < size_t > ( :: std :: distance ( _UFirst, _ULast ) );
            const auto _Count = _Convert_size < size_type > ( _Length );
            _Assign_counted_range ( _UFirst, _Count );






        } else {
            _Assign_uncounted_range ( _UFirst, _ULast );
        }
    }














    inline void assign ( const initializer_list < _Ty > _Ilist ) {
        const auto _Count = _Convert_size < size_type > ( _Ilist . size ( ) );
        _Assign_counted_range ( _Ilist . begin ( ), _Count );
    }

    inline vector & operator = ( const vector & _Right ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }

        auto & _Al = _Getal ( );
        auto & _Right_al = _Right . _Getal ( );
        if constexpr ( _Choose_pocca_v < _Alty > ) {
            if ( _Al != _Right_al ) {
                _Tidy ( );
                _Mypair . _Myval2 . _Reload_proxy ( static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al ), static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Right_al ) );
            }
        }

        _Pocca ( _Al, _Right_al );
        auto & _Right_data = _Right . _Mypair . _Myval2;
        _Assign_counted_range ( _Right_data . _Myfirst, static_cast < size_type > ( _Right_data . _Mylast - _Right_data . _Myfirst ) );

        return * this;
    }

    inline vector & operator = ( initializer_list < _Ty > _Ilist ) {
        const auto _Count = _Convert_size < size_type > ( _Ilist . size ( ) );
        _Assign_counted_range ( _Ilist . begin ( ), _Count );
        return * this;
    }

private :
    template < class _Ty2 >
    inline void _Resize_reallocate ( const size_type _Newsize, const _Ty2 & _Val ) {
        if ( _Newsize > max_size ( ) ) {
            _Xlength ( );
        }

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;

        const auto _Oldsize = static_cast < size_type > ( _Mylast - _Myfirst );
        size_type _Newcapacity = _Calculate_growth ( _Newsize );

        const pointer _Newvec = _Allocate_at_least_helper ( _Al, _Newcapacity );
        const pointer _Appended_first = _Newvec + _Oldsize;
        pointer _Appended_last = _Appended_first;

        try {
        if constexpr ( is_same_v < _Ty2, _Ty > ) {
            _Appended_last = _Uninitialized_fill_n ( _Appended_first, _Newsize - _Oldsize, _Val, _Al );
        } else {
            ;
            _Appended_last = _Uninitialized_value_construct_n ( _Appended_first, _Newsize - _Oldsize, _Al );
        }

        if constexpr ( is_nothrow_move_constructible_v < _Ty > || ! is_copy_constructible_v < _Ty > ) {
            _Uninitialized_move ( _Myfirst, _Mylast, _Newvec, _Al );
        } else {
            _Uninitialized_copy ( _Myfirst, _Mylast, _Newvec, _Al );
        }
        } catch ( ... ) {
        _Destroy_range ( _Appended_first, _Appended_last, _Al );
        _Al . deallocate ( _Newvec, _Newcapacity );
        throw;
        }

        _Change_array ( _Newvec, _Newsize, _Newcapacity );
    }

    template < class _Ty2 >
    inline void _Resize ( const size_type _Newsize, const _Ty2 & _Val ) {

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;
        const auto _Oldsize = static_cast < size_type > ( _Mylast - _Myfirst );
        if ( _Newsize < _Oldsize ) {
            const pointer _Newlast = _Myfirst + _Newsize;
            _Orphan_range ( _Newlast, _Mylast );
            _Destroy_range ( _Newlast, _Mylast, _Al );
            ;
            _Mylast = _Newlast;
            return;
        }

        if ( _Newsize > _Oldsize ) {
            const auto _Oldcapacity = static_cast < size_type > ( _My_data . _Myend - _Myfirst );
            if ( _Newsize > _Oldcapacity ) {
                _Resize_reallocate ( _Newsize, _Val );
                return;
            }

            ;
            const pointer _Oldlast = _Mylast;
            if constexpr ( is_same_v < _Ty2, _Ty > ) {
                _Mylast = _Uninitialized_fill_n ( _Oldlast, _Newsize - _Oldsize, _Val, _Al );
            } else {
                ;
                _Mylast = _Uninitialized_value_construct_n ( _Oldlast, _Newsize - _Oldsize, _Al );
            }
            ;
            _Orphan_range ( _Oldlast, _Oldlast );
        }


    }

public :
    inline void resize ( const size_type _Newsize ) {

        _Resize ( _Newsize, _Value_init_tag { } );
    }

    inline void resize ( const size_type _Newsize, const _Ty & _Val ) {

        _Resize ( _Newsize, _Val );
    }

private :
    enum class _Reallocation_policy { _At_least, _Exactly };

    template < _Reallocation_policy _Policy >
    inline void _Reallocate ( size_type & _Newcapacity ) {

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;

        const auto _Size = static_cast < size_type > ( _Mylast - _Myfirst );

        pointer _Newvec;
        if constexpr ( _Policy == _Reallocation_policy :: _At_least ) {
            _Newvec = _Allocate_at_least_helper ( _Al, _Newcapacity );
        } else {
            ;
            _Newvec = _Al . allocate ( _Newcapacity );
        }

        try {
        if constexpr ( is_nothrow_move_constructible_v < _Ty > || ! is_copy_constructible_v < _Ty > ) {
            _Uninitialized_move ( _Myfirst, _Mylast, _Newvec, _Al );
        } else {
            _Uninitialized_copy ( _Myfirst, _Mylast, _Newvec, _Al );
        }
        } catch ( ... ) {
        _Al . deallocate ( _Newvec, _Newcapacity );
        throw;
        }

        _Change_array ( _Newvec, _Size, _Newcapacity );
    }





















    inline void _Clear_and_reserve_geometric ( const size_type _Newsize ) {
        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;
        pointer & _Myend = _My_data . _Myend;






        if ( _Newsize > max_size ( ) ) {
            _Xlength ( );
        }

        const size_type _Newcapacity = _Calculate_growth ( _Newsize );

        if ( _Myfirst ) {
            _Destroy_range ( _Myfirst, _Mylast, _Al );
            ;
            _Al . deallocate ( _Myfirst, static_cast < size_type > ( _Myend - _Myfirst ) );

            _Myfirst = nullptr;
            _Mylast = nullptr;
            _Myend = nullptr;
        }

        _Buy_raw ( _Newcapacity );
    }

public :
    inline void reserve ( size_type _Newcapacity ) {

        if ( _Newcapacity > capacity ( ) ) {
            if ( _Newcapacity > max_size ( ) ) {
                _Xlength ( );
            }

            _Reallocate < _Reallocation_policy :: _At_least > ( _Newcapacity );
        }
    }

    inline void shrink_to_fit ( ) {
        auto & _My_data = _Mypair . _Myval2;
        const pointer _Oldlast = _My_data . _Mylast;
        if ( _Oldlast != _My_data . _Myend ) {
            const pointer _Oldfirst = _My_data . _Myfirst;
            if ( _Oldfirst == _Oldlast ) {
                _Tidy ( );
            } else {
                size_type _Newcapacity = static_cast < size_type > ( _Oldlast - _Oldfirst );
                _Reallocate < _Reallocation_policy :: _Exactly > ( _Newcapacity );
            }
        }
    }

    inline void pop_back ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Mylast = _My_data . _Mylast;


        do { if ( _My_data . _Myfirst != _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1715, 0, "%s", "vector empty before pop" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x65\x6d\x70\x74\x79\x20\x62\x65\x66\x6f\x72\x65\x20\x70\x6f\x70\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1715, 0 ); } while ( false ); }; } while ( false );


        _Orphan_range ( _Mylast - 1, _Mylast );
        _Alty_traits :: destroy ( _Getal ( ), _Unfancy ( _Mylast - 1 ) );
        ;
        -- _Mylast;
    }

    inline iterator erase ( const_iterator _Where ) noexcept (
        is_nothrow_move_assignable_v < value_type > ) {
        const pointer _Whereptr = _Where . _Ptr;
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Mylast = _My_data . _Mylast;


        do { if ( _Where . _Getcont ( ) == :: std :: addressof ( _My_data ) && _Whereptr >= _My_data . _Myfirst && _Mylast > _Whereptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1733, 0, "%s", "vector erase iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x65\x72\x61\x73\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74\x73\x69\x64\x65\x20\x72" L"\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1733, 0 ); } while ( false ); }; } while ( false );



        _Orphan_range ( _Whereptr, _Mylast );
        :: std :: _Move_unchecked ( _Whereptr + 1, _Mylast, _Whereptr );
        _Alty_traits :: destroy ( _Getal ( ), _Unfancy ( _Mylast - 1 ) );
        ;
        -- _Mylast;
        return iterator ( _Whereptr, :: std :: addressof ( _My_data ) );
    }

    inline iterator erase ( const_iterator _First, const_iterator _Last ) noexcept (
        is_nothrow_move_assignable_v < value_type > ) {
        const pointer _Firstptr = _First . _Ptr;
        const pointer _Lastptr = _Last . _Ptr;
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Mylast = _My_data . _Mylast;


        do { if ( _First . _Getcont ( ) == :: std :: addressof ( _My_data ) && _Last . _Getcont ( ) == :: std :: addressof ( _My_data ) && _Firstptr >= _My_data . _Myfirst && _Lastptr >= _Firstptr && _Mylast >= _Lastptr ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1754, 0, "%s", "vector erase iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x65\x72\x61\x73\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74\x73\x69\x64\x65\x20\x72" L"\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1754, 0 ); } while ( false ); }; } while ( false );



        if ( _Firstptr != _Lastptr ) {
            _Orphan_range ( _Firstptr, _Mylast );

            const pointer _Newlast = :: std :: _Move_unchecked ( _Lastptr, _Mylast, _Firstptr );
            _Destroy_range ( _Newlast, _Mylast, _Getal ( ) );
            ;
            _Mylast = _Newlast;
        }

        return iterator ( _Firstptr, :: std :: addressof ( _My_data ) );
    }

    inline void clear ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;

        if ( _Myfirst == _Mylast ) {



            return;
        }

        _My_data . _Orphan_all ( );
        _Destroy_range ( _Myfirst, _Mylast, _Getal ( ) );
        ;
        _Mylast = _Myfirst;
    }

    inline void swap ( vector & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            _Pocs ( _Getal ( ), _Right . _Getal ( ) );
            _Mypair . _Myval2 . _Swap_val ( _Right . _Mypair . _Myval2 );
        }
    }

    [ [ nodiscard ] ] inline _Ty * data ( ) noexcept {
        return _Unfancy_maybe_null ( _Mypair . _Myval2 . _Myfirst );
    }

    [ [ nodiscard ] ] inline const _Ty * data ( ) const noexcept {
        return _Unfancy_maybe_null ( _Mypair . _Myval2 . _Myfirst );
    }

    [ [ nodiscard ] ] inline iterator begin ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;
        return iterator ( _My_data . _Myfirst, :: std :: addressof ( _My_data ) );
    }

    [ [ nodiscard ] ] inline const_iterator begin ( ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;
        return const_iterator ( _My_data . _Myfirst, :: std :: addressof ( _My_data ) );
    }

    [ [ nodiscard ] ] inline iterator end ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;
        return iterator ( _My_data . _Mylast, :: std :: addressof ( _My_data ) );
    }

    [ [ nodiscard ] ] inline const_iterator end ( ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;
        return const_iterator ( _My_data . _Mylast, :: std :: addressof ( _My_data ) );
    }

    [ [ nodiscard ] ] inline reverse_iterator rbegin ( ) noexcept {
        return reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rbegin ( ) const noexcept {
        return const_reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline reverse_iterator rend ( ) noexcept {
        return reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rend ( ) const noexcept {
        return const_reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_iterator cbegin ( ) const noexcept {
        return begin ( );
    }

    [ [ nodiscard ] ] inline const_iterator cend ( ) const noexcept {
        return end ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crbegin ( ) const noexcept {
        return rbegin ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crend ( ) const noexcept {
        return rend ( );
    }

    [ [ nodiscard ] ] inline pointer _Unchecked_begin ( ) noexcept {
        return _Mypair . _Myval2 . _Myfirst;
    }

    [ [ nodiscard ] ] inline const_pointer _Unchecked_begin ( ) const noexcept {
        return _Mypair . _Myval2 . _Myfirst;
    }

    [ [ nodiscard ] ] inline pointer _Unchecked_end ( ) noexcept {
        return _Mypair . _Myval2 . _Mylast;
    }

    [ [ nodiscard ] ] inline const_pointer _Unchecked_end ( ) const noexcept {
        return _Mypair . _Myval2 . _Mylast;
    }

    [ [ nodiscard ( "This member function returns a bool indicating whether the container is empty and has no other effects. It is not useful to call" " this member function and discard the return value. Use the \'clear()\' member function if you want to erase all elements." ) ] ] inline bool empty ( ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;
        return _My_data . _Myfirst == _My_data . _Mylast;
    }

    [ [ nodiscard ] ] inline size_type size ( ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;
        return static_cast < size_type > ( _My_data . _Mylast - _My_data . _Myfirst );
    }

    [ [ nodiscard ] ] inline size_type max_size ( ) const noexcept {
        return ( :: std :: min ) (
            static_cast < size_type > ( ( numeric_limits < difference_type > :: max ) ( ) ), _Alty_traits :: max_size ( _Getal ( ) ) );
    }

    [ [ nodiscard ] ] inline size_type capacity ( ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;
        return static_cast < size_type > ( _My_data . _Myend - _My_data . _Myfirst );
    }

    [ [ nodiscard ] ] inline _Ty & operator [ ] ( const size_type _Pos ) noexcept {
        auto & _My_data = _Mypair . _Myval2;

        do { if ( _Pos < static_cast < size_type > ( _My_data . _Mylast - _My_data . _Myfirst ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1894, 0, "%s", "vector subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1894, 0 ); } while ( false ); }; } while ( false );



        return _My_data . _Myfirst [ _Pos ];
    }

    [ [ nodiscard ] ] inline const _Ty & operator [ ] ( const size_type _Pos ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;

        do { if ( _Pos < static_cast < size_type > ( _My_data . _Mylast - _My_data . _Myfirst ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1904, 0, "%s", "vector subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1904, 0 ); } while ( false ); }; } while ( false );



        return _My_data . _Myfirst [ _Pos ];
    }

    [ [ nodiscard ] ] inline _Ty & at ( const size_type _Pos ) {
        auto & _My_data = _Mypair . _Myval2;
        if ( static_cast < size_type > ( _My_data . _Mylast - _My_data . _Myfirst ) <= _Pos ) {
            _Xrange ( );
        }

        return _My_data . _Myfirst [ _Pos ];
    }

    [ [ nodiscard ] ] inline const _Ty & at ( const size_type _Pos ) const {
        auto & _My_data = _Mypair . _Myval2;
        if ( static_cast < size_type > ( _My_data . _Mylast - _My_data . _Myfirst ) <= _Pos ) {
            _Xrange ( );
        }

        return _My_data . _Myfirst [ _Pos ];
    }

    [ [ nodiscard ] ] inline _Ty & front ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;

        do { if ( _My_data . _Myfirst != _My_data . _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1931, 0, "%s", "front() called on empty vector" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x22" L"", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1931, 0 ); } while ( false ); }; } while ( false );


        return * _My_data . _Myfirst;
    }

    [ [ nodiscard ] ] inline const _Ty & front ( ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;

        do { if ( _My_data . _Myfirst != _My_data . _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1940, 0, "%s", "front() called on empty vector" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x22" L"", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1940, 0 ); } while ( false ); }; } while ( false );


        return * _My_data . _Myfirst;
    }

    [ [ nodiscard ] ] inline _Ty & back ( ) noexcept {
        auto & _My_data = _Mypair . _Myval2;

        do { if ( _My_data . _Myfirst != _My_data . _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1949, 0, "%s", "back() called on empty vector" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1949, 0 ); } while ( false ); }; } while ( false );


        return _My_data . _Mylast [ - 1 ];
    }

    [ [ nodiscard ] ] inline const _Ty & back ( ) const noexcept {
        auto & _My_data = _Mypair . _Myval2;

        do { if ( _My_data . _Myfirst != _My_data . _Mylast ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 1958, 0, "%s", "back() called on empty vector" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 1958, 0 ); } while ( false ); }; } while ( false );


        return _My_data . _Mylast [ - 1 ];
    }

    [ [ nodiscard ] ] inline allocator_type get_allocator ( ) const noexcept {
        return static_cast < allocator_type > ( _Getal ( ) );
    }

private :
    inline size_type _Calculate_growth ( const size_type _Newsize ) const {

        const size_type _Oldcapacity = capacity ( );
        const auto _Max = max_size ( );

        if ( _Oldcapacity > _Max - _Oldcapacity / 2 ) {
            return _Max;
        }

        const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

        if ( _Geometric < _Newsize ) {
            return _Newsize;
        }

        return _Geometric;
    }

    inline void _Buy_raw ( size_type _Newcapacity ) {

        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;
        pointer & _Myend = _My_data . _Myend;

        ;
        ;

        const pointer _Newvec = _Allocate_at_least_helper ( _Getal ( ), _Newcapacity );
        _Myfirst = _Newvec;
        _Mylast = _Newvec;
        _Myend = _Newvec + _Newcapacity;
    }

    inline void _Buy_nonzero ( const size_type _Newcapacity ) {










        if ( _Newcapacity > max_size ( ) ) {
            _Xlength ( );
        }

        _Buy_raw ( _Newcapacity );
    }

    inline void _Change_array ( const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity ) {

        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;
        pointer & _Myend = _My_data . _Myend;

        _My_data . _Orphan_all ( );

        if ( _Myfirst ) {
            _Destroy_range ( _Myfirst, _Mylast, _Al );
            ;
            _Al . deallocate ( _Myfirst, static_cast < size_type > ( _Myend - _Myfirst ) );
        }

        _Myfirst = _Newvec;
        _Mylast = _Newvec + _Newsize;
        _Myend = _Newvec + _Newcapacity;
        ;
    }

    inline void _Tidy ( ) noexcept {
        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;
        pointer & _Myend = _My_data . _Myend;

        _My_data . _Orphan_all ( );

        if ( _Myfirst ) {
            _Destroy_range ( _Myfirst, _Mylast, _Al );
            ;
            _Al . deallocate ( _Myfirst, static_cast < size_type > ( _Myend - _Myfirst ) );

            _Myfirst = nullptr;
            _Mylast = nullptr;
            _Myend = nullptr;
        }
    }

    template < class ... _Valty >
    inline void _Construct_n ( const size_type _Count, _Valty && ... _Val ) {




        auto & _Al = _Getal ( );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alty, _Container_proxy >> ( _Al );
        auto & _My_data = _Mypair . _Myval2;
        _Container_proxy_ptr < _Alty > _Proxy ( _Alproxy, _My_data );
        if ( _Count != 0 ) {
            _Buy_nonzero ( _Count );
            _Tidy_guard < vector > _Guard { this };
            if constexpr ( sizeof ... ( _Val ) == 0 ) {
                _My_data . _Mylast = _Uninitialized_value_construct_n ( _My_data . _Myfirst, _Count, _Al );
            } else if constexpr ( sizeof ... ( _Val ) == 1 ) {
                ;
                _My_data . _Mylast = _Uninitialized_fill_n ( _My_data . _Myfirst, _Count, _Val ..., _Al );
            } else if constexpr ( sizeof ... ( _Val ) == 2 ) {
                _My_data . _Mylast = _Uninitialized_copy ( :: std :: forward < _Valty > ( _Val ) ..., _My_data . _Myfirst, _Al );
            } else {
                static_assert ( _Always_false < _Ty >, "Should be unreachable" );
            }
            ;
            _Guard . _Target = nullptr;
        }

        _Proxy . _Release ( );
    }

    inline void _Move_assign_unequal_alloc ( vector & _Right ) {
        auto & _Al = _Getal ( );
        auto & _My_data = _Mypair . _Myval2;
        auto & _Right_data = _Right . _Mypair . _Myval2;

        const pointer _First = _Right_data . _Myfirst;
        const pointer _Last = _Right_data . _Mylast;
        const auto _Newsize = static_cast < size_type > ( _Last - _First );

        pointer & _Myfirst = _My_data . _Myfirst;
        pointer & _Mylast = _My_data . _Mylast;

        constexpr bool _Nothrow_construct =
            conjunction_v < is_nothrow_move_constructible < _Ty >, _Uses_default_construct < _Alloc, _Ty *, _Ty >>;

        _My_data . _Orphan_all ( );
        const auto _Oldcapacity = static_cast < size_type > ( _My_data . _Myend - _Myfirst );
        if ( _Newsize > _Oldcapacity ) {
            _Clear_and_reserve_geometric ( _Newsize );
            if constexpr ( _Nothrow_construct ) {
                _Mylast = _Uninitialized_move ( _First, _Last, _Myfirst, _Al );
                ;
            } else {
                ;
                _Mylast = _Uninitialized_move ( _First, _Last, _Myfirst, _Al );
            }

            return;
        }

        const auto _Oldsize = static_cast < size_type > ( _Mylast - _Myfirst );
        if ( _Newsize > _Oldsize ) {
            const pointer _Mid = _First + _Oldsize;
            :: std :: _Move_unchecked ( _First, _Mid, _Myfirst );

            if constexpr ( _Nothrow_construct ) {
                ;
                _Mylast = _Uninitialized_move ( _Mid, _Last, _Mylast, _Al );
            } else {
                ;
                _Mylast = _Uninitialized_move ( _Mid, _Last, _Mylast, _Al );
                ;
            }
        } else {
            const pointer _Newlast = _Myfirst + _Newsize;
            :: std :: _Move_unchecked ( _First, _Last, _Myfirst );
            _Destroy_range ( _Newlast, _Mylast, _Al );
            ;
            _Mylast = _Newlast;
        }
    }

    [ [ noreturn ] ] static void _Xlength ( ) {
        _Xlength_error ( "vector too long" );
    }

    [ [ noreturn ] ] static void _Xrange ( ) {
        _Xout_of_range ( "invalid vector subscript" );
    }


    inline void _Orphan_range_unlocked ( pointer _First, pointer _Last ) const {
        _Iterator_base12 * * _Pnext = & _Mypair . _Myval2 . _Myproxy -> _Myfirstiter;
        while ( * _Pnext ) {
            const auto _Pnextptr = static_cast < const_iterator & > ( * * _Pnext ) . _Ptr;
            const auto _Temp = * _Pnext;
            if ( _Pnextptr < _First || _Last < _Pnextptr ) {
                _Pnext = & _Temp -> _Mynextiter;
            } else {
                _Temp -> _Myproxy = nullptr;
                * _Pnext = _Temp -> _Mynextiter;
            }
        }
    }

    void _Orphan_range_locked ( pointer _First, pointer _Last ) const {
        _Lockit _Lock ( 3 );
        _Orphan_range_unlocked ( _First, _Last );
    }

    inline void _Orphan_range ( pointer _First, pointer _Last ) const {






        {
            _Orphan_range_locked ( _First, _Last );
        }
    }




    [ [ nodiscard ] ] inline _Alty & _Getal ( ) noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline const _Alty & _Getal ( ) const noexcept {
        return _Mypair . _Get_first ( );
    }

    [ [ nodiscard ] ] inline iterator _Make_iterator ( const pointer _Ptr ) noexcept {
        return iterator ( _Ptr, :: std :: addressof ( _Mypair . _Myval2 ) );
    }

    [ [ nodiscard ] ] inline iterator _Make_iterator_offset ( const size_type _Offset ) noexcept {

        auto & _My_data = _Mypair . _Myval2;
        return iterator ( _My_data . _Myfirst + _Offset, :: std :: addressof ( _My_data ) );
    }

    _Compressed_pair < _Alty, _Scary_val > _Mypair;
};
#line 2221 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Alloc >
class vector < bool, _Alloc >;
#line 2224
using _Vbase = unsigned; 
#line 2226
constexpr int _VBITS = ((8) * sizeof(_Vbase)); 
#line 2228
template < class _Ty, class _Alloc >
[ [ nodiscard ] ] inline bool operator == ( const vector < _Ty, _Alloc > & _Left, const vector < _Ty, _Alloc > & _Right ) {
    if ( _Left . size ( ) != _Right . size ( ) ) {
        return false;
    }

    if constexpr ( is_same_v < _Ty, bool > ) {
        return :: std :: equal (
            _Left . _Myvec . _Unchecked_begin ( ), _Left . _Myvec . _Unchecked_end ( ), _Right . _Myvec . _Unchecked_begin ( ) );
    } else {
        return :: std :: equal ( _Left . _Unchecked_begin ( ), _Left . _Unchecked_end ( ), _Right . _Unchecked_begin ( ) );
    }
}
#line 2243
template < class _Ty, class _Alloc >
[ [ nodiscard ] ] bool operator != ( const vector < _Ty, _Alloc > & _Left, const vector < _Ty, _Alloc > & _Right ) {
    return ! ( _Left == _Right );
}
#line 2264 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Ret >
struct _Vbase_compare_three_way {
    [ [ nodiscard ] ] constexpr _Ret operator ( ) ( const _Vbase _Left, const _Vbase _Right ) const noexcept {
        const _Vbase _Differing_bits = _Left ^ _Right;

        if ( _Differing_bits == 0 ) {



            return 0;

        }

        const int _Bit_index = _Countr_zero ( _Differing_bits );
        ;

        const _Vbase _Mask = _Vbase { 1 } << _Bit_index;





        return ( _Left & _Mask ) == 0 ? - 1 : 1;

    }
};
#line 2317 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Ty, class _Alloc >
[ [ nodiscard ] ] inline bool operator < ( const vector < _Ty, _Alloc > & _Left, const vector < _Ty, _Alloc > & _Right ) {
    if constexpr ( is_same_v < _Ty, bool > ) {

        auto _First = _Left . _Myvec . _Unchecked_begin ( );
        auto _Other = _Right . _Myvec . _Unchecked_begin ( );

        const auto _Last = _First + ( :: std :: min ) ( _Left . _Myvec . size ( ), _Right . _Myvec . size ( ) );

        for (; _First != _Last; ++ _First, ( void ) ++ _Other ) {
            using _Comp = _Vbase_compare_three_way < signed char >;
            const auto _Result = _Comp { } ( * _First, * _Other );

            if ( _Result < 0 ) {
                return true;
            } else if ( _Result > 0 ) {
                return false;
            }
        }

        return _Left . size ( ) < _Right . size ( );
    } else {
        return :: std :: lexicographical_compare (
            _Left . _Unchecked_begin ( ), _Left . _Unchecked_end ( ), _Right . _Unchecked_begin ( ), _Right . _Unchecked_end ( ) );
    }
}
#line 2344
template < class _Ty, class _Alloc >
[ [ nodiscard ] ] inline bool operator > ( const vector < _Ty, _Alloc > & _Left, const vector < _Ty, _Alloc > & _Right ) {
    return _Right < _Left;
}
#line 2349
template < class _Ty, class _Alloc >
[ [ nodiscard ] ] inline bool operator <= ( const vector < _Ty, _Alloc > & _Left, const vector < _Ty, _Alloc > & _Right ) {
    return ! ( _Right < _Left );
}
#line 2354
template < class _Ty, class _Alloc >
[ [ nodiscard ] ] inline bool operator >= ( const vector < _Ty, _Alloc > & _Left, const vector < _Ty, _Alloc > & _Right ) {
    return ! ( _Left < _Right );
}
#line 2360 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Ty, class _Alloc >
inline void swap ( vector < _Ty, _Alloc > & _Left, vector < _Ty, _Alloc > & _Right ) noexcept {
    _Left . swap ( _Right );
}
#line 2377 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template< class _Alloc0> 
#line 2378
struct _Wrap_alloc { 
#line 2379
using _Alloc = _Alloc0; 
#line 2380
}; 
#line 2382
template < class _Alvbase_wrapped >
class _Vb_iter_base : public _Iterator_base {

public :
    using _Alvbase = typename _Alvbase_wrapped :: _Alloc;
    using _Size_type = typename allocator_traits < _Alvbase > :: size_type;
    using _Difference_type = typename allocator_traits < _Alvbase > :: difference_type;
    using _Mycont = vector < bool, _Rebind_alloc_t < _Alvbase, bool >>;

    static constexpr _Difference_type _VBITS_DIFF = _VBITS;

    inline _Vb_iter_base ( ) = default;

    inline _Vb_iter_base ( const _Vbase * _Ptr, _Size_type _Off, const _Container_base * _Mypvbool ) noexcept
        : _Myptr ( _Ptr ), _Myoff ( _Off ) {
        this -> _Adopt ( _Mypvbool );
    }

    inline void _Advance ( _Size_type _Off ) noexcept {
        _Myoff += _Off;
        _Myptr += _Myoff / _VBITS;
        _Myoff %= _VBITS;
    }


    inline _Difference_type _Total_off ( const _Mycont * _Cont ) const noexcept {
        return static_cast < _Difference_type > ( _VBITS_DIFF * ( _Myptr - _Cont -> _Myvec . data ( ) ) + _Myoff );
    }


    const _Vbase * _Myptr = nullptr;
    _Size_type _Myoff = 0;
};
#line 2416 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Alvbase_wrapped >
class _Vb_reference : public _Vb_iter_base < _Alvbase_wrapped > {

private :
    using _Mybase = _Vb_iter_base < _Alvbase_wrapped >;
    using _Mycont = typename _Mybase :: _Mycont;
    using _Difference_type = typename _Mybase :: _Difference_type;


    inline _Vb_reference ( ) = default;

public :
    inline _Vb_reference ( const _Vb_reference & ) = default;

    inline _Vb_reference ( const _Mybase & _Right ) noexcept
        : _Mybase ( _Right . _Myptr, _Right . _Myoff, _Right . _Getcont ( ) ) { }

    inline _Vb_reference & operator = ( const _Vb_reference & _Right ) noexcept {
        return * this = static_cast < bool > ( _Right );
    }

    inline _Vb_reference & operator = ( bool _Val ) noexcept {
        if ( _Val ) {
            * const_cast < _Vbase * > ( _Getptr ( ) ) |= _Mask ( );
        } else {
            * const_cast < _Vbase * > ( _Getptr ( ) ) &= ~ _Mask ( );
        }

        return * this;
    }













    inline void flip ( ) noexcept {
        * const_cast < _Vbase * > ( _Getptr ( ) ) ^= _Mask ( );
    }

    inline operator bool ( ) const noexcept {
        return ( * _Getptr ( ) & _Mask ( ) ) != 0;
    }

    inline const _Vbase * _Getptr ( ) const noexcept {

        const auto _Cont = static_cast < const _Mycont * > ( this -> _Getcont ( ) );
        do { if ( _Cont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2470, 0, "%s", "cannot dereference value-initialized vector<bool> iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61" L"\x6c\x69\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2470, 0 ); } while ( false ); }; } while ( false );
        do { if ( this -> _Total_off ( _Cont ) <= static_cast < _Difference_type > ( _Cont -> _Mysize ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2472, 0, "%s", "vector<bool> iterator not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66" L"\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2472, 0 ); } while ( false ); }; } while ( false );



        return this -> _Myptr;
    }

    friend inline void swap ( _Vb_reference _Left, _Vb_reference _Right ) noexcept {
        bool _Val = _Left;
        _Left = _Right;
        _Right = _Val;
    }

protected :
    inline _Vbase _Mask ( ) const noexcept {
        return static_cast < _Vbase > ( 1 ) << this -> _Myoff;
    }
};
#line 2490 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Alvbase_wrapped >
class _Vb_const_iterator : public _Vb_iter_base < _Alvbase_wrapped > {
private :
    using _Mybase = _Vb_iter_base < _Alvbase_wrapped >;

public :
    using _Mycont = typename _Mybase :: _Mycont;
    using _Difference_type = typename _Mybase :: _Difference_type;
    using _Size_type = typename _Mybase :: _Size_type;
    using _Reft = _Vb_reference < _Alvbase_wrapped >;
    using const_reference = bool;

    using iterator_category = random_access_iterator_tag;
    using value_type = bool;
    using difference_type = typename _Mybase :: _Difference_type;
    using pointer = const_reference *;
    using reference = const_reference;

    inline _Vb_const_iterator ( ) = default;

    inline _Vb_const_iterator ( const _Vbase * _Ptr, const _Container_base * _Mypvbool ) noexcept
        : _Mybase ( _Ptr, 0, _Mypvbool ) { }

    [ [ nodiscard ] ] inline const_reference operator * ( ) const noexcept {

        const auto _Cont = static_cast < const _Mycont * > ( this -> _Getcont ( ) );
        do { if ( _Cont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2516, 0, "%s", "cannot dereference value-initialized vector<bool> iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61" L"\x6c\x69\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2516, 0 ); } while ( false ); }; } while ( false );
        do { if ( this -> _Total_off ( _Cont ) < static_cast < _Difference_type > ( _Cont -> _Mysize ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2518, 0, "%s", "vector<bool> iterator not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66" L"\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2518, 0 ); } while ( false ); }; } while ( false );



        return _Reft ( * this );
    }

    inline _Vb_const_iterator & operator ++ ( ) noexcept {
        _Inc ( );
        return * this;
    }

    inline _Vb_const_iterator operator ++ ( int ) noexcept {
        _Vb_const_iterator _Tmp = * this;
        _Inc ( );
        return _Tmp;
    }

    inline _Vb_const_iterator & operator -- ( ) noexcept {
        _Dec ( );
        return * this;
    }

    inline _Vb_const_iterator operator -- ( int ) noexcept {
        _Vb_const_iterator _Tmp = * this;
        _Dec ( );
        return _Tmp;
    }

    inline _Vb_const_iterator & operator += ( const difference_type _Off ) noexcept {

        if ( _Off != 0 ) {
            const auto _Cont = static_cast < const _Mycont * > ( this -> _Getcont ( ) );
            do { if ( _Cont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2550, 0, "%s", "cannot seek value-initialized vector<bool> iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69\x7a\x65\x64\x20\x76" L"\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2550, 0 ); } while ( false ); }; } while ( false );
            const auto _Start_offset = this -> _Total_off ( _Cont );
            if ( _Off < 0 ) {
                do { if ( - _Start_offset <= _Off ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2553, 0, "%s", "cannot seek vector<bool> iterator before begin" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x20\x62\x65\x66\x6f\x72\x65\x20\x62\x65\x67\x69\x6e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2553, 0 ); } while ( false ); }; } while ( false );
            } else if ( 0 < _Off ) {
                do { if ( _Off <= static_cast < _Difference_type > ( _Cont -> _Mysize - _Start_offset ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2556, 0, "%s", "cannot seek vector<bool> iterator after end" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x73\x65\x65\x6b\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74" L"\x6f\x72\x20\x61\x66\x74\x65\x72\x20\x65\x6e\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2556, 0 ); } while ( false ); }; } while ( false );

            }
        }


        if ( _Off < 0 && this -> _Myoff < 0 - static_cast < _Size_type > ( _Off ) ) {
            this -> _Myoff += static_cast < _Size_type > ( _Off );
            this -> _Myptr -= 1 + ( static_cast < _Size_type > ( - 1 ) - this -> _Myoff ) / _VBITS;
            this -> _Myoff %= _VBITS;
        } else {
            this -> _Myoff += static_cast < _Size_type > ( _Off );
            this -> _Myptr += this -> _Myoff / _VBITS;
            this -> _Myoff %= _VBITS;
        }
        return * this;
    }

    [ [ nodiscard ] ] inline _Vb_const_iterator operator + ( const difference_type _Off ) const noexcept {
        _Vb_const_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _Vb_const_iterator operator + (
        const difference_type _Off, _Vb_const_iterator _Right ) noexcept {
        _Right += _Off;
        return _Right;
    }

    inline _Vb_const_iterator & operator -= ( const difference_type _Off ) noexcept {
        return * this += - _Off;
    }

    [ [ nodiscard ] ] inline _Vb_const_iterator operator - ( const difference_type _Off ) const noexcept {
        _Vb_const_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline difference_type operator - ( const _Vb_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return static_cast < difference_type > ( _Mybase :: _VBITS_DIFF * ( this -> _Myptr - _Right . _Myptr ) )
             + static_cast < difference_type > ( this -> _Myoff ) - static_cast < difference_type > ( _Right . _Myoff );
    }

    [ [ nodiscard ] ] inline const_reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    [ [ nodiscard ] ] inline bool operator == ( const _Vb_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return this -> _Myptr == _Right . _Myptr && this -> _Myoff == _Right . _Myoff;
    }










    [ [ nodiscard ] ] bool operator != ( const _Vb_const_iterator & _Right ) const noexcept {
        return ! ( * this == _Right );
    }

    [ [ nodiscard ] ] bool operator < ( const _Vb_const_iterator & _Right ) const noexcept {
        _Compat ( _Right );
        return this -> _Myptr < _Right . _Myptr || ( this -> _Myptr == _Right . _Myptr && this -> _Myoff < _Right . _Myoff );
    }

    [ [ nodiscard ] ] bool operator > ( const _Vb_const_iterator & _Right ) const noexcept {
        return _Right < * this;
    }

    [ [ nodiscard ] ] bool operator <= ( const _Vb_const_iterator & _Right ) const noexcept {
        return ! ( _Right < * this );
    }

    [ [ nodiscard ] ] bool operator >= ( const _Vb_const_iterator & _Right ) const noexcept {
        return ! ( * this < _Right );
    }


    inline void _Compat ( const _Vb_const_iterator & _Right ) const noexcept {




        do { if ( this -> _Getcont ( ) == _Right . _Getcont ( ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2646, 0, "%s", "vector<bool> iterators incompatible" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x73\x20\x69\x6e\x63\x6f\x6d\x70\x61\x74" L"\x69\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2646, 0 ); } while ( false ); }; } while ( false );

    }


    using _Prevent_inheriting_unwrap = _Vb_const_iterator;

    friend inline void _Verify_range ( const _Vb_const_iterator & _First, const _Vb_const_iterator & _Last ) noexcept {

        do { if ( _First <= _Last ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2655, 0, "%s", "vector<bool> iterator range transposed" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x72\x61\x6e\x67\x65\x20\x74\x72\x61" L"\x6e\x73\x70\x6f\x73\x65\x64\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2655, 0 ); } while ( false ); }; } while ( false );
    }


    inline void _Dec ( ) noexcept {

        const auto _Cont = static_cast < const _Mycont * > ( this -> _Getcont ( ) );
        do { if ( _Cont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2662, 0, "%s", "cannot decrement value-initialized vector<bool> iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2662, 0 ); } while ( false ); }; } while ( false );
        do { if ( this -> _Total_off ( _Cont ) > 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2663, 0, "%s", "cannot decrement vector<bool> begin iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x62" L"\x65\x67\x69\x6e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2663, 0 ); } while ( false ); }; } while ( false );


        if ( this -> _Myoff != 0 ) {
            -- this -> _Myoff;
        } else {
            this -> _Myoff = _VBITS - 1;
            -- this -> _Myptr;
        }
    }

    inline void _Inc ( ) noexcept {

        const auto _Cont = static_cast < const _Mycont * > ( this -> _Getcont ( ) );
        do { if ( _Cont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2677, 0, "%s", "cannot increment value-initialized vector<bool> iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61\x6c\x69" L"\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2677, 0 ); } while ( false ); }; } while ( false );
        do { if ( this -> _Total_off ( _Cont ) < static_cast < _Difference_type > ( _Cont -> _Mysize ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2679, 0, "%s", "cannot increment vector<bool> end iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x69\x6e\x63\x72\x65\x6d\x65\x6e\x74\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x65" L"\x6e\x64\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2679, 0 ); } while ( false ); }; } while ( false );



        if ( this -> _Myoff < _VBITS - 1 ) {
            ++ this -> _Myoff;
        } else {
            this -> _Myoff = 0;
            ++ this -> _Myptr;
        }
    }
};
#line 2691 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Alvbase_wrapped >
class _Vb_iterator : public _Vb_const_iterator < _Alvbase_wrapped > {
public :
    using _Mybase = _Vb_const_iterator < _Alvbase_wrapped >;
    using _Mycont = typename _Mybase :: _Mycont;
    using _Difference_type = typename _Mybase :: _Difference_type;

    using _Reft = _Vb_reference < _Alvbase_wrapped >;
    using const_reference = bool;

    using iterator_category = random_access_iterator_tag;
    using value_type = bool;
    using difference_type = typename _Mybase :: difference_type;
    using pointer = _Reft *;
    using reference = _Reft;

    using _Mybase :: _Mybase;

    [ [ nodiscard ] ] inline reference operator * ( ) const noexcept {

        const auto _Cont = static_cast < const _Mycont * > ( this -> _Getcont ( ) );
        do { if ( _Cont ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2712, 0, "%s", "cannot dereference value-initialized vector<bool> iterator" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x63\x61\x6e\x6e\x6f\x74\x20\x64\x65\x72\x65\x66\x65\x72\x65\x6e\x63\x65\x20\x76\x61\x6c\x75\x65\x2d\x69\x6e\x69\x74\x69\x61" L"\x6c\x69\x7a\x65\x64\x20\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2712, 0 ); } while ( false ); }; } while ( false );
        do { if ( this -> _Total_off ( _Cont ) < static_cast < _Difference_type > ( _Cont -> _Mysize ) ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 2714, 0, "%s", "vector<bool> iterator not dereferenceable" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6e\x6f\x74\x20\x64\x65\x72\x65\x66" L"\x65\x72\x65\x6e\x63\x65\x61\x62\x6c\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 2714, 0 ); } while ( false ); }; } while ( false );



        return _Reft ( * this );
    }

    inline _Vb_iterator & operator ++ ( ) noexcept {
        _Mybase :: operator ++ ( );
        return * this;
    }

    inline _Vb_iterator operator ++ ( int ) noexcept {
        _Vb_iterator _Tmp = * this;
        _Mybase :: operator ++ ( );
        return _Tmp;
    }

    inline _Vb_iterator & operator -- ( ) noexcept {
        _Mybase :: operator -- ( );
        return * this;
    }

    inline _Vb_iterator operator -- ( int ) noexcept {
        _Vb_iterator _Tmp = * this;
        _Mybase :: operator -- ( );
        return _Tmp;
    }

    inline _Vb_iterator & operator += ( const difference_type _Off ) noexcept {
        _Mybase :: operator += ( _Off );
        return * this;
    }

    [ [ nodiscard ] ] inline _Vb_iterator operator + ( const difference_type _Off ) const noexcept {
        _Vb_iterator _Tmp = * this;
        _Tmp += _Off;
        return _Tmp;
    }

    friend inline _Vb_iterator operator + ( const difference_type _Off, _Vb_iterator _Right ) noexcept {
        _Right += _Off;
        return _Right;
    }

    inline _Vb_iterator & operator -= ( const difference_type _Off ) noexcept {
        _Mybase :: operator -= ( _Off );
        return * this;
    }

    using _Mybase :: operator -;

    [ [ nodiscard ] ] inline _Vb_iterator operator - ( const difference_type _Off ) const noexcept {
        _Vb_iterator _Tmp = * this;
        _Tmp -= _Off;
        return _Tmp;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( const difference_type _Off ) const noexcept {
        return * ( * this + _Off );
    }

    using _Prevent_inheriting_unwrap = _Vb_iterator;
};
#line 2778 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Alloc >
class _Vb_val : public _Container_base {
public :
    using _Alvbase = _Rebind_alloc_t < _Alloc, _Vbase >;
    using _Alvbase_traits = allocator_traits < _Alvbase >;
    using _Vectype = vector < _Vbase, _Alvbase >;
    using _Alvbase_wrapped = _Wrap_alloc < _Alvbase >;
    using size_type = typename _Alvbase_traits :: size_type;

    inline _Vb_val ( ) noexcept ( is_nothrow_default_constructible_v < _Vectype > ) : _Myvec ( ), _Mysize ( 0 ) {
        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline _Vb_val ( const _Alloc & _Al ) noexcept : _Myvec ( static_cast < _Alvbase > ( _Al ) ), _Mysize ( 0 ) {
        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline _Vb_val ( size_type _Count, const bool & _Val )
        : _Myvec ( _Nw ( _Count ), static_cast < _Vbase > ( _Val ? - 1 : 0 ) ), _Mysize ( 0 ) {
        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline _Vb_val ( size_type _Count, const bool & _Val, const _Alloc & _Al )
        : _Myvec ( _Nw ( _Count ), static_cast < _Vbase > ( _Val ? - 1 : 0 ), static_cast < _Alvbase > ( _Al ) ), _Mysize ( 0 ) {
        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline _Vb_val ( const _Vb_val & _Right ) : _Myvec ( _Right . _Myvec ), _Mysize ( _Right . _Mysize ) {
        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline _Vb_val ( const _Vb_val & _Right, const _Alloc & _Al )
        : _Myvec ( _Right . _Myvec, static_cast < _Alvbase > ( _Al ) ), _Mysize ( _Right . _Mysize ) {
        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline _Vb_val ( _Vb_val && _Right ) noexcept ( is_nothrow_move_constructible_v < _Vectype > )
        : _Myvec ( :: std :: move ( _Right . _Myvec ) ), _Mysize ( :: std :: exchange ( _Right . _Mysize, size_type { 0 } ) ) {
        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline _Vb_val ( _Vb_val && _Right, const _Alloc & _Al ) noexcept (
        is_nothrow_constructible_v < _Vectype, _Vectype, _Alvbase > )
        : _Myvec ( :: std :: move ( _Right . _Myvec ), static_cast < _Alvbase > ( _Al ) ), _Mysize ( _Right . _Mysize ) {
        if ( _Right . _Myvec . empty ( ) ) {

            _Right . _Mysize = 0;
        }

        this -> _Alloc_proxy ( static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( _Getal ( ) ) );
    }

    inline ~ _Vb_val ( ) noexcept {

        this -> _Orphan_all ( );
        auto && _Alproxy = static_cast < _Rebind_alloc_t < _Alvbase, _Container_proxy >> ( this -> _Getal ( ) );
        _Delete_plain_internal ( _Alproxy, :: std :: exchange ( this -> _Myproxy, nullptr ) );

    }

    inline _Alvbase & _Getal ( ) noexcept {
        return _Myvec . _Getal ( );
    }

    inline const _Alvbase & _Getal ( ) const noexcept {
        return _Myvec . _Getal ( );
    }

    static inline size_type _Nw ( size_type _Count ) noexcept {
        return ( _Count + _VBITS - 1 ) / _VBITS;
    }

    inline void _Emplace_back_unchecked ( const _Vbase _Val ) noexcept {
        ;
        _Myvec . _Emplace_back_with_unused_capacity ( _Val );
    }

    _Vectype _Myvec;
    size_type _Mysize;
};
#line 2859 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Alloc >
class vector < bool, _Alloc > : public _Vb_val < _Alloc > {
public :
    static_assert ( ! 0 || is_same_v < bool, typename _Alloc :: value_type >,
        "vector<bool, Allocator> requires that Allocator\'s value_type match bool (See N4950 [container.alloc.reqmts]/5) Either fix the a" "llocator value_type or define _ENFORCE_MATCHING_ALLOCATORS=0 to suppress this error." );

    using _Mybase = _Vb_val < _Alloc >;
    using _Alvbase_wrapped = typename _Mybase :: _Alvbase_wrapped;
    using _Alvbase = typename _Mybase :: _Alvbase;
    using _Alvbase_traits = typename _Mybase :: _Alvbase_traits;

    using size_type = typename _Alvbase_traits :: size_type;
    using difference_type = typename _Alvbase_traits :: difference_type;
    using allocator_type = _Alloc;

    using reference = _Vb_reference < _Alvbase_wrapped >;
    using const_reference = bool;
    using value_type = bool;

    using _Reft = reference;
    using iterator = _Vb_iterator < _Alvbase_wrapped >;
    using const_iterator = _Vb_const_iterator < _Alvbase_wrapped >;

    using pointer = iterator;
    using const_pointer = const_iterator;
    using reverse_iterator = :: std :: reverse_iterator < iterator >;
    using const_reverse_iterator = :: std :: reverse_iterator < const_iterator >;

    enum { _EEN_VBITS = _VBITS };

    inline vector ( ) noexcept ( is_nothrow_default_constructible_v < _Alloc > ) : _Mybase ( _Alloc ( ) ) { }

    inline explicit vector ( const _Alloc & _Al ) noexcept : _Mybase ( _Al ) { }

    inline explicit vector ( size_type _Count, const _Alloc & _Al = _Alloc ( ) )
        : _Mybase ( _Count, false, _Al ) {
        _Trim ( _Count );
    }

    inline vector ( size_type _Count, const bool & _Val, const _Alloc & _Al = _Alloc ( ) )
        : _Mybase ( _Count, _Val, _Al ) {
        _Trim ( _Count );
    }

    inline vector ( const vector & _Right ) : _Mybase ( _Right ) { }

    inline vector ( const vector & _Right, const _Identity_t < _Alloc > & _Al ) : _Mybase ( _Right, _Al ) { }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline vector ( _Iter _First, _Iter _Last, const _Alloc & _Al = _Alloc ( ) ) : _Mybase ( _Al ) {
        insert ( begin ( ), _First, _Last );
    }














    inline vector ( vector && _Right ) noexcept : _Mybase ( :: std :: move ( _Right ) ) {
        this -> _Swap_proxy_and_iterators ( _Right );
    }

    inline vector ( vector && _Right, const _Identity_t < _Alloc > & _Al ) noexcept (
        is_nothrow_constructible_v < _Mybase, _Mybase, const _Alloc & > )
        : _Mybase ( :: std :: move ( _Right ), _Al ) {
        if constexpr ( ! _Alvbase_traits :: is_always_equal :: value ) {
            if ( this -> _Getal ( ) != _Right . _Getal ( ) ) {
                return;
            }
        }

        this -> _Swap_proxy_and_iterators ( _Right );
    }

    inline vector & operator = ( vector && _Right ) noexcept (
        _Choose_pocma_v < _Alvbase > != _Pocma_values :: _No_propagate_allocators ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }





        this -> _Orphan_all ( );
        auto & _Al = this -> _Getal ( );
        auto & _Right_al = _Right . _Getal ( );
        constexpr auto _Pocma_val = _Choose_pocma_v < _Alvbase >;
        if constexpr ( _Pocma_val == _Pocma_values :: _Propagate_allocators ) {
            using _Alproxy_type = _Rebind_alloc_t < _Alvbase, _Container_proxy >;
            if ( _Al != _Right_al ) {

                _Alproxy_type _Oldal ( _Al );
                _Alproxy_type _Right_proxy_al ( _Right_al );
                _Container_proxy_ptr < _Alvbase > _Proxy ( _Right_proxy_al, _Leave_proxy_unbound { } );
                this -> _Myvec = :: std :: move ( _Right . _Myvec );
                this -> _Mysize = :: std :: exchange ( _Right . _Mysize, size_type { 0 } );
                _Proxy . _Bind ( _Oldal, this );
                this -> _Swap_proxy_and_iterators ( _Right );
                return * this;
            }
        } else if constexpr ( _Pocma_val == _Pocma_values :: _No_propagate_allocators ) {
            this -> _Myvec = :: std :: move ( _Right . _Myvec );
            this -> _Mysize = _Right . _Mysize;
            if ( _Right . _Myvec . empty ( ) ) {

                _Right . _Mysize = 0;
            }

            if ( _Al == _Right_al ) {
                this -> _Swap_proxy_and_iterators ( _Right );
            }
            return * this;
        }

        this -> _Myvec = :: std :: move ( _Right . _Myvec );
        this -> _Mysize = :: std :: exchange ( _Right . _Mysize, size_type { 0 } );
        this -> _Swap_proxy_and_iterators ( _Right );


        return * this;
    }

    template < class ... _Valty >
    inline decltype ( auto ) emplace_back ( _Valty && ... _Val ) {
        bool _Tmp ( :: std :: forward < _Valty > ( _Val ) ... );
        push_back ( _Tmp );




    }

    template < class ... _Valty >
    inline iterator emplace ( const_iterator _Where, _Valty && ... _Val ) {
        bool _Tmp ( :: std :: forward < _Valty > ( _Val ) ... );
        return insert ( _Where, _Tmp );
    }

    inline vector ( initializer_list < bool > _Ilist, const _Alloc & _Al = allocator_type ( ) ) : _Mybase ( 0, false, _Al ) {
        insert ( begin ( ), _Ilist . begin ( ), _Ilist . end ( ) );
    }

    inline vector & operator = ( initializer_list < bool > _Ilist ) {
        assign ( _Ilist . begin ( ), _Ilist . end ( ) );
        return * this;
    }

    inline void assign ( initializer_list < bool > _Ilist ) {
        assign ( _Ilist . begin ( ), _Ilist . end ( ) );
    }

    inline iterator insert ( const_iterator _Where, initializer_list < bool > _Ilist ) {
        return insert ( _Where, _Ilist . begin ( ), _Ilist . end ( ) );
    }

    inline ~ vector ( ) noexcept { }

    inline vector & operator = ( const vector & _Right ) {
        if ( this == :: std :: addressof ( _Right ) ) {
            return * this;
        }





        this -> _Orphan_all ( );
        auto & _Al = this -> _Getal ( );
        auto & _Right_al = _Right . _Getal ( );
        if constexpr ( _Choose_pocca_v < _Alvbase > ) {
            if ( _Al != _Right_al ) {

                using _Alproxy_type = _Rebind_alloc_t < _Alvbase, _Container_proxy >;
                _Alproxy_type _Oldal ( _Al );
                _Alproxy_type _Right_proxy_al ( _Right_al );
                _Container_proxy_ptr < _Alvbase > _Proxy ( _Right_proxy_al, _Leave_proxy_unbound { } );
                this -> _Myvec = _Right . _Myvec;
                this -> _Mysize = _Right . _Mysize;
                _Proxy . _Bind ( _Oldal, this );
                return * this;
            }
        }

        this -> _Myvec = _Right . _Myvec;
        this -> _Mysize = _Right . _Mysize;


        return * this;
    }

    inline void reserve ( size_type _Count ) {
        this -> _Myvec . reserve ( this -> _Nw ( _Count ) );
    }

    [ [ nodiscard ] ] inline size_type capacity ( ) const noexcept {
        return this -> _Myvec . capacity ( ) * _VBITS;
    }

    [ [ nodiscard ] ] inline iterator begin ( ) noexcept {
        return iterator ( this -> _Myvec . data ( ), this );
    }

    [ [ nodiscard ] ] inline const_iterator begin ( ) const noexcept {
        return const_iterator ( this -> _Myvec . data ( ), this );
    }

    [ [ nodiscard ] ] inline iterator end ( ) noexcept {
        return begin ( ) + static_cast < difference_type > ( this -> _Mysize );
    }

    [ [ nodiscard ] ] inline const_iterator end ( ) const noexcept {
        return begin ( ) + static_cast < difference_type > ( this -> _Mysize );
    }

    [ [ nodiscard ] ] inline const_iterator cbegin ( ) const noexcept {
        return begin ( );
    }

    [ [ nodiscard ] ] inline const_iterator cend ( ) const noexcept {
        return end ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crbegin ( ) const noexcept {
        return rbegin ( );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator crend ( ) const noexcept {
        return rend ( );
    }

    [ [ nodiscard ] ] inline iterator _Unchecked_begin ( ) noexcept {
        return iterator ( this -> _Myvec . data ( ), this );
    }

    [ [ nodiscard ] ] inline const_iterator _Unchecked_begin ( ) const noexcept {
        return const_iterator ( this -> _Myvec . data ( ), this );
    }

    [ [ nodiscard ] ] inline iterator _Unchecked_end ( ) noexcept {
        return _Unchecked_begin ( ) + static_cast < difference_type > ( this -> _Mysize );
    }

    [ [ nodiscard ] ] inline const_iterator _Unchecked_end ( ) const noexcept {
        return _Unchecked_begin ( ) + static_cast < difference_type > ( this -> _Mysize );
    }

    inline void shrink_to_fit ( ) {
        if ( this -> _Myvec . capacity ( ) != this -> _Myvec . size ( ) ) {
            this -> _Orphan_all ( );
            this -> _Myvec . shrink_to_fit ( );
        }
    }

    inline iterator _Make_iter ( const_iterator _Where ) noexcept {
        iterator _Tmp = begin ( );
        if ( 0 < this -> _Mysize ) {
            _Tmp += _Where - begin ( );
        }

        return _Tmp;
    }

    [ [ nodiscard ] ] inline reverse_iterator rbegin ( ) noexcept {
        return reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rbegin ( ) const noexcept {
        return const_reverse_iterator ( end ( ) );
    }

    [ [ nodiscard ] ] inline reverse_iterator rend ( ) noexcept {
        return reverse_iterator ( begin ( ) );
    }

    [ [ nodiscard ] ] inline const_reverse_iterator rend ( ) const noexcept {
        return const_reverse_iterator ( begin ( ) );
    }

    inline void resize ( size_type _Newsize, bool _Val = false ) {
        if ( size ( ) < _Newsize ) {
            _Insert_n ( end ( ), _Newsize - size ( ), _Val );
        } else if ( _Newsize < size ( ) ) {
            erase ( begin ( ) + static_cast < difference_type > ( _Newsize ), end ( ) );
        }
    }

    [ [ nodiscard ] ] inline size_type size ( ) const noexcept {
        return this -> _Mysize;
    }

    [ [ nodiscard ] ] inline size_type max_size ( ) const noexcept {
        constexpr auto _Diff_max = static_cast < size_type > ( ( numeric_limits < difference_type > :: max ) ( ) );
        const size_type _Ints_max = this -> _Myvec . max_size ( );
        if ( _Ints_max > _Diff_max / _VBITS ) {
            return _Diff_max;
        }


        return _Ints_max * _VBITS;
    }

    [ [ nodiscard ( "This member function returns a bool indicating whether the container is empty and has no other effects. It is not useful to call" " this member function and discard the return value. Use the \'clear()\' member function if you want to erase all elements." ) ] ] inline bool empty ( ) const noexcept {
        return this -> _Mysize == 0;
    }

    [ [ nodiscard ] ] inline allocator_type get_allocator ( ) const noexcept {
        return static_cast < allocator_type > ( this -> _Myvec . get_allocator ( ) );
    }

    [ [ nodiscard ] ] inline const_reference at ( size_type _Off ) const {
        if ( size ( ) <= _Off ) {
            _Xran ( );
        }

        return ( * this ) [ _Off ];
    }

    [ [ nodiscard ] ] inline reference at ( size_type _Off ) {
        if ( size ( ) <= _Off ) {
            _Xran ( );
        }

        return ( * this ) [ _Off ];
    }

    [ [ nodiscard ] ] inline const_reference operator [ ] ( size_type _Off ) const noexcept {

        do { if ( _Off < this -> _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3195, 0, "%s", "vector<bool> subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72" L"\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3195, 0 ); } while ( false ); }; } while ( false );


        const_iterator _It = begin ( );
        _It . _Advance ( _Off );
        return * _It;
    }

    [ [ nodiscard ] ] inline reference operator [ ] ( size_type _Off ) noexcept {

        do { if ( _Off < this -> _Mysize ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3205, 0, "%s", "vector<bool> subscript out of range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x73\x75\x62\x73\x63\x72\x69\x70\x74\x20\x6f\x75\x74\x20\x6f\x66\x20\x72" L"\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3205, 0 ); } while ( false ); }; } while ( false );


        iterator _It = begin ( );
        _It . _Advance ( _Off );
        return * _It;
    }

    [ [ nodiscard ] ] inline reference front ( ) noexcept {

        do { if ( this -> _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3215, 0, "%s", "front() called on empty vector<bool>" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x3c" L"\x62\x6f\x6f\x6c\x3e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3215, 0 ); } while ( false ); }; } while ( false );


        return * begin ( );
    }

    [ [ nodiscard ] ] inline const_reference front ( ) const noexcept {

        do { if ( this -> _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3223, 0, "%s", "front() called on empty vector<bool>" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x66\x72\x6f\x6e\x74\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x3c" L"\x62\x6f\x6f\x6c\x3e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3223, 0 ); } while ( false ); }; } while ( false );


        return * begin ( );
    }

    [ [ nodiscard ] ] inline reference back ( ) noexcept {

        do { if ( this -> _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3231, 0, "%s", "back() called on empty vector<bool>" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x3c\x62" L"\x6f\x6f\x6c\x3e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3231, 0 ); } while ( false ); }; } while ( false );


        return * ( end ( ) - 1 );
    }

    [ [ nodiscard ] ] inline const_reference back ( ) const noexcept {

        do { if ( this -> _Mysize != 0 ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3239, 0, "%s", "back() called on empty vector<bool>" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x62\x61\x63\x6b\x28\x29\x20\x63\x61\x6c\x6c\x65\x64\x20\x6f\x6e\x20\x65\x6d\x70\x74\x79\x20\x76\x65\x63\x74\x6f\x72\x3c\x62" L"\x6f\x6f\x6c\x3e\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3239, 0 ); } while ( false ); }; } while ( false );


        return * ( end ( ) - 1 );
    }

    inline void push_back ( const bool & _Val ) {
        insert ( end ( ), _Val );
    }








    inline void pop_back ( ) noexcept {
        erase ( end ( ) - 1 );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline void assign ( _Iter _First, _Iter _Last ) {
        clear ( );
        insert ( begin ( ), _First, _Last );
    }





























































    inline void assign ( size_type _Count, const bool & _Val ) {
        clear ( );
        _Insert_n ( begin ( ), _Count, _Val );
    }

    inline iterator insert ( const_iterator _Where, const bool & _Val ) {
        return _Insert_n ( _Where, size_type { 1 }, _Val );
    }

    inline iterator insert ( const_iterator _Where, size_type _Count, const bool & _Val ) {
        return _Insert_n ( _Where, _Count, _Val );
    }

    template < class _Iter, enable_if_t < _Is_iterator_v < _Iter >, int > = 0 >
    inline iterator insert ( const_iterator _Where, _Iter _First, _Iter _Last ) {
        const difference_type _Saved_offset = _Where - begin ( );
        _Adl_verify_range ( _First, _Last );
        auto _UFirst = _Get_unwrapped ( _First );
        const auto _ULast = _Get_unwrapped ( _Last );

        if constexpr ( _Is_cpp17_fwd_iter_v < _Iter > ) {
            const auto _Length = static_cast < size_t > ( :: std :: distance ( _UFirst, _ULast ) );
            const auto _Count = _Convert_size < size_type > ( _Length );
            const auto _Off = static_cast < difference_type > ( _Insert_x ( _Where, _Count ) );
            :: std :: _Copy_unchecked ( _UFirst, _ULast, begin ( ) + _Off );







        } else {
            const auto _Old_size = this -> _Mysize;
            for (; _UFirst != _ULast; ++ _UFirst ) {
                emplace_back ( * _UFirst );
            }

            _Orphan_range ( static_cast < size_type > ( _Saved_offset ), _Old_size );

            :: std :: rotate ( begin ( ) + _Saved_offset, begin ( ) + static_cast < difference_type > ( _Old_size ), end ( ) );
        }

        return begin ( ) + _Saved_offset;
    }




























    inline iterator erase ( const_iterator _Where_arg ) noexcept {
        iterator _Where = _Make_iter ( _Where_arg );
        difference_type _Off = _Where - begin ( );


        do { if ( end ( ) > _Where ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3404, 0, "%s", "vector<bool> erase iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x65\x72\x61\x73\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74" L"\x73\x69\x64\x65\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3404, 0 ); } while ( false ); }; } while ( false );
        :: std :: copy ( _Next_iter ( _Where ), end ( ), _Where );
        _Orphan_range ( static_cast < size_type > ( _Off ), this -> _Mysize );





        _Trim ( this -> _Mysize - 1 );
        return begin ( ) + _Off;
    }

    inline iterator erase ( const_iterator _First_arg, const_iterator _Last_arg ) noexcept
     {
        iterator _First = _Make_iter ( _First_arg );
        iterator _Last = _Make_iter ( _Last_arg );
        difference_type _Off = _First - begin ( );

        if ( _First != _Last ) {

            do { if ( _Last >= _First && end ( ) >= _Last ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3424, 0, "%s", "vector<bool> erase iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x65\x72\x61\x73\x65\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75\x74" L"\x73\x69\x64\x65\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3424, 0 ); } while ( false ); }; } while ( false );
            iterator _Next = :: std :: copy ( _Last, end ( ), _First );
            const auto _Newsize = static_cast < size_type > ( _Next - begin ( ) );
            _Orphan_range ( _Newsize, this -> _Mysize );
            _Trim ( _Newsize );





        }
        return begin ( ) + _Off;
    }

    inline void clear ( ) noexcept {
        this -> _Orphan_all ( );
        this -> _Myvec . clear ( );
        this -> _Mysize = 0;
    }

    inline void flip ( ) noexcept {
        for ( auto & _Elem : this -> _Myvec ) {
            _Elem = ~ _Elem;
        }

        _Trim ( this -> _Mysize );
    }

    inline void swap ( vector & _Right ) noexcept {
        if ( this != :: std :: addressof ( _Right ) ) {
            this -> _Swap_proxy_and_iterators ( _Right );
            this -> _Myvec . swap ( _Right . _Myvec );
            :: std :: swap ( this -> _Mysize, _Right . _Mysize );
        }
    }

    static inline void swap ( reference _Left, reference _Right ) noexcept {
        bool _Val = _Left;
        _Left = _Right;
        _Right = _Val;
    }

    friend hash < vector < bool, _Alloc >>;

    inline iterator _Insert_n ( const_iterator _Where, size_type _Count, const bool & _Val ) {
        size_type _Off = _Insert_x ( _Where, _Count );
        const auto _Result = begin ( ) + static_cast < difference_type > ( _Off );
        :: std :: fill_n ( _Result, _Count, _Val );
        return _Result;
    }

    inline size_type _Insert_x ( const_iterator _Where, size_type _Count ) {
        const difference_type _Off = _Where - begin ( );


        do { if ( end ( ) >= _Where ) { } else { do { ( void ) ( ( 1 != _CrtDbgReport ( 2, "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector", 3479, 0, "%s", "vector<bool> insert iterator outside range" ) ) || ( __debugbreak ( ), 0 ) ); :: _invalid_parameter ( L"\x22\x76\x65\x63\x74\x6f\x72\x3c\x62\x6f\x6f\x6c\x3e\x20\x69\x6e\x73\x65\x72\x74\x20\x69\x74\x65\x72\x61\x74\x6f\x72\x20\x6f\x75" L"\x74\x73\x69\x64\x65\x20\x72\x61\x6e\x67\x65\x22", L"", L"\x43\x3a\x5c\x50\x72\x6f\x67\x72\x61\x6d\x20\x46\x69\x6c\x65\x73\x5c\x4d\x69\x63\x72\x6f\x73\x6f\x66\x74\x20\x56\x69\x73\x75\x61" L"\x6c\x20\x53\x74\x75\x64\x69\x6f\x5c\x32\x30\x32\x32\x5c\x43\x6f\x6d\x6d\x75\x6e\x69\x74\x79\x5c\x56\x43\x5c\x54\x6f\x6f\x6c\x73" L"\x5c\x4d\x53\x56\x43\x5c\x31\x34\x2e\x33\x38\x2e\x33\x33\x31\x33\x30\x5c\x69\x6e\x63\x6c\x75\x64\x65\x5c\x76\x65\x63\x74\x6f\x72" L"", 3479, 0 ); } while ( false ); }; } while ( false );
        const bool _Realloc = capacity ( ) - size ( ) < _Count;


        if ( _Count != 0 ) {
            if ( max_size ( ) - size ( ) < _Count ) {
                _Xlen ( );
            }


            _Orphan_range ( static_cast < size_type > ( _Realloc ? 0 : _Off ), this -> _Mysize );

            this -> _Myvec . resize ( this -> _Nw ( size ( ) + _Count ), 0 );
            if ( empty ( ) ) {
                this -> _Mysize += _Count;
            } else {
                iterator _Oldend = end ( );
                this -> _Mysize += _Count;
                :: std :: copy_backward ( begin ( ) + _Off, _Oldend, end ( ) );
            }
        }

        return static_cast < size_type > ( _Off );
    }


    inline void _Orphan_range_unlocked ( size_type _Offlo, size_type _Offhi ) const {
        const auto _Base = this -> _Myvec . data ( );

        _Iterator_base12 * * _Pnext = & this -> _Myproxy -> _Myfirstiter;
        while ( * _Pnext ) {
            const auto & _Pnextiter = static_cast < const_iterator & > ( * * _Pnext );
            const auto _Temp = * _Pnext;
            if ( ! _Pnextiter . _Myptr ) {
                _Temp -> _Myproxy = nullptr;
                * _Pnext = _Temp -> _Mynextiter;
                continue;
            }
            const auto _Off =
                static_cast < size_type > ( const_iterator :: _VBITS_DIFF * ( _Pnextiter . _Myptr - _Base ) ) + _Pnextiter . _Myoff;
            if ( _Off < _Offlo || _Offhi < _Off ) {
                _Pnext = & _Temp -> _Mynextiter;
            } else {
                _Temp -> _Myproxy = nullptr;
                * _Pnext = _Temp -> _Mynextiter;
            }
        }
    }

    void _Orphan_range_locked ( size_type _Offlo, size_type _Offhi ) const {
        _Lockit _Lock ( 3 );
        _Orphan_range_unlocked ( _Offlo, _Offhi );
    }

    inline void _Orphan_range ( size_type _Offlo, size_type _Offhi ) const {





        {
            _Orphan_range_locked ( _Offlo, _Offhi );
        }
    }


    inline void _Trim ( size_type _Size ) {
        if ( max_size ( ) < _Size ) {
            _Xlen ( );
        }

        const size_type _Words = this -> _Nw ( _Size );
        if ( _Words < this -> _Myvec . size ( ) ) {
            this -> _Myvec . erase ( this -> _Myvec . begin ( ) + static_cast < difference_type > ( _Words ), this -> _Myvec . end ( ) );
        }

        this -> _Mysize = _Size;
        _Size %= _VBITS;
        if ( 0 < _Size ) {
            this -> _Myvec [ _Words - 1 ] &= ( static_cast < _Vbase > ( 1 ) << _Size ) - 1;
        }
    }

    [ [ noreturn ] ] static void _Xlen ( ) {
        _Xlength_error ( "vector<bool> too long" );
    }

    [ [ noreturn ] ] static void _Xran ( ) {
        _Xout_of_range ( "invalid vector<bool> subscript" );
    }
};
#line 3571 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _Alloc >
struct hash < vector < bool, _Alloc > > {
    using argument_type = vector < bool, _Alloc >;
    using result_type = size_t;

    [ [ nodiscard ] ] size_t operator ( ) ( const vector < bool, _Alloc > & _Keyval ) const noexcept {
        return _Hash_array_representation ( _Keyval . _Myvec . data ( ), _Keyval . _Myvec . size ( ) );
    }
};
#line 3588 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template< class _Alloc, bool _RequiresMutable> constexpr bool 
#line 3589
_Is_vb_iterator< _Vb_iterator< _Alloc> , _RequiresMutable>  = true; 
#line 3591
template< class _Alloc> constexpr bool 
#line 3592
_Is_vb_iterator< _Vb_const_iterator< _Alloc> , false>  = true; 
#line 3594
template < class _VbIt >
inline void _Fill_vbool ( _VbIt _First, const _VbIt _Last, const bool _Val ) noexcept {

    if ( _First == _Last ) {
        return;
    }

    _Vbase * _VbFirst = const_cast < _Vbase * > ( _First . _Myptr );
    _Vbase * const _VbLast = const_cast < _Vbase * > ( _Last . _Myptr );

    const auto _FirstSourceMask = static_cast < _Vbase > ( - 1 ) << _First . _Myoff;
    const auto _FirstDestMask = ~ _FirstSourceMask;
    const auto _FillVal = static_cast < _Vbase > ( _Val ? - 1 : 0 );

    if ( _VbFirst == _VbLast ) {

        const auto _LastSourceMask = static_cast < _Vbase > ( - 1 ) >> ( _VBITS - _Last . _Myoff );
        const auto _LastDestMask = ~ _LastSourceMask;
        const auto _SourceMask = _FirstSourceMask & _LastSourceMask;
        const auto _DestMask = _FirstDestMask | _LastDestMask;
        * _VbFirst = ( * _VbFirst & _DestMask ) | ( _FillVal & _SourceMask );
        return;
    }

    * _VbFirst = ( * _VbFirst & _FirstDestMask ) | ( _FillVal & _FirstSourceMask );
    ++ _VbFirst;








    {
        const auto _VbFirst_ch = reinterpret_cast < const char * > ( _VbFirst );
        const auto _VbLast_ch = reinterpret_cast < const char * > ( _VbLast );
        const auto _Count_ch = static_cast < size_t > ( _VbLast_ch - _VbFirst_ch );
        const auto _ValChar = static_cast < unsigned char > ( _Val ? - 1 : 0 );
        :: memset ( _VbFirst, _ValChar, _Count_ch );
        _VbFirst = _VbLast;
    }

    if ( _Last . _Myoff != 0 ) {
        const auto _LastSourceMask = static_cast < _Vbase > ( - 1 ) >> ( _VBITS - _Last . _Myoff );
        const auto _LastDestMask = ~ _LastSourceMask;
        * _VbFirst = ( * _VbFirst & _LastDestMask ) | ( _FillVal & _LastSourceMask );
    }
}
#line 3644 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\vector"
template < class _VbIt >
[ [ nodiscard ] ] inline _VbIt _Find_vbool ( _VbIt _First, const _VbIt _Last, const bool _Val ) noexcept {

    if ( _First == _Last ) {
        return _First;
    }

    const _Vbase * _VbFirst = _First . _Myptr;
    const _Vbase * const _VbLast = _Last . _Myptr;

    const auto _FirstSourceMask = static_cast < _Vbase > ( - 1 ) << _First . _Myoff;

    if ( _VbFirst == _VbLast ) {

        const auto _LastSourceMask = static_cast < _Vbase > ( - 1 ) >> ( _VBITS - _Last . _Myoff );
        const auto _SourceMask = _FirstSourceMask & _LastSourceMask;
        const auto _SelectVal = ( _Val ? * _VbFirst : ~ * _VbFirst ) & _SourceMask;
        const auto _Count = _Countr_zero ( _SelectVal );
        return _Count == _VBITS ? _Last : _First + static_cast < ptrdiff_t > ( _Count - _First . _Myoff );
    }

    const auto _FirstVal = ( _Val ? * _VbFirst : ~ * _VbFirst ) & _FirstSourceMask;
    const auto _FirstCount = _Countr_zero ( _FirstVal );
    if ( _FirstCount != _VBITS ) {
        return _First + static_cast < ptrdiff_t > ( _FirstCount - _First . _Myoff );
    }
    ++ _VbFirst;

    _Iter_diff_t < _VbIt > _TotalCount = static_cast < ptrdiff_t > ( _VBITS - _First . _Myoff );
    for (; _VbFirst != _VbLast; ++ _VbFirst, _TotalCount += _VBITS ) {
        const auto _SelectVal = _Val ? * _VbFirst : ~ * _VbFirst;
        const auto _Count = _Countr_zero ( _SelectVal );
        if ( _Count != _VBITS ) {
            return _First + ( _TotalCount + _Count );
        }
    }

    if ( _Last . _Myoff != 0 ) {
        const auto _LastSourceMask = static_cast < _Vbase > ( - 1 ) >> ( _VBITS - _Last . _Myoff );
        const auto _LastVal = ( _Val ? * _VbFirst : ~ * _VbFirst ) & _LastSourceMask;
        const auto _Count = _Countr_zero ( _LastVal );
        if ( _Count != _VBITS ) {
            return _First + ( _TotalCount + _Count );
        }
    }

    return _Last;
}
#line 3693
template < class _VbIt >
[ [ nodiscard ] ] inline _Iter_diff_t < _VbIt > _Count_vbool ( _VbIt _First, const _VbIt _Last, const bool _Val ) noexcept {
    if ( _First == _Last ) {
        return 0;
    }

    const _Vbase * _VbFirst = _First . _Myptr;
    const _Vbase * const _VbLast = _Last . _Myptr;

    const auto _FirstSourceMask = static_cast < _Vbase > ( - 1 ) << _First . _Myoff;

    if ( _VbFirst == _VbLast ) {

        const auto _LastSourceMask = static_cast < _Vbase > ( - 1 ) >> ( _VBITS - _Last . _Myoff );
        const auto _SourceMask = _FirstSourceMask & _LastSourceMask;
        const auto _SelectVal = ( _Val ? * _VbFirst : ~ * _VbFirst ) & _SourceMask;
        return _Popcount ( _SelectVal );
    }

    return _Select_popcount_impl < _Vbase > (
        [ _Last, _Val, _VbFirst, _VbLast, _FirstSourceMask ] ( auto _Popcount_impl ) mutable noexcept {
            const auto _FirstVal = ( _Val ? * _VbFirst : ~ * _VbFirst ) & _FirstSourceMask;
            _Iter_diff_t < _VbIt > _Count = _Popcount_impl ( _FirstVal );
            ++ _VbFirst;

            for (; _VbFirst != _VbLast; ++ _VbFirst ) {
                const auto _SelectVal = _Val ? * _VbFirst : ~ * _VbFirst;
                _Count += _Popcount_impl ( _SelectVal );
            }

            if ( _Last . _Myoff != 0 ) {
                const auto _LastSourceMask = static_cast < _Vbase > ( - 1 ) >> ( _VBITS - _Last . _Myoff );
                const auto _LastVal = ( _Val ? * _VbFirst : ~ * _VbFirst ) & _LastSourceMask;
                _Count += _Popcount_impl ( _LastVal );
            }

            return _Count;
        } );
}
#line 3740
}
#line 3744
#pragma warning(pop)
#pragma pack ( pop )
#line 31 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
extern const char *LODEPNG_VERSION_STRING; 
#line 16 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\string"
#pragma pack ( push, 8 )
#pragma warning(push, 3)
#pragma warning(disable : 4180 4412 4455 4494 4514 4574 4582 4583 4587 4588 4619 4623 4625 4626 4643 4648 4702 4793 4820 4988 5026 5027 5045 6294 4984 5053 )
#line 23
namespace std { 
#line 24
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > && _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str, const _Elem _Delim ) {

    using _Myis = basic_istream < _Elem, _Traits >;

    typename _Myis :: iostate _State = _Myis :: goodbit;
    bool _Changed = false;
    const typename _Myis :: sentry _Ok ( _Istr, true );

    if ( _Ok ) {
        try {
        _Str . erase ( );
        const typename _Traits :: int_type _Metadelim = _Traits :: to_int_type ( _Delim );
        typename _Traits :: int_type _Meta = _Istr . rdbuf ( ) -> sgetc ( );

        for (;; _Meta = _Istr . rdbuf ( ) -> snextc ( ) ) {
            if ( _Traits :: eq_int_type ( _Traits :: eof ( ), _Meta ) ) {
                _State |= _Myis :: eofbit;
                break;
            } else if ( _Traits :: eq_int_type ( _Meta, _Metadelim ) ) {
                _Changed = true;
                _Istr . rdbuf ( ) -> sbumpc ( );
                break;
            } else if ( _Str . max_size ( ) <= _Str . size ( ) ) {
                _State |= _Myis :: failbit;
                break;
            } else {
                _Str += _Traits :: to_char_type ( _Meta );
                _Changed = true;
            }
        }
        } catch ( ... ) { ( _Istr ) . setstate ( _Myis :: badbit, true ); }
    }

    if ( ! _Changed ) {
        _State |= _Myis :: failbit;
    }

    _Istr . setstate ( _State );
    return static_cast < basic_istream < _Elem, _Traits > & > ( _Istr );
}
#line 67
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > && _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str ) {

    return :: std :: getline ( :: std :: move ( _Istr ), _Str, _Istr . widen ( '\n' ) );
}
#line 74
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > & _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str, const _Elem _Delim ) {

    return :: std :: getline ( :: std :: move ( _Istr ), _Str, _Delim );
}
#line 81
template < class _Elem, class _Traits, class _Alloc >
basic_istream < _Elem, _Traits > & getline (
    basic_istream < _Elem, _Traits > & _Istr, basic_string < _Elem, _Traits, _Alloc > & _Str ) {

    return :: std :: getline ( :: std :: move ( _Istr ), _Str, _Istr . widen ( '\n' ) );
}
#line 88
[[nodiscard]] inline int stoi(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 89
int &_Errno_ref = *_errno(); 
#line 90
const char *_Ptr = _Str.c_str(); 
#line 91
char *_Eptr; 
#line 92
_Errno_ref = 0; 
#line 93
const long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 95
if (_Ptr == _Eptr) { 
#line 96
_Xinvalid_argument("invalid stoi argument"); 
#line 97
}  
#line 99
if (_Errno_ref == 34) { 
#line 100
_Xout_of_range("stoi argument out of range"); 
#line 101
}  
#line 103
if (_Idx) { 
#line 104
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 105
}  
#line 107
return static_cast< int>(_Ans); 
#line 108
} 
#line 110
[[nodiscard]] inline long stol(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 111
int &_Errno_ref = *_errno(); 
#line 112
const char *_Ptr = _Str.c_str(); 
#line 113
char *_Eptr; 
#line 114
_Errno_ref = 0; 
#line 115
const long _Ans = ::strtol(_Ptr, &_Eptr, _Base); 
#line 117
if (_Ptr == _Eptr) { 
#line 118
_Xinvalid_argument("invalid stol argument"); 
#line 119
}  
#line 121
if (_Errno_ref == 34) { 
#line 122
_Xout_of_range("stol argument out of range"); 
#line 123
}  
#line 125
if (_Idx) { 
#line 126
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 127
}  
#line 129
return _Ans; 
#line 130
} 
#line 132
[[nodiscard]] inline unsigned long stoul(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 133
int &_Errno_ref = *_errno(); 
#line 134
const char *_Ptr = _Str.c_str(); 
#line 135
char *_Eptr; 
#line 136
_Errno_ref = 0; 
#line 137
const unsigned long _Ans = ::strtoul(_Ptr, &_Eptr, _Base); 
#line 139
if (_Ptr == _Eptr) { 
#line 140
_Xinvalid_argument("invalid stoul argument"); 
#line 141
}  
#line 143
if (_Errno_ref == 34) { 
#line 144
_Xout_of_range("stoul argument out of range"); 
#line 145
}  
#line 147
if (_Idx) { 
#line 148
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 149
}  
#line 151
return _Ans; 
#line 152
} 
#line 154
[[nodiscard]] inline __int64 stoll(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 155
int &_Errno_ref = *_errno(); 
#line 156
const char *_Ptr = _Str.c_str(); 
#line 157
char *_Eptr; 
#line 158
_Errno_ref = 0; 
#line 159
const __int64 _Ans = ::strtoll(_Ptr, &_Eptr, _Base); 
#line 161
if (_Ptr == _Eptr) { 
#line 162
_Xinvalid_argument("invalid stoll argument"); 
#line 163
}  
#line 165
if (_Errno_ref == 34) { 
#line 166
_Xout_of_range("stoll argument out of range"); 
#line 167
}  
#line 169
if (_Idx) { 
#line 170
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 171
}  
#line 173
return _Ans; 
#line 174
} 
#line 176
[[nodiscard]] inline unsigned __int64 stoull(const string &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 177
int &_Errno_ref = *_errno(); 
#line 178
const char *_Ptr = _Str.c_str(); 
#line 179
char *_Eptr; 
#line 180
_Errno_ref = 0; 
#line 181
const unsigned __int64 _Ans = ::strtoull(_Ptr, &_Eptr, _Base); 
#line 183
if (_Ptr == _Eptr) { 
#line 184
_Xinvalid_argument("invalid stoull argument"); 
#line 185
}  
#line 187
if (_Errno_ref == 34) { 
#line 188
_Xout_of_range("stoull argument out of range"); 
#line 189
}  
#line 191
if (_Idx) { 
#line 192
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 193
}  
#line 195
return _Ans; 
#line 196
} 
#line 198
[[nodiscard]] inline float stof(const string &_Str, size_t *_Idx = 0) { 
#line 199
int &_Errno_ref = *_errno(); 
#line 200
const char *_Ptr = _Str.c_str(); 
#line 201
char *_Eptr; 
#line 202
_Errno_ref = 0; 
#line 203
const float _Ans = ::strtof(_Ptr, &_Eptr); 
#line 205
if (_Ptr == _Eptr) { 
#line 206
_Xinvalid_argument("invalid stof argument"); 
#line 207
}  
#line 209
if (_Errno_ref == 34) { 
#line 210
_Xout_of_range("stof argument out of range"); 
#line 211
}  
#line 213
if (_Idx) { 
#line 214
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 215
}  
#line 217
return _Ans; 
#line 218
} 
#line 220
[[nodiscard]] inline double stod(const string &_Str, size_t *_Idx = 0) { 
#line 221
int &_Errno_ref = *_errno(); 
#line 222
const char *_Ptr = _Str.c_str(); 
#line 223
char *_Eptr; 
#line 224
_Errno_ref = 0; 
#line 225
const double _Ans = ::strtod(_Ptr, &_Eptr); 
#line 227
if (_Ptr == _Eptr) { 
#line 228
_Xinvalid_argument("invalid stod argument"); 
#line 229
}  
#line 231
if (_Errno_ref == 34) { 
#line 232
_Xout_of_range("stod argument out of range"); 
#line 233
}  
#line 235
if (_Idx) { 
#line 236
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 237
}  
#line 239
return _Ans; 
#line 240
} 
#line 242
[[nodiscard]] inline long double stold(const string &_Str, size_t *_Idx = 0) { 
#line 243
int &_Errno_ref = *_errno(); 
#line 244
const char *_Ptr = _Str.c_str(); 
#line 245
char *_Eptr; 
#line 246
_Errno_ref = 0; 
#line 247
const long double _Ans = ::strtold(_Ptr, &_Eptr); 
#line 249
if (_Ptr == _Eptr) { 
#line 250
_Xinvalid_argument("invalid stold argument"); 
#line 251
}  
#line 253
if (_Errno_ref == 34) { 
#line 254
_Xout_of_range("stold argument out of range"); 
#line 255
}  
#line 257
if (_Idx) { 
#line 258
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 259
}  
#line 261
return _Ans; 
#line 262
} 
#line 264
[[nodiscard]] inline int stoi(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 265
int &_Errno_ref = *_errno(); 
#line 266
const __wchar_t *_Ptr = _Str.c_str(); 
#line 267
__wchar_t *_Eptr; 
#line 268
_Errno_ref = 0; 
#line 269
const long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 271
if (_Ptr == _Eptr) { 
#line 272
_Xinvalid_argument("invalid stoi argument"); 
#line 273
}  
#line 275
if (_Errno_ref == 34) { 
#line 276
_Xout_of_range("stoi argument out of range"); 
#line 277
}  
#line 279
if (_Idx) { 
#line 280
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 281
}  
#line 283
return static_cast< int>(_Ans); 
#line 284
} 
#line 286
[[nodiscard]] inline long stol(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 287
int &_Errno_ref = *_errno(); 
#line 288
const __wchar_t *_Ptr = _Str.c_str(); 
#line 289
__wchar_t *_Eptr; 
#line 290
_Errno_ref = 0; 
#line 291
const long _Ans = ::wcstol(_Ptr, &_Eptr, _Base); 
#line 293
if (_Ptr == _Eptr) { 
#line 294
_Xinvalid_argument("invalid stol argument"); 
#line 295
}  
#line 297
if (_Errno_ref == 34) { 
#line 298
_Xout_of_range("stol argument out of range"); 
#line 299
}  
#line 301
if (_Idx) { 
#line 302
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 303
}  
#line 305
return _Ans; 
#line 306
} 
#line 308
[[nodiscard]] inline unsigned long stoul(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 309
int &_Errno_ref = *_errno(); 
#line 310
const __wchar_t *_Ptr = _Str.c_str(); 
#line 311
__wchar_t *_Eptr; 
#line 312
_Errno_ref = 0; 
#line 313
const unsigned long _Ans = ::wcstoul(_Ptr, &_Eptr, _Base); 
#line 315
if (_Ptr == _Eptr) { 
#line 316
_Xinvalid_argument("invalid stoul argument"); 
#line 317
}  
#line 319
if (_Errno_ref == 34) { 
#line 320
_Xout_of_range("stoul argument out of range"); 
#line 321
}  
#line 323
if (_Idx) { 
#line 324
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 325
}  
#line 327
return _Ans; 
#line 328
} 
#line 330
[[nodiscard]] inline __int64 stoll(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 331
int &_Errno_ref = *_errno(); 
#line 332
const __wchar_t *_Ptr = _Str.c_str(); 
#line 333
__wchar_t *_Eptr; 
#line 334
_Errno_ref = 0; 
#line 335
const __int64 _Ans = ::wcstoll(_Ptr, &_Eptr, _Base); 
#line 337
if (_Ptr == _Eptr) { 
#line 338
_Xinvalid_argument("invalid stoll argument"); 
#line 339
}  
#line 341
if (_Errno_ref == 34) { 
#line 342
_Xout_of_range("stoll argument out of range"); 
#line 343
}  
#line 345
if (_Idx) { 
#line 346
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 347
}  
#line 349
return _Ans; 
#line 350
} 
#line 352
[[nodiscard]] inline unsigned __int64 stoull(const wstring &_Str, size_t *_Idx = 0, int _Base = 10) { 
#line 353
int &_Errno_ref = *_errno(); 
#line 354
const __wchar_t *_Ptr = _Str.c_str(); 
#line 355
__wchar_t *_Eptr; 
#line 356
_Errno_ref = 0; 
#line 357
const unsigned __int64 _Ans = ::wcstoull(_Ptr, &_Eptr, _Base); 
#line 359
if (_Ptr == _Eptr) { 
#line 360
_Xinvalid_argument("invalid stoull argument"); 
#line 361
}  
#line 363
if (_Errno_ref == 34) { 
#line 364
_Xout_of_range("stoull argument out of range"); 
#line 365
}  
#line 367
if (_Idx) { 
#line 368
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 369
}  
#line 371
return _Ans; 
#line 372
} 
#line 374
[[nodiscard]] inline float stof(const wstring &_Str, size_t *_Idx = 0) { 
#line 375
int &_Errno_ref = *_errno(); 
#line 376
const __wchar_t *_Ptr = _Str.c_str(); 
#line 377
__wchar_t *_Eptr; 
#line 378
_Errno_ref = 0; 
#line 379
const float _Ans = ::wcstof(_Ptr, &_Eptr); 
#line 381
if (_Ptr == _Eptr) { 
#line 382
_Xinvalid_argument("invalid stof argument"); 
#line 383
}  
#line 385
if (_Errno_ref == 34) { 
#line 386
_Xout_of_range("stof argument out of range"); 
#line 387
}  
#line 389
if (_Idx) { 
#line 390
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 391
}  
#line 393
return _Ans; 
#line 394
} 
#line 396
[[nodiscard]] inline double stod(const wstring &_Str, size_t *_Idx = 0) { 
#line 397
int &_Errno_ref = *_errno(); 
#line 398
const __wchar_t *_Ptr = _Str.c_str(); 
#line 399
__wchar_t *_Eptr; 
#line 400
_Errno_ref = 0; 
#line 401
const double _Ans = ::wcstod(_Ptr, &_Eptr); 
#line 403
if (_Ptr == _Eptr) { 
#line 404
_Xinvalid_argument("invalid stod argument"); 
#line 405
}  
#line 407
if (_Errno_ref == 34) { 
#line 408
_Xout_of_range("stod argument out of range"); 
#line 409
}  
#line 411
if (_Idx) { 
#line 412
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 413
}  
#line 415
return _Ans; 
#line 416
} 
#line 418
[[nodiscard]] inline long double stold(const wstring &_Str, size_t *_Idx = 0) { 
#line 419
int &_Errno_ref = *_errno(); 
#line 420
const __wchar_t *_Ptr = _Str.c_str(); 
#line 421
__wchar_t *_Eptr; 
#line 422
_Errno_ref = 0; 
#line 423
const long double _Ans = ::wcstold(_Ptr, &_Eptr); 
#line 425
if (_Ptr == _Eptr) { 
#line 426
_Xinvalid_argument("invalid stold argument"); 
#line 427
}  
#line 429
if (_Errno_ref == 34) { 
#line 430
_Xout_of_range("stold argument out of range"); 
#line 431
}  
#line 433
if (_Idx) { 
#line 434
(*_Idx) = (static_cast< size_t>(_Eptr - _Ptr)); 
#line 435
}  
#line 437
return _Ans; 
#line 438
} 
#line 440
template < class _Elem, class _UTy >
[ [ nodiscard ] ] _Elem * _UIntegral_to_buff ( _Elem * _RNext, _UTy _UVal ) {

    static_assert ( is_unsigned_v < _UTy >, "_UTy must be unsigned" );


    auto _UVal_trunc = _UVal;


















    do {
        * -- _RNext = static_cast < _Elem > ( '0' + _UVal_trunc % 10 );
        _UVal_trunc /= 10;
    } while ( _UVal_trunc != 0 );
    return _RNext;
}
#line 472 "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.38.33130\\include\\string"
template < class _Elem, class _Ty >
[ [ nodiscard ] ] basic_string < _Elem > _Integral_to_string ( const _Ty _Val ) {

    static_assert ( is_integral_v < _Ty >, "_Ty must be integral" );
    using _UTy = make_unsigned_t < _Ty >;
    _Elem _Buff [ 21 ];
    _Elem * const _Buff_end = :: std :: end ( _Buff );
    _Elem * _RNext = _Buff_end;
    const auto _UVal = static_cast < _UTy > ( _Val );
    if ( _Val < 0 ) {
        _RNext = _UIntegral_to_buff ( _RNext, 0 - _UVal );
        * -- _RNext = '-';
    } else {
        _RNext = _UIntegral_to_buff ( _RNext, _UVal );
    }

    return basic_string < _Elem > ( _RNext, _Buff_end );
}
#line 492
template < class _Elem, class _Ty >
[ [ nodiscard ] ] basic_string < _Elem > _UIntegral_to_string ( const _Ty _Val ) {

    static_assert ( is_integral_v < _Ty >, "_Ty must be integral" );
    static_assert ( is_unsigned_v < _Ty >, "_Ty must be unsigned" );
    _Elem _Buff [ 21 ];
    _Elem * const _Buff_end = :: std :: end ( _Buff );
    _Elem * const _RNext = _UIntegral_to_buff ( _Buff_end, _Val );
    return basic_string < _Elem > ( _RNext, _Buff_end );
}
#line 503
[[nodiscard]] inline string to_string(int _Val) { 
#line 504
return _Integral_to_string< char> (_Val); 
#line 505
} 
#line 507
[[nodiscard]] inline string to_string(unsigned _Val) { 
#line 508
return _UIntegral_to_string< char> (_Val); 
#line 509
} 
#line 511
[[nodiscard]] inline string to_string(long _Val) { 
#line 512
return _Integral_to_string< char> (_Val); 
#line 513
} 
#line 515
[[nodiscard]] inline string to_string(unsigned long _Val) { 
#line 516
return _UIntegral_to_string< char> (_Val); 
#line 517
} 
#line 519
[[nodiscard]] inline string to_string(__int64 _Val) { 
#line 520
return _Integral_to_string< char> (_Val); 
#line 521
} 
#line 523
[[nodiscard]] inline string to_string(unsigned __int64 _Val) { 
#line 524
return _UIntegral_to_string< char> (_Val); 
#line 525
} 
#line 527
[[nodiscard]] inline string to_string(double _Val) { 
#line 528
const auto _Len = static_cast< size_t>(::_scprintf("%f", _Val)); 
#line 529
string _Str(_Len, '\000'); 
#line 530
::sprintf_s(&_Str[0], _Len + (1), "%f", _Val); 
#line 531
return _Str; 
#line 532
} 
#line 534
[[nodiscard]] inline string to_string(float _Val) { 
#line 535
return ::std::to_string(static_cast< double>(_Val)); 
#line 536
} 
#line 538
[[nodiscard]] inline string to_string(long double _Val) { 
#line 539
return ::std::to_string(static_cast< double>(_Val)); 
#line 540
} 
#line 542
[[nodiscard]] inline wstring to_wstring(int _Val) { 
#line 543
return _Integral_to_string< __wchar_t> (_Val); 
#line 544
} 
#line 546
[[nodiscard]] inline wstring to_wstring(unsigned _Val) { 
#line 547
return _UIntegral_to_string< __wchar_t> (_Val); 
#line 548
} 
#line 550
[[nodiscard]] inline wstring to_wstring(long _Val) { 
#line 551
return _Integral_to_string< __wchar_t> (_Val); 
#line 552
} 
#line 554
[[nodiscard]] inline wstring to_wstring(unsigned long _Val) { 
#line 555
return _UIntegral_to_string< __wchar_t> (_Val); 
#line 556
} 
#line 558
[[nodiscard]] inline wstring to_wstring(__int64 _Val) { 
#line 559
return _Integral_to_string< __wchar_t> (_Val); 
#line 560
} 
#line 562
[[nodiscard]] inline wstring to_wstring(unsigned __int64 _Val) { 
#line 563
return _UIntegral_to_string< __wchar_t> (_Val); 
#line 564
} 
#line 566
[[nodiscard]] inline wstring to_wstring(double _Val) { 
#line 567
const auto _Len = static_cast< size_t>(::_scwprintf(L"\x25\x66", _Val)); 
#line 568
wstring _Str(_Len, L'\x0'); 
#line 569
::swprintf_s(&_Str[0], _Len + (1), L"\x25\x66", _Val); 
#line 570
return _Str; 
#line 571
} 
#line 573
[[nodiscard]] inline wstring to_wstring(float _Val) { 
#line 574
return ::std::to_wstring(static_cast< double>(_Val)); 
#line 575
} 
#line 577
[[nodiscard]] inline wstring to_wstring(long double _Val) { 
#line 578
return ::std::to_wstring(static_cast< double>(_Val)); 
#line 579
} 
#line 580
}
#line 584
#pragma warning(pop)
#pragma pack ( pop )
#line 133 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef 
#line 121
enum LodePNGColorType { 
#line 122
LCT_GREY, 
#line 123
LCT_RGB = 2, 
#line 124
LCT_PALETTE, 
#line 125
LCT_GREY_ALPHA, 
#line 126
LCT_RGBA = 6, 
#line 132
LCT_MAX_OCTET_VALUE = 255
#line 133
} LodePNGColorType; 
#line 151
unsigned lodepng_decode_memory(unsigned char ** out, unsigned * w, unsigned * h, const unsigned char * in, size_t insize, LodePNGColorType colortype, unsigned bitdepth); 
#line 156
unsigned lodepng_decode32(unsigned char ** out, unsigned * w, unsigned * h, const unsigned char * in, size_t insize); 
#line 160
unsigned lodepng_decode24(unsigned char ** out, unsigned * w, unsigned * h, const unsigned char * in, size_t insize); 
#line 170
unsigned lodepng_decode_file(unsigned char ** out, unsigned * w, unsigned * h, const char * filename, LodePNGColorType colortype, unsigned bitdepth); 
#line 178
unsigned lodepng_decode32_file(unsigned char ** out, unsigned * w, unsigned * h, const char * filename); 
#line 185
unsigned lodepng_decode24_file(unsigned char ** out, unsigned * w, unsigned * h, const char * filename); 
#line 208 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_encode_memory(unsigned char ** out, size_t * outsize, const unsigned char * image, unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth); 
#line 213
unsigned lodepng_encode32(unsigned char ** out, size_t * outsize, const unsigned char * image, unsigned w, unsigned h); 
#line 217
unsigned lodepng_encode24(unsigned char ** out, size_t * outsize, const unsigned char * image, unsigned w, unsigned h); 
#line 229
unsigned lodepng_encode_file(const char * filename, const unsigned char * image, unsigned w, unsigned h, LodePNGColorType colortype, unsigned bitdepth); 
#line 237
unsigned lodepng_encode32_file(const char * filename, const unsigned char * image, unsigned w, unsigned h); 
#line 244
unsigned lodepng_encode24_file(const char * filename, const unsigned char * image, unsigned w, unsigned h); 
#line 251 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
namespace lodepng { 
#line 255
unsigned decode(std::vector< unsigned char>  & out, unsigned & w, unsigned & h, const unsigned char * in, size_t insize, LodePNGColorType colortype = LCT_RGBA, unsigned bitdepth = 8); 
#line 258
unsigned decode(std::vector< unsigned char>  & out, unsigned & w, unsigned & h, const std::vector< unsigned char>  & in, LodePNGColorType colortype = LCT_RGBA, unsigned bitdepth = 8); 
#line 269
unsigned decode(std::vector< unsigned char>  & out, unsigned & w, unsigned & h, const std::string & filename, LodePNGColorType colortype = LCT_RGBA, unsigned bitdepth = 8); 
#line 278 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned encode(std::vector< unsigned char>  & out, const unsigned char * in, unsigned w, unsigned h, LodePNGColorType colortype = LCT_RGBA, unsigned bitdepth = 8); 
#line 281
unsigned encode(std::vector< unsigned char>  & out, const std::vector< unsigned char>  & in, unsigned w, unsigned h, LodePNGColorType colortype = LCT_RGBA, unsigned bitdepth = 8); 
#line 294
unsigned encode(const std::string & filename, const unsigned char * in, unsigned w, unsigned h, LodePNGColorType colortype = LCT_RGBA, unsigned bitdepth = 8); 
#line 297
unsigned encode(const std::string & filename, const std::vector< unsigned char>  & in, unsigned w, unsigned h, LodePNGColorType colortype = LCT_RGBA, unsigned bitdepth = 8); 
#line 302 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
}
#line 308 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
const char *lodepng_error_text(unsigned code); 
#line 313 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef struct LodePNGDecompressSettings LodePNGDecompressSettings; 
#line 314
struct LodePNGDecompressSettings { 
#line 316
unsigned ignore_adler32; 
#line 317
unsigned ignore_nlen; 
#line 324
size_t max_output_size; 
#line 328
unsigned (*custom_zlib)(unsigned char **, size_t *, const unsigned char *, size_t, const LodePNGDecompressSettings *); 
#line 334
unsigned (*custom_inflate)(unsigned char **, size_t *, const unsigned char *, size_t, const LodePNGDecompressSettings *); 
#line 338
const void *custom_context; 
#line 339
}; 
#line 341
extern const LodePNGDecompressSettings lodepng_default_decompress_settings; 
#line 342
void lodepng_decompress_settings_init(LodePNGDecompressSettings * settings); 
#line 350 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef struct LodePNGCompressSettings LodePNGCompressSettings; 
#line 351
struct LodePNGCompressSettings { 
#line 353
unsigned btype; 
#line 354
unsigned use_lz77; 
#line 355
unsigned windowsize; 
#line 356
unsigned minmatch; 
#line 357
unsigned nicematch; 
#line 358
unsigned lazymatching; 
#line 361
unsigned (*custom_zlib)(unsigned char **, size_t *, const unsigned char *, size_t, const LodePNGCompressSettings *); 
#line 367
unsigned (*custom_deflate)(unsigned char **, size_t *, const unsigned char *, size_t, const LodePNGCompressSettings *); 
#line 371
const void *custom_context; 
#line 372
}; 
#line 374
extern const LodePNGCompressSettings lodepng_default_compress_settings; 
#line 375
void lodepng_compress_settings_init(LodePNGCompressSettings * settings); 
#line 424 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef 
#line 384
struct LodePNGColorMode { 
#line 386
LodePNGColorType colortype; 
#line 387
unsigned bitdepth; 
#line 406
unsigned char *palette; 
#line 407
size_t palettesize; 
#line 420
unsigned key_defined; 
#line 421
unsigned key_r; 
#line 422
unsigned key_g; 
#line 423
unsigned key_b; 
#line 424
} LodePNGColorMode; 
#line 427
void lodepng_color_mode_init(LodePNGColorMode * info); 
#line 428
void lodepng_color_mode_cleanup(LodePNGColorMode * info); 
#line 430
unsigned lodepng_color_mode_copy(LodePNGColorMode * dest, const LodePNGColorMode * source); 
#line 432
LodePNGColorMode lodepng_color_mode_make(LodePNGColorType colortype, unsigned bitdepth); 
#line 434
void lodepng_palette_clear(LodePNGColorMode * info); 
#line 436
unsigned lodepng_palette_add(LodePNGColorMode * info, unsigned char r, unsigned char g, unsigned char b, unsigned char a); 
#line 440
unsigned lodepng_get_bpp(const LodePNGColorMode * info); 
#line 443
unsigned lodepng_get_channels(const LodePNGColorMode * info); 
#line 445
unsigned lodepng_is_greyscale_type(const LodePNGColorMode * info); 
#line 447
unsigned lodepng_is_alpha_type(const LodePNGColorMode * info); 
#line 449
unsigned lodepng_is_palette_type(const LodePNGColorMode * info); 
#line 452
unsigned lodepng_has_palette_alpha(const LodePNGColorMode * info); 
#line 460
unsigned lodepng_can_have_alpha(const LodePNGColorMode * info); 
#line 462
size_t lodepng_get_raw_size(unsigned w, unsigned h, const LodePNGColorMode * color); 
#line 473
typedef 
#line 466
struct LodePNGTime { 
#line 467
unsigned year; 
#line 468
unsigned month; 
#line 469
unsigned day; 
#line 470
unsigned hour; 
#line 471
unsigned minute; 
#line 472
unsigned second; 
#line 473
} LodePNGTime; 
#line 689 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef 
#line 477 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
struct LodePNGInfo { 
#line 479
unsigned compression_method; 
#line 480
unsigned filter_method; 
#line 481
unsigned interlace_method; 
#line 482
LodePNGColorMode color; 
#line 510
unsigned background_defined; 
#line 511
unsigned background_r; 
#line 512
unsigned background_g; 
#line 513
unsigned background_b; 
#line 535
size_t text_num; 
#line 536
char **text_keys; 
#line 537
char **text_strings; 
#line 547
size_t itext_num; 
#line 548
char **itext_keys; 
#line 549
char **itext_langtags; 
#line 550
char **itext_transkeys; 
#line 551
char **itext_strings; 
#line 554
unsigned time_defined; 
#line 555
LodePNGTime time; 
#line 558
unsigned phys_defined; 
#line 559
unsigned phys_x; 
#line 560
unsigned phys_y; 
#line 561
unsigned phys_unit; 
#line 574
unsigned gama_defined; 
#line 575
unsigned gama_gamma; 
#line 578
unsigned chrm_defined; 
#line 579
unsigned chrm_white_x; 
#line 580
unsigned chrm_white_y; 
#line 581
unsigned chrm_red_x; 
#line 582
unsigned chrm_red_y; 
#line 583
unsigned chrm_green_x; 
#line 584
unsigned chrm_green_y; 
#line 585
unsigned chrm_blue_x; 
#line 586
unsigned chrm_blue_y; 
#line 593
unsigned srgb_defined; 
#line 594
unsigned srgb_intent; 
#line 617
unsigned iccp_defined; 
#line 618
char *iccp_name; 
#line 624
unsigned char *iccp_profile; 
#line 625
unsigned iccp_profile_size; 
#line 660
unsigned sbit_defined; 
#line 661
unsigned sbit_r; 
#line 662
unsigned sbit_g; 
#line 663
unsigned sbit_b; 
#line 664
unsigned sbit_a; 
#line 686
unsigned char *unknown_chunks_data[3]; 
#line 687
size_t unknown_chunks_size[3]; 
#line 689 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
} LodePNGInfo; 
#line 692
void lodepng_info_init(LodePNGInfo * info); 
#line 693
void lodepng_info_cleanup(LodePNGInfo * info); 
#line 695
unsigned lodepng_info_copy(LodePNGInfo * dest, const LodePNGInfo * source); 
#line 698
unsigned lodepng_add_text(LodePNGInfo * info, const char * key, const char * str); 
#line 699
void lodepng_clear_text(LodePNGInfo * info); 
#line 701
unsigned lodepng_add_itext(LodePNGInfo * info, const char * key, const char * langtag, const char * transkey, const char * str); 
#line 703
void lodepng_clear_itext(LodePNGInfo * info); 
#line 706
unsigned lodepng_set_icc(LodePNGInfo * info, const char * name, const unsigned char * profile, unsigned profile_size); 
#line 707
void lodepng_clear_icc(LodePNGInfo * info); 
#line 721 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_convert(unsigned char * out, const unsigned char * in, const LodePNGColorMode * mode_out, const LodePNGColorMode * mode_in, unsigned w, unsigned h); 
#line 760 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef 
#line 730 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
struct LodePNGDecoderSettings { 
#line 731
LodePNGDecompressSettings zlibsettings; 
#line 734
unsigned ignore_crc; 
#line 735
unsigned ignore_critical; 
#line 736
unsigned ignore_end; 
#line 742
unsigned color_convert; 
#line 745
unsigned read_text_chunks; 
#line 748
unsigned remember_unknown_chunks; 
#line 753
size_t max_text_size; 
#line 758
size_t max_icc_size; 
#line 760 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
} LodePNGDecoderSettings; 
#line 762
void lodepng_decoder_settings_init(LodePNGDecoderSettings * settings); 
#line 787 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef 
#line 767
enum LodePNGFilterStrategy { 
#line 769
LFS_ZERO, 
#line 771
LFS_ONE, 
#line 772
LFS_TWO, 
#line 773
LFS_THREE, 
#line 774
LFS_FOUR, 
#line 776
LFS_MINSUM, 
#line 779
LFS_ENTROPY, 
#line 784
LFS_BRUTE_FORCE, 
#line 786
LFS_PREDEFINED
#line 787
} LodePNGFilterStrategy; 
#line 807
typedef 
#line 792
struct LodePNGColorStats { 
#line 793
unsigned colored; 
#line 794
unsigned key; 
#line 795
unsigned short key_r; 
#line 796
unsigned short key_g; 
#line 797
unsigned short key_b; 
#line 798
unsigned alpha; 
#line 799
unsigned numcolors; 
#line 800
unsigned char palette[1024]; 
#line 801
unsigned bits; 
#line 802
size_t numpixels; 
#line 805
unsigned allow_palette; 
#line 806
unsigned allow_greyscale; 
#line 807
} LodePNGColorStats; 
#line 809
void lodepng_color_stats_init(LodePNGColorStats * stats); 
#line 813
unsigned lodepng_compute_color_stats(LodePNGColorStats * stats, const unsigned char * image, unsigned w, unsigned h, const LodePNGColorMode * mode_in); 
#line 850 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef 
#line 818 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
struct LodePNGEncoderSettings { 
#line 819
LodePNGCompressSettings zlibsettings; 
#line 821
unsigned auto_convert; 
#line 827
unsigned filter_palette_zero; 
#line 830
LodePNGFilterStrategy filter_strategy; 
#line 835
const unsigned char *predefined_filters; 
#line 843
unsigned force_palette; 
#line 846
unsigned add_id; 
#line 848
unsigned text_compression; 
#line 850 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
} LodePNGEncoderSettings; 
#line 852
void lodepng_encoder_settings_init(LodePNGEncoderSettings * settings); 
#line 868 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
typedef 
#line 858 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
struct LodePNGState { 
#line 860
LodePNGDecoderSettings decoder; 
#line 863 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
LodePNGEncoderSettings encoder; 
#line 865 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
LodePNGColorMode info_raw; 
#line 866
LodePNGInfo info_png; 
#line 867
unsigned error; 
#line 868
} LodePNGState; 
#line 871
void lodepng_state_init(LodePNGState * state); 
#line 872
void lodepng_state_cleanup(LodePNGState * state); 
#line 873
void lodepng_state_copy(LodePNGState * dest, const LodePNGState * source); 
#line 881 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_decode(unsigned char ** out, unsigned * w, unsigned * h, LodePNGState * state, const unsigned char * in, size_t insize); 
#line 890
unsigned lodepng_inspect(unsigned * w, unsigned * h, LodePNGState * state, const unsigned char * in, size_t insize); 
#line 907 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_inspect_chunk(LodePNGState * state, size_t pos, const unsigned char * in, size_t insize); 
#line 912
unsigned lodepng_encode(unsigned char ** out, size_t * outsize, const unsigned char * image, unsigned w, unsigned h, LodePNGState * state); 
#line 946 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_chunk_length(const unsigned char * chunk); 
#line 949
void lodepng_chunk_type(char  type[5], const unsigned char * chunk); 
#line 952
unsigned char lodepng_chunk_type_equals(const unsigned char * chunk, const char * type); 
#line 955
unsigned char lodepng_chunk_ancillary(const unsigned char * chunk); 
#line 958
unsigned char lodepng_chunk_private(const unsigned char * chunk); 
#line 961
unsigned char lodepng_chunk_safetocopy(const unsigned char * chunk); 
#line 964
unsigned char *lodepng_chunk_data(unsigned char * chunk); 
#line 965
const unsigned char *lodepng_chunk_data_const(const unsigned char * chunk); 
#line 968
unsigned lodepng_chunk_check_crc(const unsigned char * chunk); 
#line 971
void lodepng_chunk_generate_crc(unsigned char * chunk); 
#line 984
unsigned char *lodepng_chunk_next(unsigned char * chunk, unsigned char * end); 
#line 985
const unsigned char *lodepng_chunk_next_const(const unsigned char * chunk, const unsigned char * end); 
#line 988
unsigned char *lodepng_chunk_find(unsigned char * chunk, unsigned char * end, const char  type[5]); 
#line 989
const unsigned char *lodepng_chunk_find_const(const unsigned char * chunk, const unsigned char * end, const char  type[5]); 
#line 996
unsigned lodepng_chunk_append(unsigned char ** out, size_t * outsize, const unsigned char * chunk); 
#line 1004
unsigned lodepng_chunk_create(unsigned char ** out, size_t * outsize, size_t length, const char * type, const unsigned char * data); 
#line 1009
unsigned lodepng_crc32(const unsigned char * buf, size_t len); 
#line 1022 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_inflate(unsigned char ** out, size_t * outsize, const unsigned char * in, size_t insize, const LodePNGDecompressSettings * settings); 
#line 1032
unsigned lodepng_zlib_decompress(unsigned char ** out, size_t * outsize, const unsigned char * in, size_t insize, const LodePNGDecompressSettings * settings); 
#line 1045 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_zlib_compress(unsigned char ** out, size_t * outsize, const unsigned char * in, size_t insize, const LodePNGCompressSettings * settings); 
#line 1053
unsigned lodepng_huffman_code_lengths(unsigned * lengths, const unsigned * frequencies, size_t numcodes, unsigned maxbitlen); 
#line 1057
unsigned lodepng_deflate(unsigned char ** out, size_t * outsize, const unsigned char * in, size_t insize, const LodePNGCompressSettings * settings); 
#line 1076 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned lodepng_load_file(unsigned char ** out, size_t * outsize, const char * filename); 
#line 1089
unsigned lodepng_save_file(const unsigned char * buffer, size_t buffersize, const char * filename); 
#line 1094 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
namespace lodepng { 
#line 1096
class State : public LodePNGState { 
#line 1098
public: State(); 
#line 1099
State(const State & other); 
#line 1100
~State(); 
#line 1101
State &operator=(const State & other); 
#line 1102
}; 
#line 1106
unsigned decode(std::vector< unsigned char>  & out, unsigned & w, unsigned & h, State & state, const unsigned char * in, size_t insize); 
#line 1109
unsigned decode(std::vector< unsigned char>  & out, unsigned & w, unsigned & h, State & state, const std::vector< unsigned char>  & in); 
#line 1116 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned encode(std::vector< unsigned char>  & out, const unsigned char * in, unsigned w, unsigned h, State & state); 
#line 1119
unsigned encode(std::vector< unsigned char>  & out, const std::vector< unsigned char>  & in, unsigned w, unsigned h, State & state); 
#line 1132 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned load_file(std::vector< unsigned char>  & buffer, const std::string & filename); 
#line 1141
unsigned save_file(const std::vector< unsigned char>  & buffer, const std::string & filename); 
#line 1148 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned decompress(std::vector< unsigned char>  & out, const unsigned char * in, size_t insize, const LodePNGDecompressSettings & settings = lodepng_default_decompress_settings); 
#line 1152
unsigned decompress(std::vector< unsigned char>  & out, const std::vector< unsigned char>  & in, const LodePNGDecompressSettings & settings = lodepng_default_decompress_settings); 
#line 1158 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
unsigned compress(std::vector< unsigned char>  & out, const unsigned char * in, size_t insize, const LodePNGCompressSettings & settings = lodepng_default_compress_settings); 
#line 1162
unsigned compress(std::vector< unsigned char>  & out, const std::vector< unsigned char>  & in, const LodePNGCompressSettings & settings = lodepng_default_compress_settings); 
#line 1166 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\./include/lodepng.h"
}
#line 12 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\kernel.cu"
struct Point { 
#line 13
float x, y; 
#line 14
}; 
#line 16
 __noinline__ void voronoiKernel(Point *seeds, int num_seeds, unsigned char *output) ;
#if 0
#line 16
{ 
#line 17
int x = ((__device_builtin_variable_blockIdx.x) * (__device_builtin_variable_blockDim.x)) + (__device_builtin_variable_threadIdx.x); 
#line 18
int y = ((__device_builtin_variable_blockIdx.y) * (__device_builtin_variable_blockDim.y)) + (__device_builtin_variable_threadIdx.y); 
#line 19
int idx = (y * 1024) + x; 
#line 21
if ((x >= 1024) || (y >= 1024)) { return; }  
#line 23
float minDist = ((1e+20)); 
#line 24
int minSeedIdx = (-1); 
#line 26
for (int i = 0; i < num_seeds; ++i) { 
#line 27
float dist = ((x - ((seeds[i]).x)) * (x - ((seeds[i]).x))) + ((y - ((seeds[i]).y)) * (y - ((seeds[i]).y))); 
#line 28
if (dist < minDist) { 
#line 29
minDist = dist; 
#line 30
minSeedIdx = i; 
#line 31
}  
#line 32
}  
#line 34
int color = minSeedIdx % 256; 
#line 35
(output[(4 * idx) + 0]) = color; 
#line 36
(output[(4 * idx) + 1]) = color; 
#line 37
(output[(4 * idx) + 2]) = color; 
#line 38
(output[(4 * idx) + 3]) = (255); 
#line 39
} 
#endif
#line 41 "C:\\Users\\Sebas\\Documents\\code\\ParaleloAvanzado\\AdvancedParallelProgramming\\Voronoi\\Voronoi\\kernel.cu"
void saveImage(const std::vector< unsigned char>  &image, const std::string &filename) { 
#line 42
unsigned error = lodepng::encode(filename, image, 1024, 1024); 
#line 43
if (error) { 
#line 44
(((((std::cerr << ("Error encoding PNG: "))) << (lodepng_error_text(error)))) << (std::endl)); 
#line 45
}  
#line 46
} 
#line 48
int main() { 
#line 49
std::vector< Point>  h_seeds(10); 
#line 50
std::vector< unsigned char>  h_output((1024 * 1024) * 4); 
#line 53
for (int i = 0; i < 10; ++i) { 
#line 54
h_seeds[i] = {(float)(rand() % 1024), (float)(rand() % 1024)}; 
#line 55
}  
#line 57
Point *d_seeds; 
#line 58
unsigned char *d_output; 
#line 60
cudaMalloc(&d_seeds, (10) * sizeof(Point)); 
#line 61
cudaMalloc(&d_output, ((1024 * 1024) * 4) * sizeof(unsigned char)); 
#line 63
cudaMemcpy(d_seeds, h_seeds.data(), (10) * sizeof(Point), cudaMemcpyHostToDevice); 
#line 65
dim3 blockSize(16, 16); 
#line 66
dim3 gridSize((((1024) + (blockSize.x)) - (1)) / (blockSize.x), (((1024) + (blockSize.y)) - (1)) / (blockSize.y)); 
#line 68
(__cudaPushCallConfiguration(gridSize, blockSize)) ? (void)0 : voronoiKernel(d_seeds, 10, d_output); 
#line 69
cudaDeviceSynchronize(); 
#line 71
cudaMemcpy(h_output.data(), d_output, ((1024 * 1024) * 4) * sizeof(unsigned char), cudaMemcpyDeviceToHost); 
#line 74
saveImage(h_output, "voronoi.png"); 
#line 77
cudaFree(d_seeds); 
#line 78
cudaFree(d_output); 
#line 80
return 0; 
#line 81
} 
#line 1 "kernel.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__af638eb6_9_kernel_cu_ec75798e
#ifdef _NV_ANON_NAMESPACE
#endif
#pragma pack()
#line 1 "kernel.cudafe1.stub.c"
#include "kernel.cudafe1.stub.c"
#line 1 "kernel.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
extern "C" {
#pragma data_seg(".nvHRKI")
__declspec(allocate(".nvHRKI")) __declspec(selectany) extern const unsigned char hostRefKernelArrayInternalLinkage[] = {
0x0};
#pragma data_seg()
}
extern "C" {
#pragma data_seg(".nvHRKE")
__declspec(allocate(".nvHRKE")) __declspec(selectany) extern const unsigned char hostRefKernelArrayExternalLinkage[] = {
/* _Z13voronoiKernel* */
0x5f,0x5a,0x31,0x33,0x76,0x6f,0x72,0x6f,0x6e,0x6f,0x69,0x4b,0x65,0x72,0x6e,0x65,0x6c,0x2a,0x0,
};
#pragma data_seg()
}
extern "C" {
#pragma data_seg(".nvHRDI")
__declspec(allocate(".nvHRDI")) __declspec(selectany) extern const unsigned char hostRefDeviceArrayInternalLinkage[] = {
0x0};
#pragma data_seg()
}
extern "C" {
#pragma data_seg(".nvHRDE")
__declspec(allocate(".nvHRDE")) __declspec(selectany) extern const unsigned char hostRefDeviceArrayExternalLinkage[] = {
0x0};
#pragma data_seg()
}
extern "C" {
#pragma data_seg(".nvHRCI")
__declspec(allocate(".nvHRCI")) __declspec(selectany) extern const unsigned char hostRefConstantArrayInternalLinkage[] = {
0x0};
#pragma data_seg()
}
extern "C" {
#pragma data_seg(".nvHRCE")
__declspec(allocate(".nvHRCE")) __declspec(selectany) extern const unsigned char hostRefConstantArrayExternalLinkage[] = {
0x0};
#pragma data_seg()
}
